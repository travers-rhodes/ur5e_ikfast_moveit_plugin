/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-04-10 23:11:48.998939
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.1)*x8);
x13=((0.1)*x0);
x14=((0.1)*x9);
x15=((0.1)*x5);
x16=((1.0)*x5);
x17=((1.0)*x9);
x18=((1.0)*x7);
x19=((1.0)*x8);
x20=((0.392)*x0);
x21=((0.1)*x2);
x22=((1.0)*x0);
x23=((0.425)*x1);
x24=((0.392)*x5);
x25=(x3*x4);
x26=(x1*x3);
x27=(x2*x4);
x28=(x0*x6);
x29=(x1*x2);
x30=(x16*x6);
x31=(x22*x26);
x32=(x16*x26);
x33=(x25+x29);
x34=((((-1.0)*x27))+(((1.0)*x26)));
x35=((((-1.0)*x31))+((x0*x27)));
x36=((((-1.0)*x32))+((x27*x5)));
x37=(x22*((x25+x29)));
x38=(x16*((x25+x29)));
x39=(x35*x8);
x40=((((-1.0)*x17*x34))+(((-1.0)*x19*x33)));
x41=((((-1.0)*x34*x8))+((x9*(((((1.0)*x25))+(((1.0)*x29)))))));
x42=(x39+((x37*x9)));
x43=(((x38*x9))+((x36*x8)));
x44=(x43*x7);
x45=(((x17*(((((-1.0)*x31))+((x22*x27))))))+(((-1.0)*x19*x37)));
x46=(((x17*(((((-1.0)*x32))+((x16*x27))))))+(((-1.0)*x19*x38)));
eerot[0]=((((-1.0)*x16*x7))+((x6*(((((-1.0)*x17*x37))+(((-1.0)*x19*x35)))))));
eerot[1]=(((x10*x45))+((x11*(((((-1.0)*x18*x42))+x30)))));
eerot[2]=(((x11*x45))+((x10*(((((-1.0)*x30))+((x42*x7)))))));
IkReal x47=((1.0)*x13);
eetrans[0]=(((x8*(((((-1.0)*x29*x47))+(((-1.0)*x25*x47))))))+((x0*x23))+(((-0.134)*x5))+((x6*(((((-1.0)*x12*x35))+(((-1.0)*x14*x37))))))+(((-1.0)*x15*x7))+((x20*x26))+((x9*(((((-1.0)*x26*x47))+((x13*x27))))))+(((-1.0)*x20*x27)));
eerot[3]=(((x0*x7))+((x6*(((((-1.0)*x17*x38))+(((-1.0)*x19*x36)))))));
eerot[4]=(((x10*x46))+((x11*(((((-1.0)*x18*x43))+(((-1.0)*x22*x6)))))));
eerot[5]=(((x10*((x44+x28))))+((x11*x46)));
IkReal x48=((1.0)*x15);
eetrans[1]=(((x8*(((((-1.0)*x29*x48))+(((-1.0)*x25*x48))))))+((x6*(((((-1.0)*x12*x36))+(((-1.0)*x14*x38))))))+((x9*(((((-1.0)*x26*x48))+((x15*x27))))))+((x23*x5))+(((-1.0)*x24*x27))+(((0.134)*x0))+((x24*x26))+((x13*x7)));
eerot[6]=(x40*x6);
eerot[7]=(((x10*x41))+((x11*x40*x7)));
eerot[8]=(((x10*x7*((((x34*x9))+((x33*x8))))))+((x11*x41)));
eetrans[2]=((0.163)+(((-0.392)*x25))+(((-0.392)*x29))+(((-0.425)*x4))+((x9*((((x1*x21))+(((0.1)*x25))))))+((x8*((((x21*x4))+(((-0.1)*x26))))))+((x6*(((((-1.0)*x12*x33))+(((-1.0)*x14*x34)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=(px+(((-0.1)*r00)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=(py+(((-0.1)*r10)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.163)+(((-0.1)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.2)*npx);
IkReal x53=((0.2)*npy);
IkReal x54=((0.1)*r22);
IkReal x55=((0.1)*r21);
IkReal x56=((-0.1)*r20);
IkReal x57=((-1.0)*r20);
IkReal x58=((-1.0)*rxp0_2);
IkReal x59=((-0.1)*r21);
IkReal x60=((-1.0)*r21);
IkReal x61=((-1.0)*rxp1_2);
IkReal x62=((-1.0)*npx);
IkReal x63=((-1.0)*r22);
IkReal x64=((-1.0)*npz);
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x52;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x57;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x58;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x52;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x57;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x58;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x59;
matrixinvcoeffs[33]=x53;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x60;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x61;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x59;
matrixinvcoeffs[51]=x53;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x60;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x61;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x63;
matrixinvcoeffs[76]=x54;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x64;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x54;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x61;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x59;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x61;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x55;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x57;
matrixinvcoeffs[133]=x62;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x57;
matrixinvcoeffs[151]=x62;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x63;
matrixinvcoeffs[165]=x64;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x54;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x63;
matrixinvcoeffs[183]=x64;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x60;
matrixinvcoeffs[204]=x55;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x61;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x55;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x62;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x56;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x57;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x56;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x58;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x65=pz*pz;
IkReal x66=pp*pp;
IkReal x67=((0.2)*pz);
IkReal x68=(pp*r21);
IkReal x69=(gclwh13_10*rxp1_2);
IkReal x70=((0.00134)*r22);
IkReal x71=(npx*pz);
IkReal x72=((0.001)*r21);
IkReal x73=(pp*r20);
IkReal x74=(npy*pz);
IkReal x75=((4.0)*gclwh12_11);
IkReal x76=(gclwh10_11*r22);
IkReal x77=((0.00784)*r21);
IkReal x78=(pp*r22);
IkReal x79=(gclwh15_9*r20);
IkReal x80=(gclwh15_1*r20);
IkReal x81=(gclwh12_8*r21);
IkReal x82=((0.01)*r22);
IkReal x83=((0.2)*rxp2_2);
IkReal x84=(gclwh4_3*pp);
IkReal x85=(npz*pz);
IkReal x86=((2.0)*gclwh11_10);
IkReal x87=((0.01)*r21);
IkReal x88=(gclwh2_0*pz);
IkReal x89=(gclwh14_2*pz);
IkReal x90=(gclwh14_11*rxp0_2);
IkReal x91=((0.4)*rxp2_2);
IkReal x92=((0.00784)*r22);
IkReal x93=((1.0)*pz);
IkReal x94=((2.0)*gclwh4_11);
IkReal x95=((0.02)*r21);
IkReal x96=((0.1568)*rxp0_2);
IkReal x97=((0.0066)*rxp1_2);
IkReal x98=(gclwh8_2*r20);
IkReal x99=((0.0066)*rxp2_2);
IkReal x100=((0.01634)*r20);
IkReal x101=((9.045e-5)*r20);
IkReal x102=(gclwh14_8*r20);
IkReal x103=((0.02)*r22);
IkReal x104=((2.0)*gclwh9_10);
IkReal x105=(gclwh12_3*rxp1_2);
IkReal x106=(gclwh13_1*r21);
IkReal x107=((4.0)*gclwh14_11);
IkReal x108=((0.00268)*r20);
IkReal x109=(gclwh10_12*r22);
IkReal x110=((2.0)*gclwh13_10);
IkReal x111=((0.268)*gclwh14_14);
IkReal x112=(gclwh14_3*rxp0_2);
IkReal x113=((0.02)*rxp0_2);
IkReal x114=(gclwh12_14*r21);
IkReal x115=((2.0)*pp);
IkReal x116=((4.0)*gclwh11_10);
IkReal x117=(gclwh8_11*r20);
IkReal x118=((0.0132)*rxp2_2);
IkReal x119=((0.0132)*rxp0_2);
IkReal x120=((0.00817)*r22);
IkReal x121=(gclwh5_1*rxp2_2);
IkReal x122=((0.0268)*rxp2_2);
IkReal x123=(gclwh9_10*r20);
IkReal x124=(gclwh4_2*pz);
IkReal x125=(gclwh14_11*r20);
IkReal x126=((0.2)*rxp1_2);
IkReal x127=(gclwh5_0*rxp2_2);
IkReal x128=((0.1634)*rxp1_2);
IkReal x129=(gclwh13_15*r21);
IkReal x130=((4.0)*gclwh8_11);
IkReal x131=((0.00134)*r20);
IkReal x132=(gclwh3_3*r21);
IkReal x133=(gclwh5_1*r22);
IkReal x134=((0.0268)*rxp1_2);
IkReal x135=(gclwh7_13*r21);
IkReal x136=((2.0)*gclwh7_10);
IkReal x137=((0.0066)*rxp0_2);
IkReal x138=(gclwh13_9*rxp1_2);
IkReal x139=((0.00033)*r21);
IkReal x140=(gclwh2_1*r21);
IkReal x141=(gclwh7_0*pz);
IkReal x142=((0.536)*gclwh14_14);
IkReal x143=(gclwh6_11*rxp1_2);
IkReal x144=((0.17)*rxp2_2);
IkReal x145=((0.0536)*rxp1_2);
IkReal x146=(gclwh10_12*rxp2_2);
IkReal x147=((0.3268)*rxp1_2);
IkReal x148=((4.0)*gclwh9_10);
IkReal x149=((0.8)*rxp2_2);
IkReal x150=((0.04)*r22);
IkReal x151=((0.01634)*r21);
IkReal x152=((0.01)*r20);
IkReal x153=((4.0)*gclwh7_10);
IkReal x154=((0.1568)*rxp1_2);
IkReal x155=((0.2)*rxp0_2);
IkReal x156=((4.0)*gclwh4_11);
IkReal x157=((0.04)*r21);
IkReal x158=(gclwh10_2*r22);
IkReal x159=((0.2)*pp);
IkReal x160=(gclwh13_9*r21);
IkReal x161=((0.17)*rxp0_2);
IkReal x162=((0.268)*gclwh4_14);
IkReal x163=(gclwh12_8*rxp1_2);
IkReal x164=((0.8)*rxp0_2);
IkReal x165=((2.0)*gclwh6_11);
IkReal x166=(gclwh6_12*r21);
IkReal x167=(gclwh1_3*r20);
IkReal x168=((0.02)*rxp2_2);
IkReal x169=((0.0268)*rxp0_2);
IkReal x170=(gclwh8_2*rxp0_2);
IkReal x171=((0.1634)*rxp0_2);
IkReal x172=((2.0)*gclwh12_11);
IkReal x173=(gclwh10_2*rxp2_2);
IkReal x174=((0.1072)*rxp1_2);
IkReal x175=((2.0)*gclwh5_10);
IkReal x176=(gclwh11_0*r22);
IkReal x177=((0.268)*gclwh13_15);
IkReal x178=(gclwh10_2*pz);
IkReal x179=((0.268)*gclwh15_15);
IkReal x180=(gclwh9_0*pz);
IkReal x181=(gclwh4_3*r22);
IkReal x182=((2.0)*gclwh8_11);
IkReal x183=((2.0)*gclwh15_10);
IkReal x184=((0.268)*gclwh5_15);
IkReal x185=(gclwh4_14*rxp2_2);
IkReal x186=(gclwh4_8*r22);
IkReal x187=((0.00268)*r22);
IkReal x188=(gclwh4_3*rxp2_2);
IkReal x189=(gclwh12_3*r21);
IkReal x190=(gclwh9_0*r20);
IkReal x191=((0.00817)*r20);
IkReal x192=((0.3268)*rxp0_2);
IkReal x193=((4.0)*gclwh6_11);
IkReal x194=(gclwh12_11*rxp1_2);
IkReal x195=(gclwh11_0*pz);
IkReal x196=(gclwh5_9*r22);
IkReal x197=(gclwh5_0*pz);
IkReal x198=((0.4)*rxp0_2);
IkReal x199=((0.0132)*rxp1_2);
IkReal x200=((0.00784)*r20);
IkReal x201=((0.1568)*rxp2_2);
IkReal x202=((0.1634)*rxp2_2);
IkReal x203=((0.00675445)*r20);
IkReal x204=((0.536)*gclwh12_14);
IkReal x205=(gclwh15_1*rxp0_2);
IkReal x206=(gclwh13_0*pz);
IkReal x207=(gclwh9_13*r20);
IkReal x208=(gclwh11_13*r22);
IkReal x209=((0.1072)*rxp0_2);
IkReal x210=((0.00066)*r21);
IkReal x211=((0.536)*gclwh4_14);
IkReal x212=(gclwh5_15*rxp2_2);
IkReal x213=((0.00134)*r21);
IkReal x214=(gclwh8_12*r20);
IkReal x215=(gclwh13_1*rxp1_2);
IkReal x216=(gclwh6_2*pz);
IkReal x217=((2.0)*gclwh14_11);
IkReal x218=((0.0536)*rxp0_2);
IkReal x219=((0.268)*gclwh12_14);
IkReal x220=(gclwh12_2*pz);
IkReal x221=(gclwh14_14*x169);
IkReal x222=(gclwh6_5*x213);
IkReal x223=(gclwh4_14*x122);
IkReal x224=(gclwh10_5*x70);
IkReal x225=(gclwh8_5*x131);
IkReal x226=(gclwh12_14*x134);
IkReal x227=((0.02)*x163);
IkReal x228=(gclwh12_11*x126);
IkReal x229=(gclwh4_8*x168);
IkReal x230=(gclwh4_11*x83);
IkReal x231=(gclwh6_11*x87);
IkReal x232=((0.01)*x117);
IkReal x233=((0.01)*x76);
IkReal x234=((0.2)*x90);
IkReal x235=(gclwh14_8*x113);
IkReal x236=((0.02)*x138);
IkReal x237=(gclwh11_10*x82);
IkReal x238=(gclwh15_10*x155);
IkReal x239=((0.01)*x123);
IkReal x240=(gclwh5_9*x168);
IkReal x241=(gclwh7_10*x87);
IkReal x242=(gclwh5_10*x83);
IkReal x243=(gclwh15_9*x113);
IkReal x244=((0.2)*x69);
IkReal x245=(gclwh15_15*x169);
IkReal x246=(gclwh7_7*x213);
IkReal x247=(gclwh13_15*x134);
IkReal x248=(gclwh9_7*x131);
IkReal x249=(gclwh11_7*x70);
IkReal x250=(gclwh5_15*x122);
IkReal x251=(gclwh8_5*x169);
IkReal x252=(gclwh10_5*x122);
IkReal x253=(gclwh14_14*x131);
IkReal x254=((0.00134)*x114);
IkReal x255=(gclwh4_14*x70);
IkReal x256=(gclwh6_5*x134);
IkReal x257=(gclwh12_11*x87);
IkReal x258=(gclwh10_11*x83);
IkReal x259=((0.001)*x186);
IkReal x260=(gclwh4_11*x82);
IkReal x261=(gclwh8_11*x155);
IkReal x262=(gclwh12_8*x72);
IkReal x263=((0.001)*x102);
IkReal x264=(gclwh6_11*x126);
IkReal x265=((0.01)*x125);
IkReal x266=((0.001)*x79);
IkReal x267=(gclwh11_10*x83);
IkReal x268=(gclwh13_10*x87);
IkReal x269=(gclwh5_10*x82);
IkReal x270=(gclwh9_10*x155);
IkReal x271=((0.001)*x196);
IkReal x272=(gclwh13_9*x72);
IkReal x273=(gclwh7_10*x126);
IkReal x274=(gclwh15_10*x152);
IkReal x275=(gclwh5_15*x70);
IkReal x276=((0.00134)*x129);
IkReal x277=(gclwh7_7*x134);
IkReal x278=(gclwh11_7*x122);
IkReal x279=(gclwh9_7*x169);
IkReal x280=(gclwh15_15*x131);
IkReal x281=((0.4)*x90);
IkReal x282=((0.02)*x76);
IkReal x283=((0.02)*x117);
IkReal x284=(gclwh14_14*x218);
IkReal x285=(gclwh12_14*x145);
IkReal x286=((0.0536)*x185);
IkReal x287=(gclwh4_11*x91);
IkReal x288=(gclwh6_11*x95);
IkReal x289=((0.4)*x194);
IkReal x290=(gclwh13_15*x145);
IkReal x291=((0.0536)*x212);
IkReal x292=(gclwh15_15*x218);
IkReal x293=(gclwh11_10*x103);
IkReal x294=(gclwh15_10*x198);
IkReal x295=((0.02)*x123);
IkReal x296=((0.4)*x69);
IkReal x297=(gclwh7_10*x95);
IkReal x298=(gclwh5_10*x91);
IkReal x299=((0.02)*x125);
IkReal x300=((0.4)*x143);
IkReal x301=(gclwh14_14*x108);
IkReal x302=((0.00268)*x114);
IkReal x303=(gclwh4_14*x187);
IkReal x304=(gclwh4_11*x103);
IkReal x305=(gclwh12_11*x95);
IkReal x306=(gclwh10_11*x91);
IkReal x307=(gclwh8_11*x198);
IkReal x308=(gclwh15_9*x71);
IkReal x309=((2.0)*x65);
IkReal x310=((1.0)*x66);
IkReal x311=((0.134)*gclwh6_5*x68);
IkReal x312=((0.268)*gclwh10_5*x85);
IkReal x313=((0.268)*gclwh8_5*x71);
IkReal x314=((0.268)*gclwh6_5*x74);
IkReal x315=((0.134)*gclwh8_5*x73);
IkReal x316=((0.134)*gclwh10_5*x78);
IkReal x317=(gclwh14_2*rxp0_2*x67);
IkReal x318=((2.0)*gclwh10_11*x85);
IkReal x319=(x182*x71);
IkReal x320=(x178*x78);
IkReal x321=(x178*x82);
IkReal x322=(x105*x159);
IkReal x323=(gclwh8_2*pz*x73);
IkReal x324=(x83*x84);
IkReal x325=((0.01)*pz*x98);
IkReal x326=(gclwh12_2*rxp1_2*x67);
IkReal x327=(x112*x159);
IkReal x328=(gclwh4_2*rxp2_2*x67);
IkReal x329=(x165*x74);
IkReal x330=(x216*x87);
IkReal x331=(gclwh13_1*pp*x126);
IkReal x332=(x195*x78);
IkReal x333=(gclwh5_1*pp*x83);
IkReal x334=(x136*x74);
IkReal x335=(gclwh15_0*rxp0_2*x67);
IkReal x336=(x195*x82);
IkReal x337=(x152*x180);
IkReal x338=(x180*x73);
IkReal x339=(gclwh15_1*pp*x155);
IkReal x340=(x85*x86);
IkReal x341=(x104*x71);
IkReal x342=(x127*x67);
IkReal x343=(gclwh13_0*rxp1_2*x67);
IkReal x344=(x141*x87);
IkReal x345=((0.268)*gclwh9_7*x71);
IkReal x346=((0.134)*gclwh7_7*x68);
IkReal x347=((0.268)*gclwh11_7*x85);
IkReal x348=((0.134)*gclwh11_7*x78);
IkReal x349=((0.268)*gclwh7_7*x74);
IkReal x350=((0.134)*gclwh9_7*x73);
IkReal x351=(x219*x74);
IkReal x352=((0.134)*gclwh14_14*x73);
IkReal x353=(x162*x85);
IkReal x354=((0.134)*gclwh12_14*x68);
IkReal x355=(x111*x71);
IkReal x356=((0.134)*gclwh4_14*x78);
IkReal x357=(x73*x89);
IkReal x358=(x152*x89);
IkReal x359=((0.1)*gclwh4_8*x78);
IkReal x360=(x189*x66);
IkReal x361=(gclwh1_2*pz*x152);
IkReal x362=(gclwh3_2*pz*x87);
IkReal x363=((0.1)*gclwh12_8*x68);
IkReal x364=(x132*x66);
IkReal x365=(x167*x66);
IkReal x366=(gclwh6_2*rxp1_2*x67);
IkReal x367=(x217*x71);
IkReal x368=(x181*x66);
IkReal x369=(gclwh14_8*npx*x67);
IkReal x370=(x85*x94);
IkReal x371=(gclwh4_8*npz*x67);
IkReal x372=(gclwh12_8*npy*x67);
IkReal x373=(x173*x67);
IkReal x374=(x124*x82);
IkReal x375=(x172*x74);
IkReal x376=(x170*x67);
IkReal x377=((0.1)*gclwh14_8*x73);
IkReal x378=(x220*x87);
IkReal x379=(x206*x87);
IkReal x380=(gclwh0_0*pz*x152);
IkReal x381=(gclwh11_0*rxp2_2*x67);
IkReal x382=(x87*x88);
IkReal x383=(gclwh13_9*npy*x67);
IkReal x384=(x66*x80);
IkReal x385=(x197*x78);
IkReal x386=(x197*x82);
IkReal x387=(x206*x68);
IkReal x388=(gclwh9_0*rxp0_2*x67);
IkReal x389=((0.1)*gclwh15_9*x73);
IkReal x390=(x183*x71);
IkReal x391=(x140*x66);
IkReal x392=(gclwh5_9*npz*x67);
IkReal x393=(gclwh0_1*r20*x66);
IkReal x394=(gclwh7_0*rxp1_2*x67);
IkReal x395=((0.1)*gclwh5_9*x78);
IkReal x396=(gclwh15_9*npx*x67);
IkReal x397=((0.1)*gclwh13_9*x68);
IkReal x398=(x175*x85);
IkReal x399=(gclwh15_0*pz*x152);
IkReal x400=(x110*x74);
IkReal x401=((0.134)*gclwh13_15*x68);
IkReal x402=(x179*x71);
IkReal x403=((0.134)*gclwh5_15*x78);
IkReal x404=(x184*x85);
IkReal x405=((0.134)*gclwh15_15*x73);
IkReal x406=(x177*x74);
IkReal x407=(x182*x73);
IkReal x408=(x115*x76);
IkReal x409=(x193*x74);
IkReal x410=(x130*x71);
IkReal x411=(x165*x68);
IkReal x412=((4.0)*gclwh10_11*x85);
IkReal x413=(x78*x86);
IkReal x414=(x153*x74);
IkReal x415=(x104*x73);
IkReal x416=(x136*x68);
IkReal x417=(x148*x71);
IkReal x418=(x116*x85);
IkReal x419=(x217*x73);
IkReal x420=(x74*x75);
IkReal x421=(x156*x85);
IkReal x422=(x211*x85);
IkReal x423=(x111*x73);
IkReal x424=(x204*x74);
IkReal x425=(x219*x68);
IkReal x426=(x142*x71);
IkReal x427=(x162*x78);
IkReal x428=(x78*x94);
IkReal x429=(x172*x68);
IkReal x430=(x107*x71);
IkReal x431=(gclwh6_2*npy*x309);
IkReal x432=(gclwh6_2*x68*x93);
IkReal x433=(gclwh10_2*npz*x309);
IkReal x434=(gclwh8_2*npx*x309);
IkReal x435=(gclwh7_0*npy*x309);
IkReal x436=(gclwh9_0*npx*x309);
IkReal x437=(gclwh11_0*npz*x309);
IkReal x438=(gclwh7_0*x68*x93);
IkReal x439=(gclwh12_2*npy*x309);
IkReal x440=(gclwh3_2*npy*x309);
IkReal x441=(gclwh1_2*npx*x309);
IkReal x442=(gclwh14_3*x115*x71);
IkReal x443=(gclwh4_2*npz*x309);
IkReal x444=((2.0)*x84*x85);
IkReal x445=(gclwh12_2*x68*x93);
IkReal x446=(gclwh1_2*x73*x93);
IkReal x447=(gclwh3_3*x115*x74);
IkReal x448=(gclwh4_2*x78*x93);
IkReal x449=(gclwh1_3*x115*x71);
IkReal x450=(gclwh3_2*x68*x93);
IkReal x451=(gclwh12_3*x115*x74);
IkReal x452=(gclwh14_2*npx*x309);
IkReal x453=(gclwh14_3*r20*x310);
IkReal x454=(gclwh0_0*npx*x309);
IkReal x455=(gclwh2_0*npy*x309);
IkReal x456=(gclwh5_1*x115*x85);
IkReal x457=(gclwh13_1*x115*x74);
IkReal x458=(gclwh15_0*npx*x309);
IkReal x459=(gclwh2_1*x115*x74);
IkReal x460=(gclwh0_1*x115*x71);
IkReal x461=(gclwh5_0*npz*x309);
IkReal x462=(gclwh13_0*npy*x309);
IkReal x463=(gclwh0_0*x73*x93);
IkReal x464=(gclwh15_0*x73*x93);
IkReal x465=((1.0)*x68*x88);
IkReal x466=(x106*x310);
IkReal x467=(x133*x310);
IkReal x468=(gclwh15_1*x115*x71);
IkReal x469=(x223+x226);
IkReal x470=(x286+x285);
IkReal x471=(x250+x247);
IkReal x472=(x278+x279);
IkReal x473=(x251+x252);
IkReal x474=(x290+x291);
IkReal x475=(x329+x232+x233+x234);
IkReal x476=(x334+x238+x239+x237);
IkReal x477=(x375+x370+x265+x264);
IkReal x478=(x398+x274+x273+x400);
IkReal x479=(x280+x405+x404+x406);
IkReal x480=(x311+x313+x312+x222);
IkReal x481=(x346+x347+x345+x246);
IkReal x482=(x301+x424+x423+x422);
IkReal x483=(x351+x353+x352+x253);
IkReal x484=(x367+x258+x257+x261+x260);
IkReal x485=(x390+x267+x269+x268+x270);
IkReal x486=(x340+x341+x242+x241+x244);
IkReal x487=(x319+x318+x228+x230+x231);
IkReal x488=(x315+x314+x316+x225+x224);
IkReal x489=(x300+x299+x419+x421+x420);
IkReal x490=(x276+x275+x401+x403+x402);
IkReal x491=(x355+x354+x356+x254+x255);
IkReal x492=(x302+x303+x427+x426+x425);
IkReal x493=(x350+x348+x349+x249+x248);
IkReal x494=(x289+x288+x287+x412+x410+x411);
IkReal x495=(x298+x296+x297+x416+x417+x418);
IkReal x496=(x283+x282+x281+x407+x409+x408);
IkReal x497=(x293+x294+x295+x413+x414+x415);
IkReal x498=(x306+x307+x304+x305+x429+x428+x430);
IkReal x499=(x339+x342+x343+x344+x243+x438+x436+x437);
IkReal x500=(x330+x326+x327+x328+x235+x432+x433+x434);
IkReal x501=(x324+x325+x320+x321+x322+x323+x317+x229+x227+x431);
IkReal x502=(x338+x333+x332+x331+x337+x336+x335+x236+x240+x435);
IkReal x503=(x395+x394+x397+x396+x399+x272+x271+x459+x468+x463+x462+x461+x460+x467+x466+x465+x464);
IkReal x504=(x357+x359+x358+x368+x369+x360+x361+x362+x363+x364+x365+x366+x259+x262+x439+x441+x440+x443+x442+x67);
IkReal x505=(x378+x377+x376+x374+x373+x372+x371+x263+x449+x448+x445+x444+x447+x446+x452+x453+x450+x451);
IkReal x506=(x386+x387+x384+x385+x382+x383+x380+x381+x388+x389+x379+x391+x393+x392+x266+x458+x456+x457+x454+x455+x67);
op[0]=((((0.817)*gclwh6_12*x68))+(((-1.0)*x488))+(((1.634)*gclwh8_12*x71))+(((0.00817)*x166))+(((-1.634)*gclwh6_12*x74))+(((-1.0)*gclwh12_8*x128))+(((-0.817)*gclwh10_12*x78))+x480+x469+((gclwh14_8*x171))+(((-1.0)*gclwh4_8*x202))+(((-1.0)*gclwh8_12*x191))+(((-0.00817)*x109))+(((-0.817)*gclwh8_12*x73))+(((-1.0)*x221))+(((1.634)*gclwh10_12*x85)));
op[1]=((((-0.135089)*x188))+(((-1.0)*x487))+(((-1.0)*x500))+(((-1.0)*gclwh6_11*x68))+x475+x501+((gclwh8_11*x73))+((pp*x76))+(((0.135089)*x112))+(((-0.135089)*x105)));
op[2]=((-0.210112)+(((-1.0)*x494))+x496);
op[3]=((((0.784)*gclwh8_2*x73))+(((-1.0)*gclwh6_2*x77))+(((-1.0)*gclwh12_2*x154))+(((0.00784)*x98))+(((-1.568)*gclwh10_2*x85))+(((-1.0)*x470))+(((-1.0)*gclwh14_8*x161))+(((-0.784)*gclwh6_2*x68))+((gclwh4_8*x144))+x284+(((1.568)*gclwh6_2*x74))+(((-1.568)*gclwh8_2*x71))+(((0.784)*gclwh10_2*x78))+((gclwh14_2*x96))+((gclwh10_2*x92))+(((-1.0)*gclwh4_2*x201))+(((0.17)*x163)));
op[4]=((((-1.0)*gclwh14_8*x137))+(((-0.033)*gclwh8_12*x73))+(((0.066)*gclwh8_12*x71))+(((0.033)*gclwh6_12*x68))+(((-1.0)*x488))+(((-0.033)*gclwh10_12*x78))+(((0.066)*gclwh10_12*x85))+(((-1.0)*x469))+(((-0.00033)*x214))+x221+((gclwh6_12*x139))+((gclwh12_8*x97))+x480+(((-0.00033)*x109))+(((-0.066)*gclwh6_12*x74))+((gclwh4_8*x99)));
op[5]=((((-1.0)*x500))+(((-0.001809)*x105))+(((-1.0)*x475))+(((0.001809)*x112))+x487+x501+(((-1.0)*pp*x76))+((gclwh6_11*x68))+(((-0.001809)*x188))+(((-1.0)*gclwh8_11*x73)));
op[6]=((((-1.0)*x499))+(((0.135089)*x205))+((gclwh7_10*x68))+(((-1.0)*x476))+(((-0.135089)*x215))+(((-1.0)*gclwh11_10*x78))+x486+x502+(((-1.0)*gclwh9_10*x73))+(((-0.135089)*x121)));
op[7]=((((0.00817)*x135))+(((-1.634)*gclwh7_13*x74))+(((-1.0)*gclwh11_13*x120))+(((-1.0)*x493))+(((-1.0)*gclwh5_9*x202))+(((-0.817)*gclwh11_13*x78))+((gclwh15_9*x171))+(((-1.0)*gclwh9_13*x191))+x481+x471+(((-1.0)*gclwh13_9*x128))+(((-1.0)*x245))+(((1.634)*gclwh11_13*x85))+(((0.817)*gclwh7_13*x68))+(((1.634)*gclwh9_13*x71))+(((-0.817)*gclwh9_13*x73)));
op[8]=((((-1.0)*gclwh5_9*x144))+(((-0.784)*gclwh7_0*x68))+(((-1.0)*gclwh7_0*x77))+(((-1.568)*gclwh11_0*x85))+(((1.568)*gclwh7_0*x74))+(((-1.0)*x292))+(((0.00784)*x190))+((gclwh15_0*x96))+((gclwh15_9*x161))+(((-1.0)*gclwh13_0*x154))+(((-1.568)*gclwh9_0*x71))+x474+(((0.784)*gclwh9_0*x73))+((gclwh11_0*x92))+(((-0.1568)*x127))+(((-0.17)*x138))+(((0.784)*gclwh11_0*x78)));
op[9]=((-0.210112)+(((-1.0)*x495))+x497);
op[10]=((((-0.001809)*x215))+(((-1.0)*x499))+((gclwh11_10*x78))+(((-1.0)*x486))+(((-1.0)*gclwh7_10*x68))+(((-0.001809)*x121))+(((0.001809)*x205))+x476+x502+((gclwh9_10*x73)));
op[11]=((((-0.00033)*x207))+(((-0.00033)*x208))+(((0.00033)*x135))+(((-1.0)*x493))+(((-0.066)*gclwh7_13*x74))+(((-1.0)*x471))+((gclwh13_9*x97))+(((-0.033)*gclwh9_13*x73))+x245+x481+((gclwh5_9*x99))+(((0.066)*gclwh11_13*x85))+(((0.033)*gclwh7_13*x68))+(((-0.033)*gclwh11_13*x78))+(((-1.0)*gclwh15_9*x137))+(((0.066)*gclwh9_13*x71)));
op[12]=((((-1.634)*gclwh14_8*x71))+(((1.634)*gclwh4_8*x85))+(((-0.817)*gclwh12_8*x68))+(((-1.0)*x483))+(((-1.0)*gclwh6_12*x128))+(((0.817)*gclwh14_8*x73))+(((-0.817)*gclwh4_8*x78))+(((0.1634)*x146))+(((-1.0)*gclwh4_8*x120))+x491+x473+(((-0.00817)*x81))+((gclwh8_12*x171))+(((1.634)*gclwh12_8*x74))+(((0.00817)*x102))+(((-1.0)*x256)));
op[13]=((-0.685445)+(((0.00675445)*x167))+(((1.35089)*gclwh3_3*x74))+(((-1.0)*gclwh12_11*x68))+(((1.35089)*gclwh1_3*x71))+(((-0.665445)*gclwh4_3*x78))+(((-1.0)*x484))+(((0.665445)*gclwh14_3*x73))+(((-1.0)*x505))+(((0.00675445)*x132))+(((-1.35089)*gclwh14_3*x71))+(((-0.685445)*gclwh3_3*x68))+(((-0.665445)*gclwh12_3*x68))+(((-0.00675445)*x181))+(((-0.00675445)*x189))+x477+(((-0.685445)*gclwh1_3*x73))+((gclwh14_11*x73))+(((1.35089)*gclwh4_3*x85))+(((1.35089)*gclwh12_3*x74))+x504+((gclwh14_3*x203))+(((-1.0)*gclwh4_11*x78)));
op[14]=((-0.089834)+(((-1.0)*x498))+x489);
op[15]=((((-1.0)*gclwh4_2*x92))+(((-1.0)*gclwh8_2*x96))+(((1.568)*gclwh12_2*x74))+(((0.85)*gclwh4_8*x78))+(((-1.0)*x492))+((gclwh3_2*x77))+(((1.7)*gclwh14_8*x71))+(((-0.784)*gclwh3_2*x68))+(((0.0085)*x186))+(((1.568)*gclwh3_2*x74))+(((-1.7)*gclwh4_8*x85))+(((-0.1568)*x173))+(((-1.568)*gclwh14_2*x71))+(((-0.0085)*x102))+x482+(((-0.784)*gclwh4_2*x78))+(((-0.784)*gclwh1_2*x73))+(((-1.7)*gclwh12_8*x74))+((gclwh14_2*x200))+(((-0.784)*gclwh12_2*x68))+((gclwh1_2*x200))+(((-1.0)*gclwh12_2*x77))+(((0.784)*gclwh14_2*x73))+((gclwh6_2*x154))+(((0.0085)*x81))+(((0.85)*gclwh12_8*x68))+(((1.568)*gclwh1_2*x71))+(((1.568)*gclwh4_2*x85))+(((-0.85)*gclwh14_8*x73)));
op[16]=(((gclwh8_12*x137))+(((0.066)*gclwh14_8*x71))+(((-1.0)*x491))+(((-0.066)*gclwh4_8*x85))+(((-0.066)*gclwh12_8*x74))+((gclwh10_12*x99))+(((-0.033)*gclwh14_8*x73))+(((0.033)*gclwh12_8*x68))+x483+x473+(((0.00033)*x186))+(((-0.00033)*x102))+(((0.033)*gclwh4_8*x78))+(((0.00033)*x81))+(((-1.0)*gclwh6_12*x97))+(((-1.0)*x256)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x74))+((gclwh1_3*x101))+(((-0.019045)*gclwh3_3*x68))+(((0.01809)*gclwh4_3*x85))+(((-1.0)*x505))+(((-0.01809)*gclwh14_3*x71))+(((-0.019045)*gclwh1_3*x73))+((gclwh14_3*x101))+(((-1.0)*x477))+(((0.01809)*gclwh3_3*x74))+(((-0.000955)*gclwh14_3*x73))+(((0.000955)*gclwh12_3*x68))+(((9.045e-5)*x132))+x484+(((-9.045e-5)*x181))+(((-9.045e-5)*x189))+x504+(((0.01809)*gclwh1_3*x71))+(((0.000955)*gclwh4_3*x78))+((gclwh12_11*x68))+(((-1.0)*gclwh14_11*x73))+((gclwh4_11*x78)));
op[18]=((0.685445)+(((0.665445)*gclwh13_1*x68))+(((-1.0)*x485))+(((0.00675445)*x140))+((gclwh0_1*x203))+(((1.35089)*gclwh2_1*x74))+(((-1.0)*x503))+(((0.00675445)*x133))+(((-0.685445)*gclwh2_1*x68))+(((0.665445)*gclwh5_1*x78))+(((-0.685445)*gclwh0_1*x73))+(((1.35089)*gclwh0_1*x71))+(((-1.0)*gclwh5_10*x78))+(((0.00675445)*x106))+x478+(((-1.35089)*gclwh13_1*x74))+x506+(((-1.0)*gclwh13_10*x68))+((gclwh15_10*x73))+(((-0.665445)*gclwh15_1*x73))+(((1.35089)*gclwh15_1*x71))+(((-1.35089)*gclwh5_1*x85))+(((-0.00675445)*x80)));
op[19]=((((-1.0)*x490))+(((-0.817)*gclwh15_9*x73))+((gclwh7_13*x128))+((gclwh5_9*x120))+(((0.817)*gclwh13_9*x68))+(((0.00817)*x160))+(((-1.0)*x472))+(((-1.0)*gclwh9_13*x171))+(((-1.634)*gclwh13_9*x74))+x277+x479+(((-1.0)*gclwh11_13*x202))+(((1.634)*x308))+(((-1.634)*gclwh5_9*x85))+(((0.817)*gclwh5_9*x78))+(((-0.00817)*x79)));
op[20]=((((-0.85)*gclwh15_9*x73))+(((-1.0)*x184*x78))+(((-1.7)*gclwh13_9*x74))+(((-1.7)*gclwh5_9*x85))+(((0.0085)*x160))+(((-0.784)*gclwh15_0*x73))+(((0.784)*gclwh5_0*x78))+(((1.568)*gclwh0_0*x71))+((gclwh0_0*x200))+(((1.7)*x308))+(((0.0085)*x196))+(((-1.568)*gclwh13_0*x74))+((gclwh5_0*x92))+(((-0.536)*gclwh15_15*x71))+(((-1.568)*gclwh5_0*x85))+(((0.784)*gclwh13_0*x68))+((gclwh2_0*x77))+((gclwh13_0*x77))+(((-0.0085)*x79))+(((0.85)*gclwh13_9*x68))+(((-1.0)*gclwh7_0*x154))+(((1.568)*gclwh15_0*x71))+((gclwh11_0*x201))+(((-0.784)*gclwh2_0*x68))+(((1.568)*gclwh2_0*x74))+(((0.536)*gclwh13_15*x74))+(((0.536)*gclwh5_15*x85))+(((0.85)*gclwh5_9*x78))+(((-1.0)*gclwh15_0*x200))+((x179*x73))+(((-1.0)*x177*x68))+(((-0.00268)*x129))+(((-0.784)*gclwh0_0*x73))+((gclwh9_0*x96))+(((-1.0)*gclwh5_15*x187))+((gclwh15_15*x108)));
op[21]=((-0.089834)+(((-4.0)*gclwh5_10*x85))+((x175*x78))+((gclwh9_10*x198))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x103))+(((-4.0)*gclwh13_10*x74))+(((-1.0)*x183*x73))+((gclwh11_10*x91))+(((4.0)*gclwh15_10*x71))+((x110*x68))+(((-0.02)*gclwh15_10*r20))+((gclwh13_10*x95)));
op[22]=((-0.019045)+(((-9.045e-5)*x80))+((gclwh0_1*x101))+((gclwh13_10*x68))+(((-1.0)*x503))+(((-0.019045)*gclwh0_1*x73))+(((-0.000955)*gclwh5_1*x78))+(((9.045e-5)*x106))+(((0.01809)*gclwh0_1*x71))+(((-1.0)*x478))+((gclwh5_10*x78))+(((0.000955)*gclwh15_1*x73))+(((9.045e-5)*x133))+(((-0.01809)*gclwh13_1*x74))+x485+(((-0.01809)*gclwh5_1*x85))+(((9.045e-5)*x140))+x506+(((0.01809)*gclwh2_1*x74))+(((0.01809)*gclwh15_1*x71))+(((-0.000955)*gclwh13_1*x68))+(((-0.019045)*gclwh2_1*x68))+(((-1.0)*gclwh15_10*x73)));
op[23]=((((-0.00033)*x196))+(((0.066)*gclwh5_9*x85))+(((0.033)*gclwh15_9*x73))+(((-1.0)*x472))+(((-1.0)*x479))+(((-0.033)*gclwh5_9*x78))+(((0.00033)*x79))+(((-0.066)*x308))+x277+(((-1.0)*gclwh11_13*x99))+x490+(((0.066)*gclwh13_9*x74))+(((-1.0)*gclwh9_13*x137))+((gclwh7_13*x97))+(((-0.033)*gclwh13_9*x68))+(((-1.0)*gclwh13_9*x139)));
op[24]=((-0.437912)+(((-1.0)*x494))+x496);
op[25]=((((-1.0)*gclwh12_2*x147))+(((0.01634)*x98))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.0)*x470))+(((-1.0)*gclwh6_2*x151))+(((-1.634)*gclwh6_2*x68))+(((-3.268)*gclwh10_2*x85))+(((1.634)*gclwh8_2*x73))+x284+(((0.01634)*x158))+(((1.634)*gclwh10_2*x78))+(((3.268)*gclwh6_2*x74))+((gclwh14_2*x192))+(((-3.268)*gclwh8_2*x71)));
op[26]=((((-3.136)*gclwh8_12*x71))+(((3.136)*gclwh6_12*x74))+(((1.568)*gclwh8_12*x73))+(((-0.01568)*x166))+((gclwh14_14*x209))+(((0.01568)*x109))+(((-1.568)*gclwh6_12*x68))+(((-1.0)*gclwh12_14*x174))+(((0.01568)*x214))+(((-3.136)*gclwh10_12*x85))+(((-0.1072)*x185))+(((1.568)*gclwh10_12*x78)));
op[27]=(((x193*x68))+(((-0.8)*x90))+(((-0.04)*x76))+(((-0.04)*x117))+(((-4.0)*pp*x76))+(((8.0)*gclwh8_11*x71))+(((0.8)*x194))+(((8.0)*gclwh10_11*x85))+((gclwh4_11*x149))+(((-1.0)*x130*x73))+(((-8.0)*gclwh6_11*x74))+((gclwh6_11*x157)));
op[28]=((-0.017688)+(((-1.0)*x496))+x494);
op[29]=((((-1.0)*gclwh12_2*x199))+(((0.066)*gclwh8_2*x73))+(((-1.0)*gclwh4_2*x118))+(((0.00066)*x158))+((gclwh14_2*x119))+(((-0.132)*gclwh8_2*x71))+(((0.132)*gclwh6_2*x74))+(((-0.132)*gclwh10_2*x85))+x470+(((0.00066)*x98))+(((0.066)*gclwh10_2*x78))+(((-1.0)*x284))+(((-1.0)*gclwh6_2*x210))+(((-0.066)*gclwh6_2*x68)));
op[30]=((((3.268)*gclwh7_0*x74))+(((-0.3268)*x127))+(((-1.634)*gclwh7_0*x68))+(((1.634)*gclwh11_0*x78))+(((-1.0)*x292))+(((-3.268)*gclwh11_0*x85))+((gclwh15_0*x192))+(((-3.268)*gclwh9_0*x71))+(((0.01634)*x176))+x474+(((-1.0)*gclwh7_0*x151))+(((-1.0)*gclwh13_0*x147))+((gclwh9_0*x100))+(((1.634)*gclwh9_0*x73)));
op[31]=((-0.437912)+(((-1.0)*x495))+x497);
op[32]=((((-1.0)*gclwh5_10*x149))+((gclwh15_10*x164))+((gclwh11_10*x150))+((x116*x78))+(((-1.0)*x153*x68))+(((-0.8)*x69))+(((-8.0)*gclwh9_10*x71))+(((8.0)*gclwh7_10*x74))+(((0.04)*x123))+(((-1.0)*gclwh7_10*x157))+(((-8.0)*gclwh11_10*x85))+((x148*x73)));
op[33]=((((-3.136)*gclwh9_13*x71))+(((-0.01568)*x135))+((gclwh15_15*x209))+(((3.136)*gclwh7_13*x74))+(((-3.136)*gclwh11_13*x85))+(((1.568)*gclwh11_13*x78))+(((0.01568)*x207))+(((0.01568)*x208))+(((-1.568)*gclwh7_13*x68))+(((-1.0)*gclwh13_15*x174))+(((-0.1072)*x212))+(((1.568)*gclwh9_13*x73)));
op[34]=((((0.00066)*x190))+(((-1.0)*x474))+(((-1.0)*gclwh7_0*x210))+(((0.066)*gclwh11_0*x78))+((gclwh15_0*x119))+(((0.066)*gclwh9_0*x73))+(((0.00066)*x176))+(((-1.0)*gclwh5_0*x118))+(((-0.132)*gclwh9_0*x71))+(((-0.066)*gclwh7_0*x68))+x292+(((-1.0)*gclwh13_0*x199))+(((0.132)*gclwh7_0*x74))+(((-0.132)*gclwh11_0*x85)));
op[35]=((-0.017688)+(((-1.0)*x497))+x495);
op[36]=((1.299066)+(((-1.0)*x498))+x489);
op[37]=((((3.268)*gclwh12_2*x74))+(((-1.0)*x492))+(((-1.0)*gclwh12_2*x151))+((gclwh14_2*x100))+(((3.268)*gclwh3_2*x74))+(((3.268)*gclwh1_2*x71))+(((-0.3268)*x170))+(((-0.3268)*x173))+(((-1.634)*gclwh3_2*x68))+(((-3.268)*gclwh14_2*x71))+x482+(((-1.634)*gclwh4_2*x78))+(((-1.634)*gclwh1_2*x73))+(((-0.01634)*gclwh4_2*r22))+(((3.268)*gclwh4_2*x85))+((gclwh1_2*x100))+((gclwh3_2*x151))+(((1.634)*gclwh14_2*x73))+(((-1.634)*gclwh12_2*x68))+((gclwh6_2*x147)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-1.0)*x211*x78))+(((-0.00536)*gclwh4_14*r22))+((x142*x73))+(((-0.3136)*x146))+(((-0.3136)*gclwh8_12*rxp0_2))+(((-1.072)*gclwh14_14*x71))+(((-0.00536)*x114))+(((-1.0)*x204*x68))+(((1.072)*gclwh4_14*x85))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x74)));
op[39]=((-0.03602)+((gclwh10_11*x149))+(((-0.8)*x143))+(((-0.04)*x125))+((x68*x75))+(((-8.0)*gclwh12_11*x74))+(((-8.0)*gclwh4_11*x85))+((x156*x78))+(((8.0)*gclwh14_11*x71))+((gclwh4_11*x150))+(((-1.0)*x107*x73))+((gclwh12_11*x157))+((gclwh8_11*x164)));
op[40]=((0.033734)+(((-1.0)*x489))+x498);
IkReal x507=pz*pz;
IkReal x508=pp*pp;
IkReal x509=((0.2)*pz);
IkReal x510=(pp*r21);
IkReal x511=((0.2)*rxp1_2);
IkReal x512=((0.00134)*r22);
IkReal x513=((0.066)*pz);
IkReal x514=(gclwh14_8*npx);
IkReal x515=((0.001)*r21);
IkReal x516=(pp*r20);
IkReal x517=(gclwh13_10*r21);
IkReal x518=(gclwh5_0*r22);
IkReal x519=((0.0132)*rxp2_2);
IkReal x520=((2.0)*pz);
IkReal x521=(gclwh7_10*npy);
IkReal x522=((0.02)*r22);
IkReal x523=((0.00784)*r21);
IkReal x524=(gclwh15_9*r20);
IkReal x525=(gclwh15_1*r20);
IkReal x526=(gclwh12_8*r21);
IkReal x527=((0.01)*r22);
IkReal x528=(gclwh6_12*npy);
IkReal x529=((0.2)*rxp2_2);
IkReal x530=(gclwh4_3*pp);
IkReal x531=(npz*pz);
IkReal x532=(gclwh2_0*pz);
IkReal x533=((0.01)*r21);
IkReal x534=(gclwh14_2*pz);
IkReal x535=((0.2)*rxp0_2);
IkReal x536=(gclwh8_2*pz);
IkReal x537=((0.00784)*r22);
IkReal x538=((1.0)*pz);
IkReal x539=(gclwh9_13*rxp0_2);
IkReal x540=(npx*pz);
IkReal x541=((0.1568)*rxp0_2);
IkReal x542=(npy*pz);
IkReal x543=((0.784)*pp);
IkReal x544=((0.0066)*rxp1_2);
IkReal x545=((0.536)*gclwh15_15);
IkReal x546=(pp*r22);
IkReal x547=((0.0066)*rxp2_2);
IkReal x548=((0.536)*gclwh5_15);
IkReal x549=(gclwh12_8*npy);
IkReal x550=((9.045e-5)*r20);
IkReal x551=(gclwh14_8*r20);
IkReal x552=(gclwh4_2*pz);
IkReal x553=(gclwh12_3*rxp1_2);
IkReal x554=(gclwh13_1*r21);
IkReal x555=((0.0132)*rxp1_2);
IkReal x556=(gclwh15_15*r20);
IkReal x557=((0.268)*gclwh14_14);
IkReal x558=((0.135089)*rxp0_2);
IkReal x559=((0.02)*rxp0_2);
IkReal x560=(gclwh12_14*r21);
IkReal x561=((0.00066)*r21);
IkReal x562=(gclwh5_1*pp);
IkReal x563=(gclwh8_11*r20);
IkReal x564=((0.02)*r21);
IkReal x565=((0.00817)*r22);
IkReal x566=(gclwh7_0*rxp1_2);
IkReal x567=((0.001809)*rxp2_2);
IkReal x568=(gclwh4_14*rxp2_2);
IkReal x569=((4.0)*gclwh15_10);
IkReal x570=((0.00066)*r20);
IkReal x571=(gclwh9_10*rxp0_2);
IkReal x572=(gclwh14_11*r20);
IkReal x573=((0.00033)*r22);
IkReal x574=((0.1634)*rxp1_2);
IkReal x575=(gclwh13_15*r21);
IkReal x576=((0.00134)*r20);
IkReal x577=(gclwh3_3*r21);
IkReal x578=(gclwh5_1*r22);
IkReal x579=(gclwh7_13*r21);
IkReal x580=(gclwh13_9*rxp1_2);
IkReal x581=((0.00033)*r21);
IkReal x582=(gclwh7_0*pz);
IkReal x583=(gclwh14_8*rxp0_2);
IkReal x584=((0.17)*rxp2_2);
IkReal x585=((0.0536)*rxp1_2);
IkReal x586=((0.1634)*rxp2_2);
IkReal x587=((0.1568)*rxp2_2);
IkReal x588=((0.01)*r20);
IkReal x589=((0.01634)*r21);
IkReal x590=(gclwh7_10*rxp1_2);
IkReal x591=(gclwh12_3*pp);
IkReal x592=(gclwh13_9*r21);
IkReal x593=((0.268)*gclwh4_14);
IkReal x594=(gclwh12_8*rxp1_2);
IkReal x595=((0.4)*rxp2_2);
IkReal x596=((0.0132)*rxp0_2);
IkReal x597=((0.00784)*r20);
IkReal x598=(gclwh1_3*r20);
IkReal x599=(gclwh14_3*pp);
IkReal x600=((0.02)*rxp2_2);
IkReal x601=((0.0268)*rxp0_2);
IkReal x602=(gclwh15_9*rxp0_2);
IkReal x603=((0.1568)*rxp1_2);
IkReal x604=((0.0268)*rxp1_2);
IkReal x605=((0.536)*gclwh13_15);
IkReal x606=(gclwh2_1*r21);
IkReal x607=((0.02)*r20);
IkReal x608=((0.4)*rxp1_2);
IkReal x609=((0.01634)*r20);
IkReal x610=((0.268)*gclwh13_15);
IkReal x611=(gclwh10_2*pz);
IkReal x612=(gclwh15_0*pz);
IkReal x613=((0.268)*gclwh15_15);
IkReal x614=(gclwh5_15*r22);
IkReal x615=(gclwh8_12*rxp0_2);
IkReal x616=(gclwh9_0*pz);
IkReal x617=(gclwh4_3*r22);
IkReal x618=((0.268)*gclwh5_15);
IkReal x619=((0.0268)*rxp2_2);
IkReal x620=(gclwh4_8*r22);
IkReal x621=((1.634)*pz);
IkReal x622=((4.0)*gclwh5_10);
IkReal x623=(npx*pp);
IkReal x624=((4.0)*gclwh13_10);
IkReal x625=(gclwh12_3*r21);
IkReal x626=(gclwh4_2*r22);
IkReal x627=((0.00817)*r20);
IkReal x628=((1.568)*npx);
IkReal x629=(gclwh0_1*r20);
IkReal x630=(npy*pp);
IkReal x631=(gclwh13_9*npy);
IkReal x632=(gclwh11_0*pz);
IkReal x633=(gclwh5_9*r22);
IkReal x634=((0.4)*rxp0_2);
IkReal x635=((0.135089)*rxp2_2);
IkReal x636=(gclwh13_0*pz);
IkReal x637=(gclwh14_3*r20);
IkReal x638=((0.00033)*r20);
IkReal x639=((0.00134)*r21);
IkReal x640=(gclwh13_1*rxp1_2);
IkReal x641=(gclwh6_2*pz);
IkReal x642=((0.0536)*rxp0_2);
IkReal x643=((0.001809)*rxp0_2);
IkReal x644=((0.268)*gclwh12_14);
IkReal x645=(gclwh12_2*pz);
IkReal x646=((0.00268)*x614);
IkReal x647=((0.00268)*x575);
IkReal x648=((0.00268)*x556);
IkReal x649=((0.4)*x590);
IkReal x650=(gclwh15_10*x607);
IkReal x651=((0.4)*x571);
IkReal x652=(gclwh5_10*x522);
IkReal x653=(gclwh11_10*x595);
IkReal x654=((0.02)*x517);
IkReal x655=((0.0268)*x568);
IkReal x656=(gclwh6_5*x639);
IkReal x657=(gclwh12_14*x604);
IkReal x658=(gclwh14_14*x601);
IkReal x659=(gclwh10_5*x512);
IkReal x660=(gclwh8_5*x576);
IkReal x661=((0.01)*x563);
IkReal x662=((0.02)*x594);
IkReal x663=(gclwh10_11*x527);
IkReal x664=(gclwh14_11*x535);
IkReal x665=(gclwh4_8*x600);
IkReal x666=(gclwh14_8*x559);
IkReal x667=(gclwh12_11*x511);
IkReal x668=(gclwh4_11*x529);
IkReal x669=(gclwh6_11*x533);
IkReal x670=((0.02)*x580);
IkReal x671=(gclwh7_10*x533);
IkReal x672=(gclwh5_10*x529);
IkReal x673=(gclwh5_9*x600);
IkReal x674=(gclwh13_10*x511);
IkReal x675=(gclwh11_10*x527);
IkReal x676=(gclwh15_10*x535);
IkReal x677=(gclwh9_10*x588);
IkReal x678=(gclwh15_9*x559);
IkReal x679=(gclwh13_15*x604);
IkReal x680=(gclwh5_15*x619);
IkReal x681=(gclwh7_7*x639);
IkReal x682=(gclwh15_15*x601);
IkReal x683=(gclwh9_7*x576);
IkReal x684=(gclwh11_7*x512);
IkReal x685=((0.00268)*x560);
IkReal x686=((0.00268)*gclwh4_14*r22);
IkReal x687=((0.00268)*gclwh14_14*r20);
IkReal x688=((0.00134)*x560);
IkReal x689=(gclwh8_5*x601);
IkReal x690=(gclwh10_5*x619);
IkReal x691=(gclwh4_14*x512);
IkReal x692=(gclwh6_5*x604);
IkReal x693=(gclwh14_14*x576);
IkReal x694=((0.001)*x620);
IkReal x695=(gclwh6_11*x511);
IkReal x696=((0.01)*x572);
IkReal x697=(gclwh12_8*x515);
IkReal x698=(gclwh12_11*x533);
IkReal x699=(gclwh10_11*x529);
IkReal x700=((0.001)*x551);
IkReal x701=(gclwh4_11*x527);
IkReal x702=(gclwh8_11*x535);
IkReal x703=((0.001)*x524);
IkReal x704=(gclwh7_10*x511);
IkReal x705=(gclwh15_10*x588);
IkReal x706=((0.001)*x633);
IkReal x707=(gclwh11_10*x529);
IkReal x708=(gclwh13_9*x515);
IkReal x709=((0.01)*x517);
IkReal x710=(gclwh5_10*x527);
IkReal x711=(gclwh9_10*x535);
IkReal x712=((0.00134)*x556);
IkReal x713=(gclwh7_7*x604);
IkReal x714=(gclwh11_7*x619);
IkReal x715=(gclwh5_15*x512);
IkReal x716=((0.00134)*x575);
IkReal x717=(gclwh9_7*x601);
IkReal x718=(gclwh15_9*x540);
IkReal x719=((2.0)*x507);
IkReal x720=((1.0)*x508);
IkReal x721=(x510*x610);
IkReal x722=(x546*x618);
IkReal x723=(x540*x545);
IkReal x724=(x516*x613);
IkReal x725=(x531*x548);
IkReal x726=(x542*x605);
IkReal x727=((2.0)*gclwh15_10*x516);
IkReal x728=(x531*x622);
IkReal x729=(x542*x624);
IkReal x730=((2.0)*gclwh13_10*x510);
IkReal x731=(x540*x569);
IkReal x732=((2.0)*gclwh5_10*x546);
IkReal x733=((0.134)*gclwh6_5*x510);
IkReal x734=((0.268)*gclwh10_5*x531);
IkReal x735=((0.268)*gclwh8_5*x540);
IkReal x736=((0.268)*gclwh6_5*x542);
IkReal x737=((0.134)*gclwh8_5*x516);
IkReal x738=((0.134)*gclwh10_5*x546);
IkReal x739=(gclwh14_2*rxp0_2*x509);
IkReal x740=(gclwh6_11*npy*x520);
IkReal x741=(x546*x611);
IkReal x742=(x527*x611);
IkReal x743=(x511*x591);
IkReal x744=(x516*x536);
IkReal x745=(x529*x530);
IkReal x746=(x536*x588);
IkReal x747=(gclwh12_2*rxp1_2*x509);
IkReal x748=(x535*x599);
IkReal x749=(gclwh4_2*rxp2_2*x509);
IkReal x750=(gclwh10_11*npz*x520);
IkReal x751=(x533*x641);
IkReal x752=(gclwh8_11*npx*x520);
IkReal x753=(gclwh11_10*npz*x520);
IkReal x754=(gclwh9_10*npx*x520);
IkReal x755=(gclwh13_1*pp*x511);
IkReal x756=(x546*x632);
IkReal x757=(x529*x562);
IkReal x758=(gclwh15_0*rxp0_2*x509);
IkReal x759=(x527*x632);
IkReal x760=(x588*x616);
IkReal x761=(x516*x616);
IkReal x762=(gclwh15_1*pp*x535);
IkReal x763=(gclwh5_0*rxp2_2*x509);
IkReal x764=(gclwh13_0*rxp1_2*x509);
IkReal x765=(x533*x582);
IkReal x766=(x520*x521);
IkReal x767=((0.268)*gclwh9_7*x540);
IkReal x768=((0.134)*gclwh7_7*x510);
IkReal x769=((0.268)*gclwh11_7*x531);
IkReal x770=((0.134)*gclwh11_7*x546);
IkReal x771=((0.268)*gclwh7_7*x542);
IkReal x772=((0.134)*gclwh9_7*x516);
IkReal x773=(x510*x644);
IkReal x774=((0.536)*gclwh14_14*x540);
IkReal x775=(x546*x593);
IkReal x776=((0.536)*gclwh4_14*x531);
IkReal x777=(x516*x557);
IkReal x778=((0.536)*gclwh12_14*x542);
IkReal x779=((0.134)*gclwh12_14*x510);
IkReal x780=(x540*x557);
IkReal x781=((0.134)*gclwh4_14*x546);
IkReal x782=(x542*x644);
IkReal x783=((0.134)*gclwh14_14*x516);
IkReal x784=(x531*x593);
IkReal x785=(x516*x534);
IkReal x786=(x534*x588);
IkReal x787=((0.1)*gclwh4_8*x546);
IkReal x788=(x508*x625);
IkReal x789=(gclwh1_2*pz*x588);
IkReal x790=(gclwh3_2*pz*x533);
IkReal x791=(gclwh4_11*npz*x520);
IkReal x792=((0.1)*gclwh12_8*x510);
IkReal x793=(x508*x577);
IkReal x794=(x508*x598);
IkReal x795=(gclwh6_2*rxp1_2*x509);
IkReal x796=(x508*x617);
IkReal x797=(gclwh12_11*npy*x520);
IkReal x798=(x509*x514);
IkReal x799=(gclwh4_8*npz*x509);
IkReal x800=(gclwh14_11*npx*x520);
IkReal x801=(x509*x549);
IkReal x802=(gclwh10_2*rxp2_2*x509);
IkReal x803=(x527*x552);
IkReal x804=(gclwh8_2*rxp0_2*x509);
IkReal x805=((0.1)*gclwh14_8*x516);
IkReal x806=(x533*x645);
IkReal x807=(x533*x636);
IkReal x808=(gclwh0_0*pz*x588);
IkReal x809=(gclwh11_0*rxp2_2*x509);
IkReal x810=(x532*x533);
IkReal x811=(x509*x631);
IkReal x812=(x508*x525);
IkReal x813=(pp*pz*x518);
IkReal x814=((0.01)*pz*x518);
IkReal x815=(x510*x636);
IkReal x816=(gclwh9_0*rxp0_2*x509);
IkReal x817=((0.1)*gclwh15_9*x516);
IkReal x818=(x508*x606);
IkReal x819=(gclwh5_10*npz*x520);
IkReal x820=(gclwh13_10*npy*x520);
IkReal x821=(gclwh5_9*npz*x509);
IkReal x822=(x508*x629);
IkReal x823=(x509*x566);
IkReal x824=((0.1)*gclwh5_9*x546);
IkReal x825=(gclwh15_9*npx*x509);
IkReal x826=((0.1)*gclwh13_9*x510);
IkReal x827=(gclwh15_10*npx*x520);
IkReal x828=(x588*x612);
IkReal x829=(x531*x618);
IkReal x830=((0.134)*gclwh15_15*x516);
IkReal x831=(x542*x610);
IkReal x832=((0.134)*gclwh13_15*x510);
IkReal x833=(x540*x613);
IkReal x834=((0.134)*gclwh5_15*x546);
IkReal x835=(gclwh6_2*npy*x719);
IkReal x836=(gclwh6_2*x510*x538);
IkReal x837=(gclwh10_2*npz*x719);
IkReal x838=(gclwh8_2*npx*x719);
IkReal x839=(gclwh7_0*npy*x719);
IkReal x840=(gclwh9_0*npx*x719);
IkReal x841=(gclwh11_0*npz*x719);
IkReal x842=(gclwh7_0*x510*x538);
IkReal x843=(gclwh12_2*npy*x719);
IkReal x844=(gclwh3_2*npy*x719);
IkReal x845=(gclwh1_2*npx*x719);
IkReal x846=(npx*x520*x599);
IkReal x847=(gclwh4_2*npz*x719);
IkReal x848=(npz*x520*x530);
IkReal x849=(gclwh12_2*x510*x538);
IkReal x850=(gclwh1_2*x516*x538);
IkReal x851=(gclwh3_3*x520*x630);
IkReal x852=(gclwh4_2*x538*x546);
IkReal x853=(gclwh1_3*x520*x623);
IkReal x854=(gclwh3_2*x510*x538);
IkReal x855=(npy*x520*x591);
IkReal x856=(gclwh14_2*npx*x719);
IkReal x857=(x637*x720);
IkReal x858=(gclwh0_0*npx*x719);
IkReal x859=(gclwh2_0*npy*x719);
IkReal x860=(npz*x520*x562);
IkReal x861=(gclwh13_1*x520*x630);
IkReal x862=(gclwh15_0*npx*x719);
IkReal x863=(gclwh2_1*x520*x630);
IkReal x864=(gclwh0_1*x520*x623);
IkReal x865=(gclwh5_0*npz*x719);
IkReal x866=(gclwh13_0*npy*x719);
IkReal x867=(gclwh0_0*x516*x538);
IkReal x868=(gclwh15_0*x516*x538);
IkReal x869=((1.0)*x510*x532);
IkReal x870=(x554*x720);
IkReal x871=(x578*x720);
IkReal x872=(gclwh15_1*x520*x623);
IkReal x873=(x689+x690);
IkReal x874=(x679+x680);
IkReal x875=(x714+x717);
IkReal x876=(x655+x657);
IkReal x877=(x661+x663+x664+x740);
IkReal x878=(x676+x677+x675+x766);
IkReal x879=(x704+x705+x819+x820);
IkReal x880=(x695+x696+x791+x797);
IkReal x881=(x648+x724+x725+x726);
IkReal x882=(x712+x829+x830+x831);
IkReal x883=(x656+x735+x734+x733);
IkReal x884=(x687+x777+x776+x778);
IkReal x885=(x693+x782+x783+x784);
IkReal x886=(x681+x768+x769+x767);
IkReal x887=(x698+x699+x702+x701+x800);
IkReal x888=(x711+x710+x709+x707+x827);
IkReal x889=(x672+x671+x674+x754+x753);
IkReal x890=(x669+x668+x667+x750+x752);
IkReal x891=(x649+x650+x727+x728+x729);
IkReal x892=(x686+x685+x773+x775+x774);
IkReal x893=(x659+x660+x737+x736+x738);
IkReal x894=(x715+x716+x834+x832+x833);
IkReal x895=(x683+x684+x772+x771+x770);
IkReal x896=(x688+x691+x779+x780+x781);
IkReal x897=(x647+x646+x721+x722+x723);
IkReal x898=(x651+x652+x653+x654+x732+x731+x730);
IkReal x899=(x678+x764+x765+x762+x763+x841+x840+x842);
IkReal x900=(x666+x751+x747+x748+x749+x836+x837+x838);
IkReal x901=(x673+x670+x755+x757+x756+x759+x758+x760+x761+x839);
IkReal x902=(x662+x665+x739+x746+x744+x745+x742+x743+x741+x835);
IkReal x903=(x708+x706+x869+x868+x867+x866+x865+x864+x863+x870+x871+x872+x828+x823+x826+x825+x824);
IkReal x904=(x509+x694+x697+x790+x793+x792+x795+x794+x796+x798+x786+x787+x785+x788+x789+x843+x845+x844+x847+x846);
IkReal x905=(x700+x799+x852+x853+x850+x851+x856+x857+x854+x855+x849+x848+x805+x804+x806+x801+x803+x802);
IkReal x906=(x509+x703+x858+x859+x862+x861+x860+x818+x816+x817+x814+x815+x812+x813+x810+x811+x822+x821+x809+x808+x807);
op[41]=((((-1.0)*gclwh10_2*x519))+((gclwh3_2*x561))+(((0.132)*gclwh1_2*x540))+(((-1.0)*gclwh12_2*x561))+(((-0.132)*npx*x534))+((gclwh1_2*x570))+((gclwh14_2*x570))+(((0.132)*gclwh3_2*x542))+(((-1.0)*x884))+(((0.132)*gclwh12_2*x542))+(((-0.066)*gclwh4_2*x546))+((gclwh6_2*x555))+(((-0.066)*gclwh12_2*x510))+(((-0.066)*gclwh1_2*x516))+(((0.132)*gclwh4_2*x531))+(((-1.0)*gclwh8_2*x596))+x892+(((-0.066)*gclwh3_2*x510))+(((-0.00066)*x626))+(((0.066)*gclwh14_2*x516)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((-1.634)*gclwh2_0*x510))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x531))+((gclwh13_0*x589))+(((3.268)*gclwh15_0*x540))+(((-1.0)*x897))+((gclwh2_0*x589))+(((3.268)*npy*x532))+(((-3.268)*gclwh13_0*x542))+(((-1.634)*gclwh15_0*x516))+(((3.268)*gclwh0_0*x540))+x881+(((-1.634)*gclwh0_0*x516))+(((1.634)*pp*x518))+(((0.01634)*x518))+(((-0.3268)*x566))+(((-1.0)*gclwh15_0*x609))+((gclwh0_0*x609))+(((1.634)*gclwh13_0*x510)));
op[43]=((1.299066)+(((-1.0)*x891))+x898);
op[44]=((0.03602)+(((0.04)*x517))+((x546*x622))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+((x510*x624))+(((0.8)*x571))+(((-8.0)*gclwh5_10*x531))+(((-0.8)*x590))+(((8.0)*gclwh15_10*x540))+(((-8.0)*gclwh13_10*x542))+(((-1.0)*x516*x569))+(((-0.04)*gclwh15_10*r20)));
op[45]=(((x510*x605))+(((-0.00536)*x556))+(((-1.072)*gclwh5_15*x531))+(((1.072)*gclwh15_15*x540))+(((-1.072)*gclwh13_15*x542))+(((0.3136)*x539))+(((0.00536)*x614))+(((-1.0)*x516*x545))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x575))+(((-0.3136)*gclwh7_13*rxp1_2))+((x546*x548)));
op[46]=((((0.132)*gclwh0_0*x540))+((gclwh0_0*x570))+((gclwh9_0*x596))+(((-0.066)*gclwh0_0*x516))+(((-1.0)*gclwh7_0*x555))+(((-0.066)*gclwh15_0*x516))+(((-1.0)*gclwh15_0*x570))+(((0.066)*pp*x518))+(((-0.132)*gclwh5_0*x531))+(((-1.0)*x881))+((gclwh11_0*x519))+((gclwh13_0*x561))+((gclwh2_0*x561))+(((0.132)*npy*x532))+(((0.066)*gclwh13_0*x510))+(((-0.132)*gclwh13_0*x542))+(((0.132)*gclwh15_0*x540))+x897+(((-0.066)*gclwh2_0*x510))+(((0.00066)*x518)));
op[47]=((0.033734)+(((-1.0)*x898))+x891);
op[48]=((((-1.0)*gclwh12_8*x574))+(((0.1634)*x583))+(((0.817)*gclwh8_12*x516))+(((-0.817)*gclwh6_12*x510))+((x528*x621))+((gclwh8_12*x627))+(((-1.0)*x893))+(((0.817)*gclwh10_12*x546))+(((-0.00817)*gclwh6_12*r21))+(((-1.634)*gclwh8_12*x540))+((gclwh10_12*x565))+x658+(((-1.634)*gclwh10_12*x531))+x883+(((-1.0)*gclwh4_8*x586))+(((-1.0)*x876)));
op[49]=(((gclwh6_11*x510))+(((-1.0)*gclwh8_11*x516))+(((-1.0)*x900))+(((-1.0)*gclwh4_3*x635))+(((-1.0)*gclwh10_11*x546))+((gclwh14_3*x558))+(((-0.135089)*x553))+x890+x902+(((-1.0)*x877)));
op[50]=((0.210112)+((gclwh12_11*x608))+(((-0.02)*x563))+(((-4.0)*gclwh6_11*x542))+(((-2.0)*gclwh10_11*x546))+((gclwh6_11*x564))+(((4.0)*gclwh8_11*x540))+(((2.0)*gclwh6_11*x510))+(((-2.0)*gclwh8_11*x516))+((gclwh4_11*x595))+(((4.0)*gclwh10_11*x531))+(((-1.0)*gclwh10_11*x522))+(((-1.0)*gclwh14_11*x634)));
op[51]=((((-1.0)*gclwh14_14*x642))+(((0.0536)*x568))+(((0.784)*gclwh6_2*x510))+((gclwh4_8*x584))+(((-1.568)*gclwh6_2*x542))+((gclwh12_14*x585))+((x536*x628))+(((-1.0)*gclwh10_2*x537))+(((-0.784)*gclwh8_2*x516))+(((1.568)*gclwh10_2*x531))+((gclwh6_2*x523))+((gclwh12_2*x603))+(((-1.0)*gclwh10_2*r22*x543))+(((-1.0)*gclwh14_2*x541))+(((-1.0)*gclwh8_2*x597))+(((0.17)*x594))+((gclwh4_2*x587))+(((-0.17)*x583)));
op[52]=(((gclwh12_8*x544))+((gclwh8_12*x638))+(((-1.0)*x893))+(((-1.0)*x658))+(((-0.0066)*x583))+(((0.033)*gclwh10_12*x546))+(((0.033)*gclwh8_12*x516))+((x513*x528))+(((-0.033)*gclwh6_12*x510))+((gclwh10_12*x573))+x876+x883+(((-1.0)*gclwh6_12*x581))+(((-1.0)*gclwh10_12*npz*x513))+(((-1.0)*gclwh8_12*npx*x513))+((gclwh4_8*x547)));
op[53]=((((-1.0)*gclwh4_3*x567))+(((-1.0)*x900))+(((-1.0)*x890))+((gclwh8_11*x516))+((gclwh14_3*x643))+(((-1.0)*gclwh6_11*x510))+x877+((gclwh10_11*x546))+x902+(((-0.001809)*x553)));
op[54]=((((-1.0)*gclwh7_10*x510))+(((-0.135089)*x640))+(((-1.0)*x899))+(((-1.0)*x889))+((gclwh11_10*x546))+((gclwh9_10*x516))+(((-1.0)*gclwh5_1*x635))+x878+((gclwh15_1*x558))+x901);
op[55]=((((-1.634)*gclwh9_13*x540))+((gclwh11_13*x565))+(((-1.0)*gclwh5_9*x586))+(((0.817)*gclwh9_13*x516))+(((-0.817)*gclwh7_13*x510))+(((-1.0)*x895))+(((0.1634)*x602))+(((1.634)*gclwh7_13*x542))+((gclwh9_13*x627))+(((-0.00817)*x579))+(((-1.634)*gclwh11_13*x531))+(((0.817)*gclwh11_13*x546))+x682+(((-1.0)*gclwh13_9*x574))+x886+(((-1.0)*x874)));
op[56]=((((0.784)*gclwh7_0*x510))+((gclwh5_0*x587))+(((-1.0)*gclwh5_9*x584))+(((-1.0)*gclwh15_0*x541))+(((-1.0)*gclwh9_0*x597))+(((1.568)*gclwh9_0*x540))+((gclwh15_15*x642))+(((-1.568)*gclwh7_0*x542))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh11_0*r22*x543))+((gclwh7_0*x523))+(((-0.784)*gclwh9_0*x516))+(((0.17)*x602))+((gclwh13_0*x603))+(((-1.0)*gclwh11_0*x537))+(((1.568)*gclwh11_0*x531))+(((-0.17)*x580))+(((-1.0)*gclwh13_15*x585)));
op[57]=((0.210112)+(((-1.0)*gclwh9_10*x607))+((gclwh7_10*x564))+(((-4.0)*pz*x521))+(((4.0)*gclwh11_10*x531))+((gclwh5_10*x595))+(((-1.0)*gclwh11_10*x522))+(((-2.0)*gclwh9_10*x516))+((gclwh13_10*x608))+(((4.0)*gclwh9_10*x540))+(((2.0)*gclwh7_10*x510))+(((-1.0)*gclwh15_10*x634))+(((-2.0)*gclwh11_10*x546)));
op[58]=((((-1.0)*gclwh9_10*x516))+((gclwh15_1*x643))+(((-1.0)*x899))+(((-0.001809)*x640))+(((-1.0)*gclwh5_1*x567))+(((-1.0)*gclwh11_10*x546))+((gclwh7_10*x510))+x889+x901+(((-1.0)*x878)));
op[59]=((((-0.0066)*x602))+((gclwh7_13*npy*x513))+(((-1.0)*x682))+(((-1.0)*gclwh9_13*npx*x513))+(((0.033)*gclwh9_13*x516))+(((-0.033)*gclwh7_13*x510))+(((-1.0)*x895))+((gclwh13_9*x544))+(((-0.00033)*x579))+((gclwh9_13*x638))+(((0.033)*gclwh11_13*x546))+((gclwh11_13*x573))+x874+x886+((gclwh5_9*x547))+(((-1.0)*gclwh11_13*npz*x513)));
op[60]=((((-1.0)*x514*x621))+(((-1.0)*gclwh10_12*x586))+(((-0.1634)*x615))+(((0.817)*gclwh14_8*x516))+((gclwh6_12*x574))+(((1.634)*gclwh12_8*x542))+(((-0.00817)*x526))+(((-1.0)*x896))+(((-0.817)*gclwh12_8*x510))+(((-0.817)*gclwh4_8*x546))+(((1.634)*gclwh4_8*x531))+(((0.00817)*x551))+(((-1.0)*gclwh4_8*x565))+(((-1.0)*x692))+x873+x885);
op[61]=((0.685445)+(((0.665445)*gclwh14_3*x516))+(((-0.00675445)*x625))+(((-1.35089)*gclwh14_3*x540))+(((-1.0)*x905))+((gclwh12_11*x510))+(((-0.685445)*gclwh3_3*x510))+(((-0.00675445)*x617))+(((-1.0)*x880))+(((0.00675445)*x637))+(((0.00675445)*x577))+(((0.00675445)*x598))+(((1.35089)*gclwh4_3*x531))+(((-0.685445)*gclwh1_3*x516))+(((1.35089)*gclwh3_3*x542))+((gclwh4_11*x546))+(((1.35089)*gclwh1_3*x540))+(((-0.665445)*gclwh12_3*x510))+(((1.35089)*gclwh12_3*x542))+x887+(((-0.665445)*r22*x530))+x904+(((-1.0)*gclwh14_11*x516)));
op[62]=((0.089834)+((gclwh10_11*x595))+(((-1.0)*gclwh6_11*x608))+(((-4.0)*gclwh12_11*x542))+((gclwh8_11*x634))+(((-0.02)*x572))+((gclwh12_11*x564))+(((-2.0)*gclwh14_11*x516))+(((2.0)*gclwh12_11*x510))+(((4.0)*gclwh14_11*x540))+(((2.0)*gclwh4_11*x546))+((gclwh4_11*x522))+(((-4.0)*gclwh4_11*x531)));
op[63]=((((-1.7)*gclwh12_8*x542))+(((0.85)*gclwh4_8*x546))+(((0.85)*gclwh12_8*x510))+(((-1.568)*gclwh4_2*x531))+(((-1.568)*gclwh3_2*x542))+(((0.784)*gclwh1_2*x516))+(((-0.784)*gclwh14_2*x516))+(((-1.568)*gclwh12_2*x542))+(((-1.0)*gclwh14_2*x597))+(((0.784)*gclwh12_2*x510))+(((-1.0)*gclwh6_2*x603))+(((-1.0)*gclwh1_2*x597))+(((-1.0)*gclwh3_2*x523))+(((-1.0)*x884))+(((-0.85)*gclwh14_8*x516))+(((1.7)*pz*x514))+((x543*x626))+((gclwh12_2*x523))+(((0.784)*gclwh3_2*x510))+((gclwh10_2*x587))+(((0.0085)*x526))+((gclwh8_2*x541))+x892+(((-0.0085)*x551))+(((-1.7)*gclwh4_8*x531))+((gclwh4_2*x537))+(((0.0085)*x620))+(((-1.568)*gclwh1_2*x540))+((x534*x628)));
op[64]=((((-0.033)*gclwh14_8*x516))+(((0.033)*gclwh4_8*x546))+(((0.00033)*x526))+((gclwh4_8*x573))+(((-1.0)*x885))+((x513*x514))+(((-1.0)*x513*x549))+(((-1.0)*x692))+(((-1.0)*gclwh4_8*npz*x513))+x873+x896+(((-0.00033)*x551))+(((-1.0)*gclwh10_12*x547))+(((0.033)*gclwh12_8*x510))+((gclwh6_12*x544))+(((-0.0066)*x615)));
op[65]=((-0.019045)+(((-0.019045)*gclwh3_3*x510))+(((0.000955)*r22*x530))+(((0.01809)*gclwh1_3*x540))+(((0.000955)*gclwh12_3*x510))+(((-1.0)*x905))+(((-0.01809)*gclwh14_3*x540))+(((-1.0)*x887))+(((-1.0)*gclwh4_11*x546))+(((0.01809)*gclwh12_3*x542))+(((-9.045e-5)*x617))+(((9.045e-5)*x577))+(((0.01809)*gclwh4_3*x531))+(((-1.0)*gclwh12_11*x510))+((gclwh14_3*x550))+((gclwh14_11*x516))+(((-9.045e-5)*x625))+x880+((gclwh1_3*x550))+x904+(((-0.019045)*gclwh1_3*x516))+(((0.01809)*gclwh3_3*x542))+(((-0.000955)*gclwh14_3*x516)));
op[66]=((-0.685445)+(((0.00675445)*x554))+(((0.00675445)*x606))+(((-0.685445)*gclwh2_1*x510))+(((1.35089)*gclwh15_1*x540))+(((-1.0)*x903))+(((0.00675445)*x629))+((gclwh13_10*x510))+(((0.00675445)*x578))+((gclwh5_10*x546))+(((1.35089)*gclwh2_1*x542))+(((-0.665445)*gclwh15_1*x516))+(((-1.35089)*gclwh13_1*x542))+(((1.35089)*gclwh0_1*x540))+(((-0.685445)*gclwh0_1*x516))+(((0.665445)*gclwh5_1*x546))+x888+(((-0.00675445)*x525))+x906+(((0.665445)*gclwh13_1*x510))+(((-1.35089)*gclwh5_1*x531))+(((-1.0)*gclwh15_10*x516))+(((-1.0)*x879)));
op[67]=((((0.1634)*x539))+((gclwh5_9*x565))+(((0.817)*gclwh5_9*x546))+(((-1.634)*gclwh13_9*x542))+(((-1.634)*gclwh5_9*x531))+(((-0.00817)*x524))+(((-1.0)*x882))+(((0.817)*gclwh13_9*x510))+((gclwh11_13*x586))+(((-0.817)*gclwh15_9*x516))+(((1.634)*x718))+(((-1.0)*gclwh7_13*x574))+x713+x894+(((0.00817)*x592))+(((-1.0)*x875)));
op[68]=((((0.85)*gclwh5_9*x546))+(((1.568)*gclwh5_0*x531))+(((0.784)*gclwh0_0*x516))+(((0.784)*gclwh2_0*x510))+(((-1.568)*npy*x532))+(((-1.0)*gclwh11_0*x587))+(((-1.0)*gclwh2_0*x523))+(((-1.0)*x881))+(((-1.0)*gclwh0_0*x597))+(((0.0085)*x592))+(((-1.568)*gclwh0_0*x540))+(((0.85)*gclwh13_9*x510))+(((-1.0)*x518*x543))+(((-1.568)*gclwh15_0*x540))+(((-0.784)*gclwh13_0*x510))+(((-0.85)*gclwh15_9*x516))+(((-1.0)*gclwh9_0*x541))+((gclwh15_0*x597))+(((-0.0085)*x524))+(((0.1568)*x566))+x897+(((1.568)*gclwh13_0*x542))+(((0.784)*gclwh15_0*x516))+(((0.0085)*x633))+(((-1.7)*gclwh5_9*x531))+(((-1.0)*gclwh13_0*x523))+(((-0.00784)*x518))+(((1.7)*x718))+(((-1.7)*gclwh13_9*x542)));
op[69]=((0.089834)+(((-1.0)*x898))+x891);
op[70]=((0.019045)+(((0.01809)*gclwh2_1*x542))+(((0.01809)*gclwh0_1*x540))+(((-0.019045)*gclwh0_1*x516))+(((-0.019045)*gclwh2_1*x510))+(((-1.0)*x903))+(((0.000955)*gclwh15_1*x516))+(((-1.0)*gclwh5_10*x546))+(((9.045e-5)*x606))+(((-1.0)*gclwh13_10*x510))+(((-0.01809)*gclwh5_1*x531))+(((-1.0)*x888))+((gclwh15_10*x516))+(((9.045e-5)*x578))+(((-0.01809)*gclwh13_1*x542))+(((0.01809)*gclwh15_1*x540))+x879+(((-0.000955)*gclwh13_1*x510))+((gclwh0_1*x550))+(((-9.045e-5)*x525))+x906+(((9.045e-5)*x554))+(((-0.000955)*gclwh5_1*x546)));
op[71]=((((-0.033)*gclwh5_9*x546))+(((0.0066)*x539))+(((0.00033)*x524))+(((-1.0)*x894))+(((-1.0)*gclwh5_9*x573))+(((-1.0)*gclwh7_13*x544))+(((-1.0)*gclwh13_9*x581))+(((-1.0)*gclwh15_9*npx*x513))+(((0.033)*gclwh15_9*x516))+(((-0.033)*gclwh13_9*x510))+((gclwh11_13*x547))+((x513*x631))+x713+x882+((gclwh5_9*npz*x513))+(((-1.0)*x875)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x907=htj1*htj1;
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+x907),-1);
if(!x908.valid){
continue;
}
cj1array[numsolutions]=((x908.value)*(((1.0)+(((-1.0)*x907)))));
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x909.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x909.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x910=htj2*htj2;
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+x910),-1);
if(!x911.valid){
continue;
}
cj2array[numsolutions]=((x911.value)*(((1.0)+(((-1.0)*x910)))));
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x912.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x912.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x913=htj3*htj3;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(((1.0)+x913),-1);
if(!x914.valid){
continue;
}
cj3array[numsolutions]=((x914.value)*(((1.0)+(((-1.0)*x913)))));
CheckValue<IkReal> x915=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x915.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x915.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x917=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x917);
rxp1_0=(pz*r11);
rxp1_1=(r01*x917);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x918=IKPowWithIntegerCheck(r22,-1);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919=IKPowWithIntegerCheck(sj3,-1);
if(!x919.valid){
continue;
}
sj4array[0]=((x918.value)*(x919.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x920=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x920);
rxp1_0=(pz*r11);
rxp1_1=(r01*x920);
IkReal x921=((16.0)*sj4);
IkReal x922=(cj1*cj2);
IkReal x923=((4.0)*sj3);
IkReal x924=((8.0)*sj4);
IkReal x925=((4.0)*cj4);
IkReal x926=(sj1*sj2);
IkReal x927=((4.0)*sj4);
IkReal x928=(cj3*r02);
IkReal x929=((16.0)*sj3);
IkReal x930=((8.0)*sj3);
IkReal x931=((12.0)*cj4);
IkReal x932=((12.0)*sj4);
IkReal x933=(cj3*r12);
IkReal x934=(r11*x923);
IkReal x935=(r01*x923);
IkReal x936=(r01*x926);
IkReal x937=(cj3*cj4*r01);
IkReal x938=(cj3*cj4*r11);
IkReal x939=(cj3*r10*x925);
IkReal x940=(x932*x933);
IkReal x941=(cj3*r00*x925);
IkReal x942=(x928*x932);
IkReal x943=(r00*x926*x927);
IkReal x944=(r02*x926*x931);
IkReal x945=(r00*x922*x927);
IkReal x946=(r02*x922*x931);
IkReal x947=(r10*x926*x927);
IkReal x948=(r12*x922*x931);
IkReal x949=(r12*x926*x931);
IkReal x950=(r10*x922*x927);
IkReal x951=(x934+x945);
IkReal x952=(x935+x947);
IkReal x953=(x939+x943);
IkReal x954=(x940+x946);
IkReal x955=(x950+x941);
IkReal x956=(x949+x942);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x956))+x952+x948)))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x951))+x953+x944)))))+(IKabs(((((-1.0)*r10*x930))+(((-8.0)*x938))+(((-1.0)*x924*x936))+((r01*x922*x924)))))+(((0.5)*(IKabs(((((-1.0)*r10*x929))+(((-1.0)*x921*x936))+(((-16.0)*x938))+((r01*x921*x922)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x921*x922))+((r11*x921*x926))+(((-16.0)*x937))+(((-1.0)*r00*x929)))))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x954))+x951+x944)))))+(((0.5)*(IKabs(((((-1.0)*r02*x922*x925))+(((-1.0)*x927*x933))+((r02*x925*x926))+(((-1.0)*x953))+x951)))))+(((0.5)*(IKabs(((((-1.0)*x927*x928))+(((-1.0)*r12*x925*x926))+((r12*x922*x925))+(((-1.0)*x955))+x952)))))+(((0.5)*(IKabs(((((-1.0)*x956))+(((-1.0)*x952))+x955+x948)))))+(IKabs(((((-8.0)*x937))+(((-1.0)*r11*x922*x924))+((r11*x924*x926))+(((-1.0)*r00*x930))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x957=(r10*sj3);
IkReal x958=(r01*sj4);
IkReal x959=(cj1*cj2);
IkReal x960=(cj3*cj4);
IkReal x961=(sj1*sj2);
IkReal x962=(cj4*r02);
IkReal x963=((4.0)*r11*sj3);
IkReal x964=(cj3*r12*sj4);
IkReal x965=((4.0)*r00*sj4);
IkReal x966=((4.0)*r10*x960);
IkReal x967=((12.0)*x964);
IkReal x968=((4.0)*x964);
IkReal x969=(x959*x965);
IkReal x970=(x961*x965);
IkReal x971=((12.0)*x961*x962);
IkReal x972=((12.0)*x959*x962);
IkReal x973=((4.0)*x961*x962);
IkReal x974=((4.0)*x959*x962);
IkReal x975=(x963+x969);
IkReal x976=(x970+x966);
IkReal x977=(x974+x968);
IkReal x978=(x972+x967);
IkReal x979=((((8.0)*x958*x959))+(((-8.0)*x957))+(((-8.0)*r11*x960))+(((-8.0)*x958*x961)));
op[0]=(x973+x975+(((-1.0)*x976))+(((-1.0)*x977)));
op[1]=x979;
op[2]=(x971+x975+(((-1.0)*x978))+(((-1.0)*x976)));
op[3]=((((-16.0)*x958*x961))+(((-16.0)*r11*x960))+(((-16.0)*x957))+(((16.0)*x958*x959)));
op[4]=(x971+x976+(((-1.0)*x975))+(((-1.0)*x978)));
op[5]=x979;
op[6]=(x973+x976+(((-1.0)*x975))+(((-1.0)*x977)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x980=(cj1*cj2);
IkReal x981=((4.0)*cj4);
IkReal x982=(sj1*sj2);
IkReal x983=((4.0)*sj4);
IkReal x984=(r00*sj3);
IkReal x985=(cj3*r02);
IkReal x986=((4.0)*r01*sj3);
IkReal x987=((16.0)*r11*sj4);
IkReal x988=(cj3*cj4*r01);
IkReal x989=((12.0)*cj4*r12);
IkReal x990=((8.0)*r11*sj4);
IkReal x991=(cj3*r00*x981);
IkReal x992=((12.0)*sj4*x985);
IkReal x993=(x983*x985);
IkReal x994=(r10*x980*x983);
IkReal x995=(r10*x982*x983);
IkReal x996=(x980*x989);
IkReal x997=(x982*x989);
IkReal x998=(r12*x980*x981);
IkReal x999=(r12*x981*x982);
IkReal x1000=(x995+x986);
IkReal x1001=(x991+x994);
IkReal x1002=(x993+x999);
IkReal x1003=(x992+x997);
IkReal x1004=((((-8.0)*x984))+(((-8.0)*x988))+(((-1.0)*x980*x990))+((x982*x990)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x1000+(((-1.0)*x1001))+(((-1.0)*x1002))+x998))))+x1001+(((htj5*htj5*htj5)*(((((-16.0)*x984))+(((-16.0)*x988))+((x982*x987))+(((-1.0)*x980*x987))))))+(((-1.0)*x1002))+(((-1.0)*x1000))+(((htj5*htj5*htj5*htj5)*((x1000+(((-1.0)*x1001))+(((-1.0)*x1003))+x996))))+(((htj5*htj5)*((x1001+(((-1.0)*x1003))+(((-1.0)*x1000))+x996))))+((x1004*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1004))+x998);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1005=(cj5*sj4);
IkReal x1006=(sj4*sj5);
if( IKabs((((r01*x1006))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1006))+((cj4*r12))+((r10*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1006))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1005))))+IKsqr(((((-1.0)*r11*x1006))+((cj4*r12))+((r10*x1005))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1006))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1005))), ((((-1.0)*r11*x1006))+((cj4*r12))+((r10*x1005))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1007=IKcos(j0);
IkReal x1008=IKsin(j0);
IkReal x1009=(r02*sj4);
IkReal x1010=((0.1)*sj5);
IkReal x1011=(cj5*r11);
IkReal x1012=((1.0)*sj3);
IkReal x1013=(r12*sj4);
IkReal x1014=((1.0)*cj3);
IkReal x1015=(r11*sj5);
IkReal x1016=(cj3*cj4);
IkReal x1017=((1.0)*sj2);
IkReal x1018=(cj5*r01);
IkReal x1019=(r01*sj5);
IkReal x1020=(sj1*sj2);
IkReal x1021=(cj1*cj2);
IkReal x1022=(r00*sj5);
IkReal x1023=((1.0)*cj2);
IkReal x1024=(r10*sj5);
IkReal x1025=((1.0)*cj4);
IkReal x1026=(cj4*cj5*r00);
IkReal x1027=(cj1*x1007);
IkReal x1028=(cj4*cj5*r10);
IkReal x1029=((0.392)*x1008);
IkReal x1030=((1.0)*x1008);
IkReal x1031=(cj1*x1008);
IkReal x1032=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x1025))+(((-1.0)*r10*x1032))+x1007+((sj4*x1015)));
evalcond[1]=((((-1.0)*x1030))+((sj4*x1019))+(((-1.0)*r02*x1025))+(((-1.0)*r00*x1032)));
evalcond[2]=((((0.392)*x1007*x1021))+(((-0.392)*x1007*x1020))+(((-1.0)*px))+(((0.425)*x1027))+(((-0.134)*x1008))+(((-1.0)*r00*x1010))+(((-0.1)*x1018)));
evalcond[3]=((((0.425)*x1031))+(((-1.0)*x1020*x1029))+(((0.134)*x1007))+(((-1.0)*py))+((x1021*x1029))+(((-1.0)*r10*x1010))+(((-0.1)*x1011)));
evalcond[4]=(((x1016*x1019))+((cj3*x1009))+(((-1.0)*x1014*x1026))+((sj3*x1018))+((x1007*x1020))+(((-1.0)*x1007*x1021))+((sj3*x1022)));
evalcond[5]=(((x1008*x1020))+(((-1.0)*x1021*x1030))+((cj3*x1013))+(((-1.0)*x1014*x1028))+((x1015*x1016))+((sj3*x1011))+((sj3*x1024)));
evalcond[6]=((((-1.0)*x1009*x1012))+((cj3*x1018))+(((-1.0)*sj1*x1007*x1023))+(((-1.0)*cj4*x1012*x1019))+(((-1.0)*x1017*x1027))+((sj3*x1026))+((cj3*x1022)));
evalcond[7]=((((-1.0)*x1012*x1013))+((cj3*x1011))+(((-1.0)*x1017*x1031))+(((-1.0)*sj1*x1008*x1023))+(((-1.0)*cj4*x1012*x1015))+((sj3*x1028))+((cj3*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(cj3,-1);
if(!x1033.valid){
continue;
}
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(r22,-1);
if(!x1034.valid){
continue;
}
sj4array[0]=((-1.0)*(x1033.value)*(x1034.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1035=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1035);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1035);
IkReal x1036=((16.0)*sj4);
IkReal x1037=(cj1*cj2);
IkReal x1038=((4.0)*sj3);
IkReal x1039=((8.0)*sj4);
IkReal x1040=((4.0)*cj4);
IkReal x1041=(sj1*sj2);
IkReal x1042=((4.0)*sj4);
IkReal x1043=(cj3*r02);
IkReal x1044=((16.0)*sj3);
IkReal x1045=((8.0)*sj3);
IkReal x1046=((12.0)*cj4);
IkReal x1047=((12.0)*sj4);
IkReal x1048=(cj3*r12);
IkReal x1049=(r11*x1038);
IkReal x1050=(r01*x1038);
IkReal x1051=(r01*x1041);
IkReal x1052=(cj3*cj4*r01);
IkReal x1053=(cj3*cj4*r11);
IkReal x1054=(cj3*r10*x1040);
IkReal x1055=(x1047*x1048);
IkReal x1056=(cj3*r00*x1040);
IkReal x1057=(x1043*x1047);
IkReal x1058=(r00*x1041*x1042);
IkReal x1059=(r02*x1041*x1046);
IkReal x1060=(r00*x1037*x1042);
IkReal x1061=(r02*x1037*x1046);
IkReal x1062=(r10*x1041*x1042);
IkReal x1063=(r12*x1037*x1046);
IkReal x1064=(r12*x1041*x1046);
IkReal x1065=(r10*x1037*x1042);
IkReal x1066=(x1049+x1060);
IkReal x1067=(x1050+x1062);
IkReal x1068=(x1054+x1058);
IkReal x1069=(x1055+x1061);
IkReal x1070=(x1056+x1065);
IkReal x1071=(x1057+x1064);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r12*x1040*x1041))+x1067+((r12*x1037*x1040))+(((-1.0)*x1042*x1043))+(((-1.0)*x1070)))))))+(IKabs(((((-8.0)*x1053))+(((-1.0)*r10*x1045))+(((-1.0)*x1039*x1051))+((r01*x1037*x1039)))))+(IKabs(((((-1.0)*r00*x1045))+(((-8.0)*x1052))+((r11*x1039*x1041))+(((-1.0)*r11*x1037*x1039)))))+(((0.5)*(IKabs((x1070+x1063+(((-1.0)*x1067))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1044))+((r01*x1036*x1037))+(((-16.0)*x1053))+(((-1.0)*x1036*x1051)))))))+(((0.5)*(IKabs((x1066+(((-1.0)*r02*x1037*x1040))+(((-1.0)*x1042*x1048))+((r02*x1040*x1041))+(((-1.0)*x1068)))))))+(((0.5)*(IKabs((x1059+x1068+(((-1.0)*x1069))+(((-1.0)*x1066)))))))+(((0.5)*(IKabs((x1063+x1067+(((-1.0)*x1071))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs((x1059+x1066+(((-1.0)*x1069))+(((-1.0)*x1068)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1044))+(((-1.0)*r11*x1036*x1037))+((r11*x1036*x1041))+(((-16.0)*x1052))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1072=(r10*sj3);
IkReal x1073=(r01*sj4);
IkReal x1074=(cj1*cj2);
IkReal x1075=(cj3*cj4);
IkReal x1076=(sj1*sj2);
IkReal x1077=(cj4*r02);
IkReal x1078=((4.0)*r11*sj3);
IkReal x1079=(cj3*r12*sj4);
IkReal x1080=((4.0)*r00*sj4);
IkReal x1081=((4.0)*r10*x1075);
IkReal x1082=((12.0)*x1079);
IkReal x1083=((4.0)*x1079);
IkReal x1084=(x1074*x1080);
IkReal x1085=(x1076*x1080);
IkReal x1086=((12.0)*x1076*x1077);
IkReal x1087=((12.0)*x1074*x1077);
IkReal x1088=((4.0)*x1076*x1077);
IkReal x1089=((4.0)*x1074*x1077);
IkReal x1090=(x1078+x1084);
IkReal x1091=(x1085+x1081);
IkReal x1092=(x1083+x1089);
IkReal x1093=(x1087+x1082);
IkReal x1094=((((-8.0)*x1072))+(((8.0)*x1073*x1074))+(((-8.0)*x1073*x1076))+(((-8.0)*r11*x1075)));
op[0]=(x1090+x1088+(((-1.0)*x1091))+(((-1.0)*x1092)));
op[1]=x1094;
op[2]=(x1090+x1086+(((-1.0)*x1091))+(((-1.0)*x1093)));
op[3]=((((16.0)*x1073*x1074))+(((-16.0)*r11*x1075))+(((-16.0)*x1072))+(((-16.0)*x1073*x1076)));
op[4]=(x1091+x1086+(((-1.0)*x1090))+(((-1.0)*x1093)));
op[5]=x1094;
op[6]=(x1091+x1088+(((-1.0)*x1090))+(((-1.0)*x1092)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1095=(cj1*cj2);
IkReal x1096=((4.0)*cj4);
IkReal x1097=(sj1*sj2);
IkReal x1098=((4.0)*sj4);
IkReal x1099=(r00*sj3);
IkReal x1100=(cj3*r02);
IkReal x1101=((4.0)*r01*sj3);
IkReal x1102=((16.0)*r11*sj4);
IkReal x1103=(cj3*cj4*r01);
IkReal x1104=((12.0)*cj4*r12);
IkReal x1105=((8.0)*r11*sj4);
IkReal x1106=(cj3*r00*x1096);
IkReal x1107=((12.0)*sj4*x1100);
IkReal x1108=(x1098*x1100);
IkReal x1109=(r10*x1095*x1098);
IkReal x1110=(r10*x1097*x1098);
IkReal x1111=(x1095*x1104);
IkReal x1112=(x1097*x1104);
IkReal x1113=(r12*x1095*x1096);
IkReal x1114=(r12*x1096*x1097);
IkReal x1115=(x1101+x1110);
IkReal x1116=(x1106+x1109);
IkReal x1117=(x1108+x1114);
IkReal x1118=(x1107+x1112);
IkReal x1119=(((x1097*x1105))+(((-8.0)*x1099))+(((-1.0)*x1095*x1105))+(((-8.0)*x1103)));
j5evalpoly[0]=((((htj5*htj5*htj5)*((((x1097*x1102))+(((-16.0)*x1103))+(((-16.0)*x1099))+(((-1.0)*x1095*x1102))))))+x1113+x1116+((x1119*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1111+x1115+(((-1.0)*x1118))+(((-1.0)*x1116))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1113+x1115+(((-1.0)*x1116))+(((-1.0)*x1117))))))+(((htj5*htj5)*((x1111+x1116+(((-1.0)*x1118))+(((-1.0)*x1115))))))+(((-1.0)*x1117))+(((-1.0)*x1115))+((htj5*x1119)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1120=(cj5*sj4);
IkReal x1121=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1121))+(((-1.0)*r00*x1120)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1121))+((r10*x1120))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1121))+(((-1.0)*r00*x1120))))+IKsqr(((((-1.0)*r11*x1121))+((r10*x1120))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1121))+(((-1.0)*r00*x1120))), ((((-1.0)*r11*x1121))+((r10*x1120))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1122=IKcos(j0);
IkReal x1123=IKsin(j0);
IkReal x1124=(r02*sj4);
IkReal x1125=((0.1)*sj5);
IkReal x1126=(cj5*r11);
IkReal x1127=((1.0)*sj3);
IkReal x1128=(r12*sj4);
IkReal x1129=((1.0)*cj3);
IkReal x1130=(r11*sj5);
IkReal x1131=(cj3*cj4);
IkReal x1132=((1.0)*sj2);
IkReal x1133=(cj5*r01);
IkReal x1134=(r01*sj5);
IkReal x1135=(sj1*sj2);
IkReal x1136=(cj1*cj2);
IkReal x1137=(r00*sj5);
IkReal x1138=((1.0)*cj2);
IkReal x1139=(r10*sj5);
IkReal x1140=((1.0)*cj4);
IkReal x1141=(cj4*cj5*r00);
IkReal x1142=(cj1*x1122);
IkReal x1143=(cj4*cj5*r10);
IkReal x1144=((0.392)*x1123);
IkReal x1145=((1.0)*x1123);
IkReal x1146=(cj1*x1123);
IkReal x1147=((1.0)*cj5*sj4);
evalcond[0]=(x1122+((sj4*x1130))+(((-1.0)*r10*x1147))+(((-1.0)*r12*x1140)));
evalcond[1]=((((-1.0)*r00*x1147))+((sj4*x1134))+(((-1.0)*x1145))+(((-1.0)*r02*x1140)));
evalcond[2]=((((-0.1)*x1133))+(((0.425)*x1142))+(((-0.392)*x1122*x1135))+(((-1.0)*px))+(((-0.134)*x1123))+(((-1.0)*r00*x1125))+(((0.392)*x1122*x1136)));
evalcond[3]=((((-1.0)*x1135*x1144))+(((-0.1)*x1126))+(((0.134)*x1122))+(((0.425)*x1146))+(((-1.0)*r10*x1125))+(((-1.0)*py))+((x1136*x1144)));
evalcond[4]=(((x1131*x1134))+(((-1.0)*x1129*x1141))+(((-1.0)*x1122*x1136))+((sj3*x1137))+((sj3*x1133))+((x1122*x1135))+((cj3*x1124)));
evalcond[5]=((((-1.0)*x1136*x1145))+((x1130*x1131))+(((-1.0)*x1129*x1143))+((sj3*x1126))+((x1123*x1135))+((sj3*x1139))+((cj3*x1128)));
evalcond[6]=(((cj3*x1133))+((cj3*x1137))+(((-1.0)*x1132*x1142))+((sj3*x1141))+(((-1.0)*sj1*x1122*x1138))+(((-1.0)*cj4*x1127*x1134))+(((-1.0)*x1124*x1127)));
evalcond[7]=(((cj3*x1139))+(((-1.0)*x1132*x1146))+(((-1.0)*x1127*x1128))+((sj3*x1143))+(((-1.0)*sj1*x1123*x1138))+(((-1.0)*cj4*x1127*x1130))+((cj3*x1126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1149=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1150=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1150);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1150);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(r22,-1);
if(!x1151.valid){
continue;
}
sj4array[0]=((-1.0)*(x1151.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1152=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1152);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1152);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
IkReal x1153=x1154.value;
j5array[0]=((-1.0)*x1153);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1153)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1155=(cj5*sj4);
IkReal x1156=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1155))+((r01*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1156))+((r10*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1155))+((r01*x1156))))+IKsqr(((((-1.0)*r11*x1156))+((r10*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1155))+((r01*x1156))), ((((-1.0)*r11*x1156))+((r10*x1155))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1157=IKcos(j0);
IkReal x1158=IKsin(j0);
IkReal x1159=((0.1)*sj5);
IkReal x1160=(cj5*r11);
IkReal x1161=(cj5*r01);
IkReal x1162=(sj4*sj5);
IkReal x1163=((0.425)*cj1);
IkReal x1164=((1.0)*cj1*sj2);
IkReal x1165=((1.0)*cj2*sj1);
IkReal x1166=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1166))+x1157+((r11*x1162)));
evalcond[1]=(((r01*x1162))+(((-1.0)*x1158))+(((-1.0)*r00*x1166)));
evalcond[2]=(((r00*sj5))+x1161+(((-1.0)*x1157*x1165))+(((-1.0)*x1157*x1164)));
evalcond[3]=(x1160+((r10*sj5))+(((-1.0)*x1158*x1164))+(((-1.0)*x1158*x1165)));
evalcond[4]=((((-1.0)*r00*x1159))+(((-0.134)*x1158))+((x1157*x1163))+(((-1.0)*px))+(((-0.1)*x1161)));
evalcond[5]=((((0.134)*x1157))+(((-1.0)*py))+(((-1.0)*r10*x1159))+((x1158*x1163))+(((-0.1)*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(r22,-1);
if(!x1168.valid){
continue;
}
sj4array[0]=((x1168.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1169=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1171 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1171.valid){
continue;
}
IkReal x1170=x1171.value;
j5array[0]=((-1.0)*x1170);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1170)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1172=(cj5*sj4);
IkReal x1173=(sj4*sj5);
if( IKabs((((r01*x1173))+(((-1.0)*r00*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1172))+(((-1.0)*r11*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1173))+(((-1.0)*r00*x1172))))+IKsqr((((r10*x1172))+(((-1.0)*r11*x1173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1173))+(((-1.0)*r00*x1172))), (((r10*x1172))+(((-1.0)*r11*x1173))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1174=IKcos(j0);
IkReal x1175=IKsin(j0);
IkReal x1176=(r00*sj5);
IkReal x1177=(cj5*r11);
IkReal x1178=(sj4*sj5);
IkReal x1179=(r10*sj5);
IkReal x1180=((0.425)*cj1);
IkReal x1181=((1.0)*cj5);
IkReal x1182=((1.0)*cj1*sj2);
IkReal x1183=((1.0)*cj2*sj1);
evalcond[0]=(x1174+((r11*x1178))+(((-1.0)*r10*sj4*x1181)));
evalcond[1]=((((-1.0)*r00*sj4*x1181))+((r01*x1178))+(((-1.0)*x1175)));
evalcond[2]=(((x1174*x1180))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.134)*x1175))+(((-0.1)*x1176)));
evalcond[3]=(((x1175*x1180))+(((-1.0)*py))+(((0.134)*x1174))+(((-0.1)*x1177))+(((-0.1)*x1179)));
evalcond[4]=((((-1.0)*r01*x1181))+(((-1.0)*x1174*x1182))+(((-1.0)*x1174*x1183))+(((-1.0)*x1176)));
evalcond[5]=((((-1.0)*x1175*x1182))+(((-1.0)*x1175*x1183))+(((-1.0)*x1177))+(((-1.0)*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1184=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1184);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1184);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1185=IKPowWithIntegerCheck(r22,-1);
if(!x1185.valid){
continue;
}
sj4array[0]=((x1185.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1186=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1186);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1186);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1188 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1188.valid){
continue;
}
IkReal x1187=x1188.value;
j5array[0]=((-1.0)*x1187);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1187)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1189=(cj5*sj4);
IkReal x1190=(sj4*sj5);
if( IKabs((((r01*x1190))+(((-1.0)*r00*x1189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1189))+(((-1.0)*r11*x1190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1190))+(((-1.0)*r00*x1189))))+IKsqr((((r10*x1189))+(((-1.0)*r11*x1190))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1190))+(((-1.0)*r00*x1189))), (((r10*x1189))+(((-1.0)*r11*x1190))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1191=IKcos(j0);
IkReal x1192=IKsin(j0);
IkReal x1193=((0.1)*sj5);
IkReal x1194=(sj1*sj2);
IkReal x1195=(cj5*r11);
IkReal x1196=(cj5*r01);
IkReal x1197=(sj4*sj5);
IkReal x1198=(cj1*cj2);
IkReal x1199=((0.392)*x1192);
IkReal x1200=(cj1*x1191);
IkReal x1201=((1.0)*x1192);
IkReal x1202=((1.0)*cj5*sj4);
evalcond[0]=(x1191+(((-1.0)*r10*x1202))+((r11*x1197)));
evalcond[1]=(((r01*x1197))+(((-1.0)*r00*x1202))+(((-1.0)*x1201)));
evalcond[2]=(((r00*sj5))+x1196+(((-1.0)*x1191*x1198))+((x1191*x1194)));
evalcond[3]=(x1195+((r10*sj5))+((x1192*x1194))+(((-1.0)*x1198*x1201)));
evalcond[4]=((((-1.0)*r00*x1193))+(((0.425)*x1200))+(((-0.1)*x1196))+(((0.392)*x1191*x1198))+(((-1.0)*px))+(((-0.392)*x1191*x1194))+(((-0.134)*x1192)));
evalcond[5]=((((0.134)*x1191))+(((-1.0)*x1194*x1199))+(((-0.1)*x1195))+((x1198*x1199))+(((-1.0)*r10*x1193))+(((-1.0)*py))+(((0.425)*cj1*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1203=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1203);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1203);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1204=IKPowWithIntegerCheck(r22,-1);
if(!x1204.valid){
continue;
}
sj4array[0]=((-1.0)*(x1204.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1205=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1205);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1205);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1207 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1207.valid){
continue;
}
IkReal x1206=x1207.value;
j5array[0]=((-1.0)*x1206);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1206)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1208=(cj5*sj4);
IkReal x1209=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1208))+((r01*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1208))+(((-1.0)*r11*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1208))+((r01*x1209))))+IKsqr((((r10*x1208))+(((-1.0)*r11*x1209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1208))+((r01*x1209))), (((r10*x1208))+(((-1.0)*r11*x1209))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1210=IKcos(j0);
IkReal x1211=IKsin(j0);
IkReal x1212=((0.1)*sj5);
IkReal x1213=(sj1*sj2);
IkReal x1214=(cj5*r11);
IkReal x1215=(sj4*sj5);
IkReal x1216=(cj1*cj2);
IkReal x1217=((1.0)*sj5);
IkReal x1218=((1.0)*cj5);
IkReal x1219=((0.425)*cj1);
IkReal x1220=((0.392)*x1211);
IkReal x1221=((0.392)*x1210);
IkReal x1222=((1.0)*x1211);
evalcond[0]=(x1210+((r11*x1215))+(((-1.0)*r10*sj4*x1218)));
evalcond[1]=((((-1.0)*x1222))+((r01*x1215))+(((-1.0)*r00*sj4*x1218)));
evalcond[2]=((((-1.0)*x1210*x1216))+((x1210*x1213))+(((-1.0)*r00*x1217))+(((-1.0)*r01*x1218)));
evalcond[3]=((((-1.0)*r10*x1217))+(((-1.0)*x1216*x1222))+((x1211*x1213))+(((-1.0)*x1214)));
evalcond[4]=((((-1.0)*x1213*x1221))+((x1210*x1219))+((x1216*x1221))+(((-0.1)*cj5*r01))+(((-1.0)*r00*x1212))+(((-1.0)*px))+(((-0.134)*x1211)));
evalcond[5]=((((-1.0)*x1213*x1220))+(((-0.1)*x1214))+((x1216*x1220))+(((-1.0)*py))+(((-1.0)*r10*x1212))+(((0.134)*x1210))+((x1211*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1223=IKPowWithIntegerCheck(r22,-1);
if(!x1223.valid){
continue;
}
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(sj3,-1);
if(!x1224.valid){
continue;
}
sj4array[0]=((x1223.value)*(x1224.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1225=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1225);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1225);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1226=((4.0)*r01);
IkReal x1227=((16.0)*r00);
IkReal x1228=(cj3*sj2);
IkReal x1229=((8.0)*r00);
IkReal x1230=(cj2*cj3);
IkReal x1231=(cj4*r01);
IkReal x1232=((16.0)*cj1);
IkReal x1233=((8.0)*sj1);
IkReal x1234=((16.0)*sj1);
IkReal x1235=((8.0)*cj1);
IkReal x1236=(sj2*sj3);
IkReal x1237=(cj2*sj3);
IkReal x1238=(sj1*x1237);
IkReal x1239=((4.0)*cj4*r00);
IkReal x1240=(((sj1*x1236*x1239))+((x1226*x1238))+((cj1*x1226*x1236))+((sj1*x1226*x1228)));
IkReal x1241=(((cj1*x1228*x1239))+((cj1*x1237*x1239))+((sj1*x1230*x1239))+((cj1*x1226*x1230)));
IkReal x1242=(x1241+(((-1.0)*x1240)));
IkReal x1243=(((x1230*x1231*x1233))+((cj1*x1229*x1236))+(((-1.0)*cj1*x1229*x1230))+(((-1.0)*x1231*x1233*x1236))+((x1231*x1235*x1237))+((sj1*x1228*x1229))+((x1229*x1238))+((x1228*x1231*x1235)));
IkReal x1244=(x1240+(((-1.0)*x1241)));
op[0]=x1242;
op[1]=x1243;
op[2]=x1242;
op[3]=((((-1.0)*cj1*x1227*x1230))+((x1230*x1231*x1234))+((x1231*x1232*x1237))+(((-1.0)*x1231*x1234*x1236))+((x1227*x1238))+((cj1*x1227*x1236))+((sj1*x1227*x1228))+((x1228*x1231*x1232)));
op[4]=x1244;
op[5]=x1243;
op[6]=x1244;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1245=(cj5*sj4);
IkReal x1246=(sj4*sj5);
if( IKabs((((r01*x1246))+(((-1.0)*r00*x1245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1246))+((r10*x1245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1246))+(((-1.0)*r00*x1245))))+IKsqr(((((-1.0)*r11*x1246))+((r10*x1245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1246))+(((-1.0)*r00*x1245))), ((((-1.0)*r11*x1246))+((r10*x1245))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1247=IKcos(j0);
IkReal x1248=IKsin(j0);
IkReal x1249=((0.1)*sj5);
IkReal x1250=((0.392)*sj1);
IkReal x1251=(cj5*r11);
IkReal x1252=((1.0)*cj3);
IkReal x1253=((0.425)*cj1);
IkReal x1254=((1.0)*cj1);
IkReal x1255=(r11*sj5);
IkReal x1256=(cj5*r01);
IkReal x1257=(r01*sj5);
IkReal x1258=(cj3*cj4);
IkReal x1259=(r00*sj5);
IkReal x1260=((1.0)*sj1);
IkReal x1261=(r10*sj5);
IkReal x1262=(sj2*x1248);
IkReal x1263=(cj4*cj5*r00);
IkReal x1264=(sj2*x1247);
IkReal x1265=(cj4*cj5*r10);
IkReal x1266=((1.0)*cj4*sj3);
IkReal x1267=((0.392)*cj1*cj2);
IkReal x1268=(cj2*x1247);
IkReal x1269=((1.0)*cj5*sj4);
IkReal x1270=(cj2*x1248);
evalcond[0]=((((-1.0)*r10*x1269))+x1247+((sj4*x1255)));
evalcond[1]=(((sj4*x1257))+(((-1.0)*x1248))+(((-1.0)*r00*x1269)));
evalcond[2]=(((sj1*x1264))+(((-1.0)*x1252*x1263))+(((-1.0)*x1254*x1268))+((x1257*x1258))+((sj3*x1256))+((sj3*x1259)));
evalcond[3]=(((sj1*x1262))+(((-1.0)*x1254*x1270))+(((-1.0)*x1252*x1265))+((x1255*x1258))+((sj3*x1251))+((sj3*x1261)));
evalcond[4]=((((-1.0)*x1260*x1268))+((cj3*x1256))+((cj3*x1259))+(((-1.0)*x1257*x1266))+(((-1.0)*x1254*x1264))+((sj3*x1263)));
evalcond[5]=((((-1.0)*x1260*x1270))+((cj3*x1261))+((cj3*x1251))+(((-1.0)*x1255*x1266))+(((-1.0)*x1254*x1262))+((sj3*x1265)));
evalcond[6]=(((x1247*x1253))+((x1247*x1267))+(((-1.0)*px))+(((-0.134)*x1248))+(((-1.0)*x1250*x1264))+(((-0.1)*x1256))+(((-1.0)*r00*x1249)));
evalcond[7]=((((-1.0)*py))+(((-1.0)*r10*x1249))+(((-1.0)*x1250*x1262))+(((0.134)*x1247))+(((-0.1)*x1251))+((x1248*x1253))+((x1248*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(cj3,-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(r22,-1);
if(!x1272.valid){
continue;
}
sj4array[0]=((-1.0)*(x1271.value)*(x1272.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1273=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1273);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1273);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1274=((4.0)*r01);
IkReal x1275=((16.0)*r00);
IkReal x1276=(cj3*sj2);
IkReal x1277=((8.0)*r00);
IkReal x1278=(cj2*cj3);
IkReal x1279=(cj4*r01);
IkReal x1280=((16.0)*cj1);
IkReal x1281=((8.0)*sj1);
IkReal x1282=((16.0)*sj1);
IkReal x1283=((8.0)*cj1);
IkReal x1284=(sj2*sj3);
IkReal x1285=(cj2*sj3);
IkReal x1286=(sj1*x1285);
IkReal x1287=((4.0)*cj4*r00);
IkReal x1288=(((cj1*x1274*x1284))+((sj1*x1284*x1287))+((sj1*x1274*x1276))+((x1274*x1286)));
IkReal x1289=(((cj1*x1274*x1278))+((cj1*x1285*x1287))+((cj1*x1276*x1287))+((sj1*x1278*x1287)));
IkReal x1290=(x1289+(((-1.0)*x1288)));
IkReal x1291=(((x1278*x1279*x1281))+((x1276*x1279*x1283))+((cj1*x1277*x1284))+(((-1.0)*x1279*x1281*x1284))+((x1277*x1286))+((x1279*x1283*x1285))+(((-1.0)*cj1*x1277*x1278))+((sj1*x1276*x1277)));
IkReal x1292=(x1288+(((-1.0)*x1289)));
op[0]=x1290;
op[1]=x1291;
op[2]=x1290;
op[3]=(((x1279*x1280*x1285))+((sj1*x1275*x1276))+((x1275*x1286))+((x1278*x1279*x1282))+((x1276*x1279*x1280))+((cj1*x1275*x1284))+(((-1.0)*cj1*x1275*x1278))+(((-1.0)*x1279*x1282*x1284)));
op[4]=x1292;
op[5]=x1291;
op[6]=x1292;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1293=(cj5*sj4);
IkReal x1294=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1293))+((r01*x1294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1293))+(((-1.0)*r11*x1294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1293))+((r01*x1294))))+IKsqr((((r10*x1293))+(((-1.0)*r11*x1294))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1293))+((r01*x1294))), (((r10*x1293))+(((-1.0)*r11*x1294))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1295=IKcos(j0);
IkReal x1296=IKsin(j0);
IkReal x1297=((0.1)*sj5);
IkReal x1298=((0.392)*sj1);
IkReal x1299=(cj5*r11);
IkReal x1300=((1.0)*cj3);
IkReal x1301=((0.425)*cj1);
IkReal x1302=((1.0)*cj1);
IkReal x1303=(r11*sj5);
IkReal x1304=(cj5*r01);
IkReal x1305=(r01*sj5);
IkReal x1306=(cj3*cj4);
IkReal x1307=(r00*sj5);
IkReal x1308=((1.0)*sj1);
IkReal x1309=(r10*sj5);
IkReal x1310=(sj2*x1296);
IkReal x1311=(cj4*cj5*r00);
IkReal x1312=(sj2*x1295);
IkReal x1313=(cj4*cj5*r10);
IkReal x1314=((1.0)*cj4*sj3);
IkReal x1315=((0.392)*cj1*cj2);
IkReal x1316=(cj2*x1295);
IkReal x1317=((1.0)*cj5*sj4);
IkReal x1318=(cj2*x1296);
evalcond[0]=(x1295+((sj4*x1303))+(((-1.0)*r10*x1317)));
evalcond[1]=((((-1.0)*r00*x1317))+(((-1.0)*x1296))+((sj4*x1305)));
evalcond[2]=((((-1.0)*x1300*x1311))+((x1305*x1306))+((sj3*x1304))+((sj3*x1307))+(((-1.0)*x1302*x1316))+((sj1*x1312)));
evalcond[3]=((((-1.0)*x1300*x1313))+((sj3*x1299))+((sj3*x1309))+((x1303*x1306))+(((-1.0)*x1302*x1318))+((sj1*x1310)));
evalcond[4]=(((sj3*x1311))+(((-1.0)*x1308*x1316))+(((-1.0)*x1305*x1314))+((cj3*x1304))+((cj3*x1307))+(((-1.0)*x1302*x1312)));
evalcond[5]=(((sj3*x1313))+((cj3*x1299))+(((-1.0)*x1308*x1318))+(((-1.0)*x1303*x1314))+((cj3*x1309))+(((-1.0)*x1302*x1310)));
evalcond[6]=((((-1.0)*r00*x1297))+(((-0.134)*x1296))+((x1295*x1301))+(((-1.0)*px))+((x1295*x1315))+(((-0.1)*x1304))+(((-1.0)*x1298*x1312)));
evalcond[7]=((((0.134)*x1295))+(((-1.0)*py))+((x1296*x1315))+(((-1.0)*x1298*x1310))+(((-0.1)*x1299))+((x1296*x1301))+(((-1.0)*r10*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1321 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1321.valid){
continue;
}
IkReal x1319=((1.0)*(x1321.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1322.valid){
continue;
}
if( (((-1.0)*(x1322.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1322.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1320=((-1.0)*(IKasin(((-1.0)*(x1322.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1320))+(((-1.0)*x1319)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1319))+(((1.0)*x1320)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1323=cj5*cj5;
IkReal x1324=r21*r21;
IkReal x1325=(sj3*x1323);
IkReal x1326=(((sj3*(r22*r22)))+((sj3*x1324))+(((-1.0)*x1324*x1325))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1325*(r20*r20))));
j4eval[0]=x1326;
j4eval[1]=IKsign(x1326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1327=cj5*cj5;
IkReal x1328=r21*r21;
IkReal x1329=((1.0)*cj3);
IkReal x1330=(cj3*x1327);
IkReal x1331=((((-1.0)*x1328*x1329))+((x1328*x1330))+(((-1.0)*x1327*x1329*(r20*r20)))+(((-1.0)*x1329*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1331;
j4eval[1]=IKsign(x1331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1332=cj1*cj1;
IkReal x1333=cj2*cj2;
IkReal x1334=(cj2*x1332);
IkReal x1335=(cj1*sj1*sj2);
IkReal x1336=(x1332*x1333);
j0eval[0]=((6.36549089425466)+x1332+(((12.3585920403546)*x1334))+(((-5.69949185861059)*x1333))+(((-11.3989837172212)*cj2*x1335))+(((11.3989837172212)*x1336))+(((-12.3585920403546)*x1335)));
j0eval[1]=IKsign(((42905.0)+(((76832.0)*x1336))+(((-83300.0)*x1335))+(((-38416.0)*x1333))+(((6740.25)*x1332))+(((-76832.0)*cj2*x1335))+(((83300.0)*x1334))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1337=((1.0)*cj5);
IkReal x1338=((1.0)*sj5);
IkReal x1339=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1339;
j0eval[1]=((IKabs(((((-1.0)*r00*x1338))+(((-1.0)*r01*x1337)))))+(IKabs(((((-1.0)*r10*x1338))+(((-1.0)*r11*x1337))))));
j0eval[2]=IKsign(x1339);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1340=cj5*cj5;
IkReal x1341=r21*r21;
IkReal x1342=(sj1*sj2);
IkReal x1343=(r21*sj5);
IkReal x1344=(cj5*r20);
IkReal x1345=(cj1*cj2);
IkReal x1346=(x1341+(r22*r22)+(((-1.0)*x1340*x1341))+((x1340*(r20*r20)))+(((-2.0)*x1343*x1344)));
j4eval[0]=x1346;
j4eval[1]=IKsign(x1346);
j4eval[2]=((IKabs((((x1344*x1345))+(((-1.0)*x1342*x1344))+((x1342*x1343))+(((-1.0)*x1343*x1345)))))+(IKabs((((r22*x1342))+(((-1.0)*r22*x1345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1347=IKcos(j0);
IkReal x1348=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x1348))+(((0.425)*x1347)));
evalcond[1]=((((0.134)*x1347))+(((-1.0)*py))+(((0.425)*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1349=((1.0)*cj5);
IkReal x1350=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1349)));
j4eval[0]=x1350;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1349))))));
j4eval[2]=IKsign(x1350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1351=((1.0)*cj5);
IkReal x1352=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1351)));
j4eval[0]=x1352;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1351)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1353=cj5*cj5;
IkReal x1354=((1.0)*sj5);
IkReal x1355=(cj5*r20);
IkReal x1356=(r11*r21);
IkReal x1357=(x1356+((r10*r20*x1353))+(((-1.0)*r11*x1354*x1355))+(((-1.0)*cj5*r10*r21*x1354))+((r12*r22))+(((-1.0)*x1353*x1356)));
j4eval[0]=x1357;
j4eval[1]=IKsign(x1357);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1354))+((cj0*x1355)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1358=cj5*cj5;
IkReal x1359=((1.0)*sj5);
IkReal x1360=(cj5*r20);
IkReal x1361=(r11*r21);
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1359))+((cj0*x1360)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(IKsign((x1361+(((-1.0)*r11*x1359*x1360))+((r10*r20*x1358))+(((-1.0)*cj5*r10*r21*x1359))+((r12*r22))+(((-1.0)*x1358*x1361)))),-1);
if(!x1363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1362.value)+(((1.5707963267949)*(x1363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1364=IKsin(j4);
IkReal x1365=IKcos(j4);
IkReal x1366=((1.0)*sj0);
IkReal x1367=(cj5*r00);
IkReal x1368=(r11*sj5);
IkReal x1369=(cj5*r10);
IkReal x1370=(r21*sj5);
IkReal x1371=(cj5*r20);
IkReal x1372=(r01*sj5);
IkReal x1373=((1.0)*x1365);
IkReal x1374=((1.0)*x1364);
evalcond[0]=((((-1.0)*x1371*x1374))+(((-1.0)*r22*x1373))+((x1364*x1370)));
evalcond[1]=(((x1365*x1371))+(((-1.0)*x1370*x1373))+(((-1.0)*r22*x1374)));
evalcond[2]=(cj0+((x1364*x1368))+(((-1.0)*r12*x1373))+(((-1.0)*x1369*x1374)));
evalcond[3]=((((-1.0)*r02*x1373))+(((-1.0)*x1367*x1374))+((x1364*x1372))+(((-1.0)*x1366)));
evalcond[4]=((((-1.0)*x1372*x1373))+(((-1.0)*r02*x1374))+((x1365*x1367))+(((-1.0)*cj0)));
evalcond[5]=(((x1365*x1369))+(((-1.0)*r12*x1374))+(((-1.0)*x1368*x1373))+(((-1.0)*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1375=((1.0)*cj5);
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1375)))),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1375))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1378=IKsin(j4);
IkReal x1379=IKcos(j4);
IkReal x1380=((1.0)*sj0);
IkReal x1381=(cj5*r00);
IkReal x1382=(r11*sj5);
IkReal x1383=(cj5*r10);
IkReal x1384=(r21*sj5);
IkReal x1385=(cj5*r20);
IkReal x1386=(r01*sj5);
IkReal x1387=((1.0)*x1379);
IkReal x1388=((1.0)*x1378);
evalcond[0]=((((-1.0)*r22*x1387))+((x1378*x1384))+(((-1.0)*x1385*x1388)));
evalcond[1]=((((-1.0)*x1384*x1387))+((x1379*x1385))+(((-1.0)*r22*x1388)));
evalcond[2]=((((-1.0)*r12*x1387))+(((-1.0)*x1383*x1388))+cj0+((x1378*x1382)));
evalcond[3]=((((-1.0)*x1380))+(((-1.0)*r02*x1387))+(((-1.0)*x1381*x1388))+((x1378*x1386)));
evalcond[4]=((((-1.0)*r02*x1388))+((x1379*x1381))+(((-1.0)*x1386*x1387))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1388))+(((-1.0)*x1380))+(((-1.0)*x1382*x1387))+((x1379*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1389=((1.0)*cj5);
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1389))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1389)))),-1);
if(!x1391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1390.value)+(((1.5707963267949)*(x1391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1392=IKsin(j4);
IkReal x1393=IKcos(j4);
IkReal x1394=((1.0)*sj0);
IkReal x1395=(cj5*r00);
IkReal x1396=(r11*sj5);
IkReal x1397=(cj5*r10);
IkReal x1398=(r21*sj5);
IkReal x1399=(cj5*r20);
IkReal x1400=(r01*sj5);
IkReal x1401=((1.0)*x1393);
IkReal x1402=((1.0)*x1392);
evalcond[0]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1401))+((x1392*x1398)));
evalcond[1]=(((x1393*x1399))+(((-1.0)*x1398*x1401))+(((-1.0)*r22*x1402)));
evalcond[2]=((((-1.0)*r12*x1401))+cj0+((x1392*x1396))+(((-1.0)*x1397*x1402)));
evalcond[3]=(((x1392*x1400))+(((-1.0)*r02*x1401))+(((-1.0)*x1395*x1402))+(((-1.0)*x1394)));
evalcond[4]=(((x1393*x1395))+(((-1.0)*r02*x1402))+(((-1.0)*x1400*x1401))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1402))+((x1393*x1397))+(((-1.0)*x1396*x1401))+(((-1.0)*x1394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1403=IKcos(j0);
IkReal x1404=IKsin(j0);
evalcond[0]=((((-0.134)*x1404))+(((-1.0)*px))+(((0.425)*x1403)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1404))+(((0.134)*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1405=((1.0)*cj5);
IkReal x1406=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1405)));
j4eval[0]=x1406;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1405)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1407=cj5*cj5;
IkReal x1408=((1.0)*r21);
IkReal x1409=(cj5*sj5);
IkReal x1410=((1.0)*r20);
IkReal x1411=((((-1.0)*r01*x1409*x1410))+((r01*r21))+(((-1.0)*r01*x1407*x1408))+(((-1.0)*r00*x1408*x1409))+((r00*r20*x1407))+((r02*r22)));
j4eval[0]=x1411;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1410)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1412=cj5*cj5;
IkReal x1413=(r21*sj5);
IkReal x1414=(r11*r21);
IkReal x1415=((1.0)*cj5*r20);
IkReal x1416=((((-1.0)*cj5*r10*x1413))+((r12*r22))+(((-1.0)*r11*sj5*x1415))+((r10*r20*x1412))+x1414+(((-1.0)*x1412*x1414)));
j4eval[0]=x1416;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1415))+((sj0*x1413))))));
j4eval[2]=IKsign(x1416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1417=cj5*cj5;
IkReal x1418=(r21*sj5);
IkReal x1419=(r11*r21);
IkReal x1420=((1.0)*cj5*r20);
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1420))+(((-1.0)*cj5*r10*x1418))+((r12*r22))+((r10*r20*x1417))+x1419+(((-1.0)*x1417*x1419)))),-1);
if(!x1421.valid){
continue;
}
CheckValue<IkReal> x1422 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1420))+((sj0*x1418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1421.value)))+(x1422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1423=IKsin(j4);
IkReal x1424=IKcos(j4);
IkReal x1425=(r11*sj5);
IkReal x1426=(cj5*r00);
IkReal x1427=(cj5*r10);
IkReal x1428=(r21*sj5);
IkReal x1429=(cj5*r20);
IkReal x1430=(r01*sj5);
IkReal x1431=((1.0)*x1424);
IkReal x1432=((1.0)*x1423);
evalcond[0]=(((x1423*x1428))+(((-1.0)*x1429*x1432))+(((-1.0)*r22*x1431)));
evalcond[1]=(((x1424*x1429))+(((-1.0)*r22*x1432))+(((-1.0)*x1428*x1431)));
evalcond[2]=((((-1.0)*r12*x1431))+cj0+((x1423*x1425))+(((-1.0)*x1427*x1432)));
evalcond[3]=(((x1424*x1426))+cj0+(((-1.0)*r02*x1432))+(((-1.0)*x1430*x1431)));
evalcond[4]=(((x1424*x1427))+(((-1.0)*r12*x1432))+sj0+(((-1.0)*x1425*x1431)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1431))+(((-1.0)*x1426*x1432))+((x1423*x1430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1433=cj5*cj5;
IkReal x1434=((1.0)*r21);
IkReal x1435=(cj5*sj5);
IkReal x1436=((1.0)*r20);
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1434*x1435))+(((-1.0)*r01*x1433*x1434))+((r01*r21))+(((-1.0)*r01*x1435*x1436))+((r00*r20*x1433))+((r02*r22)))),-1);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1437.value)))+(x1438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1439=IKsin(j4);
IkReal x1440=IKcos(j4);
IkReal x1441=(r11*sj5);
IkReal x1442=(cj5*r00);
IkReal x1443=(cj5*r10);
IkReal x1444=(r21*sj5);
IkReal x1445=(cj5*r20);
IkReal x1446=(r01*sj5);
IkReal x1447=((1.0)*x1440);
IkReal x1448=((1.0)*x1439);
evalcond[0]=((((-1.0)*r22*x1447))+((x1439*x1444))+(((-1.0)*x1445*x1448)));
evalcond[1]=((((-1.0)*r22*x1448))+((x1440*x1445))+(((-1.0)*x1444*x1447)));
evalcond[2]=(((x1439*x1441))+cj0+(((-1.0)*r12*x1447))+(((-1.0)*x1443*x1448)));
evalcond[3]=((((-1.0)*x1446*x1447))+cj0+((x1440*x1442))+(((-1.0)*r02*x1448)));
evalcond[4]=(sj0+((x1440*x1443))+(((-1.0)*r12*x1448))+(((-1.0)*x1441*x1447)));
evalcond[5]=((((-1.0)*sj0))+((x1439*x1446))+(((-1.0)*r02*x1447))+(((-1.0)*x1442*x1448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1449=((1.0)*cj5);
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1449))+(((-1.0)*r00*sj5)))),-1);
if(!x1451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1450.value)+(((1.5707963267949)*(x1451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1452=IKsin(j4);
IkReal x1453=IKcos(j4);
IkReal x1454=(r11*sj5);
IkReal x1455=(cj5*r00);
IkReal x1456=(cj5*r10);
IkReal x1457=(r21*sj5);
IkReal x1458=(cj5*r20);
IkReal x1459=(r01*sj5);
IkReal x1460=((1.0)*x1453);
IkReal x1461=((1.0)*x1452);
evalcond[0]=((((-1.0)*x1458*x1461))+(((-1.0)*r22*x1460))+((x1452*x1457)));
evalcond[1]=((((-1.0)*r22*x1461))+(((-1.0)*x1457*x1460))+((x1453*x1458)));
evalcond[2]=(cj0+(((-1.0)*x1456*x1461))+(((-1.0)*r12*x1460))+((x1452*x1454)));
evalcond[3]=((((-1.0)*r02*x1461))+cj0+(((-1.0)*x1459*x1460))+((x1453*x1455)));
evalcond[4]=(sj0+(((-1.0)*x1454*x1460))+(((-1.0)*r12*x1461))+((x1453*x1456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1460))+(((-1.0)*x1455*x1461))+((x1452*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1462=((1.0)*cj5);
IkReal x1463=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1462)));
j4eval[0]=x1463;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1462)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1464=((1.0)*cj5);
IkReal x1465=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1464)));
j4eval[0]=x1465;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1464))))));
j4eval[2]=IKsign(x1465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1466=cj5*cj5;
IkReal x1467=((1.0)*sj5);
IkReal x1468=(cj5*r20);
IkReal x1469=(r11*r21);
IkReal x1470=((((-1.0)*r11*x1467*x1468))+(((-1.0)*cj5*r10*r21*x1467))+((r12*r22))+((r10*r20*x1466))+(((-1.0)*x1466*x1469))+x1469);
j4eval[0]=x1470;
j4eval[1]=IKsign(x1470);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1468))+(((-1.0)*cj0*r21*x1467))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1471=cj5*cj5;
IkReal x1472=((1.0)*sj5);
IkReal x1473=(cj5*r20);
IkReal x1474=(r11*r21);
CheckValue<IkReal> x1475=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1472))+(((-1.0)*r11*x1472*x1473))+((r12*r22))+(((-1.0)*x1471*x1474))+x1474+((r10*r20*x1471)))),-1);
if(!x1475.valid){
continue;
}
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1472))+((cj0*x1473)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1475.value)))+(x1476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1477=IKsin(j4);
IkReal x1478=IKcos(j4);
IkReal x1479=((1.0)*sj0);
IkReal x1480=(cj5*r00);
IkReal x1481=(r11*sj5);
IkReal x1482=(cj5*r10);
IkReal x1483=(r21*sj5);
IkReal x1484=(cj5*r20);
IkReal x1485=(r01*sj5);
IkReal x1486=((1.0)*x1478);
IkReal x1487=((1.0)*x1477);
evalcond[0]=(((x1477*x1483))+(((-1.0)*x1484*x1487))+(((-1.0)*r22*x1486)));
evalcond[1]=((((-1.0)*x1483*x1486))+(((-1.0)*r22*x1487))+((x1478*x1484)));
evalcond[2]=((((-1.0)*x1482*x1487))+cj0+(((-1.0)*r12*x1486))+((x1477*x1481)));
evalcond[3]=(((x1477*x1485))+(((-1.0)*x1480*x1487))+(((-1.0)*r02*x1486))+(((-1.0)*x1479)));
evalcond[4]=((((-1.0)*x1485*x1486))+(((-1.0)*r02*x1487))+((x1478*x1480))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1487))+(((-1.0)*x1481*x1486))+(((-1.0)*x1479))+((x1478*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=((1.0)*cj5);
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1488))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1488))+(((-1.0)*r10*sj5)))),-1);
if(!x1490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1489.value)+(((1.5707963267949)*(x1490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1491=IKsin(j4);
IkReal x1492=IKcos(j4);
IkReal x1493=((1.0)*sj0);
IkReal x1494=(cj5*r00);
IkReal x1495=(r11*sj5);
IkReal x1496=(cj5*r10);
IkReal x1497=(r21*sj5);
IkReal x1498=(cj5*r20);
IkReal x1499=(r01*sj5);
IkReal x1500=((1.0)*x1492);
IkReal x1501=((1.0)*x1491);
evalcond[0]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1500))+((x1491*x1497)));
evalcond[1]=((((-1.0)*r22*x1501))+((x1492*x1498))+(((-1.0)*x1497*x1500)));
evalcond[2]=(cj0+((x1491*x1495))+(((-1.0)*x1496*x1501))+(((-1.0)*r12*x1500)));
evalcond[3]=((((-1.0)*x1493))+(((-1.0)*x1494*x1501))+((x1491*x1499))+(((-1.0)*r02*x1500)));
evalcond[4]=((((-1.0)*x1499*x1500))+(((-1.0)*r02*x1501))+((x1492*x1494))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1493))+((x1492*x1496))+(((-1.0)*x1495*x1500))+(((-1.0)*r12*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1502=((1.0)*cj5);
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1502))+(((-1.0)*r00*sj5)))),-1);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1502))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1503.value)))+(x1504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1505=IKsin(j4);
IkReal x1506=IKcos(j4);
IkReal x1507=((1.0)*sj0);
IkReal x1508=(cj5*r00);
IkReal x1509=(r11*sj5);
IkReal x1510=(cj5*r10);
IkReal x1511=(r21*sj5);
IkReal x1512=(cj5*r20);
IkReal x1513=(r01*sj5);
IkReal x1514=((1.0)*x1506);
IkReal x1515=((1.0)*x1505);
evalcond[0]=((((-1.0)*r22*x1514))+(((-1.0)*x1512*x1515))+((x1505*x1511)));
evalcond[1]=((((-1.0)*r22*x1515))+((x1506*x1512))+(((-1.0)*x1511*x1514)));
evalcond[2]=(cj0+(((-1.0)*x1510*x1515))+((x1505*x1509))+(((-1.0)*r12*x1514)));
evalcond[3]=((((-1.0)*x1507))+(((-1.0)*r02*x1514))+((x1505*x1513))+(((-1.0)*x1508*x1515)));
evalcond[4]=((((-1.0)*x1513*x1514))+((x1506*x1508))+(((-1.0)*r02*x1515))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1507))+((x1506*x1510))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1516=((1.0)*cj5);
IkReal x1517=((((-1.0)*r01*x1516))+(((-1.0)*r00*sj5)));
j4eval[0]=x1517;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1516))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1518=cj5*cj5;
IkReal x1519=((1.0)*r21);
IkReal x1520=(cj5*sj5);
IkReal x1521=((1.0)*r20);
IkReal x1522=((((-1.0)*r01*x1520*x1521))+(((-1.0)*r00*x1519*x1520))+((r01*r21))+(((-1.0)*r01*x1518*x1519))+((r02*r22))+((r00*r20*x1518)));
j4eval[0]=x1522;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1521)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1523=cj5*cj5;
IkReal x1524=(r21*sj5);
IkReal x1525=(r11*r21);
IkReal x1526=((1.0)*cj5*r20);
IkReal x1527=(((r12*r22))+(((-1.0)*r11*sj5*x1526))+x1525+(((-1.0)*cj5*r10*x1524))+((r10*r20*x1523))+(((-1.0)*x1523*x1525)));
j4eval[0]=x1527;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1526))+((sj0*x1524)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1528=cj5*cj5;
IkReal x1529=(r21*sj5);
IkReal x1530=(r11*r21);
IkReal x1531=((1.0)*cj5*r20);
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x1528*x1530))+x1530+(((-1.0)*r11*sj5*x1531))+(((-1.0)*cj5*r10*x1529))+((r10*r20*x1528)))),-1);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1531))+((sj0*x1529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1532.value)))+(x1533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1534=IKsin(j4);
IkReal x1535=IKcos(j4);
IkReal x1536=(r11*sj5);
IkReal x1537=(cj5*r00);
IkReal x1538=(cj5*r10);
IkReal x1539=(r21*sj5);
IkReal x1540=(cj5*r20);
IkReal x1541=(r01*sj5);
IkReal x1542=((1.0)*x1535);
IkReal x1543=((1.0)*x1534);
evalcond[0]=((((-1.0)*x1540*x1543))+(((-1.0)*r22*x1542))+((x1534*x1539)));
evalcond[1]=((((-1.0)*r22*x1543))+(((-1.0)*x1539*x1542))+((x1535*x1540)));
evalcond[2]=(cj0+((x1534*x1536))+(((-1.0)*r12*x1542))+(((-1.0)*x1538*x1543)));
evalcond[3]=((((-1.0)*r02*x1543))+cj0+((x1535*x1537))+(((-1.0)*x1541*x1542)));
evalcond[4]=(sj0+(((-1.0)*x1536*x1542))+((x1535*x1538))+(((-1.0)*r12*x1543)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1542))+((x1534*x1541))+(((-1.0)*x1537*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1544=cj5*cj5;
IkReal x1545=((1.0)*r21);
IkReal x1546=(cj5*sj5);
IkReal x1547=((1.0)*r20);
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1546*x1547))+(((-1.0)*r01*x1544*x1545))+((r00*r20*x1544))+(((-1.0)*r00*x1545*x1546))+((r02*r22)))),-1);
if(!x1548.valid){
continue;
}
CheckValue<IkReal> x1549 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1548.value)))+(x1549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1550=IKsin(j4);
IkReal x1551=IKcos(j4);
IkReal x1552=(r11*sj5);
IkReal x1553=(cj5*r00);
IkReal x1554=(cj5*r10);
IkReal x1555=(r21*sj5);
IkReal x1556=(cj5*r20);
IkReal x1557=(r01*sj5);
IkReal x1558=((1.0)*x1551);
IkReal x1559=((1.0)*x1550);
evalcond[0]=((((-1.0)*r22*x1558))+((x1550*x1555))+(((-1.0)*x1556*x1559)));
evalcond[1]=(((x1551*x1556))+(((-1.0)*r22*x1559))+(((-1.0)*x1555*x1558)));
evalcond[2]=(cj0+((x1550*x1552))+(((-1.0)*r12*x1558))+(((-1.0)*x1554*x1559)));
evalcond[3]=(((x1551*x1553))+cj0+(((-1.0)*r02*x1559))+(((-1.0)*x1557*x1558)));
evalcond[4]=(((x1551*x1554))+sj0+(((-1.0)*x1552*x1558))+(((-1.0)*r12*x1559)));
evalcond[5]=((((-1.0)*sj0))+((x1550*x1557))+(((-1.0)*r02*x1558))+(((-1.0)*x1553*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1560=((1.0)*cj5);
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1560)))),-1);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1561.value)))+(x1562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1563=IKsin(j4);
IkReal x1564=IKcos(j4);
IkReal x1565=(r11*sj5);
IkReal x1566=(cj5*r00);
IkReal x1567=(cj5*r10);
IkReal x1568=(r21*sj5);
IkReal x1569=(cj5*r20);
IkReal x1570=(r01*sj5);
IkReal x1571=((1.0)*x1564);
IkReal x1572=((1.0)*x1563);
evalcond[0]=((((-1.0)*r22*x1571))+(((-1.0)*x1569*x1572))+((x1563*x1568)));
evalcond[1]=((((-1.0)*r22*x1572))+(((-1.0)*x1568*x1571))+((x1564*x1569)));
evalcond[2]=(cj0+(((-1.0)*x1567*x1572))+(((-1.0)*r12*x1571))+((x1563*x1565)));
evalcond[3]=((((-1.0)*r02*x1572))+cj0+(((-1.0)*x1570*x1571))+((x1564*x1566)));
evalcond[4]=((((-1.0)*x1565*x1571))+sj0+(((-1.0)*r12*x1572))+((x1564*x1567)));
evalcond[5]=((((-1.0)*r02*x1571))+(((-1.0)*sj0))+(((-1.0)*x1566*x1572))+((x1563*x1570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1573=IKcos(j0);
IkReal x1574=IKsin(j0);
evalcond[0]=((((-0.425)*x1573))+(((-0.134)*x1574))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1574))+(((0.134)*x1573))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1575=((1.0)*cj5);
IkReal x1576=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1575)));
j4eval[0]=x1576;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1575)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1577=cj5*cj5;
IkReal x1578=((1.0)*r21);
IkReal x1579=(cj5*sj5);
IkReal x1580=((1.0)*r20);
IkReal x1581=((((-1.0)*r00*x1578*x1579))+((r01*r21))+((r00*r20*x1577))+(((-1.0)*r01*x1577*x1578))+(((-1.0)*r01*x1579*x1580))+((r02*r22)));
j4eval[0]=x1581;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1580))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1582=cj5*cj5;
IkReal x1583=(r21*sj5);
IkReal x1584=(r11*r21);
IkReal x1585=((1.0)*cj5*r20);
IkReal x1586=((((-1.0)*cj5*r10*x1583))+((r10*r20*x1582))+(((-1.0)*x1582*x1584))+((r12*r22))+x1584+(((-1.0)*r11*sj5*x1585)));
j4eval[0]=x1586;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1585))+((sj0*x1583)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1587=cj5*cj5;
IkReal x1588=(r21*sj5);
IkReal x1589=(r11*r21);
IkReal x1590=((1.0)*cj5*r20);
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1590))+((sj0*x1588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1588))+((r10*r20*x1587))+(((-1.0)*x1587*x1589))+((r12*r22))+x1589+(((-1.0)*r11*sj5*x1590)))),-1);
if(!x1592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1591.value)+(((1.5707963267949)*(x1592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1593=IKsin(j4);
IkReal x1594=IKcos(j4);
IkReal x1595=(r11*sj5);
IkReal x1596=(cj5*r00);
IkReal x1597=(cj5*r10);
IkReal x1598=(r21*sj5);
IkReal x1599=(cj5*r20);
IkReal x1600=(r01*sj5);
IkReal x1601=((1.0)*x1594);
IkReal x1602=((1.0)*x1593);
evalcond[0]=(((x1593*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1599*x1602)));
evalcond[1]=(((x1594*x1599))+(((-1.0)*r22*x1602))+(((-1.0)*x1598*x1601)));
evalcond[2]=(cj0+((x1593*x1595))+(((-1.0)*x1597*x1602))+(((-1.0)*r12*x1601)));
evalcond[3]=(cj0+((x1594*x1596))+(((-1.0)*x1600*x1601))+(((-1.0)*r02*x1602)));
evalcond[4]=(sj0+((x1594*x1597))+(((-1.0)*x1595*x1601))+(((-1.0)*r12*x1602)));
evalcond[5]=((((-1.0)*sj0))+((x1593*x1600))+(((-1.0)*r02*x1601))+(((-1.0)*x1596*x1602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1603=cj5*cj5;
IkReal x1604=((1.0)*r21);
IkReal x1605=(cj5*sj5);
IkReal x1606=((1.0)*r20);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign((((r00*r20*x1603))+((r01*r21))+(((-1.0)*r01*x1603*x1604))+((r02*r22))+(((-1.0)*r01*x1605*x1606))+(((-1.0)*r00*x1604*x1605)))),-1);
if(!x1608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1607.value)+(((1.5707963267949)*(x1608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1609=IKsin(j4);
IkReal x1610=IKcos(j4);
IkReal x1611=(r11*sj5);
IkReal x1612=(cj5*r00);
IkReal x1613=(cj5*r10);
IkReal x1614=(r21*sj5);
IkReal x1615=(cj5*r20);
IkReal x1616=(r01*sj5);
IkReal x1617=((1.0)*x1610);
IkReal x1618=((1.0)*x1609);
evalcond[0]=(((x1609*x1614))+(((-1.0)*r22*x1617))+(((-1.0)*x1615*x1618)));
evalcond[1]=((((-1.0)*r22*x1618))+(((-1.0)*x1614*x1617))+((x1610*x1615)));
evalcond[2]=((((-1.0)*r12*x1617))+cj0+((x1609*x1611))+(((-1.0)*x1613*x1618)));
evalcond[3]=(cj0+(((-1.0)*x1616*x1617))+(((-1.0)*r02*x1618))+((x1610*x1612)));
evalcond[4]=((((-1.0)*r12*x1618))+sj0+(((-1.0)*x1611*x1617))+((x1610*x1613)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1617))+((x1609*x1616))+(((-1.0)*x1612*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1619=((1.0)*cj5);
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1619))+(((-1.0)*r00*sj5)))),-1);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1620.value)))+(x1621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1622=IKsin(j4);
IkReal x1623=IKcos(j4);
IkReal x1624=(r11*sj5);
IkReal x1625=(cj5*r00);
IkReal x1626=(cj5*r10);
IkReal x1627=(r21*sj5);
IkReal x1628=(cj5*r20);
IkReal x1629=(r01*sj5);
IkReal x1630=((1.0)*x1623);
IkReal x1631=((1.0)*x1622);
evalcond[0]=((((-1.0)*r22*x1630))+((x1622*x1627))+(((-1.0)*x1628*x1631)));
evalcond[1]=((((-1.0)*r22*x1631))+((x1623*x1628))+(((-1.0)*x1627*x1630)));
evalcond[2]=(cj0+(((-1.0)*r12*x1630))+((x1622*x1624))+(((-1.0)*x1626*x1631)));
evalcond[3]=(cj0+((x1623*x1625))+(((-1.0)*x1629*x1630))+(((-1.0)*r02*x1631)));
evalcond[4]=(sj0+(((-1.0)*r12*x1631))+((x1623*x1626))+(((-1.0)*x1624*x1630)));
evalcond[5]=((((-1.0)*sj0))+((x1622*x1629))+(((-1.0)*x1625*x1631))+(((-1.0)*r02*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1632=IKcos(j0);
IkReal x1633=IKsin(j0);
evalcond[0]=((((-0.134)*x1633))+(((-1.0)*px))+(((-0.425)*x1632)));
evalcond[1]=((((0.134)*x1632))+(((-1.0)*py))+(((-0.425)*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1634=((1.0)*cj5);
IkReal x1635=((((-1.0)*r01*x1634))+(((-1.0)*r00*sj5)));
j4eval[0]=x1635;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1634)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1636=((1.0)*cj5);
IkReal x1637=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1636)));
j4eval[0]=x1637;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1636))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1638=cj5*cj5;
IkReal x1639=((1.0)*sj5);
IkReal x1640=(cj5*r20);
IkReal x1641=(r11*r21);
IkReal x1642=((((-1.0)*x1638*x1641))+x1641+(((-1.0)*cj5*r10*r21*x1639))+((r12*r22))+((r10*r20*x1638))+(((-1.0)*r11*x1639*x1640)));
j4eval[0]=x1642;
j4eval[1]=IKsign(x1642);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1639))+((cj0*x1640)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1643=cj5*cj5;
IkReal x1644=((1.0)*sj5);
IkReal x1645=(cj5*r20);
IkReal x1646=(r11*r21);
CheckValue<IkReal> x1647=IKPowWithIntegerCheck(IKsign((x1646+(((-1.0)*cj5*r10*r21*x1644))+((r12*r22))+(((-1.0)*r11*x1644*x1645))+((r10*r20*x1643))+(((-1.0)*x1643*x1646)))),-1);
if(!x1647.valid){
continue;
}
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1644))+((cj0*x1645)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1647.value)))+(x1648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1649=IKsin(j4);
IkReal x1650=IKcos(j4);
IkReal x1651=((1.0)*sj0);
IkReal x1652=(cj5*r00);
IkReal x1653=(r11*sj5);
IkReal x1654=(cj5*r10);
IkReal x1655=(r21*sj5);
IkReal x1656=(cj5*r20);
IkReal x1657=(r01*sj5);
IkReal x1658=((1.0)*x1650);
IkReal x1659=((1.0)*x1649);
evalcond[0]=((((-1.0)*x1656*x1659))+(((-1.0)*r22*x1658))+((x1649*x1655)));
evalcond[1]=(((x1650*x1656))+(((-1.0)*r22*x1659))+(((-1.0)*x1655*x1658)));
evalcond[2]=(cj0+(((-1.0)*x1654*x1659))+(((-1.0)*r12*x1658))+((x1649*x1653)));
evalcond[3]=((((-1.0)*x1652*x1659))+((x1649*x1657))+(((-1.0)*x1651))+(((-1.0)*r02*x1658)));
evalcond[4]=(((x1650*x1652))+(((-1.0)*x1657*x1658))+(((-1.0)*r02*x1659))+(((-1.0)*cj0)));
evalcond[5]=(((x1650*x1654))+(((-1.0)*x1653*x1658))+(((-1.0)*r12*x1659))+(((-1.0)*x1651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1660=((1.0)*cj5);
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1660))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1660)))),-1);
if(!x1662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1661.value)+(((1.5707963267949)*(x1662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1663=IKsin(j4);
IkReal x1664=IKcos(j4);
IkReal x1665=((1.0)*sj0);
IkReal x1666=(cj5*r00);
IkReal x1667=(r11*sj5);
IkReal x1668=(cj5*r10);
IkReal x1669=(r21*sj5);
IkReal x1670=(cj5*r20);
IkReal x1671=(r01*sj5);
IkReal x1672=((1.0)*x1664);
IkReal x1673=((1.0)*x1663);
evalcond[0]=((((-1.0)*x1670*x1673))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[1]=((((-1.0)*x1669*x1672))+(((-1.0)*r22*x1673))+((x1664*x1670)));
evalcond[2]=(cj0+(((-1.0)*x1668*x1673))+(((-1.0)*r12*x1672))+((x1663*x1667)));
evalcond[3]=((((-1.0)*r02*x1672))+(((-1.0)*x1665))+(((-1.0)*x1666*x1673))+((x1663*x1671)));
evalcond[4]=((((-1.0)*r02*x1673))+(((-1.0)*x1671*x1672))+((x1664*x1666))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1667*x1672))+(((-1.0)*r12*x1673))+(((-1.0)*x1665))+((x1664*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=((1.0)*cj5);
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1674)))),-1);
if(!x1676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1675.value)+(((1.5707963267949)*(x1676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1677=IKsin(j4);
IkReal x1678=IKcos(j4);
IkReal x1679=((1.0)*sj0);
IkReal x1680=(cj5*r00);
IkReal x1681=(r11*sj5);
IkReal x1682=(cj5*r10);
IkReal x1683=(r21*sj5);
IkReal x1684=(cj5*r20);
IkReal x1685=(r01*sj5);
IkReal x1686=((1.0)*x1678);
IkReal x1687=((1.0)*x1677);
evalcond[0]=(((x1677*x1683))+(((-1.0)*r22*x1686))+(((-1.0)*x1684*x1687)));
evalcond[1]=((((-1.0)*x1683*x1686))+(((-1.0)*r22*x1687))+((x1678*x1684)));
evalcond[2]=((((-1.0)*r12*x1686))+((x1677*x1681))+cj0+(((-1.0)*x1682*x1687)));
evalcond[3]=(((x1677*x1685))+(((-1.0)*x1680*x1687))+(((-1.0)*r02*x1686))+(((-1.0)*x1679)));
evalcond[4]=((((-1.0)*x1685*x1686))+(((-1.0)*r02*x1687))+((x1678*x1680))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1687))+(((-1.0)*x1681*x1686))+(((-1.0)*x1679))+((x1678*x1682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1688=((1.0)*cj5);
IkReal x1689=((((-1.0)*r01*x1688))+(((-1.0)*r00*sj5)));
j4eval[0]=x1689;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1688)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1690=cj5*cj5;
IkReal x1691=((1.0)*r21);
IkReal x1692=(cj5*sj5);
IkReal x1693=((1.0)*r20);
IkReal x1694=((((-1.0)*r00*x1691*x1692))+(((-1.0)*r01*x1690*x1691))+((r01*r21))+((r00*r20*x1690))+((r02*r22))+(((-1.0)*r01*x1692*x1693)));
j4eval[0]=x1694;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1693))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1695=cj5*cj5;
IkReal x1696=(r21*sj5);
IkReal x1697=(r11*r21);
IkReal x1698=((1.0)*cj5*r20);
IkReal x1699=(x1697+(((-1.0)*x1695*x1697))+((r12*r22))+(((-1.0)*r11*sj5*x1698))+((r10*r20*x1695))+(((-1.0)*cj5*r10*x1696)));
j4eval[0]=x1699;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1698))+((sj0*x1696)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1700=cj5*cj5;
IkReal x1701=(r21*sj5);
IkReal x1702=(r11*r21);
IkReal x1703=((1.0)*cj5*r20);
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1703))+((sj0*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(IKsign((x1702+((r12*r22))+(((-1.0)*r11*sj5*x1703))+((r10*r20*x1700))+(((-1.0)*x1700*x1702))+(((-1.0)*cj5*r10*x1701)))),-1);
if(!x1705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1704.value)+(((1.5707963267949)*(x1705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1706=IKsin(j4);
IkReal x1707=IKcos(j4);
IkReal x1708=(r11*sj5);
IkReal x1709=(cj5*r00);
IkReal x1710=(cj5*r10);
IkReal x1711=(r21*sj5);
IkReal x1712=(cj5*r20);
IkReal x1713=(r01*sj5);
IkReal x1714=((1.0)*x1707);
IkReal x1715=((1.0)*x1706);
evalcond[0]=((((-1.0)*x1712*x1715))+(((-1.0)*r22*x1714))+((x1706*x1711)));
evalcond[1]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1715))+((x1707*x1712)));
evalcond[2]=((((-1.0)*x1710*x1715))+cj0+((x1706*x1708))+(((-1.0)*r12*x1714)));
evalcond[3]=(cj0+(((-1.0)*x1713*x1714))+(((-1.0)*r02*x1715))+((x1707*x1709)));
evalcond[4]=(sj0+(((-1.0)*x1708*x1714))+(((-1.0)*r12*x1715))+((x1707*x1710)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1709*x1715))+(((-1.0)*r02*x1714))+((x1706*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1716=cj5*cj5;
IkReal x1717=((1.0)*r21);
IkReal x1718=(cj5*sj5);
IkReal x1719=((1.0)*r20);
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1717*x1718))+((r00*r20*x1716))+(((-1.0)*r01*x1718*x1719))+((r01*r21))+(((-1.0)*r01*x1716*x1717))+((r02*r22)))),-1);
if(!x1721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1720.value)+(((1.5707963267949)*(x1721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1722=IKsin(j4);
IkReal x1723=IKcos(j4);
IkReal x1724=(r11*sj5);
IkReal x1725=(cj5*r00);
IkReal x1726=(cj5*r10);
IkReal x1727=(r21*sj5);
IkReal x1728=(cj5*r20);
IkReal x1729=(r01*sj5);
IkReal x1730=((1.0)*x1723);
IkReal x1731=((1.0)*x1722);
evalcond[0]=(((x1722*x1727))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1730)));
evalcond[1]=(((x1723*x1728))+(((-1.0)*x1727*x1730))+(((-1.0)*r22*x1731)));
evalcond[2]=(((x1722*x1724))+cj0+(((-1.0)*x1726*x1731))+(((-1.0)*r12*x1730)));
evalcond[3]=(((x1723*x1725))+cj0+(((-1.0)*x1729*x1730))+(((-1.0)*r02*x1731)));
evalcond[4]=(((x1723*x1726))+sj0+(((-1.0)*r12*x1731))+(((-1.0)*x1724*x1730)));
evalcond[5]=(((x1722*x1729))+(((-1.0)*sj0))+(((-1.0)*x1725*x1731))+(((-1.0)*r02*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1732=((1.0)*cj5);
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1732))+(((-1.0)*r00*sj5)))),-1);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1733.value)))+(x1734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1735=IKsin(j4);
IkReal x1736=IKcos(j4);
IkReal x1737=(r11*sj5);
IkReal x1738=(cj5*r00);
IkReal x1739=(cj5*r10);
IkReal x1740=(r21*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=(r01*sj5);
IkReal x1743=((1.0)*x1736);
IkReal x1744=((1.0)*x1735);
evalcond[0]=((((-1.0)*x1741*x1744))+(((-1.0)*r22*x1743))+((x1735*x1740)));
evalcond[1]=(((x1736*x1741))+(((-1.0)*x1740*x1743))+(((-1.0)*r22*x1744)));
evalcond[2]=((((-1.0)*r12*x1743))+cj0+(((-1.0)*x1739*x1744))+((x1735*x1737)));
evalcond[3]=(cj0+((x1736*x1738))+(((-1.0)*x1742*x1743))+(((-1.0)*r02*x1744)));
evalcond[4]=((((-1.0)*r12*x1744))+sj0+((x1736*x1739))+(((-1.0)*x1737*x1743)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1738*x1744))+((x1735*x1742))+(((-1.0)*r02*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1745=((1.0)*cj5);
IkReal x1746=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1745)));
j4eval[0]=x1746;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1745)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1747=((1.0)*cj5);
IkReal x1748=((((-1.0)*r11*x1747))+(((-1.0)*r10*sj5)));
j4eval[0]=x1748;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1747))))));
j4eval[2]=IKsign(x1748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1749=cj5*cj5;
IkReal x1750=((1.0)*sj5);
IkReal x1751=(cj5*r20);
IkReal x1752=(r11*r21);
IkReal x1753=((((-1.0)*r11*x1750*x1751))+((r10*r20*x1749))+(((-1.0)*x1749*x1752))+(((-1.0)*cj5*r10*r21*x1750))+x1752+((r12*r22)));
j4eval[0]=x1753;
j4eval[1]=IKsign(x1753);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1750))+((cj0*x1751)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1754=cj5*cj5;
IkReal x1755=((1.0)*sj5);
IkReal x1756=(cj5*r20);
IkReal x1757=(r11*r21);
CheckValue<IkReal> x1758 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1755))+((cj0*x1756)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1758.valid){
continue;
}
CheckValue<IkReal> x1759=IKPowWithIntegerCheck(IKsign((((r10*r20*x1754))+(((-1.0)*cj5*r10*r21*x1755))+x1757+((r12*r22))+(((-1.0)*r11*x1755*x1756))+(((-1.0)*x1754*x1757)))),-1);
if(!x1759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1758.value)+(((1.5707963267949)*(x1759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1760=IKsin(j4);
IkReal x1761=IKcos(j4);
IkReal x1762=((1.0)*sj0);
IkReal x1763=(cj5*r00);
IkReal x1764=(r11*sj5);
IkReal x1765=(cj5*r10);
IkReal x1766=(r21*sj5);
IkReal x1767=(cj5*r20);
IkReal x1768=(r01*sj5);
IkReal x1769=((1.0)*x1761);
IkReal x1770=((1.0)*x1760);
evalcond[0]=((((-1.0)*x1767*x1770))+(((-1.0)*r22*x1769))+((x1760*x1766)));
evalcond[1]=((((-1.0)*x1766*x1769))+(((-1.0)*r22*x1770))+((x1761*x1767)));
evalcond[2]=(cj0+(((-1.0)*r12*x1769))+(((-1.0)*x1765*x1770))+((x1760*x1764)));
evalcond[3]=((((-1.0)*x1762))+(((-1.0)*r02*x1769))+(((-1.0)*x1763*x1770))+((x1760*x1768)));
evalcond[4]=((((-1.0)*r02*x1770))+((x1761*x1763))+(((-1.0)*x1768*x1769))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1762))+(((-1.0)*x1764*x1769))+((x1761*x1765))+(((-1.0)*r12*x1770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1771=((1.0)*cj5);
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1771)))),-1);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1771))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1772.value)))+(x1773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1774=IKsin(j4);
IkReal x1775=IKcos(j4);
IkReal x1776=((1.0)*sj0);
IkReal x1777=(cj5*r00);
IkReal x1778=(r11*sj5);
IkReal x1779=(cj5*r10);
IkReal x1780=(r21*sj5);
IkReal x1781=(cj5*r20);
IkReal x1782=(r01*sj5);
IkReal x1783=((1.0)*x1775);
IkReal x1784=((1.0)*x1774);
evalcond[0]=((((-1.0)*r22*x1783))+((x1774*x1780))+(((-1.0)*x1781*x1784)));
evalcond[1]=(((x1775*x1781))+(((-1.0)*r22*x1784))+(((-1.0)*x1780*x1783)));
evalcond[2]=(cj0+(((-1.0)*r12*x1783))+(((-1.0)*x1779*x1784))+((x1774*x1778)));
evalcond[3]=(((x1774*x1782))+(((-1.0)*x1777*x1784))+(((-1.0)*x1776))+(((-1.0)*r02*x1783)));
evalcond[4]=(((x1775*x1777))+(((-1.0)*x1782*x1783))+(((-1.0)*r02*x1784))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1784))+(((-1.0)*x1776))+((x1775*x1779))+(((-1.0)*x1778*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1785=((1.0)*cj5);
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1785))+(((-1.0)*r00*sj5)))),-1);
if(!x1786.valid){
continue;
}
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1785))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1786.value)))+(x1787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1788=IKsin(j4);
IkReal x1789=IKcos(j4);
IkReal x1790=((1.0)*sj0);
IkReal x1791=(cj5*r00);
IkReal x1792=(r11*sj5);
IkReal x1793=(cj5*r10);
IkReal x1794=(r21*sj5);
IkReal x1795=(cj5*r20);
IkReal x1796=(r01*sj5);
IkReal x1797=((1.0)*x1789);
IkReal x1798=((1.0)*x1788);
evalcond[0]=((((-1.0)*x1795*x1798))+(((-1.0)*r22*x1797))+((x1788*x1794)));
evalcond[1]=((((-1.0)*r22*x1798))+((x1789*x1795))+(((-1.0)*x1794*x1797)));
evalcond[2]=(cj0+(((-1.0)*r12*x1797))+(((-1.0)*x1793*x1798))+((x1788*x1792)));
evalcond[3]=((((-1.0)*x1790))+(((-1.0)*r02*x1797))+((x1788*x1796))+(((-1.0)*x1791*x1798)));
evalcond[4]=((((-1.0)*x1796*x1797))+((x1789*x1791))+(((-1.0)*r02*x1798))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1792*x1797))+(((-1.0)*x1790))+(((-1.0)*r12*x1798))+((x1789*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1799=(sj1*sj2);
IkReal x1800=(r00*sj5);
IkReal x1801=(cj1*cj2);
IkReal x1802=(cj5*r01);
IkReal x1803=((212.5)*cj1);
IkReal x1804=((500.0)*px);
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(((((-67.0)*x1801))+(((67.0)*x1799))),-1);
if(!x1805.valid){
continue;
}
CheckValue<IkReal> x1806=IKPowWithIntegerCheck((x1799+(((-1.0)*x1801))),-1);
if(!x1806.valid){
continue;
}
if( IKabs(((x1805.value)*((((x1801*x1804))+(((-146.0)*x1800*x1801))+(((-146.0)*x1801*x1802))+(((146.0)*x1799*x1802))+(((146.0)*x1799*x1800))+(((-1.0)*x1799*x1804))+(((-1.0)*x1802*x1803))+(((-1.0)*x1800*x1803)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1806.value)*(((((-1.0)*x1802))+(((-1.0)*x1800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1805.value)*((((x1801*x1804))+(((-146.0)*x1800*x1801))+(((-146.0)*x1801*x1802))+(((146.0)*x1799*x1802))+(((146.0)*x1799*x1800))+(((-1.0)*x1799*x1804))+(((-1.0)*x1802*x1803))+(((-1.0)*x1800*x1803))))))+IKsqr(((x1806.value)*(((((-1.0)*x1802))+(((-1.0)*x1800))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1805.value)*((((x1801*x1804))+(((-146.0)*x1800*x1801))+(((-146.0)*x1801*x1802))+(((146.0)*x1799*x1802))+(((146.0)*x1799*x1800))+(((-1.0)*x1799*x1804))+(((-1.0)*x1802*x1803))+(((-1.0)*x1800*x1803))))), ((x1806.value)*(((((-1.0)*x1802))+(((-1.0)*x1800))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1807=IKcos(j0);
IkReal x1808=IKsin(j0);
IkReal x1809=((0.1)*sj5);
IkReal x1810=(cj5*r11);
IkReal x1811=(cj5*r01);
IkReal x1812=(sj1*sj2);
IkReal x1813=(cj1*cj2);
IkReal x1814=((0.392)*x1808);
IkReal x1815=(cj1*x1807);
evalcond[0]=(((r00*sj5))+((x1807*x1812))+x1811+(((-1.0)*x1807*x1813)));
evalcond[1]=((((-1.0)*x1808*x1813))+((r10*sj5))+((x1808*x1812))+x1810);
evalcond[2]=((((-1.0)*r00*x1809))+(((-0.1)*x1811))+(((0.392)*x1807*x1813))+(((-1.0)*px))+(((0.425)*x1815))+(((-0.392)*x1807*x1812))+(((-0.134)*x1808)));
evalcond[3]=((((-1.0)*r10*x1809))+(((-1.0)*x1812*x1814))+((x1813*x1814))+(((-0.1)*x1810))+(((-1.0)*py))+(((0.425)*cj1*x1808))+(((0.134)*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1816=((1.0)*cj5);
IkReal x1817=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1816)));
j4eval[0]=x1817;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1816))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1818=((1.0)*cj5);
IkReal x1819=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1818)));
j4eval[0]=x1819;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1818))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1820=((1.0)*sj0);
IkReal x1821=((1.0)*cj0);
IkReal x1822=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1822;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1820))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1821)))))+(IKabs(((((-1.0)*r12*x1820))+(((-1.0)*r02*x1821))))));
j4eval[2]=IKsign(x1822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1823=((-1.0)*r20);
IkReal x1825 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1825)==0){
continue;
}
IkReal x1824=pow(x1825,-0.5);
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1823),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1826.value));
IkReal gconst79=(r21*x1824);
IkReal gconst80=(x1823*x1824);
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1827.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1828=((-1.0)*r20);
IkReal x1829=x1824;
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1828),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
IkReal x1830=((-1.0)*(x1831.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1830;
IkReal gconst78=x1830;
IkReal gconst79=(r21*x1829);
IkReal gconst80=(x1828*x1829);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1832=((-1.0)*r20);
IkReal x1833=x1824;
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1832),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
IkReal x1834=((-1.0)*(x1835.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1834;
IkReal gconst78=x1834;
IkReal gconst79=(r21*x1833);
IkReal gconst80=(x1832*x1833);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1836=((-1.0)*r20);
IkReal x1837=x1824;
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1836),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
IkReal x1838=((-1.0)*(x1839.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1838;
IkReal gconst78=x1838;
IkReal gconst79=(r21*x1837);
IkReal gconst80=(x1836*x1837);
IkReal x1840=r22*r22;
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1840))),-1);
if(!x1843.valid){
continue;
}
IkReal x1841=x1843.value;
IkReal x1842=(((x1841*(r20*r20*r20*r20)))+(((2.0)*x1841*(r20*r20)*(r21*r21)))+((x1841*(r21*r21*r21*r21)))+x1840);
j4eval[0]=x1842;
j4eval[1]=IKsign(x1842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1844=(sj1*sj2);
IkReal x1845=(gconst80*r20);
IkReal x1846=(gconst79*r21);
IkReal x1847=(cj1*cj2);
CheckValue<IkReal> x1848 = IKatan2WithCheck(IkReal((((r22*x1844))+(((-1.0)*r22*x1847)))),IkReal(((((-1.0)*x1846*x1847))+((x1845*x1847))+((x1844*x1846))+(((-1.0)*x1844*x1845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1848.valid){
continue;
}
CheckValue<IkReal> x1849=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1845*x1846))+(x1845*x1845)+(x1846*x1846))),-1);
if(!x1849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1848.value)+(((1.5707963267949)*(x1849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1850=IKsin(j4);
IkReal x1851=IKcos(j4);
IkReal x1852=(gconst79*r01);
IkReal x1853=(gconst79*r21);
IkReal x1854=((1.0)*cj2);
IkReal x1855=(gconst79*r11);
IkReal x1856=((1.0)*sj0);
IkReal x1857=(cj1*sj2);
IkReal x1858=((1.0)*x1851);
IkReal x1859=(gconst80*x1851);
IkReal x1860=((1.0)*x1850);
IkReal x1861=(gconst80*x1860);
evalcond[0]=(((x1850*x1853))+(((-1.0)*r22*x1858))+(((-1.0)*r20*x1861)));
evalcond[1]=(cj0+((x1850*x1855))+(((-1.0)*r12*x1858))+(((-1.0)*r10*x1861)));
evalcond[2]=(((x1850*x1852))+(((-1.0)*r02*x1858))+(((-1.0)*r00*x1861))+(((-1.0)*x1856)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x1860))+(((-1.0)*x1853*x1858))+((r20*x1859))+(((-1.0)*cj1*x1854)));
evalcond[4]=((((-1.0)*r02*x1860))+((r00*x1859))+(((-1.0)*x1852*x1858))+(((-1.0)*cj0*sj1*x1854))+(((-1.0)*cj0*x1857)));
evalcond[5]=((((-1.0)*sj0*sj1*x1854))+((r10*x1859))+(((-1.0)*x1856*x1857))+(((-1.0)*r12*x1860))+(((-1.0)*x1855*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1862=((1.0)*gconst80);
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1862))+(((-1.0)*gconst79*r10)))),-1);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1862))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1863.value)))+(x1864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1865=IKsin(j4);
IkReal x1866=IKcos(j4);
IkReal x1867=(gconst79*r01);
IkReal x1868=(gconst79*r21);
IkReal x1869=((1.0)*cj2);
IkReal x1870=(gconst79*r11);
IkReal x1871=((1.0)*sj0);
IkReal x1872=(cj1*sj2);
IkReal x1873=((1.0)*x1866);
IkReal x1874=(gconst80*x1866);
IkReal x1875=((1.0)*x1865);
IkReal x1876=(gconst80*x1875);
evalcond[0]=((((-1.0)*r22*x1873))+((x1865*x1868))+(((-1.0)*r20*x1876)));
evalcond[1]=(cj0+(((-1.0)*r10*x1876))+((x1865*x1870))+(((-1.0)*r12*x1873)));
evalcond[2]=((((-1.0)*x1871))+(((-1.0)*r02*x1873))+(((-1.0)*r00*x1876))+((x1865*x1867)));
evalcond[3]=((((-1.0)*r22*x1875))+(((-1.0)*x1868*x1873))+((sj1*sj2))+((r20*x1874))+(((-1.0)*cj1*x1869)));
evalcond[4]=((((-1.0)*cj0*x1872))+(((-1.0)*r02*x1875))+(((-1.0)*cj0*sj1*x1869))+(((-1.0)*x1867*x1873))+((r00*x1874)));
evalcond[5]=((((-1.0)*x1870*x1873))+(((-1.0)*x1871*x1872))+(((-1.0)*r12*x1875))+((r10*x1874))+(((-1.0)*sj0*sj1*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1877=((1.0)*gconst80);
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1877))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1877))+(((-1.0)*gconst79*r00)))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKsin(j4);
IkReal x1881=IKcos(j4);
IkReal x1882=(gconst79*r01);
IkReal x1883=(gconst79*r21);
IkReal x1884=((1.0)*cj2);
IkReal x1885=(gconst79*r11);
IkReal x1886=((1.0)*sj0);
IkReal x1887=(cj1*sj2);
IkReal x1888=((1.0)*x1881);
IkReal x1889=(gconst80*x1881);
IkReal x1890=((1.0)*x1880);
IkReal x1891=(gconst80*x1890);
evalcond[0]=(((x1880*x1883))+(((-1.0)*r22*x1888))+(((-1.0)*r20*x1891)));
evalcond[1]=(cj0+((x1880*x1885))+(((-1.0)*r12*x1888))+(((-1.0)*r10*x1891)));
evalcond[2]=(((x1880*x1882))+(((-1.0)*r02*x1888))+(((-1.0)*r00*x1891))+(((-1.0)*x1886)));
evalcond[3]=(((r20*x1889))+(((-1.0)*x1883*x1888))+(((-1.0)*cj1*x1884))+((sj1*sj2))+(((-1.0)*r22*x1890)));
evalcond[4]=((((-1.0)*r02*x1890))+(((-1.0)*x1882*x1888))+(((-1.0)*cj0*sj1*x1884))+(((-1.0)*cj0*x1887))+((r00*x1889)));
evalcond[5]=((((-1.0)*sj0*sj1*x1884))+((r10*x1889))+(((-1.0)*r12*x1890))+(((-1.0)*x1885*x1888))+(((-1.0)*x1886*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1892=((-1.0)*r21);
IkReal x1894 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1894)==0){
continue;
}
IkReal x1893=pow(x1894,-0.5);
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal(x1892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1895.value))));
IkReal gconst82=(x1892*x1893);
IkReal gconst83=((1.0)*r20*x1893);
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1896.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1897=((-1.0)*r21);
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(x1897),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
IkReal x1898=((1.0)*(x1900.value));
IkReal x1899=x1893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1898)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1898)));
IkReal gconst82=(x1897*x1899);
IkReal gconst83=((1.0)*r20*x1899);
IkReal x1901=r22*r22;
IkReal x1902=((1.0)*x1901);
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(((-1.0)+x1901),-1);
if(!x1906.valid){
continue;
}
IkReal x1903=x1906.value;
if((((1.0)+(((-1.0)*x1902)))) < -0.00001)
continue;
IkReal x1904=IKsqrt(((1.0)+(((-1.0)*x1902))));
IkReal x1905=(cj0*x1903*x1904);
j4eval[0]=((IKabs(((((-1.0)*x1902*x1905))+x1905)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1907=((-1.0)*r21);
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal(x1907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
IkReal x1908=((1.0)*(x1910.value));
IkReal x1909=x1893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1908)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1908)));
IkReal gconst82=(x1907*x1909);
IkReal gconst83=((1.0)*r20*x1909);
IkReal x1911=r22*r22;
IkReal x1912=((1.0)*x1911);
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(((-1.0)+x1911),-1);
if(!x1916.valid){
continue;
}
IkReal x1913=x1916.value;
if((((1.0)+(((-1.0)*x1912)))) < -0.00001)
continue;
IkReal x1914=IKsqrt(((1.0)+(((-1.0)*x1912))));
IkReal x1915=(sj0*x1913*x1914);
j4eval[0]=((IKabs((x1915+(((-1.0)*x1912*x1915)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1917=((-1.0)*r21);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(x1917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
IkReal x1918=((1.0)*(x1920.value));
IkReal x1919=x1893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1918)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1918)));
IkReal gconst82=(x1917*x1919);
IkReal gconst83=((1.0)*r20*x1919);
IkReal x1921=r22*r22;
IkReal x1922=(r12*sj0);
IkReal x1923=(cj0*r02);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(((-1.0)+x1921),-1);
if(!x1927.valid){
continue;
}
IkReal x1924=x1927.value;
if((((1.0)+(((-1.0)*x1921)))) < -0.00001)
continue;
IkReal x1925=IKsqrt(((1.0)+(((-1.0)*x1921))));
IkReal x1926=(r22*x1924*x1925);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1923*x1926))+((x1922*x1926)))))+(IKabs(((((-1.0)*x1923))+(((-1.0)*x1922))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1928=((1.0)*sj0);
IkReal x1929=((1.0)*cj0);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1930.valid){
continue;
}
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1928))+(((-1.0)*r02*x1929)))),IkReal(((((-1.0)*gconst82*r11*x1928))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1930.value)))+(x1931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1932=IKsin(j4);
IkReal x1933=IKcos(j4);
IkReal x1934=(gconst82*r11);
IkReal x1935=((1.0)*cj2);
IkReal x1936=((1.0)*sj0);
IkReal x1937=(cj1*sj2);
IkReal x1938=((1.0)*x1933);
IkReal x1939=(gconst83*x1933);
IkReal x1940=(gconst82*x1932);
IkReal x1941=((1.0)*x1932);
evalcond[0]=((((-1.0)*r22*x1938))+(((-1.0)*gconst83*r20*x1941))+((r21*x1940)));
evalcond[1]=(cj0+((x1932*x1934))+(((-1.0)*gconst83*r10*x1941))+(((-1.0)*r12*x1938)));
evalcond[2]=(((r01*x1940))+(((-1.0)*gconst83*r00*x1941))+(((-1.0)*r02*x1938))+(((-1.0)*x1936)));
evalcond[3]=((((-1.0)*r22*x1941))+(((-1.0)*cj1*x1935))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1938))+((r20*x1939)));
evalcond[4]=(((r00*x1939))+(((-1.0)*r02*x1941))+(((-1.0)*cj0*x1937))+(((-1.0)*gconst82*r01*x1938))+(((-1.0)*cj0*sj1*x1935)));
evalcond[5]=((((-1.0)*x1934*x1938))+(((-1.0)*r12*x1941))+((r10*x1939))+(((-1.0)*sj0*sj1*x1935))+(((-1.0)*x1936*x1937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1942=((1.0)*gconst83);
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1942)))),-1);
if(!x1944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1943.value)+(((1.5707963267949)*(x1944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1945=IKsin(j4);
IkReal x1946=IKcos(j4);
IkReal x1947=(gconst82*r11);
IkReal x1948=((1.0)*cj2);
IkReal x1949=((1.0)*sj0);
IkReal x1950=(cj1*sj2);
IkReal x1951=((1.0)*x1946);
IkReal x1952=(gconst83*x1946);
IkReal x1953=(gconst82*x1945);
IkReal x1954=((1.0)*x1945);
evalcond[0]=((((-1.0)*r22*x1951))+((r21*x1953))+(((-1.0)*gconst83*r20*x1954)));
evalcond[1]=(((x1945*x1947))+cj0+(((-1.0)*gconst83*r10*x1954))+(((-1.0)*r12*x1951)));
evalcond[2]=((((-1.0)*x1949))+(((-1.0)*r02*x1951))+((r01*x1953))+(((-1.0)*gconst83*r00*x1954)));
evalcond[3]=((((-1.0)*r22*x1954))+((r20*x1952))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1951))+(((-1.0)*cj1*x1948)));
evalcond[4]=((((-1.0)*cj0*x1950))+(((-1.0)*r02*x1954))+(((-1.0)*gconst82*r01*x1951))+((r00*x1952))+(((-1.0)*cj0*sj1*x1948)));
evalcond[5]=((((-1.0)*x1949*x1950))+(((-1.0)*sj0*sj1*x1948))+(((-1.0)*x1947*x1951))+((r10*x1952))+(((-1.0)*r12*x1954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1955=((1.0)*gconst83);
CheckValue<IkReal> x1956=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1955)))),-1);
if(!x1956.valid){
continue;
}
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1955))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1956.value)))+(x1957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1958=IKsin(j4);
IkReal x1959=IKcos(j4);
IkReal x1960=(gconst82*r11);
IkReal x1961=((1.0)*cj2);
IkReal x1962=((1.0)*sj0);
IkReal x1963=(cj1*sj2);
IkReal x1964=((1.0)*x1959);
IkReal x1965=(gconst83*x1959);
IkReal x1966=(gconst82*x1958);
IkReal x1967=((1.0)*x1958);
evalcond[0]=((((-1.0)*r22*x1964))+((r21*x1966))+(((-1.0)*gconst83*r20*x1967)));
evalcond[1]=(((x1958*x1960))+cj0+(((-1.0)*gconst83*r10*x1967))+(((-1.0)*r12*x1964)));
evalcond[2]=((((-1.0)*r02*x1964))+(((-1.0)*x1962))+((r01*x1966))+(((-1.0)*gconst83*r00*x1967)));
evalcond[3]=(((r20*x1965))+(((-1.0)*r22*x1967))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1964))+(((-1.0)*cj1*x1961)));
evalcond[4]=((((-1.0)*cj0*x1963))+(((-1.0)*cj0*sj1*x1961))+(((-1.0)*r02*x1967))+((r00*x1965))+(((-1.0)*gconst82*r01*x1964)));
evalcond[5]=((((-1.0)*sj0*sj1*x1961))+((r10*x1965))+(((-1.0)*x1960*x1964))+(((-1.0)*x1962*x1963))+(((-1.0)*r12*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1968=((-1.0)*r10);
IkReal x1970 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1970)==0){
continue;
}
IkReal x1969=pow(x1970,-0.5);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1968),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1971.value));
IkReal gconst85=(r11*x1969);
IkReal gconst86=(x1968*x1969);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1972.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1973=((-1.0)*r10);
IkReal x1974=x1969;
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1973),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
IkReal x1975=((-1.0)*(x1976.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1975;
IkReal gconst84=x1975;
IkReal gconst85=(r11*x1974);
IkReal gconst86=(x1973*x1974);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1977=((1.0)*sj0);
IkReal x1978=((1.0)*gconst85);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1978)))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1977)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1978))+(((-1.0)*gconst85*r11*x1977))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1981=IKsin(j4);
IkReal x1982=IKcos(j4);
IkReal x1983=(gconst85*r21);
IkReal x1984=(gconst86*r00);
IkReal x1985=(gconst86*r10);
IkReal x1986=((1.0)*cj2);
IkReal x1987=(gconst85*r11);
IkReal x1988=(gconst85*r01);
IkReal x1989=((1.0)*sj0);
IkReal x1990=(gconst86*r20);
IkReal x1991=(cj1*sj2);
IkReal x1992=((1.0)*x1982);
IkReal x1993=((1.0)*x1981);
evalcond[0]=(((x1981*x1983))+(((-1.0)*x1990*x1993))+(((-1.0)*r22*x1992)));
evalcond[1]=(cj0+((x1981*x1987))+(((-1.0)*x1985*x1993))+(((-1.0)*r12*x1992)));
evalcond[2]=((((-1.0)*x1989))+((x1981*x1988))+(((-1.0)*r02*x1992))+(((-1.0)*x1984*x1993)));
evalcond[3]=((((-1.0)*x1983*x1992))+((sj1*sj2))+((x1982*x1990))+(((-1.0)*cj1*x1986))+(((-1.0)*r22*x1993)));
evalcond[4]=((((-1.0)*cj0*x1991))+(((-1.0)*r02*x1993))+((x1982*x1984))+(((-1.0)*cj0*sj1*x1986))+(((-1.0)*x1988*x1992)));
evalcond[5]=((((-1.0)*x1989*x1991))+(((-1.0)*x1987*x1992))+((x1982*x1985))+(((-1.0)*sj0*sj1*x1986))+(((-1.0)*r12*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1994=((1.0)*gconst86);
CheckValue<IkReal> x1995 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1994))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1994))+(((-1.0)*gconst85*r00)))),-1);
if(!x1996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1995.value)+(((1.5707963267949)*(x1996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1997=IKsin(j4);
IkReal x1998=IKcos(j4);
IkReal x1999=(gconst85*r21);
IkReal x2000=(gconst86*r00);
IkReal x2001=(gconst86*r10);
IkReal x2002=((1.0)*cj2);
IkReal x2003=(gconst85*r11);
IkReal x2004=(gconst85*r01);
IkReal x2005=((1.0)*sj0);
IkReal x2006=(gconst86*r20);
IkReal x2007=(cj1*sj2);
IkReal x2008=((1.0)*x1998);
IkReal x2009=((1.0)*x1997);
evalcond[0]=((((-1.0)*x2006*x2009))+(((-1.0)*r22*x2008))+((x1997*x1999)));
evalcond[1]=(((x1997*x2003))+cj0+(((-1.0)*r12*x2008))+(((-1.0)*x2001*x2009)));
evalcond[2]=(((x1997*x2004))+(((-1.0)*x2000*x2009))+(((-1.0)*r02*x2008))+(((-1.0)*x2005)));
evalcond[3]=((((-1.0)*r22*x2009))+((sj1*sj2))+(((-1.0)*cj1*x2002))+(((-1.0)*x1999*x2008))+((x1998*x2006)));
evalcond[4]=((((-1.0)*x2004*x2008))+(((-1.0)*r02*x2009))+(((-1.0)*cj0*x2007))+(((-1.0)*cj0*sj1*x2002))+((x1998*x2000)));
evalcond[5]=((((-1.0)*x2005*x2007))+(((-1.0)*x2003*x2008))+(((-1.0)*r12*x2009))+(((-1.0)*sj0*sj1*x2002))+((x1998*x2001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2010=((-1.0)*r11);
IkReal x2012 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2012)==0){
continue;
}
IkReal x2011=pow(x2012,-0.5);
CheckValue<IkReal> x2013 = IKatan2WithCheck(IkReal(x2010),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2013.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2013.value))));
IkReal gconst88=(x2010*x2011);
IkReal gconst89=((1.0)*r10*x2011);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2014.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2015=((-1.0)*r11);
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal(x2015),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
IkReal x2016=((1.0)*(x2018.value));
IkReal x2017=x2011;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2016)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2016)));
IkReal gconst88=(x2015*x2017);
IkReal gconst89=((1.0)*r10*x2017);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2019=((-1.0)*r11);
CheckValue<IkReal> x2022 = IKatan2WithCheck(IkReal(x2019),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2022.valid){
continue;
}
IkReal x2020=((1.0)*(x2022.value));
IkReal x2021=x2011;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2020)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2020)));
IkReal gconst88=(x2019*x2021);
IkReal gconst89=((1.0)*r10*x2021);
IkReal x2023=r12*r12;
IkReal x2024=((1.0)*sj0);
IkReal x2025=(cj0*r02);
IkReal x2026=x2011;
j4eval[0]=((IKabs(((((-1.0)*r12*x2024))+(((-1.0)*x2025)))))+(IKabs((((r12*x2025*x2026))+((sj0*x2023*x2026))+(((-1.0)*x2024*x2026))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2027=((-1.0)*r11);
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(x2027),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
IkReal x2028=((1.0)*(x2030.value));
IkReal x2029=x2011;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2028)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2028)));
IkReal gconst88=(x2027*x2029);
IkReal gconst89=((1.0)*r10*x2029);
IkReal x2031=r12*r12;
IkReal x2032=(cj1*cj2*r22);
IkReal x2033=(r22*sj1*sj2);
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(((-1.0)+x2031),-1);
if(!x2037.valid){
continue;
}
IkReal x2034=x2037.value;
if((((1.0)+(((-1.0)*x2031)))) < -0.00001)
continue;
IkReal x2035=IKsqrt(((1.0)+(((-1.0)*x2031))));
IkReal x2036=(r12*x2034*x2035);
j4eval[0]=((IKabs((x2033+(((-1.0)*x2032)))))+(IKabs((((x2032*x2036))+(((-1.0)*x2033*x2036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2038=(cj1*cj2);
IkReal x2039=(gconst89*r20);
IkReal x2040=(gconst88*r21);
IkReal x2041=(sj1*sj2);
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal((((r22*x2041))+(((-1.0)*r22*x2038)))),IkReal((((x2040*x2041))+(((-1.0)*x2038*x2040))+((x2038*x2039))+(((-1.0)*x2039*x2041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
CheckValue<IkReal> x2043=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2039*x2039)+(((-2.0)*x2039*x2040))+(x2040*x2040))),-1);
if(!x2043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2042.value)+(((1.5707963267949)*(x2043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2044=IKsin(j4);
IkReal x2045=IKcos(j4);
IkReal x2046=((1.0)*sj0);
IkReal x2047=((1.0)*cj2);
IkReal x2048=(gconst89*r20);
IkReal x2049=(gconst89*r10);
IkReal x2050=(gconst89*r00);
IkReal x2051=(cj1*sj2);
IkReal x2052=((1.0)*x2045);
IkReal x2053=((1.0)*x2044);
IkReal x2054=(gconst88*x2044);
evalcond[0]=((((-1.0)*r22*x2052))+(((-1.0)*x2048*x2053))+((r21*x2054)));
evalcond[1]=(((r11*x2054))+cj0+(((-1.0)*r12*x2052))+(((-1.0)*x2049*x2053)));
evalcond[2]=(((r01*x2054))+(((-1.0)*x2046))+(((-1.0)*r02*x2052))+(((-1.0)*x2050*x2053)));
evalcond[3]=((((-1.0)*r22*x2053))+((sj1*sj2))+((x2045*x2048))+(((-1.0)*gconst88*r21*x2052))+(((-1.0)*cj1*x2047)));
evalcond[4]=((((-1.0)*gconst88*r01*x2052))+(((-1.0)*r02*x2053))+(((-1.0)*cj0*sj1*x2047))+(((-1.0)*cj0*x2051))+((x2045*x2050)));
evalcond[5]=((((-1.0)*cj2*sj1*x2046))+(((-1.0)*r12*x2053))+(((-1.0)*gconst88*r11*x2052))+(((-1.0)*x2046*x2051))+((x2045*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2055=((1.0)*sj0);
IkReal x2056=((1.0)*cj0);
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2055))+(((-1.0)*r02*x2056)))),IkReal(((((-1.0)*gconst88*r01*x2056))+(((-1.0)*gconst88*r11*x2055))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2057.value)+(((1.5707963267949)*(x2058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2059=IKsin(j4);
IkReal x2060=IKcos(j4);
IkReal x2061=((1.0)*sj0);
IkReal x2062=((1.0)*cj2);
IkReal x2063=(gconst89*r20);
IkReal x2064=(gconst89*r10);
IkReal x2065=(gconst89*r00);
IkReal x2066=(cj1*sj2);
IkReal x2067=((1.0)*x2060);
IkReal x2068=((1.0)*x2059);
IkReal x2069=(gconst88*x2059);
evalcond[0]=(((r21*x2069))+(((-1.0)*x2063*x2068))+(((-1.0)*r22*x2067)));
evalcond[1]=((((-1.0)*r12*x2067))+cj0+(((-1.0)*x2064*x2068))+((r11*x2069)));
evalcond[2]=((((-1.0)*r02*x2067))+(((-1.0)*x2061))+(((-1.0)*x2065*x2068))+((r01*x2069)));
evalcond[3]=((((-1.0)*gconst88*r21*x2067))+(((-1.0)*r22*x2068))+((sj1*sj2))+((x2060*x2063))+(((-1.0)*cj1*x2062)));
evalcond[4]=((((-1.0)*cj0*x2066))+(((-1.0)*r02*x2068))+((x2060*x2065))+(((-1.0)*cj0*sj1*x2062))+(((-1.0)*gconst88*r01*x2067)));
evalcond[5]=((((-1.0)*r12*x2068))+(((-1.0)*x2061*x2066))+((x2060*x2064))+(((-1.0)*gconst88*r11*x2067))+(((-1.0)*cj2*sj1*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2070=((1.0)*gconst89);
CheckValue<IkReal> x2071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2070))+(((-1.0)*gconst88*r00)))),-1);
if(!x2071.valid){
continue;
}
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2070))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2071.value)))+(x2072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2073=IKsin(j4);
IkReal x2074=IKcos(j4);
IkReal x2075=((1.0)*sj0);
IkReal x2076=((1.0)*cj2);
IkReal x2077=(gconst89*r20);
IkReal x2078=(gconst89*r10);
IkReal x2079=(gconst89*r00);
IkReal x2080=(cj1*sj2);
IkReal x2081=((1.0)*x2074);
IkReal x2082=((1.0)*x2073);
IkReal x2083=(gconst88*x2073);
evalcond[0]=((((-1.0)*r22*x2081))+(((-1.0)*x2077*x2082))+((r21*x2083)));
evalcond[1]=(cj0+(((-1.0)*x2078*x2082))+(((-1.0)*r12*x2081))+((r11*x2083)));
evalcond[2]=((((-1.0)*r02*x2081))+(((-1.0)*x2075))+((r01*x2083))+(((-1.0)*x2079*x2082)));
evalcond[3]=((((-1.0)*r22*x2082))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2081))+((x2074*x2077))+(((-1.0)*cj1*x2076)));
evalcond[4]=((((-1.0)*r02*x2082))+(((-1.0)*gconst88*r01*x2081))+(((-1.0)*cj0*x2080))+(((-1.0)*cj0*sj1*x2076))+((x2074*x2079)));
evalcond[5]=((((-1.0)*gconst88*r11*x2081))+(((-1.0)*r12*x2082))+((x2074*x2078))+(((-1.0)*x2075*x2080))+(((-1.0)*cj2*sj1*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2084=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2084;
j4eval[1]=IKsign(x2084);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2085=((1.0)*cj5);
IkReal x2086=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2085)));
j4eval[0]=x2086;
j4eval[1]=((IKabs(((((-1.0)*r20*x2085))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2087=cj5*cj5;
IkReal x2088=r11*r11;
IkReal x2089=(r11*sj5);
IkReal x2090=(cj5*r10);
IkReal x2091=((r12*r12)+(((-1.0)*x2087*x2088))+x2088+((x2087*(r10*r10)))+(((-2.0)*x2089*x2090)));
j4eval[0]=x2091;
j4eval[1]=IKsign(x2091);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2089))+x2090))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2092=cj5*cj5;
IkReal x2093=r11*r11;
IkReal x2094=(cj5*r10);
IkReal x2095=(r11*sj5);
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2092*(r10*r10)))+x2093+(((-2.0)*x2094*x2095))+(((-1.0)*x2092*x2093)))),-1);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal((x2094+(((-1.0)*x2095)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2096.value)))+(x2097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2098=IKsin(j4);
IkReal x2099=IKcos(j4);
IkReal x2100=(cj5*r10);
IkReal x2101=(r01*sj5);
IkReal x2102=((1.0)*cj2);
IkReal x2103=(cj5*r00);
IkReal x2104=(cj5*r20);
IkReal x2105=((1.0)*x2099);
IkReal x2106=((1.0)*x2098);
IkReal x2107=(sj5*x2098);
evalcond[0]=((((-1.0)*r22*x2105))+((r21*x2107))+(((-1.0)*x2104*x2106)));
evalcond[1]=(((x2098*x2101))+(((-1.0)*r02*x2105))+(((-1.0)*x2103*x2106)));
evalcond[2]=(((x2099*x2100))+(((-1.0)*r12*x2106))+(((-1.0)*r11*sj5*x2105)));
evalcond[3]=((1.0)+(((-1.0)*x2100*x2106))+(((-1.0)*r12*x2105))+((r11*x2107)));
evalcond[4]=(((x2099*x2104))+(((-1.0)*r22*x2106))+(((-1.0)*cj1*x2102))+((sj1*sj2))+(((-1.0)*r21*sj5*x2105)));
evalcond[5]=((((-1.0)*r02*x2106))+((x2099*x2103))+(((-1.0)*sj1*x2102))+(((-1.0)*x2101*x2105))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2108=((1.0)*cj5);
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2108)))),-1);
if(!x2110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2109.value)+(((1.5707963267949)*(x2110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2111=IKsin(j4);
IkReal x2112=IKcos(j4);
IkReal x2113=(cj5*r10);
IkReal x2114=(r01*sj5);
IkReal x2115=((1.0)*cj2);
IkReal x2116=(cj5*r00);
IkReal x2117=(cj5*r20);
IkReal x2118=((1.0)*x2112);
IkReal x2119=((1.0)*x2111);
IkReal x2120=(sj5*x2111);
evalcond[0]=((((-1.0)*x2117*x2119))+((r21*x2120))+(((-1.0)*r22*x2118)));
evalcond[1]=((((-1.0)*x2116*x2119))+((x2111*x2114))+(((-1.0)*r02*x2118)));
evalcond[2]=((((-1.0)*r11*sj5*x2118))+(((-1.0)*r12*x2119))+((x2112*x2113)));
evalcond[3]=((1.0)+((r11*x2120))+(((-1.0)*r12*x2118))+(((-1.0)*x2113*x2119)));
evalcond[4]=((((-1.0)*r21*sj5*x2118))+((sj1*sj2))+(((-1.0)*r22*x2119))+(((-1.0)*cj1*x2115))+((x2112*x2117)));
evalcond[5]=((((-1.0)*x2114*x2118))+(((-1.0)*sj1*x2115))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2119))+((x2112*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2121.value)))+(x2122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2123=IKsin(j4);
IkReal x2124=IKcos(j4);
IkReal x2125=(cj5*r10);
IkReal x2126=(r01*sj5);
IkReal x2127=((1.0)*cj2);
IkReal x2128=(cj5*r00);
IkReal x2129=(cj5*r20);
IkReal x2130=((1.0)*x2124);
IkReal x2131=((1.0)*x2123);
IkReal x2132=(sj5*x2123);
evalcond[0]=((((-1.0)*r22*x2130))+((r21*x2132))+(((-1.0)*x2129*x2131)));
evalcond[1]=(((x2123*x2126))+(((-1.0)*x2128*x2131))+(((-1.0)*r02*x2130)));
evalcond[2]=((((-1.0)*r12*x2131))+(((-1.0)*r11*sj5*x2130))+((x2124*x2125)));
evalcond[3]=((1.0)+(((-1.0)*x2125*x2131))+(((-1.0)*r12*x2130))+((r11*x2132)));
evalcond[4]=((((-1.0)*r22*x2131))+((sj1*sj2))+(((-1.0)*cj1*x2127))+(((-1.0)*r21*sj5*x2130))+((x2124*x2129)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2126*x2130))+((x2124*x2128))+(((-1.0)*sj1*x2127))+(((-1.0)*r02*x2131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2133=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2133;
j4eval[1]=IKsign(x2133);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2134=((1.0)*cj5);
IkReal x2135=((((-1.0)*r21*x2134))+(((-1.0)*r20*sj5)));
j4eval[0]=x2135;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2134))))));
j4eval[2]=IKsign(x2135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2136=cj5*cj5;
IkReal x2137=r11*r11;
IkReal x2138=(cj5*r10);
IkReal x2139=(r11*sj5);
IkReal x2140=(((x2136*x2137))+(((-1.0)*x2136*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2137))+(((2.0)*x2138*x2139)));
j4eval[0]=x2140;
j4eval[1]=((IKabs(r12))+(IKabs((x2138+(((-1.0)*x2139))))));
j4eval[2]=IKsign(x2140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2141=cj5*cj5;
IkReal x2142=r11*r11;
IkReal x2143=(cj5*r10);
IkReal x2144=(r11*sj5);
CheckValue<IkReal> x2145=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2141*(r10*r10)))+(((-1.0)*x2142))+(((2.0)*x2143*x2144))+((x2141*x2142))+(((-1.0)*(r12*r12))))),-1);
if(!x2145.valid){
continue;
}
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(((((-1.0)*x2144))+x2143)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2145.value)))+(x2146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2147=IKsin(j4);
IkReal x2148=IKcos(j4);
IkReal x2149=(cj5*r10);
IkReal x2150=(r01*sj5);
IkReal x2151=(cj5*r00);
IkReal x2152=(cj5*r20);
IkReal x2153=((1.0)*x2148);
IkReal x2154=((1.0)*x2147);
IkReal x2155=(sj5*x2147);
evalcond[0]=((((-1.0)*x2152*x2154))+(((-1.0)*r22*x2153))+((r21*x2155)));
evalcond[1]=(((x2147*x2150))+(((-1.0)*r02*x2153))+(((-1.0)*x2151*x2154)));
evalcond[2]=((((-1.0)*r11*sj5*x2153))+(((-1.0)*r12*x2154))+((x2148*x2149)));
evalcond[3]=((-1.0)+(((-1.0)*x2149*x2154))+(((-1.0)*r12*x2153))+((r11*x2155)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2154))+((x2148*x2151))+(((-1.0)*x2150*x2153)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2148*x2152))+(((-1.0)*r22*x2154))+(((-1.0)*r21*sj5*x2153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2156=((1.0)*cj5);
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2156))+(((-1.0)*r20*sj5)))),-1);
if(!x2157.valid){
continue;
}
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2156))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2157.value)))+(x2158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2159=IKsin(j4);
IkReal x2160=IKcos(j4);
IkReal x2161=(cj5*r10);
IkReal x2162=(r01*sj5);
IkReal x2163=(cj5*r00);
IkReal x2164=(cj5*r20);
IkReal x2165=((1.0)*x2160);
IkReal x2166=((1.0)*x2159);
IkReal x2167=(sj5*x2159);
evalcond[0]=(((r21*x2167))+(((-1.0)*x2164*x2166))+(((-1.0)*r22*x2165)));
evalcond[1]=((((-1.0)*x2163*x2166))+((x2159*x2162))+(((-1.0)*r02*x2165)));
evalcond[2]=((((-1.0)*r11*sj5*x2165))+(((-1.0)*r12*x2166))+((x2160*x2161)));
evalcond[3]=((-1.0)+(((-1.0)*x2161*x2166))+(((-1.0)*r12*x2165))+((r11*x2167)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2160*x2163))+(((-1.0)*r02*x2166))+(((-1.0)*x2162*x2165)));
evalcond[5]=((((-1.0)*r21*sj5*x2165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2166))+((x2160*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2168.value)+(((1.5707963267949)*(x2169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2170=IKsin(j4);
IkReal x2171=IKcos(j4);
IkReal x2172=(cj5*r10);
IkReal x2173=(r01*sj5);
IkReal x2174=(cj5*r00);
IkReal x2175=(cj5*r20);
IkReal x2176=((1.0)*x2171);
IkReal x2177=((1.0)*x2170);
IkReal x2178=(sj5*x2170);
evalcond[0]=(((r21*x2178))+(((-1.0)*x2175*x2177))+(((-1.0)*r22*x2176)));
evalcond[1]=((((-1.0)*x2174*x2177))+((x2170*x2173))+(((-1.0)*r02*x2176)));
evalcond[2]=(((x2171*x2172))+(((-1.0)*r11*sj5*x2176))+(((-1.0)*r12*x2177)));
evalcond[3]=((-1.0)+((r11*x2178))+(((-1.0)*x2172*x2177))+(((-1.0)*r12*x2176)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2171*x2174))+(((-1.0)*r02*x2177))+(((-1.0)*x2173*x2176)));
evalcond[5]=((((-1.0)*r21*sj5*x2176))+((x2171*x2175))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2179=((-1.0)*r00);
IkReal x2181 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2181)==0){
continue;
}
IkReal x2180=pow(x2181,-0.5);
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2179),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2182.value));
IkReal gconst91=(r01*x2180);
IkReal gconst92=(x2179*x2180);
CheckValue<IkReal> x2183 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2183.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2183.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2184=((-1.0)*r00);
IkReal x2185=x2180;
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2184),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
IkReal x2186=((-1.0)*(x2187.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2186;
IkReal gconst90=x2186;
IkReal gconst91=(r01*x2185);
IkReal gconst92=(x2184*x2185);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2188=((1.0)*sj0);
IkReal x2189=((1.0)*cj0);
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2190.valid){
continue;
}
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2189))+(((-1.0)*r12*x2188)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2188))+(((-1.0)*gconst91*r01*x2189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2190.value)))+(x2191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2192=IKsin(j4);
IkReal x2193=IKcos(j4);
IkReal x2194=((1.0)*cj2);
IkReal x2195=(gconst92*r00);
IkReal x2196=(gconst92*r20);
IkReal x2197=((1.0)*sj0);
IkReal x2198=(gconst92*r10);
IkReal x2199=(cj1*sj2);
IkReal x2200=((1.0)*x2193);
IkReal x2201=(gconst91*x2192);
IkReal x2202=((1.0)*x2192);
evalcond[0]=((((-1.0)*x2196*x2202))+(((-1.0)*r22*x2200))+((r21*x2201)));
evalcond[1]=(cj0+(((-1.0)*r12*x2200))+((r11*x2201))+(((-1.0)*x2198*x2202)));
evalcond[2]=(((r01*x2201))+(((-1.0)*x2195*x2202))+(((-1.0)*x2197))+(((-1.0)*r02*x2200)));
evalcond[3]=(((x2193*x2196))+(((-1.0)*r22*x2202))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2200))+(((-1.0)*cj1*x2194)));
evalcond[4]=(((x2193*x2195))+(((-1.0)*gconst91*r01*x2200))+(((-1.0)*cj0*sj1*x2194))+(((-1.0)*cj0*x2199))+(((-1.0)*r02*x2202)));
evalcond[5]=(((x2193*x2198))+(((-1.0)*r12*x2202))+(((-1.0)*sj0*sj1*x2194))+(((-1.0)*x2197*x2199))+(((-1.0)*gconst91*r11*x2200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2203=((1.0)*gconst92);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2203))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2203)))),-1);
if(!x2205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2204.value)+(((1.5707963267949)*(x2205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2206=IKsin(j4);
IkReal x2207=IKcos(j4);
IkReal x2208=((1.0)*cj2);
IkReal x2209=(gconst92*r00);
IkReal x2210=(gconst92*r20);
IkReal x2211=((1.0)*sj0);
IkReal x2212=(gconst92*r10);
IkReal x2213=(cj1*sj2);
IkReal x2214=((1.0)*x2207);
IkReal x2215=(gconst91*x2206);
IkReal x2216=((1.0)*x2206);
evalcond[0]=((((-1.0)*x2210*x2216))+(((-1.0)*r22*x2214))+((r21*x2215)));
evalcond[1]=(cj0+(((-1.0)*r12*x2214))+((r11*x2215))+(((-1.0)*x2212*x2216)));
evalcond[2]=(((r01*x2215))+(((-1.0)*x2211))+(((-1.0)*x2209*x2216))+(((-1.0)*r02*x2214)));
evalcond[3]=((((-1.0)*cj1*x2208))+(((-1.0)*r22*x2216))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2214))+((x2207*x2210)));
evalcond[4]=((((-1.0)*gconst91*r01*x2214))+(((-1.0)*cj0*sj1*x2208))+((x2207*x2209))+(((-1.0)*r02*x2216))+(((-1.0)*cj0*x2213)));
evalcond[5]=((((-1.0)*r12*x2216))+((x2207*x2212))+(((-1.0)*gconst91*r11*x2214))+(((-1.0)*x2211*x2213))+(((-1.0)*sj0*sj1*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2217=((-1.0)*r01);
IkReal x2219 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2219)==0){
continue;
}
IkReal x2218=pow(x2219,-0.5);
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(x2217),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2220.value))));
IkReal gconst94=(x2217*x2218);
IkReal gconst95=((1.0)*r00*x2218);
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2222=((-1.0)*r01);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(x2222),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
IkReal x2223=((1.0)*(x2225.value));
IkReal x2224=x2218;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2223)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2223)));
IkReal gconst94=(x2222*x2224);
IkReal gconst95=((1.0)*r00*x2224);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2226=((-1.0)*r01);
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal(x2226),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
IkReal x2227=((1.0)*(x2229.value));
IkReal x2228=x2218;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2227)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2227)));
IkReal gconst94=(x2226*x2228);
IkReal gconst95=((1.0)*r00*x2228);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2230=((-1.0)*r01);
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal(x2230),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
IkReal x2231=((1.0)*(x2233.value));
IkReal x2232=x2218;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2231)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2231)));
IkReal gconst94=(x2230*x2232);
IkReal gconst95=((1.0)*r00*x2232);
IkReal x2234=r02*r02;
IkReal x2235=(r12*sj0);
IkReal x2236=((1.0)*cj0);
IkReal x2237=x2218;
j4eval[0]=((IKabs(((((-1.0)*r02*x2236))+(((-1.0)*x2235)))))+(IKabs(((((-1.0)*x2236*x2237))+((cj0*x2234*x2237))+((r02*x2235*x2237))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2238=((1.0)*sj0);
IkReal x2239=((1.0)*cj0);
CheckValue<IkReal> x2240=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2240.valid){
continue;
}
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2239))+(((-1.0)*r12*x2238)))),IkReal(((((-1.0)*gconst94*r11*x2238))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2239))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2240.value)))+(x2241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2242=IKsin(j4);
IkReal x2243=IKcos(j4);
IkReal x2244=(gconst94*r11);
IkReal x2245=((1.0)*cj2);
IkReal x2246=(gconst94*r21);
IkReal x2247=((1.0)*sj0);
IkReal x2248=(gconst94*r01);
IkReal x2249=(cj1*sj2);
IkReal x2250=((1.0)*x2243);
IkReal x2251=(gconst95*x2243);
IkReal x2252=((1.0)*x2242);
IkReal x2253=(gconst95*x2252);
evalcond[0]=((((-1.0)*r22*x2250))+(((-1.0)*r20*x2253))+((x2242*x2246)));
evalcond[1]=(cj0+(((-1.0)*r12*x2250))+(((-1.0)*r10*x2253))+((x2242*x2244)));
evalcond[2]=((((-1.0)*r02*x2250))+(((-1.0)*r00*x2253))+(((-1.0)*x2247))+((x2242*x2248)));
evalcond[3]=((((-1.0)*r22*x2252))+((sj1*sj2))+((r20*x2251))+(((-1.0)*cj1*x2245))+(((-1.0)*x2246*x2250)));
evalcond[4]=((((-1.0)*r02*x2252))+(((-1.0)*cj0*x2249))+(((-1.0)*x2248*x2250))+((r00*x2251))+(((-1.0)*cj0*sj1*x2245)));
evalcond[5]=(((r10*x2251))+(((-1.0)*sj0*sj1*x2245))+(((-1.0)*x2247*x2249))+(((-1.0)*x2244*x2250))+(((-1.0)*r12*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2254=((1.0)*gconst95);
CheckValue<IkReal> x2255=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2254)))),-1);
if(!x2255.valid){
continue;
}
CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2255.value)))+(x2256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2257=IKsin(j4);
IkReal x2258=IKcos(j4);
IkReal x2259=(gconst94*r11);
IkReal x2260=((1.0)*cj2);
IkReal x2261=(gconst94*r21);
IkReal x2262=((1.0)*sj0);
IkReal x2263=(gconst94*r01);
IkReal x2264=(cj1*sj2);
IkReal x2265=((1.0)*x2258);
IkReal x2266=(gconst95*x2258);
IkReal x2267=((1.0)*x2257);
IkReal x2268=(gconst95*x2267);
evalcond[0]=(((x2257*x2261))+(((-1.0)*r20*x2268))+(((-1.0)*r22*x2265)));
evalcond[1]=(cj0+((x2257*x2259))+(((-1.0)*r10*x2268))+(((-1.0)*r12*x2265)));
evalcond[2]=(((x2257*x2263))+(((-1.0)*r00*x2268))+(((-1.0)*r02*x2265))+(((-1.0)*x2262)));
evalcond[3]=((((-1.0)*cj1*x2260))+((sj1*sj2))+(((-1.0)*r22*x2267))+(((-1.0)*x2261*x2265))+((r20*x2266)));
evalcond[4]=(((r00*x2266))+(((-1.0)*cj0*sj1*x2260))+(((-1.0)*x2263*x2265))+(((-1.0)*r02*x2267))+(((-1.0)*cj0*x2264)));
evalcond[5]=((((-1.0)*x2259*x2265))+(((-1.0)*sj0*sj1*x2260))+((r10*x2266))+(((-1.0)*r12*x2267))+(((-1.0)*x2262*x2264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2269=((1.0)*gconst95);
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2269)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2269))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(gconst94*r11);
IkReal x2275=((1.0)*cj2);
IkReal x2276=(gconst94*r21);
IkReal x2277=((1.0)*sj0);
IkReal x2278=(gconst94*r01);
IkReal x2279=(cj1*sj2);
IkReal x2280=((1.0)*x2273);
IkReal x2281=(gconst95*x2273);
IkReal x2282=((1.0)*x2272);
IkReal x2283=(gconst95*x2282);
evalcond[0]=(((x2272*x2276))+(((-1.0)*r20*x2283))+(((-1.0)*r22*x2280)));
evalcond[1]=(cj0+(((-1.0)*r12*x2280))+(((-1.0)*r10*x2283))+((x2272*x2274)));
evalcond[2]=((((-1.0)*r02*x2280))+((x2272*x2278))+(((-1.0)*x2277))+(((-1.0)*r00*x2283)));
evalcond[3]=((((-1.0)*x2276*x2280))+(((-1.0)*cj1*x2275))+((r20*x2281))+((sj1*sj2))+(((-1.0)*r22*x2282)));
evalcond[4]=((((-1.0)*r02*x2282))+(((-1.0)*cj0*sj1*x2275))+(((-1.0)*x2278*x2280))+((r00*x2281))+(((-1.0)*cj0*x2279)));
evalcond[5]=(((r10*x2281))+(((-1.0)*r12*x2282))+(((-1.0)*sj0*sj1*x2275))+(((-1.0)*x2274*x2280))+(((-1.0)*x2277*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2284=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2284;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2285=((1.0)*cj5);
IkReal x2286=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2285)));
j4eval[0]=x2286;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2285))))));
j4eval[2]=IKsign(x2286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2287=cj5*cj5;
IkReal x2288=r01*r01;
IkReal x2289=(r01*sj5);
IkReal x2290=(cj5*r00);
IkReal x2291=((((-1.0)*(r02*r02)))+(((-1.0)*x2288))+((x2287*x2288))+(((-1.0)*x2287*(r00*r00)))+(((2.0)*x2289*x2290)));
j4eval[0]=x2291;
j4eval[1]=IKsign(x2291);
j4eval[2]=((IKabs(r02))+(IKabs((x2290+(((-1.0)*x2289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2292=cj5*cj5;
IkReal x2293=r01*r01;
IkReal x2294=(r01*sj5);
IkReal x2295=(cj5*r00);
CheckValue<IkReal> x2296=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2292*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2293))+(((2.0)*x2294*x2295))+((x2292*x2293)))),-1);
if(!x2296.valid){
continue;
}
CheckValue<IkReal> x2297 = IKatan2WithCheck(IkReal((x2295+(((-1.0)*x2294)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2296.value)))+(x2297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2298=IKsin(j4);
IkReal x2299=IKcos(j4);
IkReal x2300=(cj5*r10);
IkReal x2301=(r01*sj5);
IkReal x2302=((1.0)*cj2);
IkReal x2303=(cj5*r00);
IkReal x2304=(cj5*r20);
IkReal x2305=((1.0)*x2299);
IkReal x2306=((1.0)*x2298);
IkReal x2307=(sj5*x2298);
evalcond[0]=((((-1.0)*r22*x2305))+(((-1.0)*x2304*x2306))+((r21*x2307)));
evalcond[1]=(((r11*x2307))+(((-1.0)*x2300*x2306))+(((-1.0)*r12*x2305)));
evalcond[2]=((((-1.0)*x2301*x2305))+((x2299*x2303))+(((-1.0)*r02*x2306)));
evalcond[3]=((-1.0)+(((-1.0)*x2303*x2306))+((x2298*x2301))+(((-1.0)*r02*x2305)));
evalcond[4]=((((-1.0)*r22*x2306))+((sj1*sj2))+(((-1.0)*r21*sj5*x2305))+(((-1.0)*cj1*x2302))+((x2299*x2304)));
evalcond[5]=((((-1.0)*sj1*x2302))+(((-1.0)*r11*sj5*x2305))+(((-1.0)*cj1*sj2))+((x2299*x2300))+(((-1.0)*r12*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2308=((1.0)*cj5);
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2308))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2308))+(((-1.0)*r10*sj5)))),-1);
if(!x2310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2309.value)+(((1.5707963267949)*(x2310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2311=IKsin(j4);
IkReal x2312=IKcos(j4);
IkReal x2313=(cj5*r10);
IkReal x2314=(r01*sj5);
IkReal x2315=((1.0)*cj2);
IkReal x2316=(cj5*r00);
IkReal x2317=(cj5*r20);
IkReal x2318=((1.0)*x2312);
IkReal x2319=((1.0)*x2311);
IkReal x2320=(sj5*x2311);
evalcond[0]=((((-1.0)*r22*x2318))+((r21*x2320))+(((-1.0)*x2317*x2319)));
evalcond[1]=(((r11*x2320))+(((-1.0)*r12*x2318))+(((-1.0)*x2313*x2319)));
evalcond[2]=(((x2312*x2316))+(((-1.0)*r02*x2319))+(((-1.0)*x2314*x2318)));
evalcond[3]=((-1.0)+((x2311*x2314))+(((-1.0)*r02*x2318))+(((-1.0)*x2316*x2319)));
evalcond[4]=(((x2312*x2317))+(((-1.0)*r22*x2319))+((sj1*sj2))+(((-1.0)*cj1*x2315))+(((-1.0)*r21*sj5*x2318)));
evalcond[5]=(((x2312*x2313))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2318))+(((-1.0)*r12*x2319))+(((-1.0)*sj1*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2321=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2321.valid){
continue;
}
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2321.value)))+(x2322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2323=IKsin(j4);
IkReal x2324=IKcos(j4);
IkReal x2325=(cj5*r10);
IkReal x2326=(r01*sj5);
IkReal x2327=((1.0)*cj2);
IkReal x2328=(cj5*r00);
IkReal x2329=(cj5*r20);
IkReal x2330=((1.0)*x2324);
IkReal x2331=((1.0)*x2323);
IkReal x2332=(sj5*x2323);
evalcond[0]=(((r21*x2332))+(((-1.0)*r22*x2330))+(((-1.0)*x2329*x2331)));
evalcond[1]=(((r11*x2332))+(((-1.0)*x2325*x2331))+(((-1.0)*r12*x2330)));
evalcond[2]=((((-1.0)*r02*x2331))+(((-1.0)*x2326*x2330))+((x2324*x2328)));
evalcond[3]=((-1.0)+(((-1.0)*x2328*x2331))+(((-1.0)*r02*x2330))+((x2323*x2326)));
evalcond[4]=((((-1.0)*r22*x2331))+((sj1*sj2))+(((-1.0)*cj1*x2327))+((x2324*x2329))+(((-1.0)*r21*sj5*x2330)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2330))+(((-1.0)*sj1*x2327))+(((-1.0)*r12*x2331))+((x2324*x2325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2333=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2333;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2334=((1.0)*cj5);
IkReal x2335=((((-1.0)*r21*x2334))+(((-1.0)*r20*sj5)));
j4eval[0]=x2335;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2334))+((r11*sj5))))));
j4eval[2]=IKsign(x2335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2336=cj5*cj5;
IkReal x2337=r01*r01;
IkReal x2338=(cj5*r00);
IkReal x2339=(r01*sj5);
IkReal x2340=(x2337+(((-2.0)*x2338*x2339))+((x2336*(r00*r00)))+(((-1.0)*x2336*x2337))+(r02*r02));
j4eval[0]=x2340;
j4eval[1]=((IKabs(r02))+(IKabs((x2338+(((-1.0)*x2339))))));
j4eval[2]=IKsign(x2340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2341=cj5*cj5;
IkReal x2342=r01*r01;
IkReal x2343=(r01*sj5);
IkReal x2344=(cj5*r00);
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(IKsign((x2342+((x2341*(r00*r00)))+(((-1.0)*x2341*x2342))+(((-2.0)*x2343*x2344))+(r02*r02))),-1);
if(!x2345.valid){
continue;
}
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal((x2344+(((-1.0)*x2343)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2345.value)))+(x2346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2347=IKsin(j4);
IkReal x2348=IKcos(j4);
IkReal x2349=(cj5*r10);
IkReal x2350=(r01*sj5);
IkReal x2351=(cj5*r00);
IkReal x2352=(cj5*r20);
IkReal x2353=((1.0)*x2348);
IkReal x2354=((1.0)*x2347);
IkReal x2355=(sj5*x2347);
evalcond[0]=((((-1.0)*x2352*x2354))+(((-1.0)*r22*x2353))+((r21*x2355)));
evalcond[1]=(((r11*x2355))+(((-1.0)*r12*x2353))+(((-1.0)*x2349*x2354)));
evalcond[2]=(((x2348*x2351))+(((-1.0)*x2350*x2353))+(((-1.0)*r02*x2354)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2353))+(((-1.0)*x2351*x2354))+((x2347*x2350)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2353))+((cj1*sj2))+((x2348*x2349))+(((-1.0)*r12*x2354)));
evalcond[5]=(((x2348*x2352))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2354))+(((-1.0)*r21*sj5*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2356=((1.0)*cj5);
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2356))+(((-1.0)*r20*sj5)))),-1);
if(!x2357.valid){
continue;
}
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2357.value)))+(x2358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2359=IKsin(j4);
IkReal x2360=IKcos(j4);
IkReal x2361=(cj5*r10);
IkReal x2362=(r01*sj5);
IkReal x2363=(cj5*r00);
IkReal x2364=(cj5*r20);
IkReal x2365=((1.0)*x2360);
IkReal x2366=((1.0)*x2359);
IkReal x2367=(sj5*x2359);
evalcond[0]=((((-1.0)*x2364*x2366))+(((-1.0)*r22*x2365))+((r21*x2367)));
evalcond[1]=(((r11*x2367))+(((-1.0)*x2361*x2366))+(((-1.0)*r12*x2365)));
evalcond[2]=(((x2360*x2363))+(((-1.0)*x2362*x2365))+(((-1.0)*r02*x2366)));
evalcond[3]=((1.0)+((x2359*x2362))+(((-1.0)*x2363*x2366))+(((-1.0)*r02*x2365)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2365))+((cj1*sj2))+((x2360*x2361))+(((-1.0)*r12*x2366)));
evalcond[5]=((((-1.0)*r21*sj5*x2365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2360*x2364))+(((-1.0)*r22*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2368 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2368.valid){
continue;
}
CheckValue<IkReal> x2369=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2368.value)+(((1.5707963267949)*(x2369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2370=IKsin(j4);
IkReal x2371=IKcos(j4);
IkReal x2372=(cj5*r10);
IkReal x2373=(r01*sj5);
IkReal x2374=(cj5*r00);
IkReal x2375=(cj5*r20);
IkReal x2376=((1.0)*x2371);
IkReal x2377=((1.0)*x2370);
IkReal x2378=(sj5*x2370);
evalcond[0]=((((-1.0)*x2375*x2377))+(((-1.0)*r22*x2376))+((r21*x2378)));
evalcond[1]=((((-1.0)*x2372*x2377))+(((-1.0)*r12*x2376))+((r11*x2378)));
evalcond[2]=((((-1.0)*r02*x2377))+((x2371*x2374))+(((-1.0)*x2373*x2376)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2376))+((x2370*x2373))+(((-1.0)*x2374*x2377)));
evalcond[4]=((((-1.0)*r11*sj5*x2376))+((cj2*sj1))+((x2371*x2372))+((cj1*sj2))+(((-1.0)*r12*x2377)));
evalcond[5]=(((x2371*x2375))+(((-1.0)*r21*sj5*x2376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2379=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2379);
rxp1_1=(px*r21);
rxp1_2=(r11*x2379);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2380=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2380);
rxp1_1=(px*r21);
rxp1_2=(r11*x2380);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2381=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2381);
rxp1_1=(px*r21);
rxp1_2=(r11*x2381);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2384=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2384.valid){
continue;
}
IkReal x2382=x2384.value;
IkReal x2383=(sj0*x2382);
cj4array[0]=(((cj2*sj1*x2383))+((cj1*sj2*x2383)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2385=IKsin(j4);
IkReal x2386=IKcos(j4);
IkReal x2387=(cj5*r20);
IkReal x2388=(r21*sj5);
IkReal x2389=((1.0)*x2385);
IkReal x2390=((1.0)*x2386);
evalcond[0]=((-1.0)*r02*x2385);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2390)));
evalcond[2]=(((x2385*x2388))+(((-1.0)*x2387*x2389)));
evalcond[3]=(((r11*sj5*x2385))+(((-1.0)*cj5*r10*x2389)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2388*x2390))+((x2386*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2392=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2392.valid){
continue;
}
IkReal x2391=x2392.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2391))+((cj1*cj2*x2391)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2393=IKsin(j4);
IkReal x2394=IKcos(j4);
IkReal x2395=(r11*sj5);
IkReal x2396=((1.0)*sj0);
IkReal x2397=((1.0)*x2394);
IkReal x2398=((1.0)*cj5*x2393);
evalcond[0]=((-1.0)*r02*x2393);
evalcond[1]=((((-1.0)*r02*x2397))+(((-1.0)*x2396)));
evalcond[2]=((((-1.0)*r20*x2398))+((r21*sj5*x2393)));
evalcond[3]=((((-1.0)*r10*x2398))+((x2393*x2395)));
evalcond[4]=((((-1.0)*cj1*sj2*x2396))+(((-1.0)*cj2*sj1*x2396))+((cj5*r10*x2394))+(((-1.0)*x2395*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(r02,-1);
if(!x2399.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2399.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2400=IKsin(j4);
IkReal x2401=IKcos(j4);
IkReal x2402=((1.0)*sj0);
IkReal x2403=(cj5*x2401);
IkReal x2404=(sj5*x2400);
IkReal x2405=((1.0)*sj5*x2401);
IkReal x2406=((1.0)*cj5*x2400);
evalcond[0]=((-1.0)*r02*x2400);
evalcond[1]=(((r21*x2404))+(((-1.0)*r20*x2406)));
evalcond[2]=(((r11*x2404))+(((-1.0)*r10*x2406)));
evalcond[3]=(((r20*x2403))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2405)));
evalcond[4]=(((r10*x2403))+(((-1.0)*cj2*sj1*x2402))+(((-1.0)*cj1*sj2*x2402))+(((-1.0)*r11*x2405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2407=((1.0)*sj0);
IkReal x2408=((1.0)*cj0);
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2408))+(((-1.0)*r12*x2407)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2408))+(((-1.0)*r11*sj5*x2407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2409.value)+(((1.5707963267949)*(x2410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2411=IKsin(j4);
IkReal x2412=IKcos(j4);
IkReal x2413=(cj5*r10);
IkReal x2414=(r01*sj5);
IkReal x2415=((1.0)*cj2);
IkReal x2416=(cj5*r00);
IkReal x2417=((1.0)*sj0);
IkReal x2418=(cj5*r20);
IkReal x2419=(cj1*sj2);
IkReal x2420=((1.0)*x2412);
IkReal x2421=((1.0)*x2411);
IkReal x2422=(sj5*x2411);
evalcond[0]=(((r21*x2422))+(((-1.0)*r22*x2420))+(((-1.0)*x2418*x2421)));
evalcond[1]=(cj0+(((-1.0)*x2413*x2421))+(((-1.0)*r12*x2420))+((r11*x2422)));
evalcond[2]=((((-1.0)*r02*x2420))+(((-1.0)*x2417))+(((-1.0)*x2416*x2421))+((x2411*x2414)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2421))+(((-1.0)*cj1*x2415))+(((-1.0)*r21*sj5*x2420))+((x2412*x2418)));
evalcond[4]=((((-1.0)*cj0*x2419))+(((-1.0)*r02*x2421))+(((-1.0)*cj0*sj1*x2415))+((x2412*x2416))+(((-1.0)*x2414*x2420)));
evalcond[5]=((((-1.0)*r11*sj5*x2420))+(((-1.0)*x2417*x2419))+(((-1.0)*r12*x2421))+(((-1.0)*sj0*sj1*x2415))+((x2412*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2423=((1.0)*cj5);
CheckValue<IkReal> x2424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2423)))),-1);
if(!x2424.valid){
continue;
}
CheckValue<IkReal> x2425 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2423))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2424.value)))+(x2425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2426=IKsin(j4);
IkReal x2427=IKcos(j4);
IkReal x2428=(cj5*r10);
IkReal x2429=(r01*sj5);
IkReal x2430=((1.0)*cj2);
IkReal x2431=(cj5*r00);
IkReal x2432=((1.0)*sj0);
IkReal x2433=(cj5*r20);
IkReal x2434=(cj1*sj2);
IkReal x2435=((1.0)*x2427);
IkReal x2436=((1.0)*x2426);
IkReal x2437=(sj5*x2426);
evalcond[0]=((((-1.0)*r22*x2435))+(((-1.0)*x2433*x2436))+((r21*x2437)));
evalcond[1]=(((r11*x2437))+cj0+(((-1.0)*x2428*x2436))+(((-1.0)*r12*x2435)));
evalcond[2]=(((x2426*x2429))+(((-1.0)*x2431*x2436))+(((-1.0)*x2432))+(((-1.0)*r02*x2435)));
evalcond[3]=((((-1.0)*r22*x2436))+(((-1.0)*r21*sj5*x2435))+((sj1*sj2))+(((-1.0)*cj1*x2430))+((x2427*x2433)));
evalcond[4]=((((-1.0)*cj0*x2434))+(((-1.0)*r02*x2436))+(((-1.0)*x2429*x2435))+(((-1.0)*cj0*sj1*x2430))+((x2427*x2431)));
evalcond[5]=((((-1.0)*sj0*sj1*x2430))+((x2427*x2428))+(((-1.0)*x2432*x2434))+(((-1.0)*r11*sj5*x2435))+(((-1.0)*r12*x2436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2438=((1.0)*cj5);
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2438)))),-1);
if(!x2440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2439.value)+(((1.5707963267949)*(x2440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2441=IKsin(j4);
IkReal x2442=IKcos(j4);
IkReal x2443=(cj5*r10);
IkReal x2444=(r01*sj5);
IkReal x2445=((1.0)*cj2);
IkReal x2446=(cj5*r00);
IkReal x2447=((1.0)*sj0);
IkReal x2448=(cj5*r20);
IkReal x2449=(cj1*sj2);
IkReal x2450=((1.0)*x2442);
IkReal x2451=((1.0)*x2441);
IkReal x2452=(sj5*x2441);
evalcond[0]=((((-1.0)*x2448*x2451))+(((-1.0)*r22*x2450))+((r21*x2452)));
evalcond[1]=(cj0+(((-1.0)*r12*x2450))+((r11*x2452))+(((-1.0)*x2443*x2451)));
evalcond[2]=((((-1.0)*x2446*x2451))+(((-1.0)*x2447))+(((-1.0)*r02*x2450))+((x2441*x2444)));
evalcond[3]=(((x2442*x2448))+((sj1*sj2))+(((-1.0)*r22*x2451))+(((-1.0)*cj1*x2445))+(((-1.0)*r21*sj5*x2450)));
evalcond[4]=(((x2442*x2446))+(((-1.0)*cj0*x2449))+(((-1.0)*x2444*x2450))+(((-1.0)*cj0*sj1*x2445))+(((-1.0)*r02*x2451)));
evalcond[5]=(((x2442*x2443))+(((-1.0)*r11*sj5*x2450))+(((-1.0)*r12*x2451))+(((-1.0)*x2447*x2449))+(((-1.0)*sj0*sj1*x2445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2453=cj5*cj5;
IkReal x2454=r21*r21;
IkReal x2455=(sj1*sj2);
IkReal x2456=(r21*sj5);
IkReal x2457=(cj1*cj2);
IkReal x2458=(cj5*r20);
CheckValue<IkReal> x2459=IKPowWithIntegerCheck(IKsign((x2454+(((-1.0)*x2453*x2454))+(r22*r22)+(((-2.0)*x2456*x2458))+((x2453*(r20*r20))))),-1);
if(!x2459.valid){
continue;
}
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2457))+((r22*x2455)))),IkReal(((((-1.0)*x2455*x2458))+((x2457*x2458))+((x2455*x2456))+(((-1.0)*x2456*x2457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2459.value)))+(x2460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2461=IKsin(j4);
IkReal x2462=IKcos(j4);
IkReal x2463=(r21*sj5);
IkReal x2464=(cj5*r20);
IkReal x2465=((1.0)*x2462);
IkReal x2466=((1.0)*x2461);
evalcond[0]=((((-1.0)*x2464*x2466))+(((-1.0)*r22*x2465))+((x2461*x2463)));
evalcond[1]=((((-1.0)*r22*x2466))+((x2462*x2464))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2463*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2467=(cj5*sj4);
IkReal x2468=(sj4*sj5);
if( IKabs((((r01*x2468))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2468))+((r10*x2467))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2468))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2467))))+IKsqr(((((-1.0)*r11*x2468))+((r10*x2467))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2468))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2467))), ((((-1.0)*r11*x2468))+((r10*x2467))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2469=IKcos(j0);
IkReal x2470=IKsin(j0);
IkReal x2471=(cj4*cj5);
IkReal x2472=((0.1)*sj5);
IkReal x2473=((0.392)*sj1);
IkReal x2474=(cj5*r11);
IkReal x2475=(cj5*r01);
IkReal x2476=((1.0)*cj1);
IkReal x2477=(r11*sj5);
IkReal x2478=((1.0)*sj4);
IkReal x2479=((0.392)*cj2);
IkReal x2480=((1.0)*sj1);
IkReal x2481=((1.0)*cj4);
IkReal x2482=(r01*sj5);
IkReal x2483=(sj2*x2470);
IkReal x2484=(sj2*x2469);
IkReal x2485=(cj1*x2469);
IkReal x2486=(cj2*x2469);
IkReal x2487=(cj1*x2470);
IkReal x2488=(cj2*x2470);
evalcond[0]=(x2469+(((-1.0)*cj5*r10*x2478))+((sj4*x2477))+(((-1.0)*r12*x2481)));
evalcond[1]=((((-1.0)*x2470))+(((-1.0)*cj5*r00*x2478))+(((-1.0)*r02*x2481))+((sj4*x2482)));
evalcond[2]=(((r00*sj5))+x2475+(((-1.0)*x2476*x2486))+((sj1*x2484)));
evalcond[3]=(x2474+((r10*sj5))+(((-1.0)*x2476*x2488))+((sj1*x2483)));
evalcond[4]=((((-1.0)*x2476*x2484))+((r00*x2471))+(((-1.0)*x2480*x2486))+(((-1.0)*r02*x2478))+(((-1.0)*x2481*x2482)));
evalcond[5]=((((-1.0)*r12*x2478))+(((-1.0)*x2476*x2483))+(((-1.0)*x2477*x2481))+((r10*x2471))+(((-1.0)*x2480*x2488)));
evalcond[6]=((((-0.1)*x2475))+(((-1.0)*r00*x2472))+(((-1.0)*px))+(((-0.134)*x2470))+(((-1.0)*x2473*x2484))+(((0.425)*x2485))+((x2479*x2485)));
evalcond[7]=((((-0.1)*x2474))+(((-1.0)*py))+(((0.134)*x2469))+(((-1.0)*r10*x2472))+(((-1.0)*x2473*x2483))+(((0.425)*x2487))+((x2479*x2487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2489=((1.0)*cj5);
IkReal x2490=((1.0)*sj5);
CheckValue<IkReal> x2491 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2490))+(((-1.0)*r11*x2489)))),IkReal(((((-1.0)*r00*x2490))+(((-1.0)*r01*x2489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2491.valid){
continue;
}
CheckValue<IkReal> x2492=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2492.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2491.value)+(((1.5707963267949)*(x2492.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2493=IKcos(j0);
IkReal x2494=IKsin(j0);
IkReal x2495=((0.1)*sj5);
IkReal x2496=(cj5*r11);
IkReal x2497=(cj5*r01);
IkReal x2498=(sj1*sj2);
IkReal x2499=(cj1*cj2);
IkReal x2500=((0.392)*x2494);
IkReal x2501=(cj1*x2493);
evalcond[0]=(((r00*sj5))+x2497+(((-1.0)*x2493*x2499))+((x2493*x2498)));
evalcond[1]=(x2496+((x2494*x2498))+((r10*sj5))+(((-1.0)*x2494*x2499)));
evalcond[2]=((((0.392)*x2493*x2499))+(((-0.134)*x2494))+(((0.425)*x2501))+(((-1.0)*r00*x2495))+(((-1.0)*px))+(((-0.392)*x2493*x2498))+(((-0.1)*x2497)));
evalcond[3]=((((-1.0)*x2498*x2500))+(((-1.0)*r10*x2495))+(((0.425)*cj1*x2494))+((x2499*x2500))+(((-1.0)*py))+(((-0.1)*x2496))+(((0.134)*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2502=((1.0)*cj5);
IkReal x2503=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2502)));
j4eval[0]=x2503;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2502)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2504=((1.0)*cj5);
IkReal x2505=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2504)));
j4eval[0]=x2505;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x2504))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2506=((1.0)*sj0);
IkReal x2507=((1.0)*cj0);
IkReal x2508=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2508;
j4eval[1]=((IKabs(((((-1.0)*r02*x2507))+(((-1.0)*r12*x2506)))))+(IKabs(((((-1.0)*r01*sj5*x2507))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2506))))));
j4eval[2]=IKsign(x2508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2509=((-1.0)*r20);
IkReal x2511 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2511)==0){
continue;
}
IkReal x2510=pow(x2511,-0.5);
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2509),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2512.value));
IkReal gconst79=(r21*x2510);
IkReal gconst80=(x2509*x2510);
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2513.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2514=((-1.0)*r20);
IkReal x2515=x2510;
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2514),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
IkReal x2516=((-1.0)*(x2517.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2516;
IkReal gconst78=x2516;
IkReal gconst79=(r21*x2515);
IkReal gconst80=(x2514*x2515);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2518=((-1.0)*r20);
IkReal x2519=x2510;
CheckValue<IkReal> x2521 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2518),IKFAST_ATAN2_MAGTHRESH);
if(!x2521.valid){
continue;
}
IkReal x2520=((-1.0)*(x2521.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2520;
IkReal gconst78=x2520;
IkReal gconst79=(r21*x2519);
IkReal gconst80=(x2518*x2519);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2522=((-1.0)*r20);
IkReal x2523=x2510;
CheckValue<IkReal> x2525 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2522),IKFAST_ATAN2_MAGTHRESH);
if(!x2525.valid){
continue;
}
IkReal x2524=((-1.0)*(x2525.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2524;
IkReal gconst78=x2524;
IkReal gconst79=(r21*x2523);
IkReal gconst80=(x2522*x2523);
IkReal x2526=r22*r22;
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2526))),-1);
if(!x2529.valid){
continue;
}
IkReal x2527=x2529.value;
IkReal x2528=((((2.0)*x2527*(r20*r20)*(r21*r21)))+x2526+((x2527*(r21*r21*r21*r21)))+((x2527*(r20*r20*r20*r20))));
j4eval[0]=x2528;
j4eval[1]=IKsign(x2528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2530=(sj1*sj2);
IkReal x2531=(gconst80*r20);
IkReal x2532=(gconst79*r21);
IkReal x2533=(cj1*cj2);
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(IKsign(((x2532*x2532)+(r22*r22)+(x2531*x2531)+(((-2.0)*x2531*x2532)))),-1);
if(!x2534.valid){
continue;
}
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2533))+((r22*x2530)))),IkReal((((x2530*x2532))+((x2531*x2533))+(((-1.0)*x2532*x2533))+(((-1.0)*x2530*x2531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2534.value)))+(x2535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2536=IKsin(j4);
IkReal x2537=IKcos(j4);
IkReal x2538=(gconst79*r01);
IkReal x2539=(gconst79*r21);
IkReal x2540=((1.0)*cj2);
IkReal x2541=(gconst79*r11);
IkReal x2542=((1.0)*sj0);
IkReal x2543=(cj1*sj2);
IkReal x2544=((1.0)*x2537);
IkReal x2545=(gconst80*x2537);
IkReal x2546=((1.0)*x2536);
IkReal x2547=(gconst80*x2546);
evalcond[0]=(((x2536*x2539))+(((-1.0)*r20*x2547))+(((-1.0)*r22*x2544)));
evalcond[1]=((((-1.0)*r12*x2544))+(((-1.0)*r10*x2547))+cj0+((x2536*x2541)));
evalcond[2]=(((x2536*x2538))+(((-1.0)*r00*x2547))+(((-1.0)*x2542))+(((-1.0)*r02*x2544)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2539*x2544))+((r20*x2545))+(((-1.0)*cj1*x2540))+(((-1.0)*r22*x2546)));
evalcond[4]=((((-1.0)*x2538*x2544))+((r00*x2545))+(((-1.0)*cj0*x2543))+(((-1.0)*r02*x2546))+(((-1.0)*cj0*sj1*x2540)));
evalcond[5]=((((-1.0)*x2542*x2543))+(((-1.0)*r12*x2546))+(((-1.0)*x2541*x2544))+(((-1.0)*sj0*sj1*x2540))+((r10*x2545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2548=((1.0)*gconst80);
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x2548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2548))+(((-1.0)*gconst79*r10)))),-1);
if(!x2550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2549.value)+(((1.5707963267949)*(x2550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2551=IKsin(j4);
IkReal x2552=IKcos(j4);
IkReal x2553=(gconst79*r01);
IkReal x2554=(gconst79*r21);
IkReal x2555=((1.0)*cj2);
IkReal x2556=(gconst79*r11);
IkReal x2557=((1.0)*sj0);
IkReal x2558=(cj1*sj2);
IkReal x2559=((1.0)*x2552);
IkReal x2560=(gconst80*x2552);
IkReal x2561=((1.0)*x2551);
IkReal x2562=(gconst80*x2561);
evalcond[0]=((((-1.0)*r20*x2562))+((x2551*x2554))+(((-1.0)*r22*x2559)));
evalcond[1]=(cj0+(((-1.0)*r12*x2559))+((x2551*x2556))+(((-1.0)*r10*x2562)));
evalcond[2]=((((-1.0)*r00*x2562))+((x2551*x2553))+(((-1.0)*r02*x2559))+(((-1.0)*x2557)));
evalcond[3]=((((-1.0)*r22*x2561))+(((-1.0)*x2554*x2559))+((sj1*sj2))+((r20*x2560))+(((-1.0)*cj1*x2555)));
evalcond[4]=(((r00*x2560))+(((-1.0)*cj0*sj1*x2555))+(((-1.0)*r02*x2561))+(((-1.0)*cj0*x2558))+(((-1.0)*x2553*x2559)));
evalcond[5]=((((-1.0)*x2556*x2559))+((r10*x2560))+(((-1.0)*x2557*x2558))+(((-1.0)*sj0*sj1*x2555))+(((-1.0)*r12*x2561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2563=((1.0)*gconst80);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2563))+(((-1.0)*gconst79*r00)))),-1);
if(!x2565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2564.value)+(((1.5707963267949)*(x2565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2566=IKsin(j4);
IkReal x2567=IKcos(j4);
IkReal x2568=(gconst79*r01);
IkReal x2569=(gconst79*r21);
IkReal x2570=((1.0)*cj2);
IkReal x2571=(gconst79*r11);
IkReal x2572=((1.0)*sj0);
IkReal x2573=(cj1*sj2);
IkReal x2574=((1.0)*x2567);
IkReal x2575=(gconst80*x2567);
IkReal x2576=((1.0)*x2566);
IkReal x2577=(gconst80*x2576);
evalcond[0]=(((x2566*x2569))+(((-1.0)*r20*x2577))+(((-1.0)*r22*x2574)));
evalcond[1]=((((-1.0)*r10*x2577))+(((-1.0)*r12*x2574))+cj0+((x2566*x2571)));
evalcond[2]=(((x2566*x2568))+(((-1.0)*x2572))+(((-1.0)*r02*x2574))+(((-1.0)*r00*x2577)));
evalcond[3]=((((-1.0)*x2569*x2574))+((sj1*sj2))+((r20*x2575))+(((-1.0)*cj1*x2570))+(((-1.0)*r22*x2576)));
evalcond[4]=((((-1.0)*x2568*x2574))+(((-1.0)*cj0*x2573))+((r00*x2575))+(((-1.0)*r02*x2576))+(((-1.0)*cj0*sj1*x2570)));
evalcond[5]=(((r10*x2575))+(((-1.0)*r12*x2576))+(((-1.0)*x2571*x2574))+(((-1.0)*sj0*sj1*x2570))+(((-1.0)*x2572*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2578=((-1.0)*r21);
IkReal x2580 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2580)==0){
continue;
}
IkReal x2579=pow(x2580,-0.5);
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(x2578),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2581.value))));
IkReal gconst82=(x2578*x2579);
IkReal gconst83=((1.0)*r20*x2579);
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2582.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2583=((-1.0)*r21);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(x2583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
IkReal x2584=((1.0)*(x2586.value));
IkReal x2585=x2579;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2584)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2584)));
IkReal gconst82=(x2583*x2585);
IkReal gconst83=((1.0)*r20*x2585);
IkReal x2587=r22*r22;
IkReal x2588=((1.0)*x2587);
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(((-1.0)+x2587),-1);
if(!x2592.valid){
continue;
}
IkReal x2589=x2592.value;
if((((1.0)+(((-1.0)*x2588)))) < -0.00001)
continue;
IkReal x2590=IKsqrt(((1.0)+(((-1.0)*x2588))));
IkReal x2591=(cj0*x2589*x2590);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2591+(((-1.0)*x2588*x2591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2593=((-1.0)*r21);
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal(x2593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
IkReal x2594=((1.0)*(x2596.value));
IkReal x2595=x2579;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2594)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2594)));
IkReal gconst82=(x2593*x2595);
IkReal gconst83=((1.0)*r20*x2595);
IkReal x2597=r22*r22;
IkReal x2598=((1.0)*x2597);
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(((-1.0)+x2597),-1);
if(!x2602.valid){
continue;
}
IkReal x2599=x2602.value;
if((((1.0)+(((-1.0)*x2598)))) < -0.00001)
continue;
IkReal x2600=IKsqrt(((1.0)+(((-1.0)*x2598))));
IkReal x2601=(sj0*x2599*x2600);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2598*x2601))+x2601))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2603=((-1.0)*r21);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(x2603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
IkReal x2604=((1.0)*(x2606.value));
IkReal x2605=x2579;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2604)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2604)));
IkReal gconst82=(x2603*x2605);
IkReal gconst83=((1.0)*r20*x2605);
IkReal x2607=r22*r22;
IkReal x2608=(r12*sj0);
IkReal x2609=(cj0*r02);
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(((-1.0)+x2607),-1);
if(!x2613.valid){
continue;
}
IkReal x2610=x2613.value;
if((((1.0)+(((-1.0)*x2607)))) < -0.00001)
continue;
IkReal x2611=IKsqrt(((1.0)+(((-1.0)*x2607))));
IkReal x2612=(r22*x2610*x2611);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2608))+(((-1.0)*x2609)))))+(IKabs((((x2608*x2612))+((x2609*x2612))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2614=((1.0)*sj0);
IkReal x2615=((1.0)*cj0);
CheckValue<IkReal> x2616=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2614))+(((-1.0)*r02*x2615)))),IkReal(((((-1.0)*gconst82*r01*x2615))+(((-1.0)*gconst82*r11*x2614))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2616.value)))+(x2617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2618=IKsin(j4);
IkReal x2619=IKcos(j4);
IkReal x2620=(gconst82*r11);
IkReal x2621=((1.0)*cj2);
IkReal x2622=((1.0)*sj0);
IkReal x2623=(cj1*sj2);
IkReal x2624=((1.0)*x2619);
IkReal x2625=(gconst83*x2619);
IkReal x2626=(gconst82*x2618);
IkReal x2627=((1.0)*x2618);
evalcond[0]=((((-1.0)*gconst83*r20*x2627))+(((-1.0)*r22*x2624))+((r21*x2626)));
evalcond[1]=((((-1.0)*gconst83*r10*x2627))+cj0+(((-1.0)*r12*x2624))+((x2618*x2620)));
evalcond[2]=(((r01*x2626))+(((-1.0)*gconst83*r00*x2627))+(((-1.0)*r02*x2624))+(((-1.0)*x2622)));
evalcond[3]=(((r20*x2625))+(((-1.0)*gconst82*r21*x2624))+((sj1*sj2))+(((-1.0)*r22*x2627))+(((-1.0)*cj1*x2621)));
evalcond[4]=(((r00*x2625))+(((-1.0)*gconst82*r01*x2624))+(((-1.0)*cj0*x2623))+(((-1.0)*r02*x2627))+(((-1.0)*cj0*sj1*x2621)));
evalcond[5]=((((-1.0)*x2622*x2623))+(((-1.0)*r12*x2627))+(((-1.0)*sj0*sj1*x2621))+((r10*x2625))+(((-1.0)*x2620*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2628=((1.0)*gconst83);
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2628))+(((-1.0)*gconst82*r10)))),-1);
if(!x2629.valid){
continue;
}
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2628))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2629.value)))+(x2630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2631=IKsin(j4);
IkReal x2632=IKcos(j4);
IkReal x2633=(gconst82*r11);
IkReal x2634=((1.0)*cj2);
IkReal x2635=((1.0)*sj0);
IkReal x2636=(cj1*sj2);
IkReal x2637=((1.0)*x2632);
IkReal x2638=(gconst83*x2632);
IkReal x2639=(gconst82*x2631);
IkReal x2640=((1.0)*x2631);
evalcond[0]=((((-1.0)*gconst83*r20*x2640))+((r21*x2639))+(((-1.0)*r22*x2637)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2640))+(((-1.0)*r12*x2637))+((x2631*x2633)));
evalcond[2]=((((-1.0)*r02*x2637))+(((-1.0)*x2635))+((r01*x2639))+(((-1.0)*gconst83*r00*x2640)));
evalcond[3]=((((-1.0)*r22*x2640))+(((-1.0)*cj1*x2634))+((sj1*sj2))+((r20*x2638))+(((-1.0)*gconst82*r21*x2637)));
evalcond[4]=((((-1.0)*cj0*sj1*x2634))+(((-1.0)*r02*x2640))+(((-1.0)*gconst82*r01*x2637))+((r00*x2638))+(((-1.0)*cj0*x2636)));
evalcond[5]=((((-1.0)*sj0*sj1*x2634))+(((-1.0)*r12*x2640))+((r10*x2638))+(((-1.0)*x2635*x2636))+(((-1.0)*x2633*x2637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2641=((1.0)*gconst83);
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2641))+(((-1.0)*gconst82*r00)))),-1);
if(!x2642.valid){
continue;
}
CheckValue<IkReal> x2643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2642.value)))+(x2643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2644=IKsin(j4);
IkReal x2645=IKcos(j4);
IkReal x2646=(gconst82*r11);
IkReal x2647=((1.0)*cj2);
IkReal x2648=((1.0)*sj0);
IkReal x2649=(cj1*sj2);
IkReal x2650=((1.0)*x2645);
IkReal x2651=(gconst83*x2645);
IkReal x2652=(gconst82*x2644);
IkReal x2653=((1.0)*x2644);
evalcond[0]=((((-1.0)*r22*x2650))+(((-1.0)*gconst83*r20*x2653))+((r21*x2652)));
evalcond[1]=(cj0+(((-1.0)*r12*x2650))+((x2644*x2646))+(((-1.0)*gconst83*r10*x2653)));
evalcond[2]=((((-1.0)*r02*x2650))+((r01*x2652))+(((-1.0)*x2648))+(((-1.0)*gconst83*r00*x2653)));
evalcond[3]=((((-1.0)*r22*x2653))+(((-1.0)*cj1*x2647))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2650))+((r20*x2651)));
evalcond[4]=((((-1.0)*r02*x2653))+(((-1.0)*cj0*sj1*x2647))+(((-1.0)*gconst82*r01*x2650))+((r00*x2651))+(((-1.0)*cj0*x2649)));
evalcond[5]=((((-1.0)*r12*x2653))+(((-1.0)*x2646*x2650))+((r10*x2651))+(((-1.0)*sj0*sj1*x2647))+(((-1.0)*x2648*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2654=((-1.0)*r10);
IkReal x2656 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2656)==0){
continue;
}
IkReal x2655=pow(x2656,-0.5);
CheckValue<IkReal> x2657 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2654),IKFAST_ATAN2_MAGTHRESH);
if(!x2657.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2657.value));
IkReal gconst85=(r11*x2655);
IkReal gconst86=(x2654*x2655);
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2658.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2659=((-1.0)*r10);
IkReal x2660=x2655;
CheckValue<IkReal> x2662 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2659),IKFAST_ATAN2_MAGTHRESH);
if(!x2662.valid){
continue;
}
IkReal x2661=((-1.0)*(x2662.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2661;
IkReal gconst84=x2661;
IkReal gconst85=(r11*x2660);
IkReal gconst86=(x2659*x2660);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2663=((1.0)*sj0);
IkReal x2664=((1.0)*gconst85);
CheckValue<IkReal> x2665 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2663))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2664))+(((-1.0)*gconst85*r11*x2663))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2665.valid){
continue;
}
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2664)))),-1);
if(!x2666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2665.value)+(((1.5707963267949)*(x2666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2667=IKsin(j4);
IkReal x2668=IKcos(j4);
IkReal x2669=(gconst85*r21);
IkReal x2670=(gconst86*r00);
IkReal x2671=(gconst86*r10);
IkReal x2672=((1.0)*cj2);
IkReal x2673=(gconst85*r11);
IkReal x2674=(gconst85*r01);
IkReal x2675=((1.0)*sj0);
IkReal x2676=(gconst86*r20);
IkReal x2677=(cj1*sj2);
IkReal x2678=((1.0)*x2668);
IkReal x2679=((1.0)*x2667);
evalcond[0]=(((x2667*x2669))+(((-1.0)*x2676*x2679))+(((-1.0)*r22*x2678)));
evalcond[1]=((((-1.0)*r12*x2678))+cj0+((x2667*x2673))+(((-1.0)*x2671*x2679)));
evalcond[2]=((((-1.0)*x2670*x2679))+((x2667*x2674))+(((-1.0)*r02*x2678))+(((-1.0)*x2675)));
evalcond[3]=(((x2668*x2676))+(((-1.0)*cj1*x2672))+((sj1*sj2))+(((-1.0)*x2669*x2678))+(((-1.0)*r22*x2679)));
evalcond[4]=((((-1.0)*cj0*x2677))+((x2668*x2670))+(((-1.0)*cj0*sj1*x2672))+(((-1.0)*x2674*x2678))+(((-1.0)*r02*x2679)));
evalcond[5]=((((-1.0)*r12*x2679))+((x2668*x2671))+(((-1.0)*x2675*x2677))+(((-1.0)*sj0*sj1*x2672))+(((-1.0)*x2673*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2680=((1.0)*gconst86);
CheckValue<IkReal> x2681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2680))+(((-1.0)*gconst85*r00)))),-1);
if(!x2681.valid){
continue;
}
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2681.value)))+(x2682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2683=IKsin(j4);
IkReal x2684=IKcos(j4);
IkReal x2685=(gconst85*r21);
IkReal x2686=(gconst86*r00);
IkReal x2687=(gconst86*r10);
IkReal x2688=((1.0)*cj2);
IkReal x2689=(gconst85*r11);
IkReal x2690=(gconst85*r01);
IkReal x2691=((1.0)*sj0);
IkReal x2692=(gconst86*r20);
IkReal x2693=(cj1*sj2);
IkReal x2694=((1.0)*x2684);
IkReal x2695=((1.0)*x2683);
evalcond[0]=((((-1.0)*x2692*x2695))+((x2683*x2685))+(((-1.0)*r22*x2694)));
evalcond[1]=(cj0+((x2683*x2689))+(((-1.0)*x2687*x2695))+(((-1.0)*r12*x2694)));
evalcond[2]=((((-1.0)*r02*x2694))+((x2683*x2690))+(((-1.0)*x2691))+(((-1.0)*x2686*x2695)));
evalcond[3]=((((-1.0)*cj1*x2688))+((x2684*x2692))+((sj1*sj2))+(((-1.0)*r22*x2695))+(((-1.0)*x2685*x2694)));
evalcond[4]=((((-1.0)*cj0*x2693))+(((-1.0)*r02*x2695))+((x2684*x2686))+(((-1.0)*x2690*x2694))+(((-1.0)*cj0*sj1*x2688)));
evalcond[5]=((((-1.0)*x2691*x2693))+((x2684*x2687))+(((-1.0)*x2689*x2694))+(((-1.0)*r12*x2695))+(((-1.0)*sj0*sj1*x2688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2696=((-1.0)*r11);
IkReal x2698 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2698)==0){
continue;
}
IkReal x2697=pow(x2698,-0.5);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(x2696),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2699.value))));
IkReal gconst88=(x2696*x2697);
IkReal gconst89=((1.0)*r10*x2697);
CheckValue<IkReal> x2700 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2700.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2700.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2701=((-1.0)*r11);
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(x2701),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal x2702=((1.0)*(x2704.value));
IkReal x2703=x2697;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2702)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2702)));
IkReal gconst88=(x2701*x2703);
IkReal gconst89=((1.0)*r10*x2703);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2705=((-1.0)*r11);
CheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal(x2705),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2708.valid){
continue;
}
IkReal x2706=((1.0)*(x2708.value));
IkReal x2707=x2697;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2706)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2706)));
IkReal gconst88=(x2705*x2707);
IkReal gconst89=((1.0)*r10*x2707);
IkReal x2709=r12*r12;
IkReal x2710=((1.0)*sj0);
IkReal x2711=(cj0*r02);
IkReal x2712=x2697;
j4eval[0]=((IKabs((((r12*x2711*x2712))+((sj0*x2709*x2712))+(((-1.0)*x2710*x2712)))))+(IKabs(((((-1.0)*x2711))+(((-1.0)*r12*x2710))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2713=((-1.0)*r11);
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal(x2713),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
IkReal x2714=((1.0)*(x2716.value));
IkReal x2715=x2697;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2714)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2714)));
IkReal gconst88=(x2713*x2715);
IkReal gconst89=((1.0)*r10*x2715);
IkReal x2717=r12*r12;
IkReal x2718=(cj1*cj2*r22);
IkReal x2719=(r22*sj1*sj2);
CheckValue<IkReal> x2723=IKPowWithIntegerCheck(((-1.0)+x2717),-1);
if(!x2723.valid){
continue;
}
IkReal x2720=x2723.value;
if((((1.0)+(((-1.0)*x2717)))) < -0.00001)
continue;
IkReal x2721=IKsqrt(((1.0)+(((-1.0)*x2717))));
IkReal x2722=(r12*x2720*x2721);
j4eval[0]=((IKabs((x2719+(((-1.0)*x2718)))))+(IKabs((((x2718*x2722))+(((-1.0)*x2719*x2722))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2724=(cj1*cj2);
IkReal x2725=(gconst89*r20);
IkReal x2726=(gconst88*r21);
IkReal x2727=(sj1*sj2);
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(IKsign(((x2725*x2725)+(r22*r22)+(x2726*x2726)+(((-2.0)*x2725*x2726)))),-1);
if(!x2728.valid){
continue;
}
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal((((r22*x2727))+(((-1.0)*r22*x2724)))),IkReal((((x2724*x2725))+((x2726*x2727))+(((-1.0)*x2724*x2726))+(((-1.0)*x2725*x2727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2728.value)))+(x2729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2730=IKsin(j4);
IkReal x2731=IKcos(j4);
IkReal x2732=((1.0)*sj0);
IkReal x2733=((1.0)*cj2);
IkReal x2734=(gconst89*r20);
IkReal x2735=(gconst89*r10);
IkReal x2736=(gconst89*r00);
IkReal x2737=(cj1*sj2);
IkReal x2738=((1.0)*x2731);
IkReal x2739=((1.0)*x2730);
IkReal x2740=(gconst88*x2730);
evalcond[0]=(((r21*x2740))+(((-1.0)*x2734*x2739))+(((-1.0)*r22*x2738)));
evalcond[1]=(((r11*x2740))+cj0+(((-1.0)*x2735*x2739))+(((-1.0)*r12*x2738)));
evalcond[2]=((((-1.0)*x2736*x2739))+((r01*x2740))+(((-1.0)*r02*x2738))+(((-1.0)*x2732)));
evalcond[3]=(((x2731*x2734))+((sj1*sj2))+(((-1.0)*r22*x2739))+(((-1.0)*gconst88*r21*x2738))+(((-1.0)*cj1*x2733)));
evalcond[4]=((((-1.0)*cj0*sj1*x2733))+((x2731*x2736))+(((-1.0)*cj0*x2737))+(((-1.0)*r02*x2739))+(((-1.0)*gconst88*r01*x2738)));
evalcond[5]=((((-1.0)*cj2*sj1*x2732))+((x2731*x2735))+(((-1.0)*r12*x2739))+(((-1.0)*x2732*x2737))+(((-1.0)*gconst88*r11*x2738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2741=((1.0)*sj0);
IkReal x2742=((1.0)*cj0);
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2741))+(((-1.0)*r02*x2742)))),IkReal(((((-1.0)*gconst88*r11*x2741))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2742))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
CheckValue<IkReal> x2744=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2743.value)+(((1.5707963267949)*(x2744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2745=IKsin(j4);
IkReal x2746=IKcos(j4);
IkReal x2747=((1.0)*sj0);
IkReal x2748=((1.0)*cj2);
IkReal x2749=(gconst89*r20);
IkReal x2750=(gconst89*r10);
IkReal x2751=(gconst89*r00);
IkReal x2752=(cj1*sj2);
IkReal x2753=((1.0)*x2746);
IkReal x2754=((1.0)*x2745);
IkReal x2755=(gconst88*x2745);
evalcond[0]=((((-1.0)*r22*x2753))+((r21*x2755))+(((-1.0)*x2749*x2754)));
evalcond[1]=(((r11*x2755))+cj0+(((-1.0)*x2750*x2754))+(((-1.0)*r12*x2753)));
evalcond[2]=(((r01*x2755))+(((-1.0)*x2751*x2754))+(((-1.0)*x2747))+(((-1.0)*r02*x2753)));
evalcond[3]=((((-1.0)*r22*x2754))+((x2746*x2749))+(((-1.0)*gconst88*r21*x2753))+((sj1*sj2))+(((-1.0)*cj1*x2748)));
evalcond[4]=((((-1.0)*gconst88*r01*x2753))+((x2746*x2751))+(((-1.0)*cj0*x2752))+(((-1.0)*r02*x2754))+(((-1.0)*cj0*sj1*x2748)));
evalcond[5]=((((-1.0)*gconst88*r11*x2753))+((x2746*x2750))+(((-1.0)*cj2*sj1*x2747))+(((-1.0)*r12*x2754))+(((-1.0)*x2747*x2752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2756=((1.0)*gconst89);
CheckValue<IkReal> x2757 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2756))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2757.valid){
continue;
}
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2756))+(((-1.0)*gconst88*r00)))),-1);
if(!x2758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2757.value)+(((1.5707963267949)*(x2758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2759=IKsin(j4);
IkReal x2760=IKcos(j4);
IkReal x2761=((1.0)*sj0);
IkReal x2762=((1.0)*cj2);
IkReal x2763=(gconst89*r20);
IkReal x2764=(gconst89*r10);
IkReal x2765=(gconst89*r00);
IkReal x2766=(cj1*sj2);
IkReal x2767=((1.0)*x2760);
IkReal x2768=((1.0)*x2759);
IkReal x2769=(gconst88*x2759);
evalcond[0]=(((r21*x2769))+(((-1.0)*r22*x2767))+(((-1.0)*x2763*x2768)));
evalcond[1]=((((-1.0)*x2764*x2768))+cj0+(((-1.0)*r12*x2767))+((r11*x2769)));
evalcond[2]=(((r01*x2769))+(((-1.0)*x2761))+(((-1.0)*r02*x2767))+(((-1.0)*x2765*x2768)));
evalcond[3]=((((-1.0)*gconst88*r21*x2767))+((sj1*sj2))+((x2760*x2763))+(((-1.0)*cj1*x2762))+(((-1.0)*r22*x2768)));
evalcond[4]=((((-1.0)*cj0*x2766))+(((-1.0)*gconst88*r01*x2767))+(((-1.0)*r02*x2768))+(((-1.0)*cj0*sj1*x2762))+((x2760*x2765)));
evalcond[5]=((((-1.0)*r12*x2768))+(((-1.0)*x2761*x2766))+(((-1.0)*cj2*sj1*x2761))+(((-1.0)*gconst88*r11*x2767))+((x2760*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2770=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2770;
j4eval[1]=IKsign(x2770);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2771=((1.0)*cj5);
IkReal x2772=((((-1.0)*r01*x2771))+(((-1.0)*r00*sj5)));
j4eval[0]=x2772;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2771)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2773=cj5*cj5;
IkReal x2774=r11*r11;
IkReal x2775=(r11*sj5);
IkReal x2776=(cj5*r10);
IkReal x2777=(x2774+(((-2.0)*x2775*x2776))+(r12*r12)+(((-1.0)*x2773*x2774))+((x2773*(r10*r10))));
j4eval[0]=x2777;
j4eval[1]=IKsign(x2777);
j4eval[2]=((IKabs(r12))+(IKabs((x2776+(((-1.0)*x2775))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2778=cj5*cj5;
IkReal x2779=r11*r11;
IkReal x2780=(cj5*r10);
IkReal x2781=(r11*sj5);
CheckValue<IkReal> x2782=IKPowWithIntegerCheck(IKsign((x2779+(r12*r12)+(((-1.0)*x2778*x2779))+(((-2.0)*x2780*x2781))+((x2778*(r10*r10))))),-1);
if(!x2782.valid){
continue;
}
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal((x2780+(((-1.0)*x2781)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2782.value)))+(x2783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2784=IKsin(j4);
IkReal x2785=IKcos(j4);
IkReal x2786=(cj5*r10);
IkReal x2787=(r01*sj5);
IkReal x2788=((1.0)*cj2);
IkReal x2789=(cj5*r00);
IkReal x2790=(cj5*r20);
IkReal x2791=((1.0)*x2785);
IkReal x2792=((1.0)*x2784);
IkReal x2793=(sj5*x2784);
evalcond[0]=(((r21*x2793))+(((-1.0)*x2790*x2792))+(((-1.0)*r22*x2791)));
evalcond[1]=(((x2784*x2787))+(((-1.0)*x2789*x2792))+(((-1.0)*r02*x2791)));
evalcond[2]=(((x2785*x2786))+(((-1.0)*r11*sj5*x2791))+(((-1.0)*r12*x2792)));
evalcond[3]=((1.0)+(((-1.0)*x2786*x2792))+((r11*x2793))+(((-1.0)*r12*x2791)));
evalcond[4]=((((-1.0)*cj1*x2788))+((x2785*x2790))+(((-1.0)*r21*sj5*x2791))+((sj1*sj2))+(((-1.0)*r22*x2792)));
evalcond[5]=((((-1.0)*x2787*x2791))+((x2785*x2789))+(((-1.0)*sj1*x2788))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2794=((1.0)*cj5);
CheckValue<IkReal> x2795 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2794))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2794)))),-1);
if(!x2796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2795.value)+(((1.5707963267949)*(x2796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2797=IKsin(j4);
IkReal x2798=IKcos(j4);
IkReal x2799=(cj5*r10);
IkReal x2800=(r01*sj5);
IkReal x2801=((1.0)*cj2);
IkReal x2802=(cj5*r00);
IkReal x2803=(cj5*r20);
IkReal x2804=((1.0)*x2798);
IkReal x2805=((1.0)*x2797);
IkReal x2806=(sj5*x2797);
evalcond[0]=((((-1.0)*x2803*x2805))+(((-1.0)*r22*x2804))+((r21*x2806)));
evalcond[1]=(((x2797*x2800))+(((-1.0)*x2802*x2805))+(((-1.0)*r02*x2804)));
evalcond[2]=((((-1.0)*r12*x2805))+(((-1.0)*r11*sj5*x2804))+((x2798*x2799)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2804))+(((-1.0)*x2799*x2805))+((r11*x2806)));
evalcond[4]=((((-1.0)*r21*sj5*x2804))+(((-1.0)*cj1*x2801))+((x2798*x2803))+((sj1*sj2))+(((-1.0)*r22*x2805)));
evalcond[5]=((((-1.0)*sj1*x2801))+(((-1.0)*x2800*x2804))+((x2798*x2802))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2807.valid){
continue;
}
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2807.value)))+(x2808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2809=IKsin(j4);
IkReal x2810=IKcos(j4);
IkReal x2811=(cj5*r10);
IkReal x2812=(r01*sj5);
IkReal x2813=((1.0)*cj2);
IkReal x2814=(cj5*r00);
IkReal x2815=(cj5*r20);
IkReal x2816=((1.0)*x2810);
IkReal x2817=((1.0)*x2809);
IkReal x2818=(sj5*x2809);
evalcond[0]=((((-1.0)*x2815*x2817))+((r21*x2818))+(((-1.0)*r22*x2816)));
evalcond[1]=(((x2809*x2812))+(((-1.0)*r02*x2816))+(((-1.0)*x2814*x2817)));
evalcond[2]=((((-1.0)*r12*x2817))+((x2810*x2811))+(((-1.0)*r11*sj5*x2816)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2816))+((r11*x2818))+(((-1.0)*x2811*x2817)));
evalcond[4]=(((x2810*x2815))+(((-1.0)*cj1*x2813))+((sj1*sj2))+(((-1.0)*r22*x2817))+(((-1.0)*r21*sj5*x2816)));
evalcond[5]=(((x2810*x2814))+(((-1.0)*r02*x2817))+(((-1.0)*x2812*x2816))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2819=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2819;
j4eval[1]=IKsign(x2819);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2820=((1.0)*cj5);
IkReal x2821=((((-1.0)*r21*x2820))+(((-1.0)*r20*sj5)));
j4eval[0]=x2821;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2820))))));
j4eval[2]=IKsign(x2821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2822=cj5*cj5;
IkReal x2823=r11*r11;
IkReal x2824=(cj5*r10);
IkReal x2825=(r11*sj5);
IkReal x2826=(((x2822*x2823))+(((-1.0)*x2823))+(((-1.0)*x2822*(r10*r10)))+(((2.0)*x2824*x2825))+(((-1.0)*(r12*r12))));
j4eval[0]=x2826;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2825))+x2824))));
j4eval[2]=IKsign(x2826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2827=cj5*cj5;
IkReal x2828=r11*r11;
IkReal x2829=(cj5*r10);
IkReal x2830=(r11*sj5);
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(((((-1.0)*x2830))+x2829)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832=IKPowWithIntegerCheck(IKsign(((((2.0)*x2829*x2830))+(((-1.0)*x2828))+(((-1.0)*(r12*r12)))+((x2827*x2828))+(((-1.0)*x2827*(r10*r10))))),-1);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2831.value)+(((1.5707963267949)*(x2832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=(cj5*r10);
IkReal x2836=(r01*sj5);
IkReal x2837=(cj5*r00);
IkReal x2838=(cj5*r20);
IkReal x2839=((1.0)*x2834);
IkReal x2840=((1.0)*x2833);
IkReal x2841=(sj5*x2833);
evalcond[0]=(((r21*x2841))+(((-1.0)*r22*x2839))+(((-1.0)*x2838*x2840)));
evalcond[1]=((((-1.0)*x2837*x2840))+((x2833*x2836))+(((-1.0)*r02*x2839)));
evalcond[2]=(((x2834*x2835))+(((-1.0)*r12*x2840))+(((-1.0)*r11*sj5*x2839)));
evalcond[3]=((-1.0)+((r11*x2841))+(((-1.0)*r12*x2839))+(((-1.0)*x2835*x2840)));
evalcond[4]=(((cj2*sj1))+((x2834*x2837))+((cj1*sj2))+(((-1.0)*x2836*x2839))+(((-1.0)*r02*x2840)));
evalcond[5]=(((x2834*x2838))+(((-1.0)*r21*sj5*x2839))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2842=((1.0)*cj5);
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2842))+(((-1.0)*r20*sj5)))),-1);
if(!x2843.valid){
continue;
}
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2843.value)))+(x2844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2845=IKsin(j4);
IkReal x2846=IKcos(j4);
IkReal x2847=(cj5*r10);
IkReal x2848=(r01*sj5);
IkReal x2849=(cj5*r00);
IkReal x2850=(cj5*r20);
IkReal x2851=((1.0)*x2846);
IkReal x2852=((1.0)*x2845);
IkReal x2853=(sj5*x2845);
evalcond[0]=(((r21*x2853))+(((-1.0)*x2850*x2852))+(((-1.0)*r22*x2851)));
evalcond[1]=((((-1.0)*x2849*x2852))+(((-1.0)*r02*x2851))+((x2845*x2848)));
evalcond[2]=((((-1.0)*r11*sj5*x2851))+(((-1.0)*r12*x2852))+((x2846*x2847)));
evalcond[3]=((-1.0)+((r11*x2853))+(((-1.0)*r12*x2851))+(((-1.0)*x2847*x2852)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2846*x2849))+(((-1.0)*r02*x2852))+(((-1.0)*x2848*x2851)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2846*x2850))+(((-1.0)*r22*x2852))+(((-1.0)*r21*sj5*x2851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2854 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2854.value)+(((1.5707963267949)*(x2855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2856=IKsin(j4);
IkReal x2857=IKcos(j4);
IkReal x2858=(cj5*r10);
IkReal x2859=(r01*sj5);
IkReal x2860=(cj5*r00);
IkReal x2861=(cj5*r20);
IkReal x2862=((1.0)*x2857);
IkReal x2863=((1.0)*x2856);
IkReal x2864=(sj5*x2856);
evalcond[0]=((((-1.0)*x2861*x2863))+((r21*x2864))+(((-1.0)*r22*x2862)));
evalcond[1]=((((-1.0)*r02*x2862))+(((-1.0)*x2860*x2863))+((x2856*x2859)));
evalcond[2]=((((-1.0)*r12*x2863))+(((-1.0)*r11*sj5*x2862))+((x2857*x2858)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2862))+(((-1.0)*x2858*x2863))+((r11*x2864)));
evalcond[4]=((((-1.0)*r02*x2863))+((cj2*sj1))+((x2857*x2860))+((cj1*sj2))+(((-1.0)*x2859*x2862)));
evalcond[5]=(((x2857*x2861))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2863))+(((-1.0)*r21*sj5*x2862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2865=((-1.0)*r00);
IkReal x2867 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2867)==0){
continue;
}
IkReal x2866=pow(x2867,-0.5);
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2865),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2868.value));
IkReal gconst91=(r01*x2866);
IkReal gconst92=(x2865*x2866);
CheckValue<IkReal> x2869 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2869.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2869.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2870=((-1.0)*r00);
IkReal x2871=x2866;
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2870),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
IkReal x2872=((-1.0)*(x2873.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2872;
IkReal gconst90=x2872;
IkReal gconst91=(r01*x2871);
IkReal gconst92=(x2870*x2871);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2874=((1.0)*sj0);
IkReal x2875=((1.0)*cj0);
CheckValue<IkReal> x2876 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2875))+(((-1.0)*r12*x2874)))),IkReal(((((-1.0)*gconst91*r11*x2874))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2876.value)+(((1.5707963267949)*(x2877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2878=IKsin(j4);
IkReal x2879=IKcos(j4);
IkReal x2880=((1.0)*cj2);
IkReal x2881=(gconst92*r00);
IkReal x2882=(gconst92*r20);
IkReal x2883=((1.0)*sj0);
IkReal x2884=(gconst92*r10);
IkReal x2885=(cj1*sj2);
IkReal x2886=((1.0)*x2879);
IkReal x2887=(gconst91*x2878);
IkReal x2888=((1.0)*x2878);
evalcond[0]=((((-1.0)*r22*x2886))+(((-1.0)*x2882*x2888))+((r21*x2887)));
evalcond[1]=(cj0+((r11*x2887))+(((-1.0)*x2884*x2888))+(((-1.0)*r12*x2886)));
evalcond[2]=((((-1.0)*r02*x2886))+((r01*x2887))+(((-1.0)*x2883))+(((-1.0)*x2881*x2888)));
evalcond[3]=((((-1.0)*gconst91*r21*x2886))+(((-1.0)*r22*x2888))+((sj1*sj2))+((x2879*x2882))+(((-1.0)*cj1*x2880)));
evalcond[4]=((((-1.0)*cj0*sj1*x2880))+(((-1.0)*r02*x2888))+((x2879*x2881))+(((-1.0)*cj0*x2885))+(((-1.0)*gconst91*r01*x2886)));
evalcond[5]=((((-1.0)*x2883*x2885))+(((-1.0)*sj0*sj1*x2880))+(((-1.0)*gconst91*r11*x2886))+((x2879*x2884))+(((-1.0)*r12*x2888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2889=((1.0)*gconst92);
CheckValue<IkReal> x2890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2889))+(((-1.0)*gconst91*r10)))),-1);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2889))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2890.value)))+(x2891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2892=IKsin(j4);
IkReal x2893=IKcos(j4);
IkReal x2894=((1.0)*cj2);
IkReal x2895=(gconst92*r00);
IkReal x2896=(gconst92*r20);
IkReal x2897=((1.0)*sj0);
IkReal x2898=(gconst92*r10);
IkReal x2899=(cj1*sj2);
IkReal x2900=((1.0)*x2893);
IkReal x2901=(gconst91*x2892);
IkReal x2902=((1.0)*x2892);
evalcond[0]=(((r21*x2901))+(((-1.0)*x2896*x2902))+(((-1.0)*r22*x2900)));
evalcond[1]=(cj0+(((-1.0)*x2898*x2902))+(((-1.0)*r12*x2900))+((r11*x2901)));
evalcond[2]=((((-1.0)*r02*x2900))+((r01*x2901))+(((-1.0)*x2897))+(((-1.0)*x2895*x2902)));
evalcond[3]=(((sj1*sj2))+((x2893*x2896))+(((-1.0)*cj1*x2894))+(((-1.0)*gconst91*r21*x2900))+(((-1.0)*r22*x2902)));
evalcond[4]=((((-1.0)*r02*x2902))+(((-1.0)*cj0*sj1*x2894))+(((-1.0)*cj0*x2899))+((x2893*x2895))+(((-1.0)*gconst91*r01*x2900)));
evalcond[5]=((((-1.0)*sj0*sj1*x2894))+((x2893*x2898))+(((-1.0)*gconst91*r11*x2900))+(((-1.0)*x2897*x2899))+(((-1.0)*r12*x2902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2903=((-1.0)*r01);
IkReal x2905 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2905)==0){
continue;
}
IkReal x2904=pow(x2905,-0.5);
CheckValue<IkReal> x2906 = IKatan2WithCheck(IkReal(x2903),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2906.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2906.value))));
IkReal gconst94=(x2903*x2904);
IkReal gconst95=((1.0)*r00*x2904);
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2908=((-1.0)*r01);
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(x2908),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
IkReal x2909=((1.0)*(x2911.value));
IkReal x2910=x2904;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2909)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2909)));
IkReal gconst94=(x2908*x2910);
IkReal gconst95=((1.0)*r00*x2910);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2912=((-1.0)*r01);
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal(x2912),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
IkReal x2913=((1.0)*(x2915.value));
IkReal x2914=x2904;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2913)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2913)));
IkReal gconst94=(x2912*x2914);
IkReal gconst95=((1.0)*r00*x2914);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2916=((-1.0)*r01);
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal(x2916),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
IkReal x2917=((1.0)*(x2919.value));
IkReal x2918=x2904;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2917)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2917)));
IkReal gconst94=(x2916*x2918);
IkReal gconst95=((1.0)*r00*x2918);
IkReal x2920=r02*r02;
IkReal x2921=(r12*sj0);
IkReal x2922=((1.0)*cj0);
IkReal x2923=x2904;
j4eval[0]=((IKabs((((cj0*x2920*x2923))+((r02*x2921*x2923))+(((-1.0)*x2922*x2923)))))+(IKabs(((((-1.0)*r02*x2922))+(((-1.0)*x2921))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2924=((1.0)*sj0);
IkReal x2925=((1.0)*cj0);
CheckValue<IkReal> x2926=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2926.valid){
continue;
}
CheckValue<IkReal> x2927 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2925))+(((-1.0)*r12*x2924)))),IkReal(((((-1.0)*gconst94*r01*x2925))+(((-1.0)*gconst94*r11*x2924))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2926.value)))+(x2927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2928=IKsin(j4);
IkReal x2929=IKcos(j4);
IkReal x2930=(gconst94*r11);
IkReal x2931=((1.0)*cj2);
IkReal x2932=(gconst94*r21);
IkReal x2933=((1.0)*sj0);
IkReal x2934=(gconst94*r01);
IkReal x2935=(cj1*sj2);
IkReal x2936=((1.0)*x2929);
IkReal x2937=(gconst95*x2929);
IkReal x2938=((1.0)*x2928);
IkReal x2939=(gconst95*x2938);
evalcond[0]=((((-1.0)*r20*x2939))+((x2928*x2932))+(((-1.0)*r22*x2936)));
evalcond[1]=(((x2928*x2930))+cj0+(((-1.0)*r12*x2936))+(((-1.0)*r10*x2939)));
evalcond[2]=(((x2928*x2934))+(((-1.0)*x2933))+(((-1.0)*r00*x2939))+(((-1.0)*r02*x2936)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2932*x2936))+(((-1.0)*cj1*x2931))+((r20*x2937))+(((-1.0)*r22*x2938)));
evalcond[4]=((((-1.0)*cj0*x2935))+((r00*x2937))+(((-1.0)*cj0*sj1*x2931))+(((-1.0)*x2934*x2936))+(((-1.0)*r02*x2938)));
evalcond[5]=((((-1.0)*x2930*x2936))+(((-1.0)*x2933*x2935))+((r10*x2937))+(((-1.0)*sj0*sj1*x2931))+(((-1.0)*r12*x2938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2940=((1.0)*gconst95);
CheckValue<IkReal> x2941 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2940)))),-1);
if(!x2942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2941.value)+(((1.5707963267949)*(x2942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2943=IKsin(j4);
IkReal x2944=IKcos(j4);
IkReal x2945=(gconst94*r11);
IkReal x2946=((1.0)*cj2);
IkReal x2947=(gconst94*r21);
IkReal x2948=((1.0)*sj0);
IkReal x2949=(gconst94*r01);
IkReal x2950=(cj1*sj2);
IkReal x2951=((1.0)*x2944);
IkReal x2952=(gconst95*x2944);
IkReal x2953=((1.0)*x2943);
IkReal x2954=(gconst95*x2953);
evalcond[0]=((((-1.0)*r20*x2954))+(((-1.0)*r22*x2951))+((x2943*x2947)));
evalcond[1]=((((-1.0)*r10*x2954))+cj0+(((-1.0)*r12*x2951))+((x2943*x2945)));
evalcond[2]=((((-1.0)*r02*x2951))+(((-1.0)*x2948))+(((-1.0)*r00*x2954))+((x2943*x2949)));
evalcond[3]=((((-1.0)*x2947*x2951))+((sj1*sj2))+((r20*x2952))+(((-1.0)*cj1*x2946))+(((-1.0)*r22*x2953)));
evalcond[4]=((((-1.0)*r02*x2953))+(((-1.0)*cj0*x2950))+((r00*x2952))+(((-1.0)*x2949*x2951))+(((-1.0)*cj0*sj1*x2946)));
evalcond[5]=((((-1.0)*x2948*x2950))+((r10*x2952))+(((-1.0)*r12*x2953))+(((-1.0)*sj0*sj1*x2946))+(((-1.0)*x2945*x2951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2955=((1.0)*gconst95);
CheckValue<IkReal> x2956 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2955))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2956.valid){
continue;
}
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2955)))),-1);
if(!x2957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2956.value)+(((1.5707963267949)*(x2957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2958=IKsin(j4);
IkReal x2959=IKcos(j4);
IkReal x2960=(gconst94*r11);
IkReal x2961=((1.0)*cj2);
IkReal x2962=(gconst94*r21);
IkReal x2963=((1.0)*sj0);
IkReal x2964=(gconst94*r01);
IkReal x2965=(cj1*sj2);
IkReal x2966=((1.0)*x2959);
IkReal x2967=(gconst95*x2959);
IkReal x2968=((1.0)*x2958);
IkReal x2969=(gconst95*x2968);
evalcond[0]=((((-1.0)*r20*x2969))+(((-1.0)*r22*x2966))+((x2958*x2962)));
evalcond[1]=(cj0+((x2958*x2960))+(((-1.0)*r10*x2969))+(((-1.0)*r12*x2966)));
evalcond[2]=((((-1.0)*r00*x2969))+(((-1.0)*r02*x2966))+(((-1.0)*x2963))+((x2958*x2964)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2962*x2966))+(((-1.0)*r22*x2968))+((r20*x2967))+(((-1.0)*cj1*x2961)));
evalcond[4]=((((-1.0)*r02*x2968))+(((-1.0)*cj0*x2965))+(((-1.0)*cj0*sj1*x2961))+((r00*x2967))+(((-1.0)*x2964*x2966)));
evalcond[5]=((((-1.0)*x2963*x2965))+((r10*x2967))+(((-1.0)*sj0*sj1*x2961))+(((-1.0)*x2960*x2966))+(((-1.0)*r12*x2968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2970=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2970;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2971=((1.0)*cj5);
IkReal x2972=((((-1.0)*r11*x2971))+(((-1.0)*r10*sj5)));
j4eval[0]=x2972;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2971)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2973=cj5*cj5;
IkReal x2974=r01*r01;
IkReal x2975=(r01*sj5);
IkReal x2976=(cj5*r00);
IkReal x2977=((((-1.0)*x2973*(r00*r00)))+(((-1.0)*x2974))+(((-1.0)*(r02*r02)))+(((2.0)*x2975*x2976))+((x2973*x2974)));
j4eval[0]=x2977;
j4eval[1]=IKsign(x2977);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2975))+x2976))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2978=cj5*cj5;
IkReal x2979=r01*r01;
IkReal x2980=(r01*sj5);
IkReal x2981=(cj5*r00);
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal(((((-1.0)*x2980))+x2981)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2979))+(((2.0)*x2980*x2981))+(((-1.0)*(r02*r02)))+(((-1.0)*x2978*(r00*r00)))+((x2978*x2979)))),-1);
if(!x2983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2982.value)+(((1.5707963267949)*(x2983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2984=IKsin(j4);
IkReal x2985=IKcos(j4);
IkReal x2986=(cj5*r10);
IkReal x2987=(r01*sj5);
IkReal x2988=((1.0)*cj2);
IkReal x2989=(cj5*r00);
IkReal x2990=(cj5*r20);
IkReal x2991=((1.0)*x2985);
IkReal x2992=((1.0)*x2984);
IkReal x2993=(sj5*x2984);
evalcond[0]=((((-1.0)*r22*x2991))+((r21*x2993))+(((-1.0)*x2990*x2992)));
evalcond[1]=((((-1.0)*r12*x2991))+(((-1.0)*x2986*x2992))+((r11*x2993)));
evalcond[2]=((((-1.0)*x2987*x2991))+(((-1.0)*r02*x2992))+((x2985*x2989)));
evalcond[3]=((-1.0)+((x2984*x2987))+(((-1.0)*x2989*x2992))+(((-1.0)*r02*x2991)));
evalcond[4]=((((-1.0)*r22*x2992))+((x2985*x2990))+(((-1.0)*cj1*x2988))+((sj1*sj2))+(((-1.0)*r21*sj5*x2991)));
evalcond[5]=((((-1.0)*r12*x2992))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2988))+(((-1.0)*r11*sj5*x2991))+((x2985*x2986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2994=((1.0)*cj5);
CheckValue<IkReal> x2995 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2994)))),-1);
if(!x2996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2995.value)+(((1.5707963267949)*(x2996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2997=IKsin(j4);
IkReal x2998=IKcos(j4);
IkReal x2999=(cj5*r10);
IkReal x3000=(r01*sj5);
IkReal x3001=((1.0)*cj2);
IkReal x3002=(cj5*r00);
IkReal x3003=(cj5*r20);
IkReal x3004=((1.0)*x2998);
IkReal x3005=((1.0)*x2997);
IkReal x3006=(sj5*x2997);
evalcond[0]=((((-1.0)*r22*x3004))+(((-1.0)*x3003*x3005))+((r21*x3006)));
evalcond[1]=((((-1.0)*r12*x3004))+((r11*x3006))+(((-1.0)*x2999*x3005)));
evalcond[2]=((((-1.0)*r02*x3005))+((x2998*x3002))+(((-1.0)*x3000*x3004)));
evalcond[3]=((-1.0)+(((-1.0)*x3002*x3005))+(((-1.0)*r02*x3004))+((x2997*x3000)));
evalcond[4]=((((-1.0)*r22*x3005))+(((-1.0)*r21*sj5*x3004))+((x2998*x3003))+((sj1*sj2))+(((-1.0)*cj1*x3001)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3004))+((x2998*x2999))+(((-1.0)*r12*x3005))+(((-1.0)*sj1*x3001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3007.value)))+(x3008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3009=IKsin(j4);
IkReal x3010=IKcos(j4);
IkReal x3011=(cj5*r10);
IkReal x3012=(r01*sj5);
IkReal x3013=((1.0)*cj2);
IkReal x3014=(cj5*r00);
IkReal x3015=(cj5*r20);
IkReal x3016=((1.0)*x3010);
IkReal x3017=((1.0)*x3009);
IkReal x3018=(sj5*x3009);
evalcond[0]=((((-1.0)*r22*x3016))+((r21*x3018))+(((-1.0)*x3015*x3017)));
evalcond[1]=((((-1.0)*r12*x3016))+(((-1.0)*x3011*x3017))+((r11*x3018)));
evalcond[2]=(((x3010*x3014))+(((-1.0)*r02*x3017))+(((-1.0)*x3012*x3016)));
evalcond[3]=((-1.0)+((x3009*x3012))+(((-1.0)*r02*x3016))+(((-1.0)*x3014*x3017)));
evalcond[4]=(((x3010*x3015))+(((-1.0)*r22*x3017))+(((-1.0)*r21*sj5*x3016))+((sj1*sj2))+(((-1.0)*cj1*x3013)));
evalcond[5]=(((x3010*x3011))+(((-1.0)*r11*sj5*x3016))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3017))+(((-1.0)*sj1*x3013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3019=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3019;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3020=((1.0)*cj5);
IkReal x3021=((((-1.0)*r21*x3020))+(((-1.0)*r20*sj5)));
j4eval[0]=x3021;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3020))))));
j4eval[2]=IKsign(x3021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3022=cj5*cj5;
IkReal x3023=r01*r01;
IkReal x3024=(cj5*r00);
IkReal x3025=(r01*sj5);
IkReal x3026=(x3023+(((-1.0)*x3022*x3023))+((x3022*(r00*r00)))+(((-2.0)*x3024*x3025))+(r02*r02));
j4eval[0]=x3026;
j4eval[1]=((IKabs(r02))+(IKabs((x3024+(((-1.0)*x3025))))));
j4eval[2]=IKsign(x3026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3027=cj5*cj5;
IkReal x3028=r01*r01;
IkReal x3029=(r01*sj5);
IkReal x3030=(cj5*r00);
CheckValue<IkReal> x3031=IKPowWithIntegerCheck(IKsign((x3028+((x3027*(r00*r00)))+(((-1.0)*x3027*x3028))+(((-2.0)*x3029*x3030))+(r02*r02))),-1);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032 = IKatan2WithCheck(IkReal((x3030+(((-1.0)*x3029)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3031.value)))+(x3032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3033=IKsin(j4);
IkReal x3034=IKcos(j4);
IkReal x3035=(cj5*r10);
IkReal x3036=(r01*sj5);
IkReal x3037=(cj5*r00);
IkReal x3038=(cj5*r20);
IkReal x3039=((1.0)*x3034);
IkReal x3040=((1.0)*x3033);
IkReal x3041=(sj5*x3033);
evalcond[0]=(((r21*x3041))+(((-1.0)*x3038*x3040))+(((-1.0)*r22*x3039)));
evalcond[1]=((((-1.0)*r12*x3039))+(((-1.0)*x3035*x3040))+((r11*x3041)));
evalcond[2]=(((x3034*x3037))+(((-1.0)*x3036*x3039))+(((-1.0)*r02*x3040)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3039))+((x3033*x3036))+(((-1.0)*x3037*x3040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3040))+((x3034*x3035))+((cj1*sj2))+(((-1.0)*r11*sj5*x3039)));
evalcond[5]=(((x3034*x3038))+(((-1.0)*r21*sj5*x3039))+(((-1.0)*r22*x3040))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3042=((1.0)*cj5);
CheckValue<IkReal> x3043 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3042))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3042))+(((-1.0)*r20*sj5)))),-1);
if(!x3044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3043.value)+(((1.5707963267949)*(x3044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3045=IKsin(j4);
IkReal x3046=IKcos(j4);
IkReal x3047=(cj5*r10);
IkReal x3048=(r01*sj5);
IkReal x3049=(cj5*r00);
IkReal x3050=(cj5*r20);
IkReal x3051=((1.0)*x3046);
IkReal x3052=((1.0)*x3045);
IkReal x3053=(sj5*x3045);
evalcond[0]=(((r21*x3053))+(((-1.0)*x3050*x3052))+(((-1.0)*r22*x3051)));
evalcond[1]=((((-1.0)*x3047*x3052))+((r11*x3053))+(((-1.0)*r12*x3051)));
evalcond[2]=(((x3046*x3049))+(((-1.0)*x3048*x3051))+(((-1.0)*r02*x3052)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3051))+((x3045*x3048))+(((-1.0)*x3049*x3052)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3046*x3047))+(((-1.0)*r12*x3052))+(((-1.0)*r11*sj5*x3051)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3051))+((x3046*x3050))+(((-1.0)*r22*x3052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3054 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3054.valid){
continue;
}
CheckValue<IkReal> x3055=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3054.value)+(((1.5707963267949)*(x3055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3056=IKsin(j4);
IkReal x3057=IKcos(j4);
IkReal x3058=(cj5*r10);
IkReal x3059=(r01*sj5);
IkReal x3060=(cj5*r00);
IkReal x3061=(cj5*r20);
IkReal x3062=((1.0)*x3057);
IkReal x3063=((1.0)*x3056);
IkReal x3064=(sj5*x3056);
evalcond[0]=((((-1.0)*r22*x3062))+(((-1.0)*x3061*x3063))+((r21*x3064)));
evalcond[1]=((((-1.0)*x3058*x3063))+(((-1.0)*r12*x3062))+((r11*x3064)));
evalcond[2]=((((-1.0)*r02*x3063))+((x3057*x3060))+(((-1.0)*x3059*x3062)));
evalcond[3]=((1.0)+(((-1.0)*x3060*x3063))+((x3056*x3059))+(((-1.0)*r02*x3062)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3062))+((cj1*sj2))+((x3057*x3058))+(((-1.0)*r12*x3063)));
evalcond[5]=((((-1.0)*r21*sj5*x3062))+(((-1.0)*r22*x3063))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3057*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3065=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3065);
rxp1_1=(px*r21);
rxp1_2=(r11*x3065);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3066=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3066);
rxp1_1=(px*r21);
rxp1_2=(r11*x3066);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3067=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3067);
rxp1_1=(px*r21);
rxp1_2=(r11*x3067);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3070=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3070.valid){
continue;
}
IkReal x3068=x3070.value;
IkReal x3069=(sj0*x3068);
cj4array[0]=(((cj2*sj1*x3069))+((cj1*sj2*x3069)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3071=IKsin(j4);
IkReal x3072=IKcos(j4);
IkReal x3073=(cj5*r20);
IkReal x3074=(r21*sj5);
IkReal x3075=((1.0)*x3071);
IkReal x3076=((1.0)*x3072);
evalcond[0]=((-1.0)*r02*x3071);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3076)));
evalcond[2]=((((-1.0)*x3073*x3075))+((x3071*x3074)));
evalcond[3]=((((-1.0)*cj5*r10*x3075))+((r11*sj5*x3071)));
evalcond[4]=((((-1.0)*x3074*x3076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3072*x3073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3078=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3078.valid){
continue;
}
IkReal x3077=x3078.value;
cj4array[0]=(((cj1*cj2*x3077))+(((-1.0)*sj1*sj2*x3077)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3079=IKsin(j4);
IkReal x3080=IKcos(j4);
IkReal x3081=(r11*sj5);
IkReal x3082=((1.0)*sj0);
IkReal x3083=((1.0)*x3080);
IkReal x3084=((1.0)*cj5*x3079);
evalcond[0]=((-1.0)*r02*x3079);
evalcond[1]=((((-1.0)*x3082))+(((-1.0)*r02*x3083)));
evalcond[2]=((((-1.0)*r20*x3084))+((r21*sj5*x3079)));
evalcond[3]=(((x3079*x3081))+(((-1.0)*r10*x3084)));
evalcond[4]=(((cj5*r10*x3080))+(((-1.0)*cj1*sj2*x3082))+(((-1.0)*x3081*x3083))+(((-1.0)*cj2*sj1*x3082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(r02,-1);
if(!x3085.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3085.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3086=IKsin(j4);
IkReal x3087=IKcos(j4);
IkReal x3088=((1.0)*sj0);
IkReal x3089=(cj5*x3087);
IkReal x3090=(sj5*x3086);
IkReal x3091=((1.0)*sj5*x3087);
IkReal x3092=((1.0)*cj5*x3086);
evalcond[0]=((-1.0)*r02*x3086);
evalcond[1]=(((r21*x3090))+(((-1.0)*r20*x3092)));
evalcond[2]=((((-1.0)*r10*x3092))+((r11*x3090)));
evalcond[3]=(((r20*x3089))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x3091)));
evalcond[4]=((((-1.0)*r11*x3091))+((r10*x3089))+(((-1.0)*cj1*sj2*x3088))+(((-1.0)*cj2*sj1*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3093=((1.0)*sj0);
IkReal x3094=((1.0)*cj0);
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3094))+(((-1.0)*r12*x3093)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3094))+(((-1.0)*r11*sj5*x3093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3095.value)))+(x3096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3097=IKsin(j4);
IkReal x3098=IKcos(j4);
IkReal x3099=(cj5*r10);
IkReal x3100=(r01*sj5);
IkReal x3101=((1.0)*cj2);
IkReal x3102=(cj5*r00);
IkReal x3103=((1.0)*sj0);
IkReal x3104=(cj5*r20);
IkReal x3105=(cj1*sj2);
IkReal x3106=((1.0)*x3098);
IkReal x3107=((1.0)*x3097);
IkReal x3108=(sj5*x3097);
evalcond[0]=(((r21*x3108))+(((-1.0)*x3104*x3107))+(((-1.0)*r22*x3106)));
evalcond[1]=(((r11*x3108))+cj0+(((-1.0)*r12*x3106))+(((-1.0)*x3099*x3107)));
evalcond[2]=(((x3097*x3100))+(((-1.0)*x3103))+(((-1.0)*x3102*x3107))+(((-1.0)*r02*x3106)));
evalcond[3]=(((x3098*x3104))+(((-1.0)*cj1*x3101))+((sj1*sj2))+(((-1.0)*r22*x3107))+(((-1.0)*r21*sj5*x3106)));
evalcond[4]=(((x3098*x3102))+(((-1.0)*x3100*x3106))+(((-1.0)*r02*x3107))+(((-1.0)*cj0*x3105))+(((-1.0)*cj0*sj1*x3101)));
evalcond[5]=((((-1.0)*x3103*x3105))+((x3098*x3099))+(((-1.0)*r12*x3107))+(((-1.0)*sj0*sj1*x3101))+(((-1.0)*r11*sj5*x3106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3109=((1.0)*cj5);
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3109)))),-1);
if(!x3110.valid){
continue;
}
CheckValue<IkReal> x3111 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3109))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3110.value)))+(x3111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3112=IKsin(j4);
IkReal x3113=IKcos(j4);
IkReal x3114=(cj5*r10);
IkReal x3115=(r01*sj5);
IkReal x3116=((1.0)*cj2);
IkReal x3117=(cj5*r00);
IkReal x3118=((1.0)*sj0);
IkReal x3119=(cj5*r20);
IkReal x3120=(cj1*sj2);
IkReal x3121=((1.0)*x3113);
IkReal x3122=((1.0)*x3112);
IkReal x3123=(sj5*x3112);
evalcond[0]=(((r21*x3123))+(((-1.0)*r22*x3121))+(((-1.0)*x3119*x3122)));
evalcond[1]=(cj0+(((-1.0)*x3114*x3122))+(((-1.0)*r12*x3121))+((r11*x3123)));
evalcond[2]=((((-1.0)*r02*x3121))+(((-1.0)*x3117*x3122))+((x3112*x3115))+(((-1.0)*x3118)));
evalcond[3]=((((-1.0)*r21*sj5*x3121))+(((-1.0)*cj1*x3116))+((sj1*sj2))+((x3113*x3119))+(((-1.0)*r22*x3122)));
evalcond[4]=((((-1.0)*r02*x3122))+(((-1.0)*cj0*x3120))+(((-1.0)*x3115*x3121))+((x3113*x3117))+(((-1.0)*cj0*sj1*x3116)));
evalcond[5]=(((x3113*x3114))+(((-1.0)*sj0*sj1*x3116))+(((-1.0)*r12*x3122))+(((-1.0)*x3118*x3120))+(((-1.0)*r11*sj5*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3124=((1.0)*cj5);
CheckValue<IkReal> x3125 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3124))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3125.valid){
continue;
}
CheckValue<IkReal> x3126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3124)))),-1);
if(!x3126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3125.value)+(((1.5707963267949)*(x3126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3127=IKsin(j4);
IkReal x3128=IKcos(j4);
IkReal x3129=(cj5*r10);
IkReal x3130=(r01*sj5);
IkReal x3131=((1.0)*cj2);
IkReal x3132=(cj5*r00);
IkReal x3133=((1.0)*sj0);
IkReal x3134=(cj5*r20);
IkReal x3135=(cj1*sj2);
IkReal x3136=((1.0)*x3128);
IkReal x3137=((1.0)*x3127);
IkReal x3138=(sj5*x3127);
evalcond[0]=(((r21*x3138))+(((-1.0)*x3134*x3137))+(((-1.0)*r22*x3136)));
evalcond[1]=(cj0+(((-1.0)*r12*x3136))+((r11*x3138))+(((-1.0)*x3129*x3137)));
evalcond[2]=((((-1.0)*r02*x3136))+(((-1.0)*x3132*x3137))+((x3127*x3130))+(((-1.0)*x3133)));
evalcond[3]=((((-1.0)*r21*sj5*x3136))+((sj1*sj2))+(((-1.0)*cj1*x3131))+(((-1.0)*r22*x3137))+((x3128*x3134)));
evalcond[4]=((((-1.0)*x3130*x3136))+(((-1.0)*cj0*sj1*x3131))+(((-1.0)*r02*x3137))+(((-1.0)*cj0*x3135))+((x3128*x3132)));
evalcond[5]=((((-1.0)*x3133*x3135))+(((-1.0)*r12*x3137))+(((-1.0)*r11*sj5*x3136))+((x3128*x3129))+(((-1.0)*sj0*sj1*x3131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3139=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3139;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3139);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3140=r21*r21;
IkReal x3141=cj5*cj5;
IkReal x3142=(sj1*sj2);
IkReal x3143=(r21*sj5);
IkReal x3144=(cj5*r20);
IkReal x3145=(cj1*cj2);
IkReal x3146=((((-1.0)*x3140))+(((2.0)*x3143*x3144))+(((-1.0)*(r22*r22)))+((x3140*x3141))+(((-1.0)*x3141*(r20*r20))));
j4eval[0]=x3146;
j4eval[1]=((IKabs((((x3142*x3143))+((x3144*x3145))+(((-1.0)*x3143*x3145))+(((-1.0)*x3142*x3144)))))+(IKabs(((((-1.0)*r22*x3145))+((r22*x3142))))));
j4eval[2]=IKsign(x3146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3147=IKcos(j0);
IkReal x3148=IKsin(j0);
evalcond[0]=((((0.425)*x3147))+(((-0.134)*x3148))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x3148))+(((-1.0)*py))+(((0.134)*x3147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3149=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3149;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3150=((1.0)*cj5);
IkReal x3151=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3150)));
j4eval[0]=x3151;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3150)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3152=((1.0)*cj5);
IkReal x3153=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3152)));
j4eval[0]=x3153;
j4eval[1]=IKsign(x3153);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3152))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3154=((1.0)*cj5);
CheckValue<IkReal> x3155 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3154)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3155.valid){
continue;
}
CheckValue<IkReal> x3156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3154)))),-1);
if(!x3156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3155.value)+(((1.5707963267949)*(x3156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3157=IKcos(j4);
IkReal x3158=IKsin(j4);
IkReal x3159=((1.0)*sj0);
IkReal x3160=(cj5*r00);
IkReal x3161=(cj5*r10);
IkReal x3162=(cj5*r20);
IkReal x3163=((1.0)*x3157);
IkReal x3164=((1.0)*x3158);
IkReal x3165=(sj5*x3157);
IkReal x3166=(sj5*x3158);
evalcond[0]=(((r22*x3158))+(((-1.0)*x3162*x3163))+((r21*x3165)));
evalcond[1]=((((-1.0)*x3162*x3164))+((r21*x3166))+(((-1.0)*r22*x3163)));
evalcond[2]=((((-1.0)*r12*x3163))+(((-1.0)*x3161*x3164))+cj0+((r11*x3166)));
evalcond[3]=(((r02*x3158))+(((-1.0)*x3160*x3163))+((r01*x3165))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3159))+(((-1.0)*x3161*x3163))+((r11*x3165))+((r12*x3158)));
evalcond[5]=((((-1.0)*x3159))+(((-1.0)*x3160*x3164))+((r01*x3166))+(((-1.0)*r02*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3167=((1.0)*cj5);
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3167)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3168.value)))+(x3169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3170=IKcos(j4);
IkReal x3171=IKsin(j4);
IkReal x3172=((1.0)*sj0);
IkReal x3173=(cj5*r00);
IkReal x3174=(cj5*r10);
IkReal x3175=(cj5*r20);
IkReal x3176=((1.0)*x3170);
IkReal x3177=((1.0)*x3171);
IkReal x3178=(sj5*x3170);
IkReal x3179=(sj5*x3171);
evalcond[0]=(((r22*x3171))+((r21*x3178))+(((-1.0)*x3175*x3176)));
evalcond[1]=(((r21*x3179))+(((-1.0)*r22*x3176))+(((-1.0)*x3175*x3177)));
evalcond[2]=(((r11*x3179))+(((-1.0)*x3174*x3177))+cj0+(((-1.0)*r12*x3176)));
evalcond[3]=(((r02*x3171))+(((-1.0)*x3173*x3176))+((r01*x3178))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3178))+(((-1.0)*x3174*x3176))+(((-1.0)*x3172))+((r12*x3171)));
evalcond[5]=((((-1.0)*x3172))+(((-1.0)*x3173*x3177))+((r01*x3179))+(((-1.0)*r02*x3176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3180 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3180.valid){
continue;
}
CheckValue<IkReal> x3181=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3180.value)+(((1.5707963267949)*(x3181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3182=IKcos(j4);
IkReal x3183=IKsin(j4);
IkReal x3184=((1.0)*sj0);
IkReal x3185=(cj5*r00);
IkReal x3186=(cj5*r10);
IkReal x3187=(cj5*r20);
IkReal x3188=((1.0)*x3182);
IkReal x3189=((1.0)*x3183);
IkReal x3190=(sj5*x3182);
IkReal x3191=(sj5*x3183);
evalcond[0]=(((r22*x3183))+((r21*x3190))+(((-1.0)*x3187*x3188)));
evalcond[1]=(((r21*x3191))+(((-1.0)*x3187*x3189))+(((-1.0)*r22*x3188)));
evalcond[2]=(cj0+((r11*x3191))+(((-1.0)*x3186*x3189))+(((-1.0)*r12*x3188)));
evalcond[3]=((((-1.0)*x3185*x3188))+((r01*x3190))+(((-1.0)*cj0))+((r02*x3183)));
evalcond[4]=(((r12*x3183))+((r11*x3190))+(((-1.0)*x3186*x3188))+(((-1.0)*x3184)));
evalcond[5]=((((-1.0)*r02*x3188))+(((-1.0)*x3185*x3189))+((r01*x3191))+(((-1.0)*x3184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3192=IKcos(j0);
IkReal x3193=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3192))+(((-0.134)*x3193)));
evalcond[1]=((((0.134)*x3192))+(((-1.0)*py))+(((0.425)*x3193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3194=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3194;
j4eval[1]=IKsign(x3194);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3195=((1.0)*cj5);
IkReal x3196=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3195)));
j4eval[0]=x3196;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3195)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3196);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3197=cj5*cj5;
IkReal x3198=((1.0)*r20);
IkReal x3199=(r01*r21);
IkReal x3200=(r21*sj5);
IkReal x3201=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3197*x3199))+((cj5*r00*x3200))+(((-1.0)*x3199))+(((-1.0)*r00*x3197*x3198)));
j4eval[0]=x3201;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3200))+(((-1.0)*cj0*cj5*x3198))))));
j4eval[2]=IKsign(x3201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3202=cj5*cj5;
IkReal x3203=((1.0)*r20);
IkReal x3204=(r01*r21);
IkReal x3205=(r21*sj5);
CheckValue<IkReal> x3206=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3204))+((x3202*x3204))+((cj5*r00*x3205))+(((-1.0)*r00*x3202*x3203)))),-1);
if(!x3206.valid){
continue;
}
CheckValue<IkReal> x3207 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3205))+(((-1.0)*cj0*cj5*x3203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3206.value)))+(x3207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3208=IKcos(j4);
IkReal x3209=IKsin(j4);
IkReal x3210=(cj5*r00);
IkReal x3211=(cj5*r10);
IkReal x3212=(cj5*r20);
IkReal x3213=((1.0)*x3208);
IkReal x3214=((1.0)*x3209);
IkReal x3215=(sj5*x3208);
IkReal x3216=(sj5*x3209);
evalcond[0]=(((r22*x3209))+(((-1.0)*x3212*x3213))+((r21*x3215)));
evalcond[1]=((((-1.0)*x3212*x3214))+((r21*x3216))+(((-1.0)*r22*x3213)));
evalcond[2]=(cj0+((r01*x3215))+(((-1.0)*x3210*x3213))+((r02*x3209)));
evalcond[3]=((((-1.0)*x3211*x3213))+sj0+((r12*x3209))+((r11*x3215)));
evalcond[4]=((((-1.0)*x3211*x3214))+cj0+((r11*x3216))+(((-1.0)*r12*x3213)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3216))+(((-1.0)*x3210*x3214))+(((-1.0)*r02*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3217=((1.0)*cj5);
CheckValue<IkReal> x3218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3217)))),-1);
if(!x3218.valid){
continue;
}
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3217)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3218.value)))+(x3219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3220=IKcos(j4);
IkReal x3221=IKsin(j4);
IkReal x3222=(cj5*r00);
IkReal x3223=(cj5*r10);
IkReal x3224=(cj5*r20);
IkReal x3225=((1.0)*x3220);
IkReal x3226=((1.0)*x3221);
IkReal x3227=(sj5*x3220);
IkReal x3228=(sj5*x3221);
evalcond[0]=((((-1.0)*x3224*x3225))+((r21*x3227))+((r22*x3221)));
evalcond[1]=((((-1.0)*x3224*x3226))+((r21*x3228))+(((-1.0)*r22*x3225)));
evalcond[2]=(cj0+((r02*x3221))+((r01*x3227))+(((-1.0)*x3222*x3225)));
evalcond[3]=(((r12*x3221))+sj0+((r11*x3227))+(((-1.0)*x3223*x3225)));
evalcond[4]=(cj0+((r11*x3228))+(((-1.0)*x3223*x3226))+(((-1.0)*r12*x3225)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3225))+((r01*x3228))+(((-1.0)*x3222*x3226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3229 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3229.valid){
continue;
}
CheckValue<IkReal> x3230=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3229.value)+(((1.5707963267949)*(x3230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3231=IKcos(j4);
IkReal x3232=IKsin(j4);
IkReal x3233=(cj5*r00);
IkReal x3234=(cj5*r10);
IkReal x3235=(cj5*r20);
IkReal x3236=((1.0)*x3231);
IkReal x3237=((1.0)*x3232);
IkReal x3238=(sj5*x3231);
IkReal x3239=(sj5*x3232);
evalcond[0]=(((r22*x3232))+(((-1.0)*x3235*x3236))+((r21*x3238)));
evalcond[1]=((((-1.0)*x3235*x3237))+(((-1.0)*r22*x3236))+((r21*x3239)));
evalcond[2]=(cj0+((r01*x3238))+(((-1.0)*x3233*x3236))+((r02*x3232)));
evalcond[3]=(sj0+((r11*x3238))+((r12*x3232))+(((-1.0)*x3234*x3236)));
evalcond[4]=(cj0+((r11*x3239))+(((-1.0)*r12*x3236))+(((-1.0)*x3234*x3237)));
evalcond[5]=((((-1.0)*r02*x3236))+(((-1.0)*sj0))+((r01*x3239))+(((-1.0)*x3233*x3237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3240=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3240;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3241=((1.0)*cj5);
IkReal x3242=((((-1.0)*r01*x3241))+(((-1.0)*r00*sj5)));
j4eval[0]=x3242;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3241)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3243=((1.0)*cj5);
IkReal x3244=((((-1.0)*r01*x3243))+(((-1.0)*r00*sj5)));
j4eval[0]=x3244;
j4eval[1]=IKsign(x3244);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3243))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3245=((1.0)*cj5);
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3245)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3245))+(((-1.0)*r00*sj5)))),-1);
if(!x3247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3246.value)+(((1.5707963267949)*(x3247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3248=IKcos(j4);
IkReal x3249=IKsin(j4);
IkReal x3250=((1.0)*sj0);
IkReal x3251=(cj5*r00);
IkReal x3252=(cj5*r10);
IkReal x3253=(cj5*r20);
IkReal x3254=((1.0)*x3248);
IkReal x3255=((1.0)*x3249);
IkReal x3256=(sj5*x3248);
IkReal x3257=(sj5*x3249);
evalcond[0]=(((r22*x3249))+(((-1.0)*x3253*x3254))+((r21*x3256)));
evalcond[1]=((((-1.0)*x3253*x3255))+((r21*x3257))+(((-1.0)*r22*x3254)));
evalcond[2]=(cj0+((r11*x3257))+(((-1.0)*x3252*x3255))+(((-1.0)*r12*x3254)));
evalcond[3]=(((r01*x3256))+(((-1.0)*x3251*x3254))+((r02*x3249))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3256))+((r12*x3249))+(((-1.0)*x3252*x3254))+(((-1.0)*x3250)));
evalcond[5]=((((-1.0)*r02*x3254))+((r01*x3257))+(((-1.0)*x3251*x3255))+(((-1.0)*x3250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3258=((1.0)*cj5);
CheckValue<IkReal> x3259 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3259.valid){
continue;
}
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3258)))),-1);
if(!x3260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3259.value)+(((1.5707963267949)*(x3260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3261=IKcos(j4);
IkReal x3262=IKsin(j4);
IkReal x3263=((1.0)*sj0);
IkReal x3264=(cj5*r00);
IkReal x3265=(cj5*r10);
IkReal x3266=(cj5*r20);
IkReal x3267=((1.0)*x3261);
IkReal x3268=((1.0)*x3262);
IkReal x3269=(sj5*x3261);
IkReal x3270=(sj5*x3262);
evalcond[0]=(((r21*x3269))+(((-1.0)*x3266*x3267))+((r22*x3262)));
evalcond[1]=(((r21*x3270))+(((-1.0)*x3266*x3268))+(((-1.0)*r22*x3267)));
evalcond[2]=(cj0+(((-1.0)*r12*x3267))+(((-1.0)*x3265*x3268))+((r11*x3270)));
evalcond[3]=(((r01*x3269))+(((-1.0)*x3264*x3267))+((r02*x3262))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3263))+(((-1.0)*x3265*x3267))+((r11*x3269))+((r12*x3262)));
evalcond[5]=(((r01*x3270))+(((-1.0)*x3263))+(((-1.0)*x3264*x3268))+(((-1.0)*r02*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3271 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3271.valid){
continue;
}
CheckValue<IkReal> x3272=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3271.value)+(((1.5707963267949)*(x3272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3273=IKcos(j4);
IkReal x3274=IKsin(j4);
IkReal x3275=((1.0)*sj0);
IkReal x3276=(cj5*r00);
IkReal x3277=(cj5*r10);
IkReal x3278=(cj5*r20);
IkReal x3279=((1.0)*x3273);
IkReal x3280=((1.0)*x3274);
IkReal x3281=(sj5*x3273);
IkReal x3282=(sj5*x3274);
evalcond[0]=((((-1.0)*x3278*x3279))+((r21*x3281))+((r22*x3274)));
evalcond[1]=(((r21*x3282))+(((-1.0)*r22*x3279))+(((-1.0)*x3278*x3280)));
evalcond[2]=((((-1.0)*r12*x3279))+cj0+(((-1.0)*x3277*x3280))+((r11*x3282)));
evalcond[3]=((((-1.0)*x3276*x3279))+((r02*x3274))+(((-1.0)*cj0))+((r01*x3281)));
evalcond[4]=((((-1.0)*x3275))+((r12*x3274))+((r11*x3281))+(((-1.0)*x3277*x3279)));
evalcond[5]=((((-1.0)*x3275))+(((-1.0)*x3276*x3280))+(((-1.0)*r02*x3279))+((r01*x3282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3283=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3283;
j4eval[1]=IKsign(x3283);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3284=((1.0)*cj5);
IkReal x3285=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3284)));
j4eval[0]=x3285;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3284))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3286=cj5*cj5;
IkReal x3287=((1.0)*r20);
IkReal x3288=(r01*r21);
IkReal x3289=(r21*sj5);
IkReal x3290=(((cj5*r01*r20*sj5))+((x3286*x3288))+(((-1.0)*r02*r22))+((cj5*r00*x3289))+(((-1.0)*x3288))+(((-1.0)*r00*x3286*x3287)));
j4eval[0]=x3290;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3287))+((cj0*x3289))))));
j4eval[2]=IKsign(x3290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3291=cj5*cj5;
IkReal x3292=((1.0)*r20);
IkReal x3293=(r01*r21);
IkReal x3294=(r21*sj5);
CheckValue<IkReal> x3295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3292))+((cj0*x3294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
CheckValue<IkReal> x3296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3291*x3292))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3291*x3293))+((cj5*r00*x3294))+(((-1.0)*x3293)))),-1);
if(!x3296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3295.value)+(((1.5707963267949)*(x3296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3297=IKcos(j4);
IkReal x3298=IKsin(j4);
IkReal x3299=(cj5*r00);
IkReal x3300=(cj5*r10);
IkReal x3301=(cj5*r20);
IkReal x3302=((1.0)*x3297);
IkReal x3303=((1.0)*x3298);
IkReal x3304=(sj5*x3297);
IkReal x3305=(sj5*x3298);
evalcond[0]=(((r21*x3304))+((r22*x3298))+(((-1.0)*x3301*x3302)));
evalcond[1]=(((r21*x3305))+(((-1.0)*r22*x3302))+(((-1.0)*x3301*x3303)));
evalcond[2]=(cj0+((r02*x3298))+((r01*x3304))+(((-1.0)*x3299*x3302)));
evalcond[3]=(sj0+((r11*x3304))+((r12*x3298))+(((-1.0)*x3300*x3302)));
evalcond[4]=(cj0+((r11*x3305))+(((-1.0)*r12*x3302))+(((-1.0)*x3300*x3303)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3302))+((r01*x3305))+(((-1.0)*x3299*x3303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3306=((1.0)*cj5);
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3306)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3306)))),-1);
if(!x3308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3307.value)+(((1.5707963267949)*(x3308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3309=IKcos(j4);
IkReal x3310=IKsin(j4);
IkReal x3311=(cj5*r00);
IkReal x3312=(cj5*r10);
IkReal x3313=(cj5*r20);
IkReal x3314=((1.0)*x3309);
IkReal x3315=((1.0)*x3310);
IkReal x3316=(sj5*x3309);
IkReal x3317=(sj5*x3310);
evalcond[0]=(((r21*x3316))+((r22*x3310))+(((-1.0)*x3313*x3314)));
evalcond[1]=(((r21*x3317))+(((-1.0)*r22*x3314))+(((-1.0)*x3313*x3315)));
evalcond[2]=(cj0+((r02*x3310))+(((-1.0)*x3311*x3314))+((r01*x3316)));
evalcond[3]=(sj0+((r11*x3316))+(((-1.0)*x3312*x3314))+((r12*x3310)));
evalcond[4]=(cj0+((r11*x3317))+(((-1.0)*x3312*x3315))+(((-1.0)*r12*x3314)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3314))+(((-1.0)*x3311*x3315))+((r01*x3317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3318 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3318.value)+(((1.5707963267949)*(x3319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3320=IKcos(j4);
IkReal x3321=IKsin(j4);
IkReal x3322=(cj5*r00);
IkReal x3323=(cj5*r10);
IkReal x3324=(cj5*r20);
IkReal x3325=((1.0)*x3320);
IkReal x3326=((1.0)*x3321);
IkReal x3327=(sj5*x3320);
IkReal x3328=(sj5*x3321);
evalcond[0]=(((r22*x3321))+(((-1.0)*x3324*x3325))+((r21*x3327)));
evalcond[1]=((((-1.0)*x3324*x3326))+((r21*x3328))+(((-1.0)*r22*x3325)));
evalcond[2]=(cj0+((r01*x3327))+(((-1.0)*x3322*x3325))+((r02*x3321)));
evalcond[3]=(((r12*x3321))+sj0+((r11*x3327))+(((-1.0)*x3323*x3325)));
evalcond[4]=(cj0+((r11*x3328))+(((-1.0)*x3323*x3326))+(((-1.0)*r12*x3325)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3325))+((r01*x3328))+(((-1.0)*x3322*x3326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3329=IKcos(j0);
IkReal x3330=IKsin(j0);
evalcond[0]=((((-0.134)*x3330))+(((-1.0)*px))+(((-0.425)*x3329)));
evalcond[1]=((((0.134)*x3329))+(((-0.425)*x3330))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3331=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3331;
j4eval[1]=IKsign(x3331);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3332=((1.0)*cj5);
IkReal x3333=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3332)));
j4eval[0]=x3333;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3332)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3334=cj5*cj5;
IkReal x3335=((1.0)*r20);
IkReal x3336=(r01*r21);
IkReal x3337=(r21*sj5);
IkReal x3338=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3334*x3336))+((cj5*r00*x3337))+(((-1.0)*r00*x3334*x3335))+(((-1.0)*x3336)));
j4eval[0]=x3338;
j4eval[1]=((IKabs((((cj0*x3337))+(((-1.0)*cj0*cj5*x3335)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3339=cj5*cj5;
IkReal x3340=((1.0)*r20);
IkReal x3341=(r01*r21);
IkReal x3342=(r21*sj5);
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3341))+(((-1.0)*r02*r22))+((cj5*r00*x3342))+(((-1.0)*r00*x3339*x3340))+((x3339*x3341)))),-1);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3342))+(((-1.0)*cj0*cj5*x3340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3343.value)))+(x3344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3345=IKcos(j4);
IkReal x3346=IKsin(j4);
IkReal x3347=(cj5*r00);
IkReal x3348=(cj5*r10);
IkReal x3349=(cj5*r20);
IkReal x3350=((1.0)*x3345);
IkReal x3351=((1.0)*x3346);
IkReal x3352=(sj5*x3345);
IkReal x3353=(sj5*x3346);
evalcond[0]=((((-1.0)*x3349*x3350))+((r22*x3346))+((r21*x3352)));
evalcond[1]=((((-1.0)*x3349*x3351))+((r21*x3353))+(((-1.0)*r22*x3350)));
evalcond[2]=(cj0+((r01*x3352))+((r02*x3346))+(((-1.0)*x3347*x3350)));
evalcond[3]=((((-1.0)*x3348*x3350))+sj0+((r11*x3352))+((r12*x3346)));
evalcond[4]=((((-1.0)*x3348*x3351))+cj0+((r11*x3353))+(((-1.0)*r12*x3350)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3350))+((r01*x3353))+(((-1.0)*x3347*x3351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3354=((1.0)*cj5);
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3354)))),-1);
if(!x3355.valid){
continue;
}
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3354)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3355.value)))+(x3356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3357=IKcos(j4);
IkReal x3358=IKsin(j4);
IkReal x3359=(cj5*r00);
IkReal x3360=(cj5*r10);
IkReal x3361=(cj5*r20);
IkReal x3362=((1.0)*x3357);
IkReal x3363=((1.0)*x3358);
IkReal x3364=(sj5*x3357);
IkReal x3365=(sj5*x3358);
evalcond[0]=((((-1.0)*x3361*x3362))+((r21*x3364))+((r22*x3358)));
evalcond[1]=((((-1.0)*x3361*x3363))+((r21*x3365))+(((-1.0)*r22*x3362)));
evalcond[2]=((((-1.0)*x3359*x3362))+cj0+((r01*x3364))+((r02*x3358)));
evalcond[3]=((((-1.0)*x3360*x3362))+((r12*x3358))+sj0+((r11*x3364)));
evalcond[4]=((((-1.0)*x3360*x3363))+(((-1.0)*r12*x3362))+cj0+((r11*x3365)));
evalcond[5]=((((-1.0)*x3359*x3363))+(((-1.0)*sj0))+((r01*x3365))+(((-1.0)*r02*x3362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3366 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3366.valid){
continue;
}
CheckValue<IkReal> x3367=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3366.value)+(((1.5707963267949)*(x3367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3368=IKcos(j4);
IkReal x3369=IKsin(j4);
IkReal x3370=(cj5*r00);
IkReal x3371=(cj5*r10);
IkReal x3372=(cj5*r20);
IkReal x3373=((1.0)*x3368);
IkReal x3374=((1.0)*x3369);
IkReal x3375=(sj5*x3368);
IkReal x3376=(sj5*x3369);
evalcond[0]=(((r22*x3369))+((r21*x3375))+(((-1.0)*x3372*x3373)));
evalcond[1]=((((-1.0)*r22*x3373))+((r21*x3376))+(((-1.0)*x3372*x3374)));
evalcond[2]=(((r01*x3375))+((r02*x3369))+cj0+(((-1.0)*x3370*x3373)));
evalcond[3]=(sj0+(((-1.0)*x3371*x3373))+((r12*x3369))+((r11*x3375)));
evalcond[4]=(cj0+(((-1.0)*x3371*x3374))+(((-1.0)*r12*x3373))+((r11*x3376)));
evalcond[5]=(((r01*x3376))+(((-1.0)*sj0))+(((-1.0)*x3370*x3374))+(((-1.0)*r02*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3377=IKcos(j0);
IkReal x3378=IKsin(j0);
evalcond[0]=((((-0.134)*x3378))+(((-1.0)*px))+(((-0.425)*x3377)));
evalcond[1]=((((0.134)*x3377))+(((-1.0)*py))+(((-0.425)*x3378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3379=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3379;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3380=((1.0)*cj5);
IkReal x3381=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3380)));
j4eval[0]=x3381;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3380)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3382=((1.0)*cj5);
IkReal x3383=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3382)));
j4eval[0]=x3383;
j4eval[1]=IKsign(x3383);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3382)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3384=((1.0)*cj5);
CheckValue<IkReal> x3385 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3384)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3385.valid){
continue;
}
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3384)))),-1);
if(!x3386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3385.value)+(((1.5707963267949)*(x3386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3387=IKcos(j4);
IkReal x3388=IKsin(j4);
IkReal x3389=((1.0)*sj0);
IkReal x3390=(cj5*r00);
IkReal x3391=(cj5*r10);
IkReal x3392=(cj5*r20);
IkReal x3393=((1.0)*x3387);
IkReal x3394=((1.0)*x3388);
IkReal x3395=(sj5*x3387);
IkReal x3396=(sj5*x3388);
evalcond[0]=((((-1.0)*x3392*x3393))+((r21*x3395))+((r22*x3388)));
evalcond[1]=((((-1.0)*r22*x3393))+(((-1.0)*x3392*x3394))+((r21*x3396)));
evalcond[2]=(cj0+((r11*x3396))+(((-1.0)*r12*x3393))+(((-1.0)*x3391*x3394)));
evalcond[3]=(((r01*x3395))+((r02*x3388))+(((-1.0)*x3390*x3393))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3395))+((r12*x3388))+(((-1.0)*x3391*x3393))+(((-1.0)*x3389)));
evalcond[5]=(((r01*x3396))+(((-1.0)*r02*x3393))+(((-1.0)*x3389))+(((-1.0)*x3390*x3394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3397=((1.0)*cj5);
CheckValue<IkReal> x3398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3397))+(((-1.0)*r00*sj5)))),-1);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3398.value)))+(x3399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3400=IKcos(j4);
IkReal x3401=IKsin(j4);
IkReal x3402=((1.0)*sj0);
IkReal x3403=(cj5*r00);
IkReal x3404=(cj5*r10);
IkReal x3405=(cj5*r20);
IkReal x3406=((1.0)*x3400);
IkReal x3407=((1.0)*x3401);
IkReal x3408=(sj5*x3400);
IkReal x3409=(sj5*x3401);
evalcond[0]=(((r22*x3401))+(((-1.0)*x3405*x3406))+((r21*x3408)));
evalcond[1]=((((-1.0)*x3405*x3407))+((r21*x3409))+(((-1.0)*r22*x3406)));
evalcond[2]=(cj0+(((-1.0)*x3404*x3407))+((r11*x3409))+(((-1.0)*r12*x3406)));
evalcond[3]=(((r02*x3401))+((r01*x3408))+(((-1.0)*x3403*x3406))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3404*x3406))+((r11*x3408))+((r12*x3401))+(((-1.0)*x3402)));
evalcond[5]=((((-1.0)*r02*x3406))+((r01*x3409))+(((-1.0)*x3403*x3407))+(((-1.0)*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3410 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3410.valid){
continue;
}
CheckValue<IkReal> x3411=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3410.value)+(((1.5707963267949)*(x3411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3412=IKcos(j4);
IkReal x3413=IKsin(j4);
IkReal x3414=((1.0)*sj0);
IkReal x3415=(cj5*r00);
IkReal x3416=(cj5*r10);
IkReal x3417=(cj5*r20);
IkReal x3418=((1.0)*x3412);
IkReal x3419=((1.0)*x3413);
IkReal x3420=(sj5*x3412);
IkReal x3421=(sj5*x3413);
evalcond[0]=(((r22*x3413))+((r21*x3420))+(((-1.0)*x3417*x3418)));
evalcond[1]=((((-1.0)*r22*x3418))+((r21*x3421))+(((-1.0)*x3417*x3419)));
evalcond[2]=(cj0+(((-1.0)*r12*x3418))+(((-1.0)*x3416*x3419))+((r11*x3421)));
evalcond[3]=((((-1.0)*x3415*x3418))+((r02*x3413))+(((-1.0)*cj0))+((r01*x3420)));
evalcond[4]=(((r12*x3413))+(((-1.0)*x3416*x3418))+((r11*x3420))+(((-1.0)*x3414)));
evalcond[5]=((((-1.0)*x3415*x3419))+(((-1.0)*r02*x3418))+((r01*x3421))+(((-1.0)*x3414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3422=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3422;
j4eval[1]=IKsign(x3422);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3423=((1.0)*cj5);
IkReal x3424=((((-1.0)*r11*x3423))+(((-1.0)*r10*sj5)));
j4eval[0]=x3424;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3423))))));
j4eval[2]=IKsign(x3424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3425=cj5*cj5;
IkReal x3426=((1.0)*r20);
IkReal x3427=(r01*r21);
IkReal x3428=(r21*sj5);
IkReal x3429=(((cj5*r01*r20*sj5))+((x3425*x3427))+(((-1.0)*r02*r22))+((cj5*r00*x3428))+(((-1.0)*r00*x3425*x3426))+(((-1.0)*x3427)));
j4eval[0]=x3429;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3426))+((cj0*x3428))))));
j4eval[2]=IKsign(x3429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3430=cj5*cj5;
IkReal x3431=((1.0)*r20);
IkReal x3432=(r01*r21);
IkReal x3433=(r21*sj5);
CheckValue<IkReal> x3434 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3433))+(((-1.0)*cj0*cj5*x3431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3434.valid){
continue;
}
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3433))+((x3430*x3432))+(((-1.0)*r00*x3430*x3431))+(((-1.0)*x3432)))),-1);
if(!x3435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3434.value)+(((1.5707963267949)*(x3435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3436=IKcos(j4);
IkReal x3437=IKsin(j4);
IkReal x3438=(cj5*r00);
IkReal x3439=(cj5*r10);
IkReal x3440=(cj5*r20);
IkReal x3441=((1.0)*x3436);
IkReal x3442=((1.0)*x3437);
IkReal x3443=(sj5*x3436);
IkReal x3444=(sj5*x3437);
evalcond[0]=(((r21*x3443))+((r22*x3437))+(((-1.0)*x3440*x3441)));
evalcond[1]=(((r21*x3444))+(((-1.0)*r22*x3441))+(((-1.0)*x3440*x3442)));
evalcond[2]=(cj0+(((-1.0)*x3438*x3441))+((r01*x3443))+((r02*x3437)));
evalcond[3]=(((r11*x3443))+sj0+(((-1.0)*x3439*x3441))+((r12*x3437)));
evalcond[4]=(((r11*x3444))+cj0+(((-1.0)*x3439*x3442))+(((-1.0)*r12*x3441)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3438*x3442))+(((-1.0)*r02*x3441))+((r01*x3444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3445=((1.0)*cj5);
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3445)))),-1);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3445))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3446.value)))+(x3447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3448=IKcos(j4);
IkReal x3449=IKsin(j4);
IkReal x3450=(cj5*r00);
IkReal x3451=(cj5*r10);
IkReal x3452=(cj5*r20);
IkReal x3453=((1.0)*x3448);
IkReal x3454=((1.0)*x3449);
IkReal x3455=(sj5*x3448);
IkReal x3456=(sj5*x3449);
evalcond[0]=(((r21*x3455))+((r22*x3449))+(((-1.0)*x3452*x3453)));
evalcond[1]=(((r21*x3456))+(((-1.0)*r22*x3453))+(((-1.0)*x3452*x3454)));
evalcond[2]=(cj0+((r02*x3449))+(((-1.0)*x3450*x3453))+((r01*x3455)));
evalcond[3]=((((-1.0)*x3451*x3453))+sj0+((r12*x3449))+((r11*x3455)));
evalcond[4]=((((-1.0)*x3451*x3454))+cj0+(((-1.0)*r12*x3453))+((r11*x3456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3450*x3454))+(((-1.0)*r02*x3453))+((r01*x3456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3457.value)+(((1.5707963267949)*(x3458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3459=IKcos(j4);
IkReal x3460=IKsin(j4);
IkReal x3461=(cj5*r00);
IkReal x3462=(cj5*r10);
IkReal x3463=(cj5*r20);
IkReal x3464=((1.0)*x3459);
IkReal x3465=((1.0)*x3460);
IkReal x3466=(sj5*x3459);
IkReal x3467=(sj5*x3460);
evalcond[0]=((((-1.0)*x3463*x3464))+((r21*x3466))+((r22*x3460)));
evalcond[1]=((((-1.0)*x3463*x3465))+(((-1.0)*r22*x3464))+((r21*x3467)));
evalcond[2]=(cj0+((r01*x3466))+(((-1.0)*x3461*x3464))+((r02*x3460)));
evalcond[3]=(sj0+(((-1.0)*x3462*x3464))+((r12*x3460))+((r11*x3466)));
evalcond[4]=(cj0+(((-1.0)*x3462*x3465))+(((-1.0)*r12*x3464))+((r11*x3467)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3464))+((r01*x3467))+(((-1.0)*x3461*x3465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3468=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3468;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3469=((1.0)*cj5);
IkReal x3470=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3469)));
j4eval[0]=x3470;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3469)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3471=((1.0)*cj5);
IkReal x3472=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3471)));
j4eval[0]=x3472;
j4eval[1]=IKsign(x3472);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3471))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3473=((1.0)*cj5);
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3473)))),-1);
if(!x3474.valid){
continue;
}
CheckValue<IkReal> x3475 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3473))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3474.value)))+(x3475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3476=IKcos(j4);
IkReal x3477=IKsin(j4);
IkReal x3478=((1.0)*sj0);
IkReal x3479=(cj5*r00);
IkReal x3480=(cj5*r10);
IkReal x3481=(cj5*r20);
IkReal x3482=((1.0)*x3476);
IkReal x3483=((1.0)*x3477);
IkReal x3484=(sj5*x3476);
IkReal x3485=(sj5*x3477);
evalcond[0]=((((-1.0)*x3481*x3482))+((r21*x3484))+((r22*x3477)));
evalcond[1]=((((-1.0)*x3481*x3483))+(((-1.0)*r22*x3482))+((r21*x3485)));
evalcond[2]=(cj0+(((-1.0)*r12*x3482))+((r11*x3485))+(((-1.0)*x3480*x3483)));
evalcond[3]=((((-1.0)*x3479*x3482))+((r01*x3484))+((r02*x3477))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3477))+((r11*x3484))+(((-1.0)*x3478))+(((-1.0)*x3480*x3482)));
evalcond[5]=((((-1.0)*r02*x3482))+(((-1.0)*x3479*x3483))+((r01*x3485))+(((-1.0)*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3486=((1.0)*cj5);
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3486))+(((-1.0)*r00*sj5)))),-1);
if(!x3487.valid){
continue;
}
CheckValue<IkReal> x3488 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3487.value)))+(x3488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3489=IKcos(j4);
IkReal x3490=IKsin(j4);
IkReal x3491=((1.0)*sj0);
IkReal x3492=(cj5*r00);
IkReal x3493=(cj5*r10);
IkReal x3494=(cj5*r20);
IkReal x3495=((1.0)*x3489);
IkReal x3496=((1.0)*x3490);
IkReal x3497=(sj5*x3489);
IkReal x3498=(sj5*x3490);
evalcond[0]=((((-1.0)*x3494*x3495))+((r22*x3490))+((r21*x3497)));
evalcond[1]=((((-1.0)*x3494*x3496))+(((-1.0)*r22*x3495))+((r21*x3498)));
evalcond[2]=((((-1.0)*r12*x3495))+cj0+(((-1.0)*x3493*x3496))+((r11*x3498)));
evalcond[3]=(((r01*x3497))+(((-1.0)*x3492*x3495))+((r02*x3490))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3491))+(((-1.0)*x3493*x3495))+((r11*x3497))+((r12*x3490)));
evalcond[5]=((((-1.0)*r02*x3495))+((r01*x3498))+(((-1.0)*x3491))+(((-1.0)*x3492*x3496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3499.value)+(((1.5707963267949)*(x3500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3501=IKcos(j4);
IkReal x3502=IKsin(j4);
IkReal x3503=((1.0)*sj0);
IkReal x3504=(cj5*r00);
IkReal x3505=(cj5*r10);
IkReal x3506=(cj5*r20);
IkReal x3507=((1.0)*x3501);
IkReal x3508=((1.0)*x3502);
IkReal x3509=(sj5*x3501);
IkReal x3510=(sj5*x3502);
evalcond[0]=((((-1.0)*x3506*x3507))+((r22*x3502))+((r21*x3509)));
evalcond[1]=((((-1.0)*x3506*x3508))+((r21*x3510))+(((-1.0)*r22*x3507)));
evalcond[2]=((((-1.0)*r12*x3507))+cj0+((r11*x3510))+(((-1.0)*x3505*x3508)));
evalcond[3]=(((r01*x3509))+((r02*x3502))+(((-1.0)*x3504*x3507))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3503))+((r12*x3502))+((r11*x3509))+(((-1.0)*x3505*x3507)));
evalcond[5]=(((r01*x3510))+(((-1.0)*x3503))+(((-1.0)*x3504*x3508))+(((-1.0)*r02*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3511=(sj1*sj2);
IkReal x3512=(r00*sj5);
IkReal x3513=(cj5*r01);
IkReal x3514=((212.5)*cj1);
IkReal x3515=(cj1*cj2);
IkReal x3516=((500.0)*px);
IkReal x3517=((246.0)*x3515);
CheckValue<IkReal> x3518=IKPowWithIntegerCheck(((((-67.0)*x3515))+(((67.0)*x3511))),-1);
if(!x3518.valid){
continue;
}
CheckValue<IkReal> x3519=IKPowWithIntegerCheck((x3511+(((-1.0)*x3515))),-1);
if(!x3519.valid){
continue;
}
if( IKabs(((x3518.value)*(((((-1.0)*x3511*x3516))+((x3515*x3516))+(((-246.0)*x3511*x3513))+(((-246.0)*x3511*x3512))+((x3513*x3517))+((x3513*x3514))+((x3512*x3517))+((x3512*x3514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3519.value)*((x3513+x3512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3518.value)*(((((-1.0)*x3511*x3516))+((x3515*x3516))+(((-246.0)*x3511*x3513))+(((-246.0)*x3511*x3512))+((x3513*x3517))+((x3513*x3514))+((x3512*x3517))+((x3512*x3514))))))+IKsqr(((x3519.value)*((x3513+x3512))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3518.value)*(((((-1.0)*x3511*x3516))+((x3515*x3516))+(((-246.0)*x3511*x3513))+(((-246.0)*x3511*x3512))+((x3513*x3517))+((x3513*x3514))+((x3512*x3517))+((x3512*x3514))))), ((x3519.value)*((x3513+x3512))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3520=IKcos(j0);
IkReal x3521=IKsin(j0);
IkReal x3522=((0.1)*sj5);
IkReal x3523=(cj5*r11);
IkReal x3524=(sj1*sj2);
IkReal x3525=(cj1*cj2);
IkReal x3526=((1.0)*sj5);
IkReal x3527=(cj5*r01);
IkReal x3528=((0.425)*cj1);
IkReal x3529=((0.392)*x3521);
IkReal x3530=((0.392)*x3520);
evalcond[0]=((((-1.0)*x3527))+(((-1.0)*x3520*x3525))+((x3520*x3524))+(((-1.0)*r00*x3526)));
evalcond[1]=((((-1.0)*x3523))+(((-1.0)*x3521*x3525))+(((-1.0)*r10*x3526))+((x3521*x3524)));
evalcond[2]=((((-0.134)*x3521))+(((-1.0)*x3524*x3530))+(((-1.0)*px))+((x3520*x3528))+(((-0.1)*x3527))+(((-1.0)*r00*x3522))+((x3525*x3530)));
evalcond[3]=(((x3525*x3529))+(((0.134)*x3520))+(((-1.0)*x3524*x3529))+(((-1.0)*r10*x3522))+(((-1.0)*py))+(((-0.1)*x3523))+((x3521*x3528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3531=((1.0)*cj5);
IkReal x3532=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3531)));
j4eval[0]=x3532;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3531)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3533=((1.0)*cj5);
IkReal x3534=((((-1.0)*r11*x3533))+(((-1.0)*r10*sj5)));
j4eval[0]=x3534;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3533))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3535=((1.0)*sj0);
IkReal x3536=((1.0)*cj0);
IkReal x3537=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3537;
j4eval[1]=((IKabs(((((-1.0)*r12*x3535))+(((-1.0)*r02*x3536)))))+(IKabs(((((-1.0)*r01*sj5*x3536))+(((-1.0)*r11*sj5*x3535))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x3537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3538=((-1.0)*r20);
IkReal x3540 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3540)==0){
continue;
}
IkReal x3539=pow(x3540,-0.5);
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3538),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3541.value));
IkReal gconst97=(r21*x3539);
IkReal gconst98=(x3538*x3539);
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3542.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3543=((-1.0)*r20);
IkReal x3544=x3539;
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3543),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal x3545=((-1.0)*(x3546.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3545;
IkReal gconst96=x3545;
IkReal gconst97=(r21*x3544);
IkReal gconst98=(x3543*x3544);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3547=((-1.0)*r20);
IkReal x3548=x3539;
CheckValue<IkReal> x3550 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3547),IKFAST_ATAN2_MAGTHRESH);
if(!x3550.valid){
continue;
}
IkReal x3549=((-1.0)*(x3550.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3549;
IkReal gconst96=x3549;
IkReal gconst97=(r21*x3548);
IkReal gconst98=(x3547*x3548);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3551=((-1.0)*r20);
IkReal x3552=x3539;
CheckValue<IkReal> x3554 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3551),IKFAST_ATAN2_MAGTHRESH);
if(!x3554.valid){
continue;
}
IkReal x3553=((-1.0)*(x3554.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3553;
IkReal gconst96=x3553;
IkReal gconst97=(r21*x3552);
IkReal gconst98=(x3551*x3552);
IkReal x3555=((1.0)*(r22*r22));
CheckValue<IkReal> x3559=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3555))),-1);
if(!x3559.valid){
continue;
}
IkReal x3556=x3559.value;
IkReal x3557=((1.0)*x3556);
IkReal x3558=((((-1.0)*x3557*(r21*r21*r21*r21)))+(((-1.0)*x3557*(r20*r20*r20*r20)))+(((-1.0)*x3555))+(((-2.0)*x3556*(r20*r20)*(r21*r21))));
j4eval[0]=x3558;
j4eval[1]=IKsign(x3558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3560=(cj1*cj2);
IkReal x3561=(gconst98*r20);
IkReal x3562=(sj1*sj2);
IkReal x3563=(gconst97*r21);
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(IKsign(((((2.0)*x3561*x3563))+(((-1.0)*(x3563*x3563)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3561*x3561))))),-1);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal((((r22*x3562))+(((-1.0)*r22*x3560)))),IkReal((((x3562*x3563))+(((-1.0)*x3560*x3563))+(((-1.0)*x3561*x3562))+((x3560*x3561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3564.value)))+(x3565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3566=IKsin(j4);
IkReal x3567=IKcos(j4);
IkReal x3568=(gconst98*r10);
IkReal x3569=(gconst97*r21);
IkReal x3570=(gconst98*r20);
IkReal x3571=((1.0)*cj2);
IkReal x3572=((1.0)*sj0);
IkReal x3573=(gconst98*r00);
IkReal x3574=(cj1*sj2);
IkReal x3575=((1.0)*x3567);
IkReal x3576=((1.0)*x3566);
IkReal x3577=(gconst97*x3566);
IkReal x3578=(gconst97*x3567);
evalcond[0]=(((x3566*x3569))+(((-1.0)*r22*x3575))+(((-1.0)*x3570*x3576)));
evalcond[1]=((((-1.0)*x3568*x3576))+cj0+((r11*x3577))+(((-1.0)*r12*x3575)));
evalcond[2]=(((r01*x3577))+(((-1.0)*x3572))+(((-1.0)*x3573*x3576))+(((-1.0)*r02*x3575)));
evalcond[3]=(((sj1*sj2))+((r22*x3566))+((x3567*x3569))+(((-1.0)*x3570*x3575))+(((-1.0)*cj1*x3571)));
evalcond[4]=(((r01*x3578))+(((-1.0)*x3573*x3575))+(((-1.0)*cj0*x3574))+((r02*x3566))+(((-1.0)*cj0*sj1*x3571)));
evalcond[5]=((((-1.0)*x3568*x3575))+(((-1.0)*sj0*sj1*x3571))+((r11*x3578))+(((-1.0)*x3572*x3574))+((r12*x3566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3579=((1.0)*gconst98);
CheckValue<IkReal> x3580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3579))+(((-1.0)*gconst97*r10)))),-1);
if(!x3580.valid){
continue;
}
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3580.value)))+(x3581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3582=IKsin(j4);
IkReal x3583=IKcos(j4);
IkReal x3584=(gconst98*r10);
IkReal x3585=(gconst97*r21);
IkReal x3586=(gconst98*r20);
IkReal x3587=((1.0)*cj2);
IkReal x3588=((1.0)*sj0);
IkReal x3589=(gconst98*r00);
IkReal x3590=(cj1*sj2);
IkReal x3591=((1.0)*x3583);
IkReal x3592=((1.0)*x3582);
IkReal x3593=(gconst97*x3582);
IkReal x3594=(gconst97*x3583);
evalcond[0]=((((-1.0)*r22*x3591))+(((-1.0)*x3586*x3592))+((x3582*x3585)));
evalcond[1]=(cj0+((r11*x3593))+(((-1.0)*r12*x3591))+(((-1.0)*x3584*x3592)));
evalcond[2]=((((-1.0)*x3589*x3592))+(((-1.0)*r02*x3591))+((r01*x3593))+(((-1.0)*x3588)));
evalcond[3]=(((x3583*x3585))+((sj1*sj2))+(((-1.0)*x3586*x3591))+(((-1.0)*cj1*x3587))+((r22*x3582)));
evalcond[4]=((((-1.0)*cj0*sj1*x3587))+(((-1.0)*x3589*x3591))+((r02*x3582))+(((-1.0)*cj0*x3590))+((r01*x3594)));
evalcond[5]=(((r12*x3582))+((r11*x3594))+(((-1.0)*x3584*x3591))+(((-1.0)*sj0*sj1*x3587))+(((-1.0)*x3588*x3590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3595=((1.0)*gconst98);
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3595))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
CheckValue<IkReal> x3597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3595))+(((-1.0)*gconst97*r00)))),-1);
if(!x3597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3596.value)+(((1.5707963267949)*(x3597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3598=IKsin(j4);
IkReal x3599=IKcos(j4);
IkReal x3600=(gconst98*r10);
IkReal x3601=(gconst97*r21);
IkReal x3602=(gconst98*r20);
IkReal x3603=((1.0)*cj2);
IkReal x3604=((1.0)*sj0);
IkReal x3605=(gconst98*r00);
IkReal x3606=(cj1*sj2);
IkReal x3607=((1.0)*x3599);
IkReal x3608=((1.0)*x3598);
IkReal x3609=(gconst97*x3598);
IkReal x3610=(gconst97*x3599);
evalcond[0]=(((x3598*x3601))+(((-1.0)*x3602*x3608))+(((-1.0)*r22*x3607)));
evalcond[1]=(((r11*x3609))+cj0+(((-1.0)*r12*x3607))+(((-1.0)*x3600*x3608)));
evalcond[2]=((((-1.0)*r02*x3607))+((r01*x3609))+(((-1.0)*x3604))+(((-1.0)*x3605*x3608)));
evalcond[3]=(((sj1*sj2))+((x3599*x3601))+(((-1.0)*x3602*x3607))+((r22*x3598))+(((-1.0)*cj1*x3603)));
evalcond[4]=(((r02*x3598))+((r01*x3610))+(((-1.0)*cj0*x3606))+(((-1.0)*cj0*sj1*x3603))+(((-1.0)*x3605*x3607)));
evalcond[5]=(((r11*x3610))+((r12*x3598))+(((-1.0)*x3600*x3607))+(((-1.0)*sj0*sj1*x3603))+(((-1.0)*x3604*x3606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3611=((-1.0)*r21);
IkReal x3613 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3613)==0){
continue;
}
IkReal x3612=pow(x3613,-0.5);
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal(x3611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3614.value))));
IkReal gconst100=(x3611*x3612);
IkReal gconst101=((1.0)*r20*x3612);
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3615.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3616=((-1.0)*r21);
CheckValue<IkReal> x3619 = IKatan2WithCheck(IkReal(x3616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3619.valid){
continue;
}
IkReal x3617=((1.0)*(x3619.value));
IkReal x3618=x3612;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3617)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3617)));
IkReal gconst100=(x3616*x3618);
IkReal gconst101=((1.0)*r20*x3618);
IkReal x3620=r22*r22;
IkReal x3621=((1.0)*x3620);
CheckValue<IkReal> x3625=IKPowWithIntegerCheck(((-1.0)+x3620),-1);
if(!x3625.valid){
continue;
}
IkReal x3622=x3625.value;
if((((1.0)+(((-1.0)*x3621)))) < -0.00001)
continue;
IkReal x3623=IKsqrt(((1.0)+(((-1.0)*x3621))));
IkReal x3624=(cj0*x3622*x3623);
j4eval[0]=((IKabs(((((-1.0)*x3621*x3624))+x3624)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3626=((-1.0)*r21);
CheckValue<IkReal> x3629 = IKatan2WithCheck(IkReal(x3626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3629.valid){
continue;
}
IkReal x3627=((1.0)*(x3629.value));
IkReal x3628=x3612;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3627)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3627)));
IkReal gconst100=(x3626*x3628);
IkReal gconst101=((1.0)*r20*x3628);
IkReal x3630=r22*r22;
IkReal x3631=((1.0)*x3630);
CheckValue<IkReal> x3635=IKPowWithIntegerCheck(((-1.0)+x3630),-1);
if(!x3635.valid){
continue;
}
IkReal x3632=x3635.value;
if((((1.0)+(((-1.0)*x3631)))) < -0.00001)
continue;
IkReal x3633=IKsqrt(((1.0)+(((-1.0)*x3631))));
IkReal x3634=(sj0*x3632*x3633);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3631*x3634))+x3634))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3636=((-1.0)*r21);
CheckValue<IkReal> x3639 = IKatan2WithCheck(IkReal(x3636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3639.valid){
continue;
}
IkReal x3637=((1.0)*(x3639.value));
IkReal x3638=x3612;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3637)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3637)));
IkReal gconst100=(x3636*x3638);
IkReal gconst101=((1.0)*r20*x3638);
IkReal x3640=r22*r22;
IkReal x3641=(r12*sj0);
IkReal x3642=(cj0*r02);
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(((-1.0)+x3640),-1);
if(!x3646.valid){
continue;
}
IkReal x3643=x3646.value;
if((((1.0)+(((-1.0)*x3640)))) < -0.00001)
continue;
IkReal x3644=IKsqrt(((1.0)+(((-1.0)*x3640))));
IkReal x3645=(r22*x3643*x3644);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3642))+(((-1.0)*x3641)))))+(IKabs((((x3641*x3645))+((x3642*x3645))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3647=((1.0)*sj0);
IkReal x3648=((1.0)*gconst100);
CheckValue<IkReal> x3649 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3647))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3647))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3649.valid){
continue;
}
CheckValue<IkReal> x3650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3648))+(((-1.0)*gconst101*r21)))),-1);
if(!x3650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3649.value)+(((1.5707963267949)*(x3650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3651=IKsin(j4);
IkReal x3652=IKcos(j4);
IkReal x3653=(gconst101*r20);
IkReal x3654=(gconst101*r10);
IkReal x3655=((1.0)*cj2);
IkReal x3656=(gconst101*r00);
IkReal x3657=((1.0)*sj0);
IkReal x3658=(cj1*sj2);
IkReal x3659=((1.0)*x3652);
IkReal x3660=((1.0)*x3651);
IkReal x3661=(gconst100*x3651);
IkReal x3662=(gconst100*x3652);
evalcond[0]=((((-1.0)*r22*x3659))+(((-1.0)*x3653*x3660))+((r21*x3661)));
evalcond[1]=(cj0+((r11*x3661))+(((-1.0)*x3654*x3660))+(((-1.0)*r12*x3659)));
evalcond[2]=(((r01*x3661))+(((-1.0)*x3656*x3660))+(((-1.0)*r02*x3659))+(((-1.0)*x3657)));
evalcond[3]=((((-1.0)*x3653*x3659))+((sj1*sj2))+(((-1.0)*cj1*x3655))+((r21*x3662))+((r22*x3651)));
evalcond[4]=((((-1.0)*cj0*x3658))+((r01*x3662))+((r02*x3651))+(((-1.0)*x3656*x3659))+(((-1.0)*cj0*sj1*x3655)));
evalcond[5]=((((-1.0)*sj0*sj1*x3655))+((r12*x3651))+((r11*x3662))+(((-1.0)*x3657*x3658))+(((-1.0)*x3654*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3663=((1.0)*gconst101);
CheckValue<IkReal> x3664 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3663))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3664.valid){
continue;
}
CheckValue<IkReal> x3665=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3663)))),-1);
if(!x3665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3664.value)+(((1.5707963267949)*(x3665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3666=IKsin(j4);
IkReal x3667=IKcos(j4);
IkReal x3668=(gconst101*r20);
IkReal x3669=(gconst101*r10);
IkReal x3670=((1.0)*cj2);
IkReal x3671=(gconst101*r00);
IkReal x3672=((1.0)*sj0);
IkReal x3673=(cj1*sj2);
IkReal x3674=((1.0)*x3667);
IkReal x3675=((1.0)*x3666);
IkReal x3676=(gconst100*x3666);
IkReal x3677=(gconst100*x3667);
evalcond[0]=(((r21*x3676))+(((-1.0)*r22*x3674))+(((-1.0)*x3668*x3675)));
evalcond[1]=(cj0+((r11*x3676))+(((-1.0)*r12*x3674))+(((-1.0)*x3669*x3675)));
evalcond[2]=((((-1.0)*x3671*x3675))+((r01*x3676))+(((-1.0)*r02*x3674))+(((-1.0)*x3672)));
evalcond[3]=(((r22*x3666))+((sj1*sj2))+((r21*x3677))+(((-1.0)*cj1*x3670))+(((-1.0)*x3668*x3674)));
evalcond[4]=((((-1.0)*x3671*x3674))+((r01*x3677))+(((-1.0)*cj0*x3673))+((r02*x3666))+(((-1.0)*cj0*sj1*x3670)));
evalcond[5]=(((r11*x3677))+((r12*x3666))+(((-1.0)*x3672*x3673))+(((-1.0)*x3669*x3674))+(((-1.0)*sj0*sj1*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3678=((1.0)*gconst101);
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3678)))),-1);
if(!x3679.valid){
continue;
}
CheckValue<IkReal> x3680 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3679.value)))+(x3680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3681=IKsin(j4);
IkReal x3682=IKcos(j4);
IkReal x3683=(gconst101*r20);
IkReal x3684=(gconst101*r10);
IkReal x3685=((1.0)*cj2);
IkReal x3686=(gconst101*r00);
IkReal x3687=((1.0)*sj0);
IkReal x3688=(cj1*sj2);
IkReal x3689=((1.0)*x3682);
IkReal x3690=((1.0)*x3681);
IkReal x3691=(gconst100*x3681);
IkReal x3692=(gconst100*x3682);
evalcond[0]=((((-1.0)*r22*x3689))+((r21*x3691))+(((-1.0)*x3683*x3690)));
evalcond[1]=(cj0+(((-1.0)*r12*x3689))+((r11*x3691))+(((-1.0)*x3684*x3690)));
evalcond[2]=(((r01*x3691))+(((-1.0)*x3686*x3690))+(((-1.0)*x3687))+(((-1.0)*r02*x3689)));
evalcond[3]=((((-1.0)*x3683*x3689))+((sj1*sj2))+((r21*x3692))+(((-1.0)*cj1*x3685))+((r22*x3681)));
evalcond[4]=(((r01*x3692))+(((-1.0)*cj0*x3688))+(((-1.0)*x3686*x3689))+((r02*x3681))+(((-1.0)*cj0*sj1*x3685)));
evalcond[5]=((((-1.0)*sj0*sj1*x3685))+((r12*x3681))+(((-1.0)*x3684*x3689))+(((-1.0)*x3687*x3688))+((r11*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3693=((-1.0)*r10);
IkReal x3695 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3695)==0){
continue;
}
IkReal x3694=pow(x3695,-0.5);
CheckValue<IkReal> x3696 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3693),IKFAST_ATAN2_MAGTHRESH);
if(!x3696.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3696.value));
IkReal gconst103=(r11*x3694);
IkReal gconst104=(x3693*x3694);
CheckValue<IkReal> x3697 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3697.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3698=((-1.0)*r10);
IkReal x3699=x3694;
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3698),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
IkReal x3700=((-1.0)*(x3701.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3700;
IkReal gconst102=x3700;
IkReal gconst103=(r11*x3699);
IkReal gconst104=(x3698*x3699);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3702=((1.0)*sj0);
IkReal x3703=((1.0)*gconst103);
CheckValue<IkReal> x3704 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3702)))),IkReal(((((-1.0)*gconst103*r11*x3702))+(((-1.0)*cj0*r01*x3703))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3704.valid){
continue;
}
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3703)))),-1);
if(!x3705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3704.value)+(((1.5707963267949)*(x3705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3706=IKsin(j4);
IkReal x3707=IKcos(j4);
IkReal x3708=(gconst103*r11);
IkReal x3709=((1.0)*cj2);
IkReal x3710=((1.0)*sj0);
IkReal x3711=(cj1*sj2);
IkReal x3712=((1.0)*x3707);
IkReal x3713=(gconst103*x3707);
IkReal x3714=(gconst103*x3706);
IkReal x3715=((1.0)*gconst104*x3706);
evalcond[0]=((((-1.0)*r20*x3715))+((r21*x3714))+(((-1.0)*r22*x3712)));
evalcond[1]=(cj0+(((-1.0)*r10*x3715))+(((-1.0)*r12*x3712))+((x3706*x3708)));
evalcond[2]=((((-1.0)*r00*x3715))+(((-1.0)*r02*x3712))+(((-1.0)*x3710))+((r01*x3714)));
evalcond[3]=((((-1.0)*gconst104*r20*x3712))+(((-1.0)*cj1*x3709))+((sj1*sj2))+((r21*x3713))+((r22*x3706)));
evalcond[4]=((((-1.0)*cj0*sj1*x3709))+(((-1.0)*cj0*x3711))+((r01*x3713))+(((-1.0)*gconst104*r00*x3712))+((r02*x3706)));
evalcond[5]=(((r12*x3706))+(((-1.0)*x3710*x3711))+((x3707*x3708))+(((-1.0)*sj0*sj1*x3709))+(((-1.0)*gconst104*r10*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3716=((1.0)*gconst104);
CheckValue<IkReal> x3717 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3716))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3717.valid){
continue;
}
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3716)))),-1);
if(!x3718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3717.value)+(((1.5707963267949)*(x3718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3719=IKsin(j4);
IkReal x3720=IKcos(j4);
IkReal x3721=(gconst103*r11);
IkReal x3722=((1.0)*cj2);
IkReal x3723=((1.0)*sj0);
IkReal x3724=(cj1*sj2);
IkReal x3725=((1.0)*x3720);
IkReal x3726=(gconst103*x3720);
IkReal x3727=(gconst103*x3719);
IkReal x3728=((1.0)*gconst104*x3719);
evalcond[0]=((((-1.0)*r22*x3725))+(((-1.0)*r20*x3728))+((r21*x3727)));
evalcond[1]=(((x3719*x3721))+cj0+(((-1.0)*r12*x3725))+(((-1.0)*r10*x3728)));
evalcond[2]=((((-1.0)*x3723))+((r01*x3727))+(((-1.0)*r00*x3728))+(((-1.0)*r02*x3725)));
evalcond[3]=((((-1.0)*cj1*x3722))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3725))+((r22*x3719))+((r21*x3726)));
evalcond[4]=((((-1.0)*cj0*x3724))+(((-1.0)*gconst104*r00*x3725))+((r01*x3726))+(((-1.0)*cj0*sj1*x3722))+((r02*x3719)));
evalcond[5]=((((-1.0)*gconst104*r10*x3725))+(((-1.0)*sj0*sj1*x3722))+((r12*x3719))+(((-1.0)*x3723*x3724))+((x3720*x3721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3729=((-1.0)*r11);
IkReal x3731 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3731)==0){
continue;
}
IkReal x3730=pow(x3731,-0.5);
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(x3729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3732.value))));
IkReal gconst106=(x3729*x3730);
IkReal gconst107=((1.0)*r10*x3730);
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3733.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3734=((-1.0)*r11);
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal(x3734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
IkReal x3735=((1.0)*(x3737.value));
IkReal x3736=x3730;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3735)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3735)));
IkReal gconst106=(x3734*x3736);
IkReal gconst107=((1.0)*r10*x3736);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3738=((-1.0)*r11);
CheckValue<IkReal> x3741 = IKatan2WithCheck(IkReal(x3738),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3741.valid){
continue;
}
IkReal x3739=((1.0)*(x3741.value));
IkReal x3740=x3730;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3739)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3739)));
IkReal gconst106=(x3738*x3740);
IkReal gconst107=((1.0)*r10*x3740);
IkReal x3742=r12*r12;
IkReal x3743=((1.0)*sj0);
IkReal x3744=(cj0*r02);
IkReal x3745=x3730;
j4eval[0]=((IKabs((((sj0*x3742*x3745))+(((-1.0)*x3743*x3745))+((r12*x3744*x3745)))))+(IKabs(((((-1.0)*r12*x3743))+(((-1.0)*x3744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3746=((-1.0)*r11);
CheckValue<IkReal> x3749 = IKatan2WithCheck(IkReal(x3746),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3749.valid){
continue;
}
IkReal x3747=((1.0)*(x3749.value));
IkReal x3748=x3730;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3747)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3747)));
IkReal gconst106=(x3746*x3748);
IkReal gconst107=((1.0)*r10*x3748);
IkReal x3750=r12*r12;
IkReal x3751=((1.0)+(((-1.0)*x3750)));
IkReal x3752=(r22*sj1*sj2);
IkReal x3753=(cj1*cj2*r22);
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(x3751,-1);
if(!x3760.valid){
continue;
}
IkReal x3754=x3760.value;
CheckValue<IkReal> x3761=IKPowWithIntegerCheck(((-1.0)+x3750),-1);
if(!x3761.valid){
continue;
}
IkReal x3755=x3761.value;
IkReal x3756=((1.0)*x3754);
if((x3751) < -0.00001)
continue;
IkReal x3757=IKsqrt(x3751);
IkReal x3758=(r12*x3755*x3757);
IkReal x3759=((((-2.0)*r10*r11*r20*r21*x3754))+(((-1.0)*(r22*r22)))+(((-1.0)*x3756*(r10*r10)*(r20*r20)))+(((-1.0)*x3756*(r11*r11)*(r21*r21))));
j4eval[0]=x3759;
j4eval[1]=((IKabs((x3752+(((-1.0)*x3753)))))+(IKabs(((((-1.0)*x3752*x3758))+((x3753*x3758))))));
j4eval[2]=IKsign(x3759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3762=(sj1*sj2);
IkReal x3763=(gconst106*r21);
IkReal x3764=(gconst107*r20);
IkReal x3765=(cj1*cj2);
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal((((r22*x3762))+(((-1.0)*r22*x3765)))),IkReal(((((-1.0)*x3762*x3764))+(((-1.0)*x3763*x3765))+((x3762*x3763))+((x3764*x3765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3764*x3764)))+(((2.0)*x3763*x3764))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3763*x3763))))),-1);
if(!x3767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3766.value)+(((1.5707963267949)*(x3767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3768=IKsin(j4);
IkReal x3769=IKcos(j4);
IkReal x3770=(gconst107*r10);
IkReal x3771=(gconst107*r00);
IkReal x3772=((1.0)*cj2);
IkReal x3773=(gconst107*r20);
IkReal x3774=((1.0)*sj0);
IkReal x3775=(cj1*sj2);
IkReal x3776=((1.0)*x3769);
IkReal x3777=(gconst106*x3769);
IkReal x3778=(gconst106*x3768);
IkReal x3779=((1.0)*x3768);
evalcond[0]=(((r21*x3778))+(((-1.0)*r22*x3776))+(((-1.0)*x3773*x3779)));
evalcond[1]=(cj0+((r11*x3778))+(((-1.0)*x3770*x3779))+(((-1.0)*r12*x3776)));
evalcond[2]=((((-1.0)*r02*x3776))+(((-1.0)*x3774))+(((-1.0)*x3771*x3779))+((r01*x3778)));
evalcond[3]=(((r22*x3768))+((r21*x3777))+((sj1*sj2))+(((-1.0)*x3773*x3776))+(((-1.0)*cj1*x3772)));
evalcond[4]=(((r02*x3768))+(((-1.0)*cj0*sj1*x3772))+(((-1.0)*x3771*x3776))+(((-1.0)*cj0*x3775))+((r01*x3777)));
evalcond[5]=((((-1.0)*x3774*x3775))+((r11*x3777))+(((-1.0)*x3770*x3776))+(((-1.0)*sj0*sj1*x3772))+((r12*x3768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3780=((1.0)*sj0);
IkReal x3781=((1.0)*gconst106);
CheckValue<IkReal> x3782 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3780)))),IkReal(((((-1.0)*cj0*r01*x3781))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3780))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3782.valid){
continue;
}
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3781)))),-1);
if(!x3783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3782.value)+(((1.5707963267949)*(x3783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3784=IKsin(j4);
IkReal x3785=IKcos(j4);
IkReal x3786=(gconst107*r10);
IkReal x3787=(gconst107*r00);
IkReal x3788=((1.0)*cj2);
IkReal x3789=(gconst107*r20);
IkReal x3790=((1.0)*sj0);
IkReal x3791=(cj1*sj2);
IkReal x3792=((1.0)*x3785);
IkReal x3793=(gconst106*x3785);
IkReal x3794=(gconst106*x3784);
IkReal x3795=((1.0)*x3784);
evalcond[0]=(((r21*x3794))+(((-1.0)*r22*x3792))+(((-1.0)*x3789*x3795)));
evalcond[1]=((((-1.0)*r12*x3792))+cj0+(((-1.0)*x3786*x3795))+((r11*x3794)));
evalcond[2]=((((-1.0)*x3790))+(((-1.0)*r02*x3792))+((r01*x3794))+(((-1.0)*x3787*x3795)));
evalcond[3]=(((r21*x3793))+((r22*x3784))+((sj1*sj2))+(((-1.0)*cj1*x3788))+(((-1.0)*x3789*x3792)));
evalcond[4]=(((r02*x3784))+(((-1.0)*cj0*x3791))+((r01*x3793))+(((-1.0)*cj0*sj1*x3788))+(((-1.0)*x3787*x3792)));
evalcond[5]=(((r12*x3784))+(((-1.0)*x3786*x3792))+(((-1.0)*sj0*sj1*x3788))+(((-1.0)*x3790*x3791))+((r11*x3793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3796=((1.0)*gconst107);
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3796)))),-1);
if(!x3798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3797.value)+(((1.5707963267949)*(x3798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3799=IKsin(j4);
IkReal x3800=IKcos(j4);
IkReal x3801=(gconst107*r10);
IkReal x3802=(gconst107*r00);
IkReal x3803=((1.0)*cj2);
IkReal x3804=(gconst107*r20);
IkReal x3805=((1.0)*sj0);
IkReal x3806=(cj1*sj2);
IkReal x3807=((1.0)*x3800);
IkReal x3808=(gconst106*x3800);
IkReal x3809=(gconst106*x3799);
IkReal x3810=((1.0)*x3799);
evalcond[0]=((((-1.0)*x3804*x3810))+((r21*x3809))+(((-1.0)*r22*x3807)));
evalcond[1]=(((r11*x3809))+cj0+(((-1.0)*x3801*x3810))+(((-1.0)*r12*x3807)));
evalcond[2]=(((r01*x3809))+(((-1.0)*x3805))+(((-1.0)*r02*x3807))+(((-1.0)*x3802*x3810)));
evalcond[3]=(((r22*x3799))+((r21*x3808))+((sj1*sj2))+(((-1.0)*cj1*x3803))+(((-1.0)*x3804*x3807)));
evalcond[4]=(((r01*x3808))+((r02*x3799))+(((-1.0)*x3802*x3807))+(((-1.0)*cj0*x3806))+(((-1.0)*cj0*sj1*x3803)));
evalcond[5]=((((-1.0)*sj0*sj1*x3803))+((r11*x3808))+(((-1.0)*x3805*x3806))+(((-1.0)*x3801*x3807))+((r12*x3799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3811=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3811;
j4eval[1]=IKsign(x3811);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3812=((1.0)*cj5);
IkReal x3813=((((-1.0)*r01*x3812))+(((-1.0)*r00*sj5)));
j4eval[0]=x3813;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3812))))));
j4eval[2]=IKsign(x3813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3814=(sj1*sj2);
IkReal x3815=(cj5*r10);
IkReal x3816=(r11*sj5);
IkReal x3817=(cj1*cj2);
IkReal x3818=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3818;
j4eval[1]=((IKabs(((((-1.0)*x3814*x3815))+((x3815*x3817))+(((-1.0)*x3816*x3817))+((x3814*x3816)))))+(IKabs((((r12*x3817))+(((-1.0)*r12*x3814))))));
j4eval[2]=IKsign(x3818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3819=(sj1*sj2);
IkReal x3820=(cj5*r10);
IkReal x3821=(r11*sj5);
IkReal x3822=(cj1*cj2);
CheckValue<IkReal> x3823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3823.valid){
continue;
}
CheckValue<IkReal> x3824 = IKatan2WithCheck(IkReal((((x3819*x3821))+(((-1.0)*x3819*x3820))+((x3820*x3822))+(((-1.0)*x3821*x3822)))),IkReal((((r12*x3822))+(((-1.0)*r12*x3819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3823.value)))+(x3824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3825=IKcos(j4);
IkReal x3826=IKsin(j4);
IkReal x3827=(cj5*r00);
IkReal x3828=(cj5*r10);
IkReal x3829=(r21*sj5);
IkReal x3830=((1.0)*cj2);
IkReal x3831=(cj5*r20);
IkReal x3832=((1.0)*x3825);
IkReal x3833=((1.0)*x3826);
IkReal x3834=(sj5*x3826);
IkReal x3835=(sj5*x3825);
evalcond[0]=(((r12*x3826))+(((-1.0)*x3828*x3832))+((r11*x3835)));
evalcond[1]=(((x3826*x3829))+(((-1.0)*x3831*x3833))+(((-1.0)*r22*x3832)));
evalcond[2]=(((r01*x3834))+(((-1.0)*x3827*x3833))+(((-1.0)*r02*x3832)));
evalcond[3]=((1.0)+(((-1.0)*x3828*x3833))+(((-1.0)*r12*x3832))+((r11*x3834)));
evalcond[4]=((((-1.0)*x3831*x3832))+((x3825*x3829))+((sj1*sj2))+((r22*x3826))+(((-1.0)*cj1*x3830)));
evalcond[5]=(((r01*x3835))+(((-1.0)*cj1*sj2))+((r02*x3826))+(((-1.0)*sj1*x3830))+(((-1.0)*x3827*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3836=((1.0)*cj5);
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3836)))),-1);
if(!x3837.valid){
continue;
}
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3836))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3837.value)))+(x3838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3839=IKcos(j4);
IkReal x3840=IKsin(j4);
IkReal x3841=(cj5*r00);
IkReal x3842=(cj5*r10);
IkReal x3843=(r21*sj5);
IkReal x3844=((1.0)*cj2);
IkReal x3845=(cj5*r20);
IkReal x3846=((1.0)*x3839);
IkReal x3847=((1.0)*x3840);
IkReal x3848=(sj5*x3840);
IkReal x3849=(sj5*x3839);
evalcond[0]=(((r12*x3840))+(((-1.0)*x3842*x3846))+((r11*x3849)));
evalcond[1]=((((-1.0)*x3845*x3847))+((x3840*x3843))+(((-1.0)*r22*x3846)));
evalcond[2]=((((-1.0)*r02*x3846))+(((-1.0)*x3841*x3847))+((r01*x3848)));
evalcond[3]=((1.0)+(((-1.0)*x3842*x3847))+(((-1.0)*r12*x3846))+((r11*x3848)));
evalcond[4]=((((-1.0)*x3845*x3846))+((x3839*x3843))+((sj1*sj2))+(((-1.0)*cj1*x3844))+((r22*x3840)));
evalcond[5]=((((-1.0)*sj1*x3844))+(((-1.0)*cj1*sj2))+(((-1.0)*x3841*x3846))+((r01*x3849))+((r02*x3840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3850.valid){
continue;
}
CheckValue<IkReal> x3851 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3850.value)))+(x3851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3852=IKcos(j4);
IkReal x3853=IKsin(j4);
IkReal x3854=(cj5*r00);
IkReal x3855=(cj5*r10);
IkReal x3856=(r21*sj5);
IkReal x3857=((1.0)*cj2);
IkReal x3858=(cj5*r20);
IkReal x3859=((1.0)*x3852);
IkReal x3860=((1.0)*x3853);
IkReal x3861=(sj5*x3853);
IkReal x3862=(sj5*x3852);
evalcond[0]=(((r11*x3862))+(((-1.0)*x3855*x3859))+((r12*x3853)));
evalcond[1]=((((-1.0)*x3858*x3860))+((x3853*x3856))+(((-1.0)*r22*x3859)));
evalcond[2]=((((-1.0)*x3854*x3860))+((r01*x3861))+(((-1.0)*r02*x3859)));
evalcond[3]=((1.0)+((r11*x3861))+(((-1.0)*x3855*x3860))+(((-1.0)*r12*x3859)));
evalcond[4]=((((-1.0)*x3858*x3859))+((x3852*x3856))+((sj1*sj2))+(((-1.0)*cj1*x3857))+((r22*x3853)));
evalcond[5]=(((r02*x3853))+(((-1.0)*x3854*x3859))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3857))+((r01*x3862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3863=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3863;
j4eval[1]=IKsign(x3863);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3864=((1.0)*cj5);
IkReal x3865=((((-1.0)*r21*x3864))+(((-1.0)*r20*sj5)));
j4eval[0]=x3865;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3864))))));
j4eval[2]=IKsign(x3865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3866=cj5*cj5;
IkReal x3867=r11*r11;
IkReal x3868=(r11*sj5);
IkReal x3869=(cj5*r10);
IkReal x3870=((r12*r12)+(((-1.0)*x3866*x3867))+(((-2.0)*x3868*x3869))+x3867+((x3866*(r10*r10))));
j4eval[0]=x3870;
j4eval[1]=IKsign(x3870);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3869))+x3868))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3871=cj5*cj5;
IkReal x3872=r11*r11;
IkReal x3873=(cj5*r10);
IkReal x3874=(r11*sj5);
CheckValue<IkReal> x3875 = IKatan2WithCheck(IkReal((x3874+(((-1.0)*x3873)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3871*(r10*r10)))+x3872+(((-1.0)*x3871*x3872))+(((-2.0)*x3873*x3874)))),-1);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3875.value)+(((1.5707963267949)*(x3876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKcos(j4);
IkReal x3878=IKsin(j4);
IkReal x3879=(cj5*r00);
IkReal x3880=(cj5*r10);
IkReal x3881=(r21*sj5);
IkReal x3882=(cj5*r20);
IkReal x3883=((1.0)*x3877);
IkReal x3884=((1.0)*x3878);
IkReal x3885=(sj5*x3878);
IkReal x3886=(sj5*x3877);
evalcond[0]=((((-1.0)*x3880*x3883))+((r11*x3886))+((r12*x3878)));
evalcond[1]=(((x3878*x3881))+(((-1.0)*r22*x3883))+(((-1.0)*x3882*x3884)));
evalcond[2]=((((-1.0)*x3879*x3884))+(((-1.0)*r02*x3883))+((r01*x3885)));
evalcond[3]=((-1.0)+(((-1.0)*x3880*x3884))+((r11*x3885))+(((-1.0)*r12*x3883)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3879*x3883))+((cj1*sj2))+((r01*x3886))+((r02*x3878)));
evalcond[5]=(((x3877*x3881))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3878))+(((-1.0)*x3882*x3883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3887=((1.0)*cj5);
CheckValue<IkReal> x3888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3887))+(((-1.0)*r20*sj5)))),-1);
if(!x3888.valid){
continue;
}
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3888.value)))+(x3889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3890=IKcos(j4);
IkReal x3891=IKsin(j4);
IkReal x3892=(cj5*r00);
IkReal x3893=(cj5*r10);
IkReal x3894=(r21*sj5);
IkReal x3895=(cj5*r20);
IkReal x3896=((1.0)*x3890);
IkReal x3897=((1.0)*x3891);
IkReal x3898=(sj5*x3891);
IkReal x3899=(sj5*x3890);
evalcond[0]=((((-1.0)*x3893*x3896))+((r11*x3899))+((r12*x3891)));
evalcond[1]=((((-1.0)*x3895*x3897))+(((-1.0)*r22*x3896))+((x3891*x3894)));
evalcond[2]=(((r01*x3898))+(((-1.0)*x3892*x3897))+(((-1.0)*r02*x3896)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3896))+(((-1.0)*x3893*x3897))+((r11*x3898)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3899))+(((-1.0)*x3892*x3896))+((r02*x3891)));
evalcond[5]=(((x3890*x3894))+(((-1.0)*x3895*x3896))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3900.value)+(((1.5707963267949)*(x3901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3902=IKcos(j4);
IkReal x3903=IKsin(j4);
IkReal x3904=(cj5*r00);
IkReal x3905=(cj5*r10);
IkReal x3906=(r21*sj5);
IkReal x3907=(cj5*r20);
IkReal x3908=((1.0)*x3902);
IkReal x3909=((1.0)*x3903);
IkReal x3910=(sj5*x3903);
IkReal x3911=(sj5*x3902);
evalcond[0]=((((-1.0)*x3905*x3908))+((r12*x3903))+((r11*x3911)));
evalcond[1]=(((x3903*x3906))+(((-1.0)*r22*x3908))+(((-1.0)*x3907*x3909)));
evalcond[2]=((((-1.0)*x3904*x3909))+((r01*x3910))+(((-1.0)*r02*x3908)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3908))+(((-1.0)*x3905*x3909))+((r11*x3910)));
evalcond[4]=((((-1.0)*x3904*x3908))+((cj2*sj1))+((cj1*sj2))+((r01*x3911))+((r02*x3903)));
evalcond[5]=(((r22*x3903))+((x3902*x3906))+(((-1.0)*cj1*cj2))+(((-1.0)*x3907*x3908))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3912=((-1.0)*r00);
IkReal x3914 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3914)==0){
continue;
}
IkReal x3913=pow(x3914,-0.5);
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3912),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3915.value));
IkReal gconst109=(r01*x3913);
IkReal gconst110=(x3912*x3913);
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3916.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3917=((-1.0)*r00);
IkReal x3918=x3913;
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3917),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
IkReal x3919=((-1.0)*(x3920.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3919;
IkReal gconst108=x3919;
IkReal gconst109=(r01*x3918);
IkReal gconst110=(x3917*x3918);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3921=((1.0)*sj0);
IkReal x3922=((1.0)*gconst109);
CheckValue<IkReal> x3923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3922))+(((-1.0)*gconst110*r21)))),-1);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3921))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x3922))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3923.value)))+(x3924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3925=IKsin(j4);
IkReal x3926=IKcos(j4);
IkReal x3927=(gconst109*r21);
IkReal x3928=((1.0)*cj2);
IkReal x3929=((1.0)*sj0);
IkReal x3930=(cj1*sj2);
IkReal x3931=((1.0)*x3926);
IkReal x3932=(gconst109*x3925);
IkReal x3933=(gconst109*x3926);
IkReal x3934=((1.0)*gconst110*x3925);
evalcond[0]=((((-1.0)*r22*x3931))+(((-1.0)*r20*x3934))+((x3925*x3927)));
evalcond[1]=(cj0+(((-1.0)*r12*x3931))+(((-1.0)*r10*x3934))+((r11*x3932)));
evalcond[2]=(((r01*x3932))+(((-1.0)*x3929))+(((-1.0)*r00*x3934))+(((-1.0)*r02*x3931)));
evalcond[3]=((((-1.0)*cj1*x3928))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3931))+((r22*x3925))+((x3926*x3927)));
evalcond[4]=(((r01*x3933))+(((-1.0)*cj0*x3930))+((r02*x3925))+(((-1.0)*gconst110*r00*x3931))+(((-1.0)*cj0*sj1*x3928)));
evalcond[5]=((((-1.0)*x3929*x3930))+((r12*x3925))+(((-1.0)*sj0*sj1*x3928))+(((-1.0)*gconst110*r10*x3931))+((r11*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3935=((1.0)*gconst110);
CheckValue<IkReal> x3936 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3935))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3936.valid){
continue;
}
CheckValue<IkReal> x3937=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3935)))),-1);
if(!x3937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3936.value)+(((1.5707963267949)*(x3937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3938=IKsin(j4);
IkReal x3939=IKcos(j4);
IkReal x3940=(gconst109*r21);
IkReal x3941=((1.0)*cj2);
IkReal x3942=((1.0)*sj0);
IkReal x3943=(cj1*sj2);
IkReal x3944=((1.0)*x3939);
IkReal x3945=(gconst109*x3938);
IkReal x3946=(gconst109*x3939);
IkReal x3947=((1.0)*gconst110*x3938);
evalcond[0]=((((-1.0)*r22*x3944))+((x3938*x3940))+(((-1.0)*r20*x3947)));
evalcond[1]=(cj0+(((-1.0)*r10*x3947))+(((-1.0)*r12*x3944))+((r11*x3945)));
evalcond[2]=(((r01*x3945))+(((-1.0)*r00*x3947))+(((-1.0)*r02*x3944))+(((-1.0)*x3942)));
evalcond[3]=(((r22*x3938))+(((-1.0)*cj1*x3941))+((sj1*sj2))+((x3939*x3940))+(((-1.0)*gconst110*r20*x3944)));
evalcond[4]=(((r01*x3946))+(((-1.0)*cj0*x3943))+(((-1.0)*cj0*sj1*x3941))+(((-1.0)*gconst110*r00*x3944))+((r02*x3938)));
evalcond[5]=((((-1.0)*x3942*x3943))+(((-1.0)*sj0*sj1*x3941))+(((-1.0)*gconst110*r10*x3944))+((r12*x3938))+((r11*x3946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3948=((-1.0)*r01);
IkReal x3950 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3950)==0){
continue;
}
IkReal x3949=pow(x3950,-0.5);
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal(x3948),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3951.value))));
IkReal gconst112=(x3948*x3949);
IkReal gconst113=((1.0)*r00*x3949);
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3952.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3953=((-1.0)*r01);
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal(x3953),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
IkReal x3954=((1.0)*(x3956.value));
IkReal x3955=x3949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3954)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3954)));
IkReal gconst112=(x3953*x3955);
IkReal gconst113=((1.0)*r00*x3955);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3957=((-1.0)*r01);
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal(x3957),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
IkReal x3958=((1.0)*(x3960.value));
IkReal x3959=x3949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3958)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3958)));
IkReal gconst112=(x3957*x3959);
IkReal gconst113=((1.0)*r00*x3959);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3961=((-1.0)*r01);
CheckValue<IkReal> x3964 = IKatan2WithCheck(IkReal(x3961),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3964.valid){
continue;
}
IkReal x3962=((1.0)*(x3964.value));
IkReal x3963=x3949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3962)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3962)));
IkReal gconst112=(x3961*x3963);
IkReal gconst113=((1.0)*r00*x3963);
IkReal x3965=r02*r02;
IkReal x3966=(r12*sj0);
IkReal x3967=((1.0)*cj0);
IkReal x3968=x3949;
j4eval[0]=((IKabs(((((-1.0)*r02*x3967))+(((-1.0)*x3966)))))+(IKabs((((cj0*x3965*x3968))+((r02*x3966*x3968))+(((-1.0)*x3967*x3968))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3969=((1.0)*sj0);
IkReal x3970=((1.0)*gconst112);
CheckValue<IkReal> x3971 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3969)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3970))+(((-1.0)*gconst112*r11*x3969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3971.valid){
continue;
}
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3970))+(((-1.0)*gconst113*r21)))),-1);
if(!x3972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3971.value)+(((1.5707963267949)*(x3972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3973=IKsin(j4);
IkReal x3974=IKcos(j4);
IkReal x3975=(gconst113*r20);
IkReal x3976=(gconst112*r21);
IkReal x3977=((1.0)*cj2);
IkReal x3978=(gconst113*r00);
IkReal x3979=(gconst113*r10);
IkReal x3980=((1.0)*sj0);
IkReal x3981=(cj1*sj2);
IkReal x3982=((1.0)*x3974);
IkReal x3983=((1.0)*x3973);
IkReal x3984=(gconst112*x3974);
IkReal x3985=(gconst112*x3973);
evalcond[0]=(((x3973*x3976))+(((-1.0)*r22*x3982))+(((-1.0)*x3975*x3983)));
evalcond[1]=((((-1.0)*r12*x3982))+((r11*x3985))+cj0+(((-1.0)*x3979*x3983)));
evalcond[2]=(((r01*x3985))+(((-1.0)*x3978*x3983))+(((-1.0)*x3980))+(((-1.0)*r02*x3982)));
evalcond[3]=((((-1.0)*cj1*x3977))+((sj1*sj2))+((r22*x3973))+((x3974*x3976))+(((-1.0)*x3975*x3982)));
evalcond[4]=(((r02*x3973))+((r01*x3984))+(((-1.0)*cj0*x3981))+(((-1.0)*cj0*sj1*x3977))+(((-1.0)*x3978*x3982)));
evalcond[5]=(((r11*x3984))+((r12*x3973))+(((-1.0)*x3979*x3982))+(((-1.0)*x3980*x3981))+(((-1.0)*sj0*sj1*x3977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3986=((1.0)*gconst113);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3986))+(((-1.0)*gconst112*r10)))),-1);
if(!x3988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3987.value)+(((1.5707963267949)*(x3988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3989=IKsin(j4);
IkReal x3990=IKcos(j4);
IkReal x3991=(gconst113*r20);
IkReal x3992=(gconst112*r21);
IkReal x3993=((1.0)*cj2);
IkReal x3994=(gconst113*r00);
IkReal x3995=(gconst113*r10);
IkReal x3996=((1.0)*sj0);
IkReal x3997=(cj1*sj2);
IkReal x3998=((1.0)*x3990);
IkReal x3999=((1.0)*x3989);
IkReal x4000=(gconst112*x3990);
IkReal x4001=(gconst112*x3989);
evalcond[0]=(((x3989*x3992))+(((-1.0)*x3991*x3999))+(((-1.0)*r22*x3998)));
evalcond[1]=(cj0+(((-1.0)*x3995*x3999))+(((-1.0)*r12*x3998))+((r11*x4001)));
evalcond[2]=((((-1.0)*x3996))+((r01*x4001))+(((-1.0)*r02*x3998))+(((-1.0)*x3994*x3999)));
evalcond[3]=(((x3990*x3992))+((sj1*sj2))+(((-1.0)*x3991*x3998))+((r22*x3989))+(((-1.0)*cj1*x3993)));
evalcond[4]=(((r01*x4000))+(((-1.0)*cj0*sj1*x3993))+(((-1.0)*cj0*x3997))+((r02*x3989))+(((-1.0)*x3994*x3998)));
evalcond[5]=((((-1.0)*x3996*x3997))+(((-1.0)*x3995*x3998))+(((-1.0)*sj0*sj1*x3993))+((r12*x3989))+((r11*x4000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4002=((1.0)*gconst113);
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4002))+(((-1.0)*gconst112*r00)))),-1);
if(!x4003.valid){
continue;
}
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4002))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4003.value)))+(x4004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4005=IKsin(j4);
IkReal x4006=IKcos(j4);
IkReal x4007=(gconst113*r20);
IkReal x4008=(gconst112*r21);
IkReal x4009=((1.0)*cj2);
IkReal x4010=(gconst113*r00);
IkReal x4011=(gconst113*r10);
IkReal x4012=((1.0)*sj0);
IkReal x4013=(cj1*sj2);
IkReal x4014=((1.0)*x4006);
IkReal x4015=((1.0)*x4005);
IkReal x4016=(gconst112*x4006);
IkReal x4017=(gconst112*x4005);
evalcond[0]=((((-1.0)*r22*x4014))+((x4005*x4008))+(((-1.0)*x4007*x4015)));
evalcond[1]=((((-1.0)*r12*x4014))+cj0+(((-1.0)*x4011*x4015))+((r11*x4017)));
evalcond[2]=((((-1.0)*r02*x4014))+((r01*x4017))+(((-1.0)*x4012))+(((-1.0)*x4010*x4015)));
evalcond[3]=(((sj1*sj2))+((r22*x4005))+(((-1.0)*cj1*x4009))+(((-1.0)*x4007*x4014))+((x4006*x4008)));
evalcond[4]=((((-1.0)*cj0*x4013))+((r01*x4016))+((r02*x4005))+(((-1.0)*x4010*x4014))+(((-1.0)*cj0*sj1*x4009)));
evalcond[5]=(((r12*x4005))+(((-1.0)*x4012*x4013))+(((-1.0)*x4011*x4014))+(((-1.0)*sj0*sj1*x4009))+((r11*x4016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4018=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4018;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4019=((1.0)*cj5);
IkReal x4020=((((-1.0)*r11*x4019))+(((-1.0)*r10*sj5)));
j4eval[0]=x4020;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4019)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4021=cj5*cj5;
IkReal x4022=r01*r01;
IkReal x4023=(cj5*r00);
IkReal x4024=(r01*sj5);
IkReal x4025=(((x4021*(r00*r00)))+x4022+(r02*r02)+(((-2.0)*x4023*x4024))+(((-1.0)*x4021*x4022)));
j4eval[0]=x4025;
j4eval[1]=IKsign(x4025);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4023))+x4024))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4026=cj5*cj5;
IkReal x4027=r01*r01;
IkReal x4028=(r01*sj5);
IkReal x4029=(cj5*r00);
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal(((((-1.0)*x4029))+x4028)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
CheckValue<IkReal> x4031=IKPowWithIntegerCheck(IKsign((((x4026*(r00*r00)))+(((-1.0)*x4026*x4027))+x4027+(r02*r02)+(((-2.0)*x4028*x4029)))),-1);
if(!x4031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4030.value)+(((1.5707963267949)*(x4031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4032=IKcos(j4);
IkReal x4033=IKsin(j4);
IkReal x4034=(cj5*r00);
IkReal x4035=(cj5*r10);
IkReal x4036=(r21*sj5);
IkReal x4037=((1.0)*cj2);
IkReal x4038=(cj5*r20);
IkReal x4039=((1.0)*x4032);
IkReal x4040=((1.0)*x4033);
IkReal x4041=(sj5*x4033);
IkReal x4042=(sj5*x4032);
evalcond[0]=((((-1.0)*x4034*x4039))+((r02*x4033))+((r01*x4042)));
evalcond[1]=((((-1.0)*r22*x4039))+((x4033*x4036))+(((-1.0)*x4038*x4040)));
evalcond[2]=((((-1.0)*x4035*x4040))+(((-1.0)*r12*x4039))+((r11*x4041)));
evalcond[3]=((-1.0)+((r01*x4041))+(((-1.0)*x4034*x4040))+(((-1.0)*r02*x4039)));
evalcond[4]=(((x4032*x4036))+(((-1.0)*cj1*x4037))+((sj1*sj2))+(((-1.0)*x4038*x4039))+((r22*x4033)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4042))+(((-1.0)*x4035*x4039))+((r12*x4033))+(((-1.0)*sj1*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4043=((1.0)*cj5);
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4043))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
CheckValue<IkReal> x4045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4043)))),-1);
if(!x4045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4044.value)+(((1.5707963267949)*(x4045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4046=IKcos(j4);
IkReal x4047=IKsin(j4);
IkReal x4048=(cj5*r00);
IkReal x4049=(cj5*r10);
IkReal x4050=(r21*sj5);
IkReal x4051=((1.0)*cj2);
IkReal x4052=(cj5*r20);
IkReal x4053=((1.0)*x4046);
IkReal x4054=((1.0)*x4047);
IkReal x4055=(sj5*x4047);
IkReal x4056=(sj5*x4046);
evalcond[0]=(((r02*x4047))+((r01*x4056))+(((-1.0)*x4048*x4053)));
evalcond[1]=((((-1.0)*x4052*x4054))+((x4047*x4050))+(((-1.0)*r22*x4053)));
evalcond[2]=((((-1.0)*r12*x4053))+((r11*x4055))+(((-1.0)*x4049*x4054)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4053))+((r01*x4055))+(((-1.0)*x4048*x4054)));
evalcond[4]=(((r22*x4047))+(((-1.0)*x4052*x4053))+((x4046*x4050))+((sj1*sj2))+(((-1.0)*cj1*x4051)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4056))+((r12*x4047))+(((-1.0)*x4049*x4053))+(((-1.0)*sj1*x4051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4057=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4057.value)))+(x4058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4059=IKcos(j4);
IkReal x4060=IKsin(j4);
IkReal x4061=(cj5*r00);
IkReal x4062=(cj5*r10);
IkReal x4063=(r21*sj5);
IkReal x4064=((1.0)*cj2);
IkReal x4065=(cj5*r20);
IkReal x4066=((1.0)*x4059);
IkReal x4067=((1.0)*x4060);
IkReal x4068=(sj5*x4060);
IkReal x4069=(sj5*x4059);
evalcond[0]=((((-1.0)*x4061*x4066))+((r02*x4060))+((r01*x4069)));
evalcond[1]=((((-1.0)*x4065*x4067))+((x4060*x4063))+(((-1.0)*r22*x4066)));
evalcond[2]=((((-1.0)*r12*x4066))+((r11*x4068))+(((-1.0)*x4062*x4067)));
evalcond[3]=((-1.0)+(((-1.0)*x4061*x4067))+(((-1.0)*r02*x4066))+((r01*x4068)));
evalcond[4]=((((-1.0)*x4065*x4066))+((x4059*x4063))+((sj1*sj2))+(((-1.0)*cj1*x4064))+((r22*x4060)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4069))+((r12*x4060))+(((-1.0)*x4062*x4066))+(((-1.0)*sj1*x4064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4070=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4070;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4071=((1.0)*cj5);
IkReal x4072=((((-1.0)*r21*x4071))+(((-1.0)*r20*sj5)));
j4eval[0]=x4072;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4071))+((r11*sj5))))));
j4eval[2]=IKsign(x4072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4073=cj5*cj5;
IkReal x4074=r01*r01;
IkReal x4075=(r01*sj5);
IkReal x4076=(cj5*r00);
IkReal x4077=((((-1.0)*x4074))+(((-1.0)*(r02*r02)))+(((-1.0)*x4073*(r00*r00)))+((x4073*x4074))+(((2.0)*x4075*x4076)));
j4eval[0]=x4077;
j4eval[1]=IKsign(x4077);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4076))+x4075))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4078=cj5*cj5;
IkReal x4079=r01*r01;
IkReal x4080=(r01*sj5);
IkReal x4081=(cj5*r00);
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal((x4080+(((-1.0)*x4081)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4078*(r00*r00)))+((x4078*x4079))+(((-1.0)*x4079))+(((-1.0)*(r02*r02)))+(((2.0)*x4080*x4081)))),-1);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4082.value)+(((1.5707963267949)*(x4083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKcos(j4);
IkReal x4085=IKsin(j4);
IkReal x4086=(cj5*r00);
IkReal x4087=(cj5*r10);
IkReal x4088=(r21*sj5);
IkReal x4089=(cj5*r20);
IkReal x4090=((1.0)*x4084);
IkReal x4091=((1.0)*x4085);
IkReal x4092=(sj5*x4085);
IkReal x4093=(sj5*x4084);
evalcond[0]=(((r01*x4093))+(((-1.0)*x4086*x4090))+((r02*x4085)));
evalcond[1]=((((-1.0)*x4089*x4091))+((x4085*x4088))+(((-1.0)*r22*x4090)));
evalcond[2]=((((-1.0)*r12*x4090))+((r11*x4092))+(((-1.0)*x4087*x4091)));
evalcond[3]=((1.0)+((r01*x4092))+(((-1.0)*x4086*x4091))+(((-1.0)*r02*x4090)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4093))+((r12*x4085))+(((-1.0)*x4087*x4090)));
evalcond[5]=((((-1.0)*x4089*x4090))+((x4084*x4088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4094=((1.0)*cj5);
CheckValue<IkReal> x4095 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4094))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4095.valid){
continue;
}
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4094))+(((-1.0)*r20*sj5)))),-1);
if(!x4096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4095.value)+(((1.5707963267949)*(x4096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4097=IKcos(j4);
IkReal x4098=IKsin(j4);
IkReal x4099=(cj5*r00);
IkReal x4100=(cj5*r10);
IkReal x4101=(r21*sj5);
IkReal x4102=(cj5*r20);
IkReal x4103=((1.0)*x4097);
IkReal x4104=((1.0)*x4098);
IkReal x4105=(sj5*x4098);
IkReal x4106=(sj5*x4097);
evalcond[0]=(((r02*x4098))+((r01*x4106))+(((-1.0)*x4099*x4103)));
evalcond[1]=((((-1.0)*r22*x4103))+((x4098*x4101))+(((-1.0)*x4102*x4104)));
evalcond[2]=((((-1.0)*r12*x4103))+((r11*x4105))+(((-1.0)*x4100*x4104)));
evalcond[3]=((1.0)+((r01*x4105))+(((-1.0)*r02*x4103))+(((-1.0)*x4099*x4104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4098))+((r11*x4106))+(((-1.0)*x4100*x4103)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4098))+(((-1.0)*x4102*x4103))+((x4097*x4101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4107 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4107.valid){
continue;
}
CheckValue<IkReal> x4108=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4107.value)+(((1.5707963267949)*(x4108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4109=IKcos(j4);
IkReal x4110=IKsin(j4);
IkReal x4111=(cj5*r00);
IkReal x4112=(cj5*r10);
IkReal x4113=(r21*sj5);
IkReal x4114=(cj5*r20);
IkReal x4115=((1.0)*x4109);
IkReal x4116=((1.0)*x4110);
IkReal x4117=(sj5*x4110);
IkReal x4118=(sj5*x4109);
evalcond[0]=((((-1.0)*x4111*x4115))+((r02*x4110))+((r01*x4118)));
evalcond[1]=((((-1.0)*r22*x4115))+(((-1.0)*x4114*x4116))+((x4110*x4113)));
evalcond[2]=((((-1.0)*r12*x4115))+(((-1.0)*x4112*x4116))+((r11*x4117)));
evalcond[3]=((1.0)+(((-1.0)*x4111*x4116))+(((-1.0)*r02*x4115))+((r01*x4117)));
evalcond[4]=(((r12*x4110))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4112*x4115))+((r11*x4118)));
evalcond[5]=(((x4109*x4113))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4110))+(((-1.0)*x4114*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4119=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4119);
rxp1_1=(px*r21);
rxp1_2=(r11*x4119);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4120=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4120);
rxp1_1=(px*r21);
rxp1_2=(r11*x4120);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4121=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4121);
rxp1_1=(px*r21);
rxp1_2=(r11*x4121);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4124.valid){
continue;
}
IkReal x4122=x4124.value;
IkReal x4123=(sj0*x4122);
cj4array[0]=(((cj1*sj2*x4123))+((cj2*sj1*x4123)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4125=IKsin(j4);
IkReal x4126=IKcos(j4);
IkReal x4127=(r21*sj5);
IkReal x4128=((1.0)*cj5*r20);
evalcond[0]=(r02*x4125);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4126)));
evalcond[2]=(((x4125*x4127))+(((-1.0)*x4125*x4128)));
evalcond[3]=(((r11*sj5*x4125))+(((-1.0)*cj5*r10*x4125)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4126*x4128))+((x4126*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4130=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4130.valid){
continue;
}
IkReal x4129=x4130.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4129))+((cj1*cj2*x4129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4131=IKsin(j4);
IkReal x4132=IKcos(j4);
IkReal x4133=((1.0)*sj0);
IkReal x4134=((1.0)*cj5);
IkReal x4135=(sj5*x4131);
evalcond[0]=(r02*x4131);
evalcond[1]=((((-1.0)*x4133))+(((-1.0)*r02*x4132)));
evalcond[2]=(((r21*x4135))+(((-1.0)*r20*x4131*x4134)));
evalcond[3]=(((r11*x4135))+(((-1.0)*r10*x4131*x4134)));
evalcond[4]=((((-1.0)*cj2*sj1*x4133))+((r11*sj5*x4132))+(((-1.0)*cj1*sj2*x4133))+(((-1.0)*r10*x4132*x4134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(r02,-1);
if(!x4136.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4136.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4137=IKsin(j4);
IkReal x4138=IKcos(j4);
IkReal x4139=((1.0)*cj1);
IkReal x4140=(r21*sj5);
IkReal x4141=((1.0)*cj5);
IkReal x4142=(r11*sj5);
evalcond[0]=(r02*x4137);
evalcond[1]=(((x4137*x4140))+(((-1.0)*r20*x4137*x4141)));
evalcond[2]=(((x4137*x4142))+(((-1.0)*r10*x4137*x4141)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x4138*x4141))+((x4138*x4140))+(((-1.0)*cj2*x4139)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4139))+(((-1.0)*r10*x4138*x4141))+((x4138*x4142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4143=((1.0)*sj0);
IkReal x4144=((1.0)*cj0);
CheckValue<IkReal> x4145 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4144))+(((-1.0)*r12*x4143)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4144))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4145.valid){
continue;
}
CheckValue<IkReal> x4146=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4145.value)+(((1.5707963267949)*(x4146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4147=IKsin(j4);
IkReal x4148=IKcos(j4);
IkReal x4149=(cj5*r00);
IkReal x4150=(cj5*r10);
IkReal x4151=(r21*sj5);
IkReal x4152=((1.0)*cj2);
IkReal x4153=((1.0)*sj0);
IkReal x4154=(cj1*sj2);
IkReal x4155=(cj5*r20);
IkReal x4156=((1.0)*x4148);
IkReal x4157=((1.0)*x4147);
IkReal x4158=(sj5*x4147);
IkReal x4159=(sj5*x4148);
evalcond[0]=((((-1.0)*x4155*x4157))+((x4147*x4151))+(((-1.0)*r22*x4156)));
evalcond[1]=(cj0+((r11*x4158))+(((-1.0)*x4150*x4157))+(((-1.0)*r12*x4156)));
evalcond[2]=(((r01*x4158))+(((-1.0)*r02*x4156))+(((-1.0)*x4153))+(((-1.0)*x4149*x4157)));
evalcond[3]=((((-1.0)*x4155*x4156))+((sj1*sj2))+(((-1.0)*cj1*x4152))+((r22*x4147))+((x4148*x4151)));
evalcond[4]=(((r02*x4147))+((r01*x4159))+(((-1.0)*cj0*sj1*x4152))+(((-1.0)*x4149*x4156))+(((-1.0)*cj0*x4154)));
evalcond[5]=(((r12*x4147))+(((-1.0)*x4153*x4154))+((r11*x4159))+(((-1.0)*x4150*x4156))+(((-1.0)*sj0*sj1*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4160=((1.0)*cj5);
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4160)))),-1);
if(!x4161.valid){
continue;
}
CheckValue<IkReal> x4162 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4160))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4161.value)))+(x4162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4163=IKsin(j4);
IkReal x4164=IKcos(j4);
IkReal x4165=(cj5*r00);
IkReal x4166=(cj5*r10);
IkReal x4167=(r21*sj5);
IkReal x4168=((1.0)*cj2);
IkReal x4169=((1.0)*sj0);
IkReal x4170=(cj1*sj2);
IkReal x4171=(cj5*r20);
IkReal x4172=((1.0)*x4164);
IkReal x4173=((1.0)*x4163);
IkReal x4174=(sj5*x4163);
IkReal x4175=(sj5*x4164);
evalcond[0]=((((-1.0)*x4171*x4173))+(((-1.0)*r22*x4172))+((x4163*x4167)));
evalcond[1]=(((r11*x4174))+cj0+(((-1.0)*x4166*x4173))+(((-1.0)*r12*x4172)));
evalcond[2]=((((-1.0)*x4165*x4173))+(((-1.0)*x4169))+((r01*x4174))+(((-1.0)*r02*x4172)));
evalcond[3]=(((r22*x4163))+(((-1.0)*x4171*x4172))+(((-1.0)*cj1*x4168))+((sj1*sj2))+((x4164*x4167)));
evalcond[4]=((((-1.0)*x4165*x4172))+(((-1.0)*cj0*sj1*x4168))+(((-1.0)*cj0*x4170))+((r02*x4163))+((r01*x4175)));
evalcond[5]=(((r11*x4175))+(((-1.0)*x4169*x4170))+(((-1.0)*x4166*x4172))+((r12*x4163))+(((-1.0)*sj0*sj1*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4176=((1.0)*cj5);
CheckValue<IkReal> x4177 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4177.valid){
continue;
}
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4176))+(((-1.0)*r00*sj5)))),-1);
if(!x4178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4177.value)+(((1.5707963267949)*(x4178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4179=IKsin(j4);
IkReal x4180=IKcos(j4);
IkReal x4181=(cj5*r00);
IkReal x4182=(cj5*r10);
IkReal x4183=(r21*sj5);
IkReal x4184=((1.0)*cj2);
IkReal x4185=((1.0)*sj0);
IkReal x4186=(cj1*sj2);
IkReal x4187=(cj5*r20);
IkReal x4188=((1.0)*x4180);
IkReal x4189=((1.0)*x4179);
IkReal x4190=(sj5*x4179);
IkReal x4191=(sj5*x4180);
evalcond[0]=(((x4179*x4183))+(((-1.0)*x4187*x4189))+(((-1.0)*r22*x4188)));
evalcond[1]=((((-1.0)*r12*x4188))+((r11*x4190))+cj0+(((-1.0)*x4182*x4189)));
evalcond[2]=((((-1.0)*x4181*x4189))+(((-1.0)*x4185))+(((-1.0)*r02*x4188))+((r01*x4190)));
evalcond[3]=((((-1.0)*cj1*x4184))+((x4180*x4183))+((r22*x4179))+(((-1.0)*x4187*x4188))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4181*x4188))+(((-1.0)*cj0*sj1*x4184))+(((-1.0)*cj0*x4186))+((r01*x4191))+((r02*x4179)));
evalcond[5]=(((r11*x4191))+((r12*x4179))+(((-1.0)*x4185*x4186))+(((-1.0)*sj0*sj1*x4184))+(((-1.0)*x4182*x4188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4192=r21*r21;
IkReal x4193=cj5*cj5;
IkReal x4194=(sj1*sj2);
IkReal x4195=(r21*sj5);
IkReal x4196=(cj1*cj2);
IkReal x4197=(cj5*r20);
CheckValue<IkReal> x4198 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4196))+((r22*x4194)))),IkReal((((x4196*x4197))+((x4194*x4195))+(((-1.0)*x4194*x4197))+(((-1.0)*x4195*x4196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4198.valid){
continue;
}
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4193*(r20*r20)))+((x4192*x4193))+(((-1.0)*x4192))+(((2.0)*x4195*x4197))+(((-1.0)*(r22*r22))))),-1);
if(!x4199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4198.value)+(((1.5707963267949)*(x4199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4200=IKsin(j4);
IkReal x4201=IKcos(j4);
IkReal x4202=(r21*sj5);
IkReal x4203=(cj5*r20);
IkReal x4204=((1.0)*x4201);
evalcond[0]=((((-1.0)*r22*x4204))+(((-1.0)*x4200*x4203))+((x4200*x4202)));
evalcond[1]=(((r22*x4200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4201*x4202))+(((-1.0)*x4203*x4204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4205=(cj5*sj4);
IkReal x4206=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4205))+((r01*x4206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4205))+(((-1.0)*r11*x4206))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4205))+((r01*x4206))))+IKsqr((((r10*x4205))+(((-1.0)*r11*x4206))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4205))+((r01*x4206))), (((r10*x4205))+(((-1.0)*r11*x4206))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4207=IKcos(j0);
IkReal x4208=IKsin(j0);
IkReal x4209=((0.1)*sj5);
IkReal x4210=((0.392)*sj1);
IkReal x4211=(cj5*r11);
IkReal x4212=((1.0)*cj1);
IkReal x4213=(r11*sj5);
IkReal x4214=((1.0)*sj5);
IkReal x4215=((1.0)*sj1);
IkReal x4216=((1.0)*cj5);
IkReal x4217=((0.425)*cj1);
IkReal x4218=((1.0)*cj4);
IkReal x4219=(r01*sj5);
IkReal x4220=(sj2*x4208);
IkReal x4221=(sj2*x4207);
IkReal x4222=(cj4*x4216);
IkReal x4223=((0.392)*cj1*cj2);
IkReal x4224=(cj2*x4207);
IkReal x4225=(cj2*x4208);
evalcond[0]=((((-1.0)*r12*x4218))+(((-1.0)*r10*sj4*x4216))+x4207+((sj4*x4213)));
evalcond[1]=((((-1.0)*r02*x4218))+(((-1.0)*r00*sj4*x4216))+(((-1.0)*x4208))+((sj4*x4219)));
evalcond[2]=((((-1.0)*r01*x4216))+(((-1.0)*r00*x4214))+((sj1*x4221))+(((-1.0)*x4212*x4224)));
evalcond[3]=(((sj1*x4220))+(((-1.0)*x4211))+(((-1.0)*x4212*x4225))+(((-1.0)*r10*x4214)));
evalcond[4]=(((cj4*x4219))+(((-1.0)*x4215*x4224))+((r02*sj4))+(((-1.0)*r00*x4222))+(((-1.0)*x4212*x4221)));
evalcond[5]=(((cj4*x4213))+(((-1.0)*x4215*x4225))+(((-1.0)*r10*x4222))+((r12*sj4))+(((-1.0)*x4212*x4220)));
evalcond[6]=((((-1.0)*r00*x4209))+(((-0.1)*cj5*r01))+(((-1.0)*px))+((x4207*x4217))+(((-0.134)*x4208))+((x4207*x4223))+(((-1.0)*x4210*x4221)));
evalcond[7]=((((-1.0)*r10*x4209))+((x4208*x4223))+(((-0.1)*x4211))+(((-1.0)*py))+(((0.134)*x4207))+((x4208*x4217))+(((-1.0)*x4210*x4220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4226 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4226.valid){
continue;
}
CheckValue<IkReal> x4227=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4227.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4226.value)+(((1.5707963267949)*(x4227.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4228=IKcos(j0);
IkReal x4229=IKsin(j0);
IkReal x4230=((0.1)*sj5);
IkReal x4231=(cj5*r11);
IkReal x4232=(sj1*sj2);
IkReal x4233=(cj1*cj2);
IkReal x4234=((1.0)*sj5);
IkReal x4235=(cj5*r01);
IkReal x4236=((0.425)*cj1);
IkReal x4237=((0.392)*x4229);
IkReal x4238=((0.392)*x4228);
evalcond[0]=((((-1.0)*x4228*x4233))+(((-1.0)*x4235))+(((-1.0)*r00*x4234))+((x4228*x4232)));
evalcond[1]=((((-1.0)*x4229*x4233))+(((-1.0)*x4231))+(((-1.0)*r10*x4234))+((x4229*x4232)));
evalcond[2]=((((-0.134)*x4229))+(((-1.0)*x4232*x4238))+(((-0.1)*x4235))+(((-1.0)*px))+(((-1.0)*r00*x4230))+((x4228*x4236))+((x4233*x4238)));
evalcond[3]=((((0.134)*x4228))+(((-1.0)*x4232*x4237))+(((-0.1)*x4231))+(((-1.0)*r10*x4230))+(((-1.0)*py))+((x4229*x4236))+((x4233*x4237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4239=((1.0)*cj5);
IkReal x4240=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4239)));
j4eval[0]=x4240;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4239)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4241=((1.0)*cj5);
IkReal x4242=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4241)));
j4eval[0]=x4242;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4241))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4243=((1.0)*sj0);
IkReal x4244=((1.0)*cj0);
IkReal x4245=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4245;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x4244))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4243)))))+(IKabs(((((-1.0)*r12*x4243))+(((-1.0)*r02*x4244))))));
j4eval[2]=IKsign(x4245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4246=((-1.0)*r20);
IkReal x4248 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4248)==0){
continue;
}
IkReal x4247=pow(x4248,-0.5);
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4246),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4249.value));
IkReal gconst97=(r21*x4247);
IkReal gconst98=(x4246*x4247);
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4251=((-1.0)*r20);
IkReal x4252=x4247;
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4251),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
IkReal x4253=((-1.0)*(x4254.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4253;
IkReal gconst96=x4253;
IkReal gconst97=(r21*x4252);
IkReal gconst98=(x4251*x4252);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4255=((-1.0)*r20);
IkReal x4256=x4247;
CheckValue<IkReal> x4258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4255),IKFAST_ATAN2_MAGTHRESH);
if(!x4258.valid){
continue;
}
IkReal x4257=((-1.0)*(x4258.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4257;
IkReal gconst96=x4257;
IkReal gconst97=(r21*x4256);
IkReal gconst98=(x4255*x4256);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4259=((-1.0)*r20);
IkReal x4260=x4247;
CheckValue<IkReal> x4262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4259),IKFAST_ATAN2_MAGTHRESH);
if(!x4262.valid){
continue;
}
IkReal x4261=((-1.0)*(x4262.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4261;
IkReal gconst96=x4261;
IkReal gconst97=(r21*x4260);
IkReal gconst98=(x4259*x4260);
IkReal x4263=((1.0)*(r22*r22));
CheckValue<IkReal> x4267=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4263))),-1);
if(!x4267.valid){
continue;
}
IkReal x4264=x4267.value;
IkReal x4265=((1.0)*x4264);
IkReal x4266=((((-2.0)*x4264*(r20*r20)*(r21*r21)))+(((-1.0)*x4265*(r20*r20*r20*r20)))+(((-1.0)*x4263))+(((-1.0)*x4265*(r21*r21*r21*r21))));
j4eval[0]=x4266;
j4eval[1]=IKsign(x4266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4268=(cj1*cj2);
IkReal x4269=(gconst98*r20);
IkReal x4270=(sj1*sj2);
IkReal x4271=(gconst97*r21);
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal((((r22*x4270))+(((-1.0)*r22*x4268)))),IkReal((((x4270*x4271))+(((-1.0)*x4268*x4271))+((x4268*x4269))+(((-1.0)*x4269*x4270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
CheckValue<IkReal> x4273=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4271*x4271)))+(((-1.0)*(r22*r22)))+(((2.0)*x4269*x4271))+(((-1.0)*(x4269*x4269))))),-1);
if(!x4273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4272.value)+(((1.5707963267949)*(x4273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4274=IKsin(j4);
IkReal x4275=IKcos(j4);
IkReal x4276=(gconst98*r10);
IkReal x4277=(gconst97*r21);
IkReal x4278=(gconst98*r20);
IkReal x4279=((1.0)*cj2);
IkReal x4280=((1.0)*sj0);
IkReal x4281=(gconst98*r00);
IkReal x4282=(cj1*sj2);
IkReal x4283=((1.0)*x4275);
IkReal x4284=((1.0)*x4274);
IkReal x4285=(gconst97*x4274);
IkReal x4286=(gconst97*x4275);
evalcond[0]=(((x4274*x4277))+(((-1.0)*x4278*x4284))+(((-1.0)*r22*x4283)));
evalcond[1]=(cj0+((r11*x4285))+(((-1.0)*r12*x4283))+(((-1.0)*x4276*x4284)));
evalcond[2]=((((-1.0)*x4280))+(((-1.0)*r02*x4283))+((r01*x4285))+(((-1.0)*x4281*x4284)));
evalcond[3]=((((-1.0)*cj1*x4279))+((sj1*sj2))+(((-1.0)*x4278*x4283))+((x4275*x4277))+((r22*x4274)));
evalcond[4]=(((r02*x4274))+(((-1.0)*cj0*x4282))+(((-1.0)*cj0*sj1*x4279))+((r01*x4286))+(((-1.0)*x4281*x4283)));
evalcond[5]=(((r11*x4286))+(((-1.0)*x4280*x4282))+((r12*x4274))+(((-1.0)*sj0*sj1*x4279))+(((-1.0)*x4276*x4283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4287=((1.0)*gconst98);
CheckValue<IkReal> x4288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4287))+(((-1.0)*gconst97*r10)))),-1);
if(!x4288.valid){
continue;
}
CheckValue<IkReal> x4289 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4288.value)))+(x4289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4290=IKsin(j4);
IkReal x4291=IKcos(j4);
IkReal x4292=(gconst98*r10);
IkReal x4293=(gconst97*r21);
IkReal x4294=(gconst98*r20);
IkReal x4295=((1.0)*cj2);
IkReal x4296=((1.0)*sj0);
IkReal x4297=(gconst98*r00);
IkReal x4298=(cj1*sj2);
IkReal x4299=((1.0)*x4291);
IkReal x4300=((1.0)*x4290);
IkReal x4301=(gconst97*x4290);
IkReal x4302=(gconst97*x4291);
evalcond[0]=((((-1.0)*r22*x4299))+(((-1.0)*x4294*x4300))+((x4290*x4293)));
evalcond[1]=(((r11*x4301))+cj0+(((-1.0)*r12*x4299))+(((-1.0)*x4292*x4300)));
evalcond[2]=((((-1.0)*x4297*x4300))+(((-1.0)*x4296))+((r01*x4301))+(((-1.0)*r02*x4299)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4294*x4299))+((x4291*x4293))+((r22*x4290))+(((-1.0)*cj1*x4295)));
evalcond[4]=((((-1.0)*cj0*sj1*x4295))+(((-1.0)*cj0*x4298))+(((-1.0)*x4297*x4299))+((r01*x4302))+((r02*x4290)));
evalcond[5]=(((r11*x4302))+(((-1.0)*x4296*x4298))+((r12*x4290))+(((-1.0)*x4292*x4299))+(((-1.0)*sj0*sj1*x4295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4303=((1.0)*gconst98);
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
CheckValue<IkReal> x4305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4303))+(((-1.0)*gconst97*r00)))),-1);
if(!x4305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4304.value)+(((1.5707963267949)*(x4305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4306=IKsin(j4);
IkReal x4307=IKcos(j4);
IkReal x4308=(gconst98*r10);
IkReal x4309=(gconst97*r21);
IkReal x4310=(gconst98*r20);
IkReal x4311=((1.0)*cj2);
IkReal x4312=((1.0)*sj0);
IkReal x4313=(gconst98*r00);
IkReal x4314=(cj1*sj2);
IkReal x4315=((1.0)*x4307);
IkReal x4316=((1.0)*x4306);
IkReal x4317=(gconst97*x4306);
IkReal x4318=(gconst97*x4307);
evalcond[0]=((((-1.0)*r22*x4315))+(((-1.0)*x4310*x4316))+((x4306*x4309)));
evalcond[1]=(cj0+((r11*x4317))+(((-1.0)*r12*x4315))+(((-1.0)*x4308*x4316)));
evalcond[2]=((((-1.0)*x4312))+((r01*x4317))+(((-1.0)*r02*x4315))+(((-1.0)*x4313*x4316)));
evalcond[3]=(((r22*x4306))+(((-1.0)*cj1*x4311))+(((-1.0)*x4310*x4315))+((sj1*sj2))+((x4307*x4309)));
evalcond[4]=(((r02*x4306))+(((-1.0)*cj0*x4314))+((r01*x4318))+(((-1.0)*cj0*sj1*x4311))+(((-1.0)*x4313*x4315)));
evalcond[5]=((((-1.0)*x4312*x4314))+((r12*x4306))+((r11*x4318))+(((-1.0)*sj0*sj1*x4311))+(((-1.0)*x4308*x4315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4319=((-1.0)*r21);
IkReal x4321 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4321)==0){
continue;
}
IkReal x4320=pow(x4321,-0.5);
CheckValue<IkReal> x4322 = IKatan2WithCheck(IkReal(x4319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4322.value))));
IkReal gconst100=(x4319*x4320);
IkReal gconst101=((1.0)*r20*x4320);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4323.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4324=((-1.0)*r21);
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal(x4324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
IkReal x4325=((1.0)*(x4327.value));
IkReal x4326=x4320;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4325)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4325)));
IkReal gconst100=(x4324*x4326);
IkReal gconst101=((1.0)*r20*x4326);
IkReal x4328=r22*r22;
IkReal x4329=((1.0)*x4328);
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(((-1.0)+x4328),-1);
if(!x4333.valid){
continue;
}
IkReal x4330=x4333.value;
if((((1.0)+(((-1.0)*x4329)))) < -0.00001)
continue;
IkReal x4331=IKsqrt(((1.0)+(((-1.0)*x4329))));
IkReal x4332=(cj0*x4330*x4331);
j4eval[0]=((IKabs((x4332+(((-1.0)*x4329*x4332)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4334=((-1.0)*r21);
CheckValue<IkReal> x4337 = IKatan2WithCheck(IkReal(x4334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4337.valid){
continue;
}
IkReal x4335=((1.0)*(x4337.value));
IkReal x4336=x4320;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4335)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4335)));
IkReal gconst100=(x4334*x4336);
IkReal gconst101=((1.0)*r20*x4336);
IkReal x4338=r22*r22;
IkReal x4339=((1.0)*x4338);
CheckValue<IkReal> x4343=IKPowWithIntegerCheck(((-1.0)+x4338),-1);
if(!x4343.valid){
continue;
}
IkReal x4340=x4343.value;
if((((1.0)+(((-1.0)*x4339)))) < -0.00001)
continue;
IkReal x4341=IKsqrt(((1.0)+(((-1.0)*x4339))));
IkReal x4342=(sj0*x4340*x4341);
j4eval[0]=((IKabs(((((-1.0)*x4339*x4342))+x4342)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4344=((-1.0)*r21);
CheckValue<IkReal> x4347 = IKatan2WithCheck(IkReal(x4344),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4347.valid){
continue;
}
IkReal x4345=((1.0)*(x4347.value));
IkReal x4346=x4320;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4345)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4345)));
IkReal gconst100=(x4344*x4346);
IkReal gconst101=((1.0)*r20*x4346);
IkReal x4348=r22*r22;
IkReal x4349=(r12*sj0);
IkReal x4350=(cj0*r02);
CheckValue<IkReal> x4354=IKPowWithIntegerCheck(((-1.0)+x4348),-1);
if(!x4354.valid){
continue;
}
IkReal x4351=x4354.value;
if((((1.0)+(((-1.0)*x4348)))) < -0.00001)
continue;
IkReal x4352=IKsqrt(((1.0)+(((-1.0)*x4348))));
IkReal x4353=(r22*x4351*x4352);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4350*x4353))+((x4349*x4353)))))+(IKabs(((((-1.0)*x4350))+(((-1.0)*x4349))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4355=((1.0)*sj0);
IkReal x4356=((1.0)*gconst100);
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4355))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4356))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
CheckValue<IkReal> x4358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4356)))),-1);
if(!x4358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4357.value)+(((1.5707963267949)*(x4358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4359=IKsin(j4);
IkReal x4360=IKcos(j4);
IkReal x4361=(gconst101*r20);
IkReal x4362=(gconst101*r10);
IkReal x4363=((1.0)*cj2);
IkReal x4364=(gconst101*r00);
IkReal x4365=((1.0)*sj0);
IkReal x4366=(cj1*sj2);
IkReal x4367=((1.0)*x4360);
IkReal x4368=((1.0)*x4359);
IkReal x4369=(gconst100*x4359);
IkReal x4370=(gconst100*x4360);
evalcond[0]=((((-1.0)*x4361*x4368))+(((-1.0)*r22*x4367))+((r21*x4369)));
evalcond[1]=(cj0+((r11*x4369))+(((-1.0)*x4362*x4368))+(((-1.0)*r12*x4367)));
evalcond[2]=((((-1.0)*x4365))+((r01*x4369))+(((-1.0)*x4364*x4368))+(((-1.0)*r02*x4367)));
evalcond[3]=((((-1.0)*x4361*x4367))+(((-1.0)*cj1*x4363))+((r22*x4359))+((sj1*sj2))+((r21*x4370)));
evalcond[4]=(((r01*x4370))+(((-1.0)*cj0*x4366))+((r02*x4359))+(((-1.0)*x4364*x4367))+(((-1.0)*cj0*sj1*x4363)));
evalcond[5]=((((-1.0)*x4362*x4367))+((r11*x4370))+(((-1.0)*x4365*x4366))+(((-1.0)*sj0*sj1*x4363))+((r12*x4359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4371=((1.0)*gconst101);
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4371))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4371)))),-1);
if(!x4373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4372.value)+(((1.5707963267949)*(x4373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4374=IKsin(j4);
IkReal x4375=IKcos(j4);
IkReal x4376=(gconst101*r20);
IkReal x4377=(gconst101*r10);
IkReal x4378=((1.0)*cj2);
IkReal x4379=(gconst101*r00);
IkReal x4380=((1.0)*sj0);
IkReal x4381=(cj1*sj2);
IkReal x4382=((1.0)*x4375);
IkReal x4383=((1.0)*x4374);
IkReal x4384=(gconst100*x4374);
IkReal x4385=(gconst100*x4375);
evalcond[0]=((((-1.0)*r22*x4382))+((r21*x4384))+(((-1.0)*x4376*x4383)));
evalcond[1]=((((-1.0)*r12*x4382))+cj0+(((-1.0)*x4377*x4383))+((r11*x4384)));
evalcond[2]=((((-1.0)*r02*x4382))+(((-1.0)*x4379*x4383))+(((-1.0)*x4380))+((r01*x4384)));
evalcond[3]=(((r22*x4374))+((sj1*sj2))+((r21*x4385))+(((-1.0)*x4376*x4382))+(((-1.0)*cj1*x4378)));
evalcond[4]=((((-1.0)*cj0*sj1*x4378))+((r02*x4374))+(((-1.0)*x4379*x4382))+(((-1.0)*cj0*x4381))+((r01*x4385)));
evalcond[5]=((((-1.0)*x4380*x4381))+((r12*x4374))+(((-1.0)*sj0*sj1*x4378))+(((-1.0)*x4377*x4382))+((r11*x4385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4386=((1.0)*gconst101);
CheckValue<IkReal> x4387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4386)))),-1);
if(!x4387.valid){
continue;
}
CheckValue<IkReal> x4388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4387.value)))+(x4388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4389=IKsin(j4);
IkReal x4390=IKcos(j4);
IkReal x4391=(gconst101*r20);
IkReal x4392=(gconst101*r10);
IkReal x4393=((1.0)*cj2);
IkReal x4394=(gconst101*r00);
IkReal x4395=((1.0)*sj0);
IkReal x4396=(cj1*sj2);
IkReal x4397=((1.0)*x4390);
IkReal x4398=((1.0)*x4389);
IkReal x4399=(gconst100*x4389);
IkReal x4400=(gconst100*x4390);
evalcond[0]=((((-1.0)*r22*x4397))+((r21*x4399))+(((-1.0)*x4391*x4398)));
evalcond[1]=((((-1.0)*r12*x4397))+cj0+((r11*x4399))+(((-1.0)*x4392*x4398)));
evalcond[2]=((((-1.0)*x4395))+((r01*x4399))+(((-1.0)*r02*x4397))+(((-1.0)*x4394*x4398)));
evalcond[3]=(((r21*x4400))+((r22*x4389))+((sj1*sj2))+(((-1.0)*cj1*x4393))+(((-1.0)*x4391*x4397)));
evalcond[4]=((((-1.0)*cj0*sj1*x4393))+((r02*x4389))+((r01*x4400))+(((-1.0)*x4394*x4397))+(((-1.0)*cj0*x4396)));
evalcond[5]=((((-1.0)*sj0*sj1*x4393))+((r11*x4400))+(((-1.0)*x4395*x4396))+(((-1.0)*x4392*x4397))+((r12*x4389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4401=((-1.0)*r10);
IkReal x4403 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4403)==0){
continue;
}
IkReal x4402=pow(x4403,-0.5);
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4401),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4404.value));
IkReal gconst103=(r11*x4402);
IkReal gconst104=(x4401*x4402);
CheckValue<IkReal> x4405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4405.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4405.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4406=((-1.0)*r10);
IkReal x4407=x4402;
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4406),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
IkReal x4408=((-1.0)*(x4409.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4408;
IkReal gconst102=x4408;
IkReal gconst103=(r11*x4407);
IkReal gconst104=(x4406*x4407);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4410=((1.0)*sj0);
IkReal x4411=((1.0)*gconst103);
CheckValue<IkReal> x4412 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4410)))),IkReal(((((-1.0)*cj0*r01*x4411))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4410))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4412.valid){
continue;
}
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4411)))),-1);
if(!x4413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4412.value)+(((1.5707963267949)*(x4413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4414=IKsin(j4);
IkReal x4415=IKcos(j4);
IkReal x4416=(gconst103*r11);
IkReal x4417=((1.0)*cj2);
IkReal x4418=((1.0)*sj0);
IkReal x4419=(cj1*sj2);
IkReal x4420=((1.0)*x4415);
IkReal x4421=(gconst103*x4415);
IkReal x4422=(gconst103*x4414);
IkReal x4423=((1.0)*gconst104*x4414);
evalcond[0]=((((-1.0)*r22*x4420))+(((-1.0)*r20*x4423))+((r21*x4422)));
evalcond[1]=(((x4414*x4416))+cj0+(((-1.0)*r12*x4420))+(((-1.0)*r10*x4423)));
evalcond[2]=((((-1.0)*x4418))+((r01*x4422))+(((-1.0)*r02*x4420))+(((-1.0)*r00*x4423)));
evalcond[3]=(((r22*x4414))+(((-1.0)*gconst104*r20*x4420))+((sj1*sj2))+((r21*x4421))+(((-1.0)*cj1*x4417)));
evalcond[4]=((((-1.0)*cj0*sj1*x4417))+(((-1.0)*cj0*x4419))+((r01*x4421))+((r02*x4414))+(((-1.0)*gconst104*r00*x4420)));
evalcond[5]=((((-1.0)*x4418*x4419))+((r12*x4414))+(((-1.0)*gconst104*r10*x4420))+((x4415*x4416))+(((-1.0)*sj0*sj1*x4417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4424=((1.0)*gconst104);
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4424))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
CheckValue<IkReal> x4426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4424))+(((-1.0)*gconst103*r00)))),-1);
if(!x4426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4425.value)+(((1.5707963267949)*(x4426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4427=IKsin(j4);
IkReal x4428=IKcos(j4);
IkReal x4429=(gconst103*r11);
IkReal x4430=((1.0)*cj2);
IkReal x4431=((1.0)*sj0);
IkReal x4432=(cj1*sj2);
IkReal x4433=((1.0)*x4428);
IkReal x4434=(gconst103*x4428);
IkReal x4435=(gconst103*x4427);
IkReal x4436=((1.0)*gconst104*x4427);
evalcond[0]=((((-1.0)*r22*x4433))+(((-1.0)*r20*x4436))+((r21*x4435)));
evalcond[1]=(cj0+(((-1.0)*r10*x4436))+((x4427*x4429))+(((-1.0)*r12*x4433)));
evalcond[2]=((((-1.0)*r02*x4433))+(((-1.0)*x4431))+(((-1.0)*r00*x4436))+((r01*x4435)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4430))+((r22*x4427))+(((-1.0)*gconst104*r20*x4433))+((r21*x4434)));
evalcond[4]=(((r02*x4427))+(((-1.0)*cj0*x4432))+(((-1.0)*cj0*sj1*x4430))+(((-1.0)*gconst104*r00*x4433))+((r01*x4434)));
evalcond[5]=((((-1.0)*gconst104*r10*x4433))+(((-1.0)*x4431*x4432))+((x4428*x4429))+((r12*x4427))+(((-1.0)*sj0*sj1*x4430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4437=((-1.0)*r11);
IkReal x4439 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4439)==0){
continue;
}
IkReal x4438=pow(x4439,-0.5);
CheckValue<IkReal> x4440 = IKatan2WithCheck(IkReal(x4437),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4440.value))));
IkReal gconst106=(x4437*x4438);
IkReal gconst107=((1.0)*r10*x4438);
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4441.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4442=((-1.0)*r11);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(x4442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal x4443=((1.0)*(x4445.value));
IkReal x4444=x4438;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4443)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4443)));
IkReal gconst106=(x4442*x4444);
IkReal gconst107=((1.0)*r10*x4444);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4446=((-1.0)*r11);
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal(x4446),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
IkReal x4447=((1.0)*(x4449.value));
IkReal x4448=x4438;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4447)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4447)));
IkReal gconst106=(x4446*x4448);
IkReal gconst107=((1.0)*r10*x4448);
IkReal x4450=r12*r12;
IkReal x4451=((1.0)*sj0);
IkReal x4452=(cj0*r02);
IkReal x4453=x4438;
j4eval[0]=((IKabs((((sj0*x4450*x4453))+((r12*x4452*x4453))+(((-1.0)*x4451*x4453)))))+(IKabs(((((-1.0)*r12*x4451))+(((-1.0)*x4452))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4454=((-1.0)*r11);
CheckValue<IkReal> x4457 = IKatan2WithCheck(IkReal(x4454),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4457.valid){
continue;
}
IkReal x4455=((1.0)*(x4457.value));
IkReal x4456=x4438;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4455)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4455)));
IkReal gconst106=(x4454*x4456);
IkReal gconst107=((1.0)*r10*x4456);
IkReal x4458=r12*r12;
IkReal x4459=((1.0)+(((-1.0)*x4458)));
IkReal x4460=(r22*sj1*sj2);
IkReal x4461=(cj1*cj2*r22);
CheckValue<IkReal> x4468=IKPowWithIntegerCheck(x4459,-1);
if(!x4468.valid){
continue;
}
IkReal x4462=x4468.value;
CheckValue<IkReal> x4469=IKPowWithIntegerCheck(((-1.0)+x4458),-1);
if(!x4469.valid){
continue;
}
IkReal x4463=x4469.value;
IkReal x4464=((1.0)*x4462);
if((x4459) < -0.00001)
continue;
IkReal x4465=IKsqrt(x4459);
IkReal x4466=(r12*x4463*x4465);
IkReal x4467=((((-1.0)*x4464*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4462))+(((-1.0)*(r22*r22)))+(((-1.0)*x4464*(r10*r10)*(r20*r20))));
j4eval[0]=x4467;
j4eval[1]=((IKabs((x4460+(((-1.0)*x4461)))))+(IKabs((((x4461*x4466))+(((-1.0)*x4460*x4466))))));
j4eval[2]=IKsign(x4467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4470=(sj1*sj2);
IkReal x4471=(gconst106*r21);
IkReal x4472=(gconst107*r20);
IkReal x4473=(cj1*cj2);
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4473))+((r22*x4470)))),IkReal((((x4470*x4471))+((x4472*x4473))+(((-1.0)*x4471*x4473))+(((-1.0)*x4470*x4472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
CheckValue<IkReal> x4475=IKPowWithIntegerCheck(IKsign(((((2.0)*x4471*x4472))+(((-1.0)*(x4472*x4472)))+(((-1.0)*(x4471*x4471)))+(((-1.0)*(r22*r22))))),-1);
if(!x4475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4474.value)+(((1.5707963267949)*(x4475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4476=IKsin(j4);
IkReal x4477=IKcos(j4);
IkReal x4478=(gconst107*r10);
IkReal x4479=(gconst107*r00);
IkReal x4480=((1.0)*cj2);
IkReal x4481=(gconst107*r20);
IkReal x4482=((1.0)*sj0);
IkReal x4483=(cj1*sj2);
IkReal x4484=((1.0)*x4477);
IkReal x4485=(gconst106*x4477);
IkReal x4486=(gconst106*x4476);
IkReal x4487=((1.0)*x4476);
evalcond[0]=((((-1.0)*x4481*x4487))+((r21*x4486))+(((-1.0)*r22*x4484)));
evalcond[1]=(((r11*x4486))+(((-1.0)*r12*x4484))+cj0+(((-1.0)*x4478*x4487)));
evalcond[2]=((((-1.0)*x4479*x4487))+((r01*x4486))+(((-1.0)*r02*x4484))+(((-1.0)*x4482)));
evalcond[3]=((((-1.0)*x4481*x4484))+(((-1.0)*cj1*x4480))+((r21*x4485))+((sj1*sj2))+((r22*x4476)));
evalcond[4]=((((-1.0)*cj0*x4483))+(((-1.0)*cj0*sj1*x4480))+(((-1.0)*x4479*x4484))+((r02*x4476))+((r01*x4485)));
evalcond[5]=(((r11*x4485))+(((-1.0)*x4478*x4484))+(((-1.0)*sj0*sj1*x4480))+((r12*x4476))+(((-1.0)*x4482*x4483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4488=((1.0)*sj0);
IkReal x4489=((1.0)*gconst106);
CheckValue<IkReal> x4490=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4489)))),-1);
if(!x4490.valid){
continue;
}
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4488))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4489))+(((-1.0)*gconst106*r11*x4488))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4490.value)))+(x4491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4492=IKsin(j4);
IkReal x4493=IKcos(j4);
IkReal x4494=(gconst107*r10);
IkReal x4495=(gconst107*r00);
IkReal x4496=((1.0)*cj2);
IkReal x4497=(gconst107*r20);
IkReal x4498=((1.0)*sj0);
IkReal x4499=(cj1*sj2);
IkReal x4500=((1.0)*x4493);
IkReal x4501=(gconst106*x4493);
IkReal x4502=(gconst106*x4492);
IkReal x4503=((1.0)*x4492);
evalcond[0]=((((-1.0)*x4497*x4503))+((r21*x4502))+(((-1.0)*r22*x4500)));
evalcond[1]=((((-1.0)*x4494*x4503))+cj0+((r11*x4502))+(((-1.0)*r12*x4500)));
evalcond[2]=((((-1.0)*r02*x4500))+(((-1.0)*x4495*x4503))+((r01*x4502))+(((-1.0)*x4498)));
evalcond[3]=((((-1.0)*cj1*x4496))+(((-1.0)*x4497*x4500))+((r21*x4501))+((sj1*sj2))+((r22*x4492)));
evalcond[4]=((((-1.0)*cj0*x4499))+((r02*x4492))+(((-1.0)*x4495*x4500))+((r01*x4501))+(((-1.0)*cj0*sj1*x4496)));
evalcond[5]=(((r12*x4492))+(((-1.0)*x4494*x4500))+(((-1.0)*x4498*x4499))+((r11*x4501))+(((-1.0)*sj0*sj1*x4496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4504=((1.0)*gconst107);
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4504))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
CheckValue<IkReal> x4506=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4504)))),-1);
if(!x4506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4505.value)+(((1.5707963267949)*(x4506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4507=IKsin(j4);
IkReal x4508=IKcos(j4);
IkReal x4509=(gconst107*r10);
IkReal x4510=(gconst107*r00);
IkReal x4511=((1.0)*cj2);
IkReal x4512=(gconst107*r20);
IkReal x4513=((1.0)*sj0);
IkReal x4514=(cj1*sj2);
IkReal x4515=((1.0)*x4508);
IkReal x4516=(gconst106*x4508);
IkReal x4517=(gconst106*x4507);
IkReal x4518=((1.0)*x4507);
evalcond[0]=((((-1.0)*x4512*x4518))+((r21*x4517))+(((-1.0)*r22*x4515)));
evalcond[1]=(cj0+(((-1.0)*r12*x4515))+((r11*x4517))+(((-1.0)*x4509*x4518)));
evalcond[2]=((((-1.0)*r02*x4515))+((r01*x4517))+(((-1.0)*x4513))+(((-1.0)*x4510*x4518)));
evalcond[3]=((((-1.0)*cj1*x4511))+(((-1.0)*x4512*x4515))+((r22*x4507))+((sj1*sj2))+((r21*x4516)));
evalcond[4]=((((-1.0)*cj0*x4514))+(((-1.0)*cj0*sj1*x4511))+((r02*x4507))+((r01*x4516))+(((-1.0)*x4510*x4515)));
evalcond[5]=((((-1.0)*x4513*x4514))+((r12*x4507))+(((-1.0)*sj0*sj1*x4511))+((r11*x4516))+(((-1.0)*x4509*x4515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4519=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4519;
j4eval[1]=IKsign(x4519);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4520=((1.0)*cj5);
IkReal x4521=((((-1.0)*r01*x4520))+(((-1.0)*r00*sj5)));
j4eval[0]=x4521;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4520)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4522=(sj1*sj2);
IkReal x4523=(cj5*r10);
IkReal x4524=(r11*sj5);
IkReal x4525=(cj1*cj2);
IkReal x4526=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4526;
j4eval[1]=((IKabs((((x4523*x4525))+(((-1.0)*x4522*x4523))+(((-1.0)*x4524*x4525))+((x4522*x4524)))))+(IKabs((((r12*x4525))+(((-1.0)*r12*x4522))))));
j4eval[2]=IKsign(x4526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4527=(sj1*sj2);
IkReal x4528=(cj5*r10);
IkReal x4529=(r11*sj5);
IkReal x4530=(cj1*cj2);
CheckValue<IkReal> x4531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4531.valid){
continue;
}
CheckValue<IkReal> x4532 = IKatan2WithCheck(IkReal((((x4528*x4530))+((x4527*x4529))+(((-1.0)*x4527*x4528))+(((-1.0)*x4529*x4530)))),IkReal(((((-1.0)*r12*x4527))+((r12*x4530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4531.value)))+(x4532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4533=IKcos(j4);
IkReal x4534=IKsin(j4);
IkReal x4535=(cj5*r00);
IkReal x4536=(cj5*r10);
IkReal x4537=(r21*sj5);
IkReal x4538=((1.0)*cj2);
IkReal x4539=(cj5*r20);
IkReal x4540=((1.0)*x4533);
IkReal x4541=((1.0)*x4534);
IkReal x4542=(sj5*x4534);
IkReal x4543=(sj5*x4533);
evalcond[0]=(((r12*x4534))+(((-1.0)*x4536*x4540))+((r11*x4543)));
evalcond[1]=((((-1.0)*r22*x4540))+(((-1.0)*x4539*x4541))+((x4534*x4537)));
evalcond[2]=((((-1.0)*r02*x4540))+(((-1.0)*x4535*x4541))+((r01*x4542)));
evalcond[3]=((1.0)+(((-1.0)*x4536*x4541))+(((-1.0)*r12*x4540))+((r11*x4542)));
evalcond[4]=((((-1.0)*cj1*x4538))+((sj1*sj2))+((r22*x4534))+((x4533*x4537))+(((-1.0)*x4539*x4540)));
evalcond[5]=((((-1.0)*sj1*x4538))+(((-1.0)*x4535*x4540))+(((-1.0)*cj1*sj2))+((r01*x4543))+((r02*x4534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4544=((1.0)*cj5);
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
CheckValue<IkReal> x4546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4544)))),-1);
if(!x4546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4545.value)+(((1.5707963267949)*(x4546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4547=IKcos(j4);
IkReal x4548=IKsin(j4);
IkReal x4549=(cj5*r00);
IkReal x4550=(cj5*r10);
IkReal x4551=(r21*sj5);
IkReal x4552=((1.0)*cj2);
IkReal x4553=(cj5*r20);
IkReal x4554=((1.0)*x4547);
IkReal x4555=((1.0)*x4548);
IkReal x4556=(sj5*x4548);
IkReal x4557=(sj5*x4547);
evalcond[0]=((((-1.0)*x4550*x4554))+((r11*x4557))+((r12*x4548)));
evalcond[1]=((((-1.0)*x4553*x4555))+(((-1.0)*r22*x4554))+((x4548*x4551)));
evalcond[2]=(((r01*x4556))+(((-1.0)*x4549*x4555))+(((-1.0)*r02*x4554)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4554))+(((-1.0)*x4550*x4555))+((r11*x4556)));
evalcond[4]=(((r22*x4548))+(((-1.0)*cj1*x4552))+(((-1.0)*x4553*x4554))+((x4547*x4551))+((sj1*sj2)));
evalcond[5]=(((r01*x4557))+((r02*x4548))+(((-1.0)*cj1*sj2))+(((-1.0)*x4549*x4554))+(((-1.0)*sj1*x4552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4558=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4558.valid){
continue;
}
CheckValue<IkReal> x4559 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4558.value)))+(x4559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4560=IKcos(j4);
IkReal x4561=IKsin(j4);
IkReal x4562=(cj5*r00);
IkReal x4563=(cj5*r10);
IkReal x4564=(r21*sj5);
IkReal x4565=((1.0)*cj2);
IkReal x4566=(cj5*r20);
IkReal x4567=((1.0)*x4560);
IkReal x4568=((1.0)*x4561);
IkReal x4569=(sj5*x4561);
IkReal x4570=(sj5*x4560);
evalcond[0]=(((r12*x4561))+((r11*x4570))+(((-1.0)*x4563*x4567)));
evalcond[1]=((((-1.0)*x4566*x4568))+(((-1.0)*r22*x4567))+((x4561*x4564)));
evalcond[2]=((((-1.0)*r02*x4567))+((r01*x4569))+(((-1.0)*x4562*x4568)));
evalcond[3]=((1.0)+((r11*x4569))+(((-1.0)*r12*x4567))+(((-1.0)*x4563*x4568)));
evalcond[4]=((((-1.0)*x4566*x4567))+((r22*x4561))+(((-1.0)*cj1*x4565))+((sj1*sj2))+((x4560*x4564)));
evalcond[5]=((((-1.0)*sj1*x4565))+((r02*x4561))+(((-1.0)*cj1*sj2))+((r01*x4570))+(((-1.0)*x4562*x4567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4571=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4571;
j4eval[1]=IKsign(x4571);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4572=((1.0)*cj5);
IkReal x4573=((((-1.0)*r21*x4572))+(((-1.0)*r20*sj5)));
j4eval[0]=x4573;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4572))+((r01*sj5))))));
j4eval[2]=IKsign(x4573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4574=cj5*cj5;
IkReal x4575=r11*r11;
IkReal x4576=(r11*sj5);
IkReal x4577=(cj5*r10);
IkReal x4578=((r12*r12)+(((-2.0)*x4576*x4577))+(((-1.0)*x4574*x4575))+x4575+((x4574*(r10*r10))));
j4eval[0]=x4578;
j4eval[1]=IKsign(x4578);
j4eval[2]=((IKabs(r12))+(IKabs((x4576+(((-1.0)*x4577))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4579=cj5*cj5;
IkReal x4580=r11*r11;
IkReal x4581=(cj5*r10);
IkReal x4582=(r11*sj5);
CheckValue<IkReal> x4583=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4580+(((-1.0)*x4579*x4580))+((x4579*(r10*r10)))+(((-2.0)*x4581*x4582)))),-1);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal((x4582+(((-1.0)*x4581)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4583.value)))+(x4584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4585=IKcos(j4);
IkReal x4586=IKsin(j4);
IkReal x4587=(cj5*r00);
IkReal x4588=(cj5*r10);
IkReal x4589=(r21*sj5);
IkReal x4590=(cj5*r20);
IkReal x4591=((1.0)*x4585);
IkReal x4592=((1.0)*x4586);
IkReal x4593=(sj5*x4586);
IkReal x4594=(sj5*x4585);
evalcond[0]=(((r11*x4594))+(((-1.0)*x4588*x4591))+((r12*x4586)));
evalcond[1]=((((-1.0)*r22*x4591))+(((-1.0)*x4590*x4592))+((x4586*x4589)));
evalcond[2]=((((-1.0)*x4587*x4592))+(((-1.0)*r02*x4591))+((r01*x4593)));
evalcond[3]=((-1.0)+((r11*x4593))+(((-1.0)*x4588*x4592))+(((-1.0)*r12*x4591)));
evalcond[4]=(((cj2*sj1))+((r02*x4586))+((cj1*sj2))+(((-1.0)*x4587*x4591))+((r01*x4594)));
evalcond[5]=(((r22*x4586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4585*x4589))+(((-1.0)*x4590*x4591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4595=((1.0)*cj5);
CheckValue<IkReal> x4596 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4596.valid){
continue;
}
CheckValue<IkReal> x4597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4595))+(((-1.0)*r20*sj5)))),-1);
if(!x4597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4596.value)+(((1.5707963267949)*(x4597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4598=IKcos(j4);
IkReal x4599=IKsin(j4);
IkReal x4600=(cj5*r00);
IkReal x4601=(cj5*r10);
IkReal x4602=(r21*sj5);
IkReal x4603=(cj5*r20);
IkReal x4604=((1.0)*x4598);
IkReal x4605=((1.0)*x4599);
IkReal x4606=(sj5*x4599);
IkReal x4607=(sj5*x4598);
evalcond[0]=(((r11*x4607))+(((-1.0)*x4601*x4604))+((r12*x4599)));
evalcond[1]=((((-1.0)*x4603*x4605))+((x4599*x4602))+(((-1.0)*r22*x4604)));
evalcond[2]=((((-1.0)*x4600*x4605))+((r01*x4606))+(((-1.0)*r02*x4604)));
evalcond[3]=((-1.0)+((r11*x4606))+(((-1.0)*x4601*x4605))+(((-1.0)*r12*x4604)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4600*x4604))+((cj1*sj2))+((r01*x4607))+((r02*x4599)));
evalcond[5]=(((r22*x4599))+(((-1.0)*x4603*x4604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4598*x4602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4608 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
CheckValue<IkReal> x4609=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4608.value)+(((1.5707963267949)*(x4609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4610=IKcos(j4);
IkReal x4611=IKsin(j4);
IkReal x4612=(cj5*r00);
IkReal x4613=(cj5*r10);
IkReal x4614=(r21*sj5);
IkReal x4615=(cj5*r20);
IkReal x4616=((1.0)*x4610);
IkReal x4617=((1.0)*x4611);
IkReal x4618=(sj5*x4611);
IkReal x4619=(sj5*x4610);
evalcond[0]=(((r12*x4611))+((r11*x4619))+(((-1.0)*x4613*x4616)));
evalcond[1]=(((x4611*x4614))+(((-1.0)*x4615*x4617))+(((-1.0)*r22*x4616)));
evalcond[2]=((((-1.0)*r02*x4616))+(((-1.0)*x4612*x4617))+((r01*x4618)));
evalcond[3]=((-1.0)+((r11*x4618))+(((-1.0)*r12*x4616))+(((-1.0)*x4613*x4617)));
evalcond[4]=((((-1.0)*x4612*x4616))+((cj2*sj1))+((r02*x4611))+((cj1*sj2))+((r01*x4619)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4611))+(((-1.0)*x4615*x4616))+((x4610*x4614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4620=((-1.0)*r00);
IkReal x4622 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4622)==0){
continue;
}
IkReal x4621=pow(x4622,-0.5);
CheckValue<IkReal> x4623 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4620),IKFAST_ATAN2_MAGTHRESH);
if(!x4623.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4623.value));
IkReal gconst109=(r01*x4621);
IkReal gconst110=(x4620*x4621);
CheckValue<IkReal> x4624 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4624.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4625=((-1.0)*r00);
IkReal x4626=x4621;
CheckValue<IkReal> x4628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4625),IKFAST_ATAN2_MAGTHRESH);
if(!x4628.valid){
continue;
}
IkReal x4627=((-1.0)*(x4628.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4627;
IkReal gconst108=x4627;
IkReal gconst109=(r01*x4626);
IkReal gconst110=(x4625*x4626);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4629=((1.0)*sj0);
IkReal x4630=((1.0)*gconst109);
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4629)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4630))+(((-1.0)*gconst109*r11*x4629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4630))+(((-1.0)*gconst110*r21)))),-1);
if(!x4632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4631.value)+(((1.5707963267949)*(x4632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4633=IKsin(j4);
IkReal x4634=IKcos(j4);
IkReal x4635=(gconst109*r21);
IkReal x4636=((1.0)*cj2);
IkReal x4637=((1.0)*sj0);
IkReal x4638=(cj1*sj2);
IkReal x4639=((1.0)*x4634);
IkReal x4640=(gconst109*x4633);
IkReal x4641=(gconst109*x4634);
IkReal x4642=((1.0)*gconst110*x4633);
evalcond[0]=(((x4633*x4635))+(((-1.0)*r20*x4642))+(((-1.0)*r22*x4639)));
evalcond[1]=(cj0+(((-1.0)*r10*x4642))+((r11*x4640))+(((-1.0)*r12*x4639)));
evalcond[2]=((((-1.0)*x4637))+(((-1.0)*r02*x4639))+((r01*x4640))+(((-1.0)*r00*x4642)));
evalcond[3]=((((-1.0)*gconst110*r20*x4639))+(((-1.0)*cj1*x4636))+((sj1*sj2))+((x4634*x4635))+((r22*x4633)));
evalcond[4]=((((-1.0)*gconst110*r00*x4639))+(((-1.0)*cj0*sj1*x4636))+(((-1.0)*cj0*x4638))+((r01*x4641))+((r02*x4633)));
evalcond[5]=(((r12*x4633))+(((-1.0)*gconst110*r10*x4639))+((r11*x4641))+(((-1.0)*sj0*sj1*x4636))+(((-1.0)*x4637*x4638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4643=((1.0)*gconst110);
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
CheckValue<IkReal> x4645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4643))+(((-1.0)*gconst109*r10)))),-1);
if(!x4645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4644.value)+(((1.5707963267949)*(x4645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4646=IKsin(j4);
IkReal x4647=IKcos(j4);
IkReal x4648=(gconst109*r21);
IkReal x4649=((1.0)*cj2);
IkReal x4650=((1.0)*sj0);
IkReal x4651=(cj1*sj2);
IkReal x4652=((1.0)*x4647);
IkReal x4653=(gconst109*x4646);
IkReal x4654=(gconst109*x4647);
IkReal x4655=((1.0)*gconst110*x4646);
evalcond[0]=(((x4646*x4648))+(((-1.0)*r22*x4652))+(((-1.0)*r20*x4655)));
evalcond[1]=(((r11*x4653))+cj0+(((-1.0)*r12*x4652))+(((-1.0)*r10*x4655)));
evalcond[2]=((((-1.0)*x4650))+(((-1.0)*r00*x4655))+(((-1.0)*r02*x4652))+((r01*x4653)));
evalcond[3]=((((-1.0)*cj1*x4649))+((sj1*sj2))+((r22*x4646))+((x4647*x4648))+(((-1.0)*gconst110*r20*x4652)));
evalcond[4]=(((r02*x4646))+(((-1.0)*gconst110*r00*x4652))+(((-1.0)*cj0*x4651))+(((-1.0)*cj0*sj1*x4649))+((r01*x4654)));
evalcond[5]=(((r11*x4654))+(((-1.0)*sj0*sj1*x4649))+((r12*x4646))+(((-1.0)*x4650*x4651))+(((-1.0)*gconst110*r10*x4652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4656=((-1.0)*r01);
IkReal x4658 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4658)==0){
continue;
}
IkReal x4657=pow(x4658,-0.5);
CheckValue<IkReal> x4659 = IKatan2WithCheck(IkReal(x4656),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4659.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4659.value))));
IkReal gconst112=(x4656*x4657);
IkReal gconst113=((1.0)*r00*x4657);
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4660.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4661=((-1.0)*r01);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal(x4661),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
IkReal x4662=((1.0)*(x4664.value));
IkReal x4663=x4657;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4662)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4662)));
IkReal gconst112=(x4661*x4663);
IkReal gconst113=((1.0)*r00*x4663);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4665=((-1.0)*r01);
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal(x4665),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
IkReal x4666=((1.0)*(x4668.value));
IkReal x4667=x4657;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4666)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4666)));
IkReal gconst112=(x4665*x4667);
IkReal gconst113=((1.0)*r00*x4667);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4669=((-1.0)*r01);
CheckValue<IkReal> x4672 = IKatan2WithCheck(IkReal(x4669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4672.valid){
continue;
}
IkReal x4670=((1.0)*(x4672.value));
IkReal x4671=x4657;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4670)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4670)));
IkReal gconst112=(x4669*x4671);
IkReal gconst113=((1.0)*r00*x4671);
IkReal x4673=r02*r02;
IkReal x4674=(r12*sj0);
IkReal x4675=((1.0)*cj0);
IkReal x4676=x4657;
j4eval[0]=((IKabs(((((-1.0)*r02*x4675))+(((-1.0)*x4674)))))+(IKabs((((cj0*x4673*x4676))+(((-1.0)*x4675*x4676))+((r02*x4674*x4676))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4677=((1.0)*sj0);
IkReal x4678=((1.0)*gconst112);
CheckValue<IkReal> x4679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4678))+(((-1.0)*gconst113*r21)))),-1);
if(!x4679.valid){
continue;
}
CheckValue<IkReal> x4680 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4677))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4678))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4679.value)))+(x4680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4681=IKsin(j4);
IkReal x4682=IKcos(j4);
IkReal x4683=(gconst113*r20);
IkReal x4684=(gconst112*r21);
IkReal x4685=((1.0)*cj2);
IkReal x4686=(gconst113*r00);
IkReal x4687=(gconst113*r10);
IkReal x4688=((1.0)*sj0);
IkReal x4689=(cj1*sj2);
IkReal x4690=((1.0)*x4682);
IkReal x4691=((1.0)*x4681);
IkReal x4692=(gconst112*x4682);
IkReal x4693=(gconst112*x4681);
evalcond[0]=(((x4681*x4684))+(((-1.0)*x4683*x4691))+(((-1.0)*r22*x4690)));
evalcond[1]=((((-1.0)*r12*x4690))+(((-1.0)*x4687*x4691))+cj0+((r11*x4693)));
evalcond[2]=((((-1.0)*x4686*x4691))+(((-1.0)*r02*x4690))+((r01*x4693))+(((-1.0)*x4688)));
evalcond[3]=(((x4682*x4684))+(((-1.0)*cj1*x4685))+((sj1*sj2))+((r22*x4681))+(((-1.0)*x4683*x4690)));
evalcond[4]=((((-1.0)*x4686*x4690))+((r02*x4681))+(((-1.0)*cj0*sj1*x4685))+(((-1.0)*cj0*x4689))+((r01*x4692)));
evalcond[5]=((((-1.0)*x4687*x4690))+(((-1.0)*sj0*sj1*x4685))+(((-1.0)*x4688*x4689))+((r12*x4681))+((r11*x4692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4694=((1.0)*gconst113);
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4694)))),-1);
if(!x4695.valid){
continue;
}
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4695.value)))+(x4696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4697=IKsin(j4);
IkReal x4698=IKcos(j4);
IkReal x4699=(gconst113*r20);
IkReal x4700=(gconst112*r21);
IkReal x4701=((1.0)*cj2);
IkReal x4702=(gconst113*r00);
IkReal x4703=(gconst113*r10);
IkReal x4704=((1.0)*sj0);
IkReal x4705=(cj1*sj2);
IkReal x4706=((1.0)*x4698);
IkReal x4707=((1.0)*x4697);
IkReal x4708=(gconst112*x4698);
IkReal x4709=(gconst112*x4697);
evalcond[0]=((((-1.0)*r22*x4706))+((x4697*x4700))+(((-1.0)*x4699*x4707)));
evalcond[1]=(cj0+(((-1.0)*x4703*x4707))+(((-1.0)*r12*x4706))+((r11*x4709)));
evalcond[2]=((((-1.0)*x4702*x4707))+(((-1.0)*r02*x4706))+((r01*x4709))+(((-1.0)*x4704)));
evalcond[3]=(((x4698*x4700))+((sj1*sj2))+((r22*x4697))+(((-1.0)*cj1*x4701))+(((-1.0)*x4699*x4706)));
evalcond[4]=(((r02*x4697))+(((-1.0)*x4702*x4706))+(((-1.0)*cj0*sj1*x4701))+(((-1.0)*cj0*x4705))+((r01*x4708)));
evalcond[5]=((((-1.0)*sj0*sj1*x4701))+(((-1.0)*x4703*x4706))+(((-1.0)*x4704*x4705))+((r12*x4697))+((r11*x4708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4710=((1.0)*gconst113);
CheckValue<IkReal> x4711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4711.valid){
continue;
}
CheckValue<IkReal> x4712=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4710)))),-1);
if(!x4712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4711.value)+(((1.5707963267949)*(x4712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4713=IKsin(j4);
IkReal x4714=IKcos(j4);
IkReal x4715=(gconst113*r20);
IkReal x4716=(gconst112*r21);
IkReal x4717=((1.0)*cj2);
IkReal x4718=(gconst113*r00);
IkReal x4719=(gconst113*r10);
IkReal x4720=((1.0)*sj0);
IkReal x4721=(cj1*sj2);
IkReal x4722=((1.0)*x4714);
IkReal x4723=((1.0)*x4713);
IkReal x4724=(gconst112*x4714);
IkReal x4725=(gconst112*x4713);
evalcond[0]=((((-1.0)*x4715*x4723))+((x4713*x4716))+(((-1.0)*r22*x4722)));
evalcond[1]=(((r11*x4725))+cj0+(((-1.0)*r12*x4722))+(((-1.0)*x4719*x4723)));
evalcond[2]=((((-1.0)*x4720))+(((-1.0)*x4718*x4723))+((r01*x4725))+(((-1.0)*r02*x4722)));
evalcond[3]=(((r22*x4713))+((x4714*x4716))+(((-1.0)*x4715*x4722))+((sj1*sj2))+(((-1.0)*cj1*x4717)));
evalcond[4]=((((-1.0)*cj0*sj1*x4717))+(((-1.0)*x4718*x4722))+(((-1.0)*cj0*x4721))+((r01*x4724))+((r02*x4713)));
evalcond[5]=(((r11*x4724))+(((-1.0)*sj0*sj1*x4717))+(((-1.0)*x4719*x4722))+((r12*x4713))+(((-1.0)*x4720*x4721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4726=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4726;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4727=((1.0)*cj5);
IkReal x4728=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4727)));
j4eval[0]=x4728;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4727))))));
j4eval[2]=IKsign(x4728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4729=cj5*cj5;
IkReal x4730=r01*r01;
IkReal x4731=(cj5*r00);
IkReal x4732=(r01*sj5);
IkReal x4733=((((-1.0)*x4729*x4730))+x4730+((x4729*(r00*r00)))+(((-2.0)*x4731*x4732))+(r02*r02));
j4eval[0]=x4733;
j4eval[1]=IKsign(x4733);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4731))+x4732))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4734=cj5*cj5;
IkReal x4735=r01*r01;
IkReal x4736=(r01*sj5);
IkReal x4737=(cj5*r00);
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4734*x4735))+x4735+(((-2.0)*x4736*x4737))+((x4734*(r00*r00)))+(r02*r02))),-1);
if(!x4738.valid){
continue;
}
CheckValue<IkReal> x4739 = IKatan2WithCheck(IkReal(((((-1.0)*x4737))+x4736)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4738.value)))+(x4739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4740=IKcos(j4);
IkReal x4741=IKsin(j4);
IkReal x4742=(cj5*r00);
IkReal x4743=(cj5*r10);
IkReal x4744=(r21*sj5);
IkReal x4745=((1.0)*cj2);
IkReal x4746=(cj5*r20);
IkReal x4747=((1.0)*x4740);
IkReal x4748=((1.0)*x4741);
IkReal x4749=(sj5*x4741);
IkReal x4750=(sj5*x4740);
evalcond[0]=(((r01*x4750))+((r02*x4741))+(((-1.0)*x4742*x4747)));
evalcond[1]=(((x4741*x4744))+(((-1.0)*x4746*x4748))+(((-1.0)*r22*x4747)));
evalcond[2]=(((r11*x4749))+(((-1.0)*r12*x4747))+(((-1.0)*x4743*x4748)));
evalcond[3]=((-1.0)+((r01*x4749))+(((-1.0)*x4742*x4748))+(((-1.0)*r02*x4747)));
evalcond[4]=(((x4740*x4744))+(((-1.0)*cj1*x4745))+(((-1.0)*x4746*x4747))+((sj1*sj2))+((r22*x4741)));
evalcond[5]=((((-1.0)*sj1*x4745))+((r11*x4750))+((r12*x4741))+(((-1.0)*cj1*sj2))+(((-1.0)*x4743*x4747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4751=((1.0)*cj5);
CheckValue<IkReal> x4752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4751)))),-1);
if(!x4752.valid){
continue;
}
CheckValue<IkReal> x4753 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4751))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4752.value)))+(x4753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4754=IKcos(j4);
IkReal x4755=IKsin(j4);
IkReal x4756=(cj5*r00);
IkReal x4757=(cj5*r10);
IkReal x4758=(r21*sj5);
IkReal x4759=((1.0)*cj2);
IkReal x4760=(cj5*r20);
IkReal x4761=((1.0)*x4754);
IkReal x4762=((1.0)*x4755);
IkReal x4763=(sj5*x4755);
IkReal x4764=(sj5*x4754);
evalcond[0]=(((r01*x4764))+(((-1.0)*x4756*x4761))+((r02*x4755)));
evalcond[1]=((((-1.0)*x4760*x4762))+(((-1.0)*r22*x4761))+((x4755*x4758)));
evalcond[2]=((((-1.0)*x4757*x4762))+(((-1.0)*r12*x4761))+((r11*x4763)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4761))+((r01*x4763))+(((-1.0)*x4756*x4762)));
evalcond[4]=((((-1.0)*x4760*x4761))+(((-1.0)*cj1*x4759))+((x4754*x4758))+((sj1*sj2))+((r22*x4755)));
evalcond[5]=(((r12*x4755))+(((-1.0)*sj1*x4759))+(((-1.0)*cj1*sj2))+(((-1.0)*x4757*x4761))+((r11*x4764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4765=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4765.valid){
continue;
}
CheckValue<IkReal> x4766 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4765.value)))+(x4766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4767=IKcos(j4);
IkReal x4768=IKsin(j4);
IkReal x4769=(cj5*r00);
IkReal x4770=(cj5*r10);
IkReal x4771=(r21*sj5);
IkReal x4772=((1.0)*cj2);
IkReal x4773=(cj5*r20);
IkReal x4774=((1.0)*x4767);
IkReal x4775=((1.0)*x4768);
IkReal x4776=(sj5*x4768);
IkReal x4777=(sj5*x4767);
evalcond[0]=(((r02*x4768))+(((-1.0)*x4769*x4774))+((r01*x4777)));
evalcond[1]=((((-1.0)*x4773*x4775))+((x4768*x4771))+(((-1.0)*r22*x4774)));
evalcond[2]=(((r11*x4776))+(((-1.0)*r12*x4774))+(((-1.0)*x4770*x4775)));
evalcond[3]=((-1.0)+(((-1.0)*x4769*x4775))+((r01*x4776))+(((-1.0)*r02*x4774)));
evalcond[4]=(((r22*x4768))+(((-1.0)*x4773*x4774))+(((-1.0)*cj1*x4772))+((sj1*sj2))+((x4767*x4771)));
evalcond[5]=(((r11*x4777))+(((-1.0)*sj1*x4772))+(((-1.0)*cj1*sj2))+(((-1.0)*x4770*x4774))+((r12*x4768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4778=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4778;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4779=((1.0)*cj5);
IkReal x4780=((((-1.0)*r21*x4779))+(((-1.0)*r20*sj5)));
j4eval[0]=x4780;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4779))))));
j4eval[2]=IKsign(x4780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4781=cj5*cj5;
IkReal x4782=r01*r01;
IkReal x4783=(r01*sj5);
IkReal x4784=(cj5*r00);
IkReal x4785=((((-1.0)*(r02*r02)))+(((-1.0)*x4781*(r00*r00)))+(((-1.0)*x4782))+(((2.0)*x4783*x4784))+((x4781*x4782)));
j4eval[0]=x4785;
j4eval[1]=IKsign(x4785);
j4eval[2]=((IKabs(r02))+(IKabs((x4783+(((-1.0)*x4784))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4786=cj5*cj5;
IkReal x4787=r01*r01;
IkReal x4788=(r01*sj5);
IkReal x4789=(cj5*r00);
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal((x4788+(((-1.0)*x4789)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4786*(r00*r00)))+((x4786*x4787))+(((-1.0)*(r02*r02)))+(((-1.0)*x4787))+(((2.0)*x4788*x4789)))),-1);
if(!x4791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4790.value)+(((1.5707963267949)*(x4791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4792=IKcos(j4);
IkReal x4793=IKsin(j4);
IkReal x4794=(cj5*r00);
IkReal x4795=(cj5*r10);
IkReal x4796=(r21*sj5);
IkReal x4797=(cj5*r20);
IkReal x4798=((1.0)*x4792);
IkReal x4799=((1.0)*x4793);
IkReal x4800=(sj5*x4793);
IkReal x4801=(sj5*x4792);
evalcond[0]=(((r01*x4801))+(((-1.0)*x4794*x4798))+((r02*x4793)));
evalcond[1]=(((x4793*x4796))+(((-1.0)*r22*x4798))+(((-1.0)*x4797*x4799)));
evalcond[2]=((((-1.0)*r12*x4798))+(((-1.0)*x4795*x4799))+((r11*x4800)));
evalcond[3]=((1.0)+((r01*x4800))+(((-1.0)*r02*x4798))+(((-1.0)*x4794*x4799)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4795*x4798))+((r12*x4793))+((r11*x4801)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4792*x4796))+(((-1.0)*x4797*x4798))+((r22*x4793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4802=((1.0)*cj5);
CheckValue<IkReal> x4803 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4803.valid){
continue;
}
CheckValue<IkReal> x4804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4802))+(((-1.0)*r20*sj5)))),-1);
if(!x4804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4803.value)+(((1.5707963267949)*(x4804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4805=IKcos(j4);
IkReal x4806=IKsin(j4);
IkReal x4807=(cj5*r00);
IkReal x4808=(cj5*r10);
IkReal x4809=(r21*sj5);
IkReal x4810=(cj5*r20);
IkReal x4811=((1.0)*x4805);
IkReal x4812=((1.0)*x4806);
IkReal x4813=(sj5*x4806);
IkReal x4814=(sj5*x4805);
evalcond[0]=(((r02*x4806))+(((-1.0)*x4807*x4811))+((r01*x4814)));
evalcond[1]=((((-1.0)*r22*x4811))+((x4806*x4809))+(((-1.0)*x4810*x4812)));
evalcond[2]=((((-1.0)*x4808*x4812))+((r11*x4813))+(((-1.0)*r12*x4811)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4811))+(((-1.0)*x4807*x4812))+((r01*x4813)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4808*x4811))+((r11*x4814))+((cj1*sj2))+((r12*x4806)));
evalcond[5]=(((x4805*x4809))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4806))+(((-1.0)*x4810*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4815 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4815.valid){
continue;
}
CheckValue<IkReal> x4816=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4815.value)+(((1.5707963267949)*(x4816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4817=IKcos(j4);
IkReal x4818=IKsin(j4);
IkReal x4819=(cj5*r00);
IkReal x4820=(cj5*r10);
IkReal x4821=(r21*sj5);
IkReal x4822=(cj5*r20);
IkReal x4823=((1.0)*x4817);
IkReal x4824=((1.0)*x4818);
IkReal x4825=(sj5*x4818);
IkReal x4826=(sj5*x4817);
evalcond[0]=(((r02*x4818))+(((-1.0)*x4819*x4823))+((r01*x4826)));
evalcond[1]=(((x4818*x4821))+(((-1.0)*x4822*x4824))+(((-1.0)*r22*x4823)));
evalcond[2]=(((r11*x4825))+(((-1.0)*x4820*x4824))+(((-1.0)*r12*x4823)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4823))+(((-1.0)*x4819*x4824))+((r01*x4825)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4826))+((r12*x4818))+(((-1.0)*x4820*x4823)));
evalcond[5]=(((x4817*x4821))+(((-1.0)*x4822*x4823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4827=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4827);
rxp1_1=(px*r21);
rxp1_2=(r11*x4827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4828=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4828);
rxp1_1=(px*r21);
rxp1_2=(r11*x4828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4829=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4829);
rxp1_1=(px*r21);
rxp1_2=(r11*x4829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4832=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4832.valid){
continue;
}
IkReal x4830=x4832.value;
IkReal x4831=(sj0*x4830);
cj4array[0]=(((cj1*sj2*x4831))+((cj2*sj1*x4831)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4833=IKsin(j4);
IkReal x4834=IKcos(j4);
IkReal x4835=(r21*sj5);
IkReal x4836=((1.0)*cj5*r20);
evalcond[0]=(r02*x4833);
evalcond[1]=((((-1.0)*r02*x4834))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x4833*x4836))+((x4833*x4835)));
evalcond[3]=(((r11*sj5*x4833))+(((-1.0)*cj5*r10*x4833)));
evalcond[4]=((((-1.0)*x4834*x4836))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4834*x4835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4838=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4838.valid){
continue;
}
IkReal x4837=x4838.value;
cj4array[0]=(((cj1*cj2*x4837))+(((-1.0)*sj1*sj2*x4837)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4839=IKsin(j4);
IkReal x4840=IKcos(j4);
IkReal x4841=((1.0)*sj0);
IkReal x4842=((1.0)*cj5);
IkReal x4843=(sj5*x4839);
evalcond[0]=(r02*x4839);
evalcond[1]=((((-1.0)*x4841))+(((-1.0)*r02*x4840)));
evalcond[2]=(((r21*x4843))+(((-1.0)*r20*x4839*x4842)));
evalcond[3]=(((r11*x4843))+(((-1.0)*r10*x4839*x4842)));
evalcond[4]=((((-1.0)*r10*x4840*x4842))+((r11*sj5*x4840))+(((-1.0)*cj2*sj1*x4841))+(((-1.0)*cj1*sj2*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4844=IKPowWithIntegerCheck(r02,-1);
if(!x4844.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4844.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4845=IKsin(j4);
IkReal x4846=IKcos(j4);
IkReal x4847=((1.0)*cj1);
IkReal x4848=(r21*sj5);
IkReal x4849=((1.0)*cj5);
IkReal x4850=(r11*sj5);
evalcond[0]=(r02*x4845);
evalcond[1]=(((x4845*x4848))+(((-1.0)*r20*x4845*x4849)));
evalcond[2]=((((-1.0)*r10*x4845*x4849))+((x4845*x4850)));
evalcond[3]=((((-1.0)*cj2*x4847))+((sj1*sj2))+((x4846*x4848))+(((-1.0)*r20*x4846*x4849)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4846*x4849))+((x4846*x4850))+(((-1.0)*sj0*sj2*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4851=((1.0)*sj0);
IkReal x4852=((1.0)*cj0);
CheckValue<IkReal> x4853 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4851))+(((-1.0)*r02*x4852)))),IkReal(((((-1.0)*r11*sj5*x4851))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4852))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4853.valid){
continue;
}
CheckValue<IkReal> x4854=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4853.value)+(((1.5707963267949)*(x4854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4855=IKsin(j4);
IkReal x4856=IKcos(j4);
IkReal x4857=(cj5*r00);
IkReal x4858=(cj5*r10);
IkReal x4859=(r21*sj5);
IkReal x4860=((1.0)*cj2);
IkReal x4861=((1.0)*sj0);
IkReal x4862=(cj1*sj2);
IkReal x4863=(cj5*r20);
IkReal x4864=((1.0)*x4856);
IkReal x4865=((1.0)*x4855);
IkReal x4866=(sj5*x4855);
IkReal x4867=(sj5*x4856);
evalcond[0]=((((-1.0)*x4863*x4865))+(((-1.0)*r22*x4864))+((x4855*x4859)));
evalcond[1]=(((r11*x4866))+cj0+(((-1.0)*r12*x4864))+(((-1.0)*x4858*x4865)));
evalcond[2]=(((r01*x4866))+(((-1.0)*x4861))+(((-1.0)*x4857*x4865))+(((-1.0)*r02*x4864)));
evalcond[3]=((((-1.0)*x4863*x4864))+((r22*x4855))+((sj1*sj2))+(((-1.0)*cj1*x4860))+((x4856*x4859)));
evalcond[4]=((((-1.0)*cj0*sj1*x4860))+((r01*x4867))+(((-1.0)*x4857*x4864))+(((-1.0)*cj0*x4862))+((r02*x4855)));
evalcond[5]=(((r11*x4867))+(((-1.0)*sj0*sj1*x4860))+((r12*x4855))+(((-1.0)*x4858*x4864))+(((-1.0)*x4861*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4868=((1.0)*cj5);
CheckValue<IkReal> x4869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4868)))),-1);
if(!x4869.valid){
continue;
}
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4868))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4869.value)))+(x4870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4871=IKsin(j4);
IkReal x4872=IKcos(j4);
IkReal x4873=(cj5*r00);
IkReal x4874=(cj5*r10);
IkReal x4875=(r21*sj5);
IkReal x4876=((1.0)*cj2);
IkReal x4877=((1.0)*sj0);
IkReal x4878=(cj1*sj2);
IkReal x4879=(cj5*r20);
IkReal x4880=((1.0)*x4872);
IkReal x4881=((1.0)*x4871);
IkReal x4882=(sj5*x4871);
IkReal x4883=(sj5*x4872);
evalcond[0]=((((-1.0)*x4879*x4881))+((x4871*x4875))+(((-1.0)*r22*x4880)));
evalcond[1]=((((-1.0)*x4874*x4881))+((r11*x4882))+cj0+(((-1.0)*r12*x4880)));
evalcond[2]=((((-1.0)*r02*x4880))+(((-1.0)*x4873*x4881))+((r01*x4882))+(((-1.0)*x4877)));
evalcond[3]=((((-1.0)*x4879*x4880))+((sj1*sj2))+((x4872*x4875))+((r22*x4871))+(((-1.0)*cj1*x4876)));
evalcond[4]=(((r02*x4871))+(((-1.0)*x4873*x4880))+(((-1.0)*cj0*sj1*x4876))+((r01*x4883))+(((-1.0)*cj0*x4878)));
evalcond[5]=((((-1.0)*x4874*x4880))+((r11*x4883))+(((-1.0)*sj0*sj1*x4876))+((r12*x4871))+(((-1.0)*x4877*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4884=((1.0)*cj5);
CheckValue<IkReal> x4885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4884)))),-1);
if(!x4885.valid){
continue;
}
CheckValue<IkReal> x4886 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4885.value)))+(x4886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4887=IKsin(j4);
IkReal x4888=IKcos(j4);
IkReal x4889=(cj5*r00);
IkReal x4890=(cj5*r10);
IkReal x4891=(r21*sj5);
IkReal x4892=((1.0)*cj2);
IkReal x4893=((1.0)*sj0);
IkReal x4894=(cj1*sj2);
IkReal x4895=(cj5*r20);
IkReal x4896=((1.0)*x4888);
IkReal x4897=((1.0)*x4887);
IkReal x4898=(sj5*x4887);
IkReal x4899=(sj5*x4888);
evalcond[0]=(((x4887*x4891))+(((-1.0)*x4895*x4897))+(((-1.0)*r22*x4896)));
evalcond[1]=(((r11*x4898))+(((-1.0)*r12*x4896))+cj0+(((-1.0)*x4890*x4897)));
evalcond[2]=((((-1.0)*x4893))+(((-1.0)*r02*x4896))+(((-1.0)*x4889*x4897))+((r01*x4898)));
evalcond[3]=((((-1.0)*cj1*x4892))+((sj1*sj2))+((x4888*x4891))+(((-1.0)*x4895*x4896))+((r22*x4887)));
evalcond[4]=((((-1.0)*cj0*x4894))+(((-1.0)*cj0*sj1*x4892))+((r02*x4887))+(((-1.0)*x4889*x4896))+((r01*x4899)));
evalcond[5]=(((r11*x4899))+((r12*x4887))+(((-1.0)*x4893*x4894))+(((-1.0)*sj0*sj1*x4892))+(((-1.0)*x4890*x4896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4900=((1.0)*cj5);
IkReal x4901=((1.0)*sj5);
IkReal x4902=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4902;
j0eval[1]=((IKabs(((((-1.0)*r01*x4900))+(((-1.0)*r00*x4901)))))+(IKabs(((((-1.0)*r11*x4900))+(((-1.0)*r10*x4901))))));
j0eval[2]=IKsign(x4902);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4903=r21*r21;
IkReal x4904=cj5*cj5;
IkReal x4905=(cj2*sj1);
IkReal x4906=(cj1*sj2);
IkReal x4907=(r21*sj5);
IkReal x4908=((1.0)*cj5*r20);
IkReal x4909=((((-1.0)*x4903))+((x4903*x4904))+(((2.0)*cj5*r20*x4907))+(((-1.0)*(r22*r22)))+(((-1.0)*x4904*(r20*r20))));
j4eval[0]=x4909;
j4eval[1]=((IKabs((((r22*x4905))+((r22*x4906)))))+(IKabs(((((-1.0)*x4905*x4908))+((x4905*x4907))+(((-1.0)*x4906*x4908))+((x4906*x4907))))));
j4eval[2]=IKsign(x4909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4910=cj1*cj1;
IkReal x4911=(cj2*sj2);
IkReal x4912=(cj2*sj1);
IkReal x4913=(cj1*sj1);
j0eval[0]=(x4913+x4911+(((-1.08418367346939)*cj1*x4912))+(((-2.0)*x4910*x4911))+(((-1.08418367346939)*sj2*x4910))+(((-2.0)*cj1*cj2*x4912)));
j0eval[1]=((((-1.0)*x4912))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4914=IKcos(j0);
IkReal x4915=IKsin(j0);
evalcond[0]=((((-0.134)*x4915))+(((-1.0)*px))+(((0.817)*x4914)));
evalcond[1]=((((0.134)*x4914))+(((-1.0)*py))+(((0.817)*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4916=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4916;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4917=((1.0)*cj5);
IkReal x4918=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4917)));
j4eval[0]=x4918;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4917))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4919=((1.0)*cj5);
IkReal x4920=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4919)));
j4eval[0]=x4920;
j4eval[1]=IKsign(x4920);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4919))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4921=((1.0)*cj5);
CheckValue<IkReal> x4922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4921))+(((-1.0)*r00*sj5)))),-1);
if(!x4922.valid){
continue;
}
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4921)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4922.value)))+(x4923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4924=IKcos(j4);
IkReal x4925=IKsin(j4);
IkReal x4926=((1.0)*sj0);
IkReal x4927=(cj5*r00);
IkReal x4928=(cj5*r10);
IkReal x4929=(cj5*r20);
IkReal x4930=((1.0)*x4924);
IkReal x4931=((1.0)*x4925);
IkReal x4932=(sj5*x4924);
IkReal x4933=(sj5*x4925);
evalcond[0]=(((r22*x4925))+((r21*x4932))+(((-1.0)*x4929*x4930)));
evalcond[1]=(((r21*x4933))+(((-1.0)*x4929*x4931))+(((-1.0)*r22*x4930)));
evalcond[2]=(cj0+(((-1.0)*r12*x4930))+((r11*x4933))+(((-1.0)*x4928*x4931)));
evalcond[3]=(((r01*x4932))+((r02*x4925))+(((-1.0)*x4927*x4930))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4932))+(((-1.0)*x4928*x4930))+(((-1.0)*x4926))+((r12*x4925)));
evalcond[5]=((((-1.0)*r02*x4930))+((r01*x4933))+(((-1.0)*x4927*x4931))+(((-1.0)*x4926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4934=((1.0)*cj5);
CheckValue<IkReal> x4935 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4935.valid){
continue;
}
CheckValue<IkReal> x4936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4934))+(((-1.0)*r00*sj5)))),-1);
if(!x4936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4935.value)+(((1.5707963267949)*(x4936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4937=IKcos(j4);
IkReal x4938=IKsin(j4);
IkReal x4939=((1.0)*sj0);
IkReal x4940=(cj5*r00);
IkReal x4941=(cj5*r10);
IkReal x4942=(cj5*r20);
IkReal x4943=((1.0)*x4937);
IkReal x4944=((1.0)*x4938);
IkReal x4945=(sj5*x4937);
IkReal x4946=(sj5*x4938);
evalcond[0]=((((-1.0)*x4942*x4943))+((r21*x4945))+((r22*x4938)));
evalcond[1]=((((-1.0)*x4942*x4944))+((r21*x4946))+(((-1.0)*r22*x4943)));
evalcond[2]=((((-1.0)*x4941*x4944))+cj0+((r11*x4946))+(((-1.0)*r12*x4943)));
evalcond[3]=(((r01*x4945))+(((-1.0)*x4940*x4943))+((r02*x4938))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4938))+(((-1.0)*x4941*x4943))+((r11*x4945))+(((-1.0)*x4939)));
evalcond[5]=(((r01*x4946))+(((-1.0)*x4940*x4944))+(((-1.0)*r02*x4943))+(((-1.0)*x4939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4947 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4947.valid){
continue;
}
CheckValue<IkReal> x4948=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4947.value)+(((1.5707963267949)*(x4948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4949=IKcos(j4);
IkReal x4950=IKsin(j4);
IkReal x4951=((1.0)*sj0);
IkReal x4952=(cj5*r00);
IkReal x4953=(cj5*r10);
IkReal x4954=(cj5*r20);
IkReal x4955=((1.0)*x4949);
IkReal x4956=((1.0)*x4950);
IkReal x4957=(sj5*x4949);
IkReal x4958=(sj5*x4950);
evalcond[0]=(((r22*x4950))+(((-1.0)*x4954*x4955))+((r21*x4957)));
evalcond[1]=((((-1.0)*r22*x4955))+(((-1.0)*x4954*x4956))+((r21*x4958)));
evalcond[2]=(cj0+((r11*x4958))+(((-1.0)*r12*x4955))+(((-1.0)*x4953*x4956)));
evalcond[3]=(((r02*x4950))+(((-1.0)*x4952*x4955))+((r01*x4957))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4950))+(((-1.0)*x4951))+((r11*x4957))+(((-1.0)*x4953*x4955)));
evalcond[5]=((((-1.0)*x4951))+(((-1.0)*r02*x4955))+(((-1.0)*x4952*x4956))+((r01*x4958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4959=IKcos(j0);
IkReal x4960=IKsin(j0);
evalcond[0]=((((0.033)*x4959))+(((-1.0)*px))+(((-0.134)*x4960)));
evalcond[1]=((((0.033)*x4960))+(((-1.0)*py))+(((0.134)*x4959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4961=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4961;
j4eval[1]=IKsign(x4961);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4962=((1.0)*cj5);
IkReal x4963=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4962)));
j4eval[0]=x4963;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4962)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4964=cj5*cj5;
IkReal x4965=((1.0)*r20);
IkReal x4966=(r01*r21);
IkReal x4967=(r21*sj5);
IkReal x4968=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4967))+((x4964*x4966))+(((-1.0)*r00*x4964*x4965))+(((-1.0)*x4966)));
j4eval[0]=x4968;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4965))+((cj0*x4967)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4969=cj5*cj5;
IkReal x4970=((1.0)*r20);
IkReal x4971=(r01*r21);
IkReal x4972=(r21*sj5);
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4970))+((cj0*x4972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
CheckValue<IkReal> x4974=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4972))+(((-1.0)*x4971))+((x4969*x4971))+(((-1.0)*r00*x4969*x4970)))),-1);
if(!x4974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4973.value)+(((1.5707963267949)*(x4974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4975=IKcos(j4);
IkReal x4976=IKsin(j4);
IkReal x4977=(cj5*r00);
IkReal x4978=(cj5*r10);
IkReal x4979=(cj5*r20);
IkReal x4980=((1.0)*x4975);
IkReal x4981=((1.0)*x4976);
IkReal x4982=(sj5*x4975);
IkReal x4983=(sj5*x4976);
evalcond[0]=(((r22*x4976))+((r21*x4982))+(((-1.0)*x4979*x4980)));
evalcond[1]=((((-1.0)*r22*x4980))+((r21*x4983))+(((-1.0)*x4979*x4981)));
evalcond[2]=((((-1.0)*x4977*x4980))+((r01*x4982))+cj0+((r02*x4976)));
evalcond[3]=(sj0+((r11*x4982))+((r12*x4976))+(((-1.0)*x4978*x4980)));
evalcond[4]=(cj0+((r11*x4983))+(((-1.0)*r12*x4980))+(((-1.0)*x4978*x4981)));
evalcond[5]=((((-1.0)*x4977*x4981))+(((-1.0)*sj0))+((r01*x4983))+(((-1.0)*r02*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4984=((1.0)*cj5);
CheckValue<IkReal> x4985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4984)))),-1);
if(!x4985.valid){
continue;
}
CheckValue<IkReal> x4986 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4984)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4985.value)))+(x4986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4987=IKcos(j4);
IkReal x4988=IKsin(j4);
IkReal x4989=(cj5*r00);
IkReal x4990=(cj5*r10);
IkReal x4991=(cj5*r20);
IkReal x4992=((1.0)*x4987);
IkReal x4993=((1.0)*x4988);
IkReal x4994=(sj5*x4987);
IkReal x4995=(sj5*x4988);
evalcond[0]=((((-1.0)*x4991*x4992))+((r22*x4988))+((r21*x4994)));
evalcond[1]=((((-1.0)*r22*x4992))+(((-1.0)*x4991*x4993))+((r21*x4995)));
evalcond[2]=(cj0+((r01*x4994))+((r02*x4988))+(((-1.0)*x4989*x4992)));
evalcond[3]=(sj0+((r12*x4988))+(((-1.0)*x4990*x4992))+((r11*x4994)));
evalcond[4]=(cj0+(((-1.0)*r12*x4992))+(((-1.0)*x4990*x4993))+((r11*x4995)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4992))+((r01*x4995))+(((-1.0)*x4989*x4993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4996 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4996.valid){
continue;
}
CheckValue<IkReal> x4997=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4996.value)+(((1.5707963267949)*(x4997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4998=IKcos(j4);
IkReal x4999=IKsin(j4);
IkReal x5000=(cj5*r00);
IkReal x5001=(cj5*r10);
IkReal x5002=(cj5*r20);
IkReal x5003=((1.0)*x4998);
IkReal x5004=((1.0)*x4999);
IkReal x5005=(sj5*x4998);
IkReal x5006=(sj5*x4999);
evalcond[0]=(((r22*x4999))+(((-1.0)*x5002*x5003))+((r21*x5005)));
evalcond[1]=((((-1.0)*x5002*x5004))+((r21*x5006))+(((-1.0)*r22*x5003)));
evalcond[2]=(cj0+((r02*x4999))+(((-1.0)*x5000*x5003))+((r01*x5005)));
evalcond[3]=(sj0+((r11*x5005))+(((-1.0)*x5001*x5003))+((r12*x4999)));
evalcond[4]=(((r11*x5006))+cj0+(((-1.0)*x5001*x5004))+(((-1.0)*r12*x5003)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5000*x5004))+((r01*x5006))+(((-1.0)*r02*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5007=IKsin(j0);
IkReal x5008=IKcos(j0);
IkReal x5009=((0.1)*sj5);
IkReal x5010=(cj5*r11);
IkReal x5011=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5008))+x5011);
evalcond[1]=(((r10*sj5))+(((-1.0)*x5007))+x5010);
evalcond[2]=((((-1.0)*px))+(((-0.134)*x5007))+(((-0.1)*x5011))+(((-1.0)*r00*x5009)));
evalcond[3]=((((0.134)*x5008))+(((-1.0)*py))+(((-1.0)*r10*x5009))+(((-0.1)*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5012=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5012;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5013=((1.0)*cj5);
IkReal x5014=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5013)));
j4eval[0]=x5014;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5013))+((r11*sj5))))));
j4eval[2]=IKsign(x5014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5015=cj5*cj5;
IkReal x5016=(r01*r11);
IkReal x5017=((1.0)*r00);
IkReal x5018=(r01*sj5);
IkReal x5019=((((-1.0)*r02*r12))+(((-1.0)*r10*x5015*x5017))+((cj5*r10*x5018))+(((-1.0)*x5016))+((x5015*x5016))+((cj5*r00*r11*sj5)));
j4eval[0]=x5019;
j4eval[1]=IKsign(x5019);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5018))+(((-1.0)*cj0*cj5*x5017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5020=cj5*cj5;
IkReal x5021=(r01*r11);
IkReal x5022=(cj5*r00);
IkReal x5023=(r01*sj5);
CheckValue<IkReal> x5024 = IKatan2WithCheck(IkReal((((cj0*x5023))+(((-1.0)*cj0*x5022)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5024.valid){
continue;
}
CheckValue<IkReal> x5025=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5023))+(((-1.0)*r02*r12))+((x5020*x5021))+((r11*sj5*x5022))+(((-1.0)*x5021))+(((-1.0)*r00*r10*x5020)))),-1);
if(!x5025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5024.value)+(((1.5707963267949)*(x5025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5026=IKcos(j4);
IkReal x5027=IKsin(j4);
IkReal x5028=(cj5*r00);
IkReal x5029=(r01*sj5);
IkReal x5030=(cj5*r10);
IkReal x5031=(cj5*r20);
IkReal x5032=((1.0)*x5026);
IkReal x5033=((1.0)*x5027);
IkReal x5034=(sj5*x5027);
IkReal x5035=(sj5*x5026);
evalcond[0]=((((-1.0)*x5028*x5032))+((r02*x5027))+((x5026*x5029)));
evalcond[1]=((((-1.0)*x5030*x5032))+((r12*x5027))+((r11*x5035)));
evalcond[2]=((((-1.0)*x5031*x5033))+((r21*x5034))+(((-1.0)*r22*x5032)));
evalcond[3]=((1.0)+(((-1.0)*x5031*x5032))+((r22*x5027))+((r21*x5035)));
evalcond[4]=(cj0+(((-1.0)*x5030*x5033))+((r11*x5034))+(((-1.0)*r12*x5032)));
evalcond[5]=((((-1.0)*x5028*x5033))+(((-1.0)*sj0))+((x5027*x5029))+(((-1.0)*r02*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5036=((1.0)*cj5);
CheckValue<IkReal> x5037 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5036)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5036)))),-1);
if(!x5038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5037.value)+(((1.5707963267949)*(x5038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5039=IKcos(j4);
IkReal x5040=IKsin(j4);
IkReal x5041=(cj5*r00);
IkReal x5042=(r01*sj5);
IkReal x5043=(cj5*r10);
IkReal x5044=(cj5*r20);
IkReal x5045=((1.0)*x5039);
IkReal x5046=((1.0)*x5040);
IkReal x5047=(sj5*x5040);
IkReal x5048=(sj5*x5039);
evalcond[0]=((((-1.0)*x5041*x5045))+((x5039*x5042))+((r02*x5040)));
evalcond[1]=((((-1.0)*x5043*x5045))+((r12*x5040))+((r11*x5048)));
evalcond[2]=(((r21*x5047))+(((-1.0)*r22*x5045))+(((-1.0)*x5044*x5046)));
evalcond[3]=((1.0)+((r21*x5048))+(((-1.0)*x5044*x5045))+((r22*x5040)));
evalcond[4]=((((-1.0)*x5043*x5046))+cj0+(((-1.0)*r12*x5045))+((r11*x5047)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5045))+((x5040*x5042))+(((-1.0)*x5041*x5046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
CheckValue<IkReal> x5050=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5049.value)+(((1.5707963267949)*(x5050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5051=IKcos(j4);
IkReal x5052=IKsin(j4);
IkReal x5053=(cj5*r00);
IkReal x5054=(r01*sj5);
IkReal x5055=(cj5*r10);
IkReal x5056=(cj5*r20);
IkReal x5057=((1.0)*x5051);
IkReal x5058=((1.0)*x5052);
IkReal x5059=(sj5*x5052);
IkReal x5060=(sj5*x5051);
evalcond[0]=((((-1.0)*x5053*x5057))+((x5051*x5054))+((r02*x5052)));
evalcond[1]=(((r12*x5052))+(((-1.0)*x5055*x5057))+((r11*x5060)));
evalcond[2]=(((r21*x5059))+(((-1.0)*r22*x5057))+(((-1.0)*x5056*x5058)));
evalcond[3]=((1.0)+((r22*x5052))+((r21*x5060))+(((-1.0)*x5056*x5057)));
evalcond[4]=(cj0+(((-1.0)*x5055*x5058))+(((-1.0)*r12*x5057))+((r11*x5059)));
evalcond[5]=((((-1.0)*sj0))+((x5052*x5054))+(((-1.0)*x5053*x5058))+(((-1.0)*r02*x5057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5061=IKcos(j0);
IkReal x5062=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x5061))+(((-0.134)*x5062)));
evalcond[1]=((((-1.0)*py))+(((-0.392)*x5062))+(((0.134)*x5061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5063=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5063;
j4eval[1]=IKsign(x5063);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5064=((1.0)*cj5);
IkReal x5065=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5064)));
j4eval[0]=x5065;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5064)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5066=cj5*cj5;
IkReal x5067=((1.0)*r20);
IkReal x5068=(r01*r21);
IkReal x5069=(r21*sj5);
IkReal x5070=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5066*x5068))+(((-1.0)*r00*x5066*x5067))+(((-1.0)*x5068))+((cj5*r00*x5069)));
j4eval[0]=x5070;
j4eval[1]=((IKabs((((cj0*x5069))+(((-1.0)*cj0*cj5*x5067)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5071=cj5*cj5;
IkReal x5072=((1.0)*r20);
IkReal x5073=(r01*r21);
IkReal x5074=(r21*sj5);
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5074))+(((-1.0)*cj0*cj5*x5072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5071*x5072))+(((-1.0)*r02*r22))+((cj5*r00*x5074))+((x5071*x5073))+(((-1.0)*x5073)))),-1);
if(!x5076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5075.value)+(((1.5707963267949)*(x5076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5077=IKcos(j4);
IkReal x5078=IKsin(j4);
IkReal x5079=(cj5*r00);
IkReal x5080=(cj5*r10);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*x5077);
IkReal x5083=((1.0)*x5078);
IkReal x5084=(sj5*x5077);
IkReal x5085=(sj5*x5078);
evalcond[0]=(((r21*x5084))+(((-1.0)*x5081*x5082))+((r22*x5078)));
evalcond[1]=(((r21*x5085))+(((-1.0)*x5081*x5083))+(((-1.0)*r22*x5082)));
evalcond[2]=(cj0+((r01*x5084))+(((-1.0)*x5079*x5082))+((r02*x5078)));
evalcond[3]=((((-1.0)*x5080*x5082))+sj0+((r11*x5084))+((r12*x5078)));
evalcond[4]=((((-1.0)*r12*x5082))+(((-1.0)*x5080*x5083))+cj0+((r11*x5085)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5085))+(((-1.0)*x5079*x5083))+(((-1.0)*r02*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5086=((1.0)*cj5);
CheckValue<IkReal> x5087 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5086)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5087.valid){
continue;
}
CheckValue<IkReal> x5088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5086))+(((-1.0)*r10*sj5)))),-1);
if(!x5088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5087.value)+(((1.5707963267949)*(x5088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5089=IKcos(j4);
IkReal x5090=IKsin(j4);
IkReal x5091=(cj5*r00);
IkReal x5092=(cj5*r10);
IkReal x5093=(cj5*r20);
IkReal x5094=((1.0)*x5089);
IkReal x5095=((1.0)*x5090);
IkReal x5096=(sj5*x5089);
IkReal x5097=(sj5*x5090);
evalcond[0]=((((-1.0)*x5093*x5094))+((r21*x5096))+((r22*x5090)));
evalcond[1]=((((-1.0)*r22*x5094))+(((-1.0)*x5093*x5095))+((r21*x5097)));
evalcond[2]=(cj0+(((-1.0)*x5091*x5094))+((r01*x5096))+((r02*x5090)));
evalcond[3]=(sj0+((r11*x5096))+((r12*x5090))+(((-1.0)*x5092*x5094)));
evalcond[4]=(cj0+((r11*x5097))+(((-1.0)*x5092*x5095))+(((-1.0)*r12*x5094)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5091*x5095))+((r01*x5097))+(((-1.0)*r02*x5094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
CheckValue<IkReal> x5099=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5098.value)+(((1.5707963267949)*(x5099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5100=IKcos(j4);
IkReal x5101=IKsin(j4);
IkReal x5102=(cj5*r00);
IkReal x5103=(cj5*r10);
IkReal x5104=(cj5*r20);
IkReal x5105=((1.0)*x5100);
IkReal x5106=((1.0)*x5101);
IkReal x5107=(sj5*x5100);
IkReal x5108=(sj5*x5101);
evalcond[0]=(((r22*x5101))+((r21*x5107))+(((-1.0)*x5104*x5105)));
evalcond[1]=((((-1.0)*r22*x5105))+((r21*x5108))+(((-1.0)*x5104*x5106)));
evalcond[2]=(((r01*x5107))+cj0+((r02*x5101))+(((-1.0)*x5102*x5105)));
evalcond[3]=(((r12*x5101))+sj0+(((-1.0)*x5103*x5105))+((r11*x5107)));
evalcond[4]=(cj0+(((-1.0)*x5103*x5106))+((r11*x5108))+(((-1.0)*r12*x5105)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5108))+(((-1.0)*r02*x5105))+(((-1.0)*x5102*x5106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5109=((1.0)*sj5);
IkReal x5110=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5109))+(((-1.0)*r11*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5109))+(((-1.0)*r01*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5109))+(((-1.0)*r11*x5110))))+IKsqr(((((-1.0)*r00*x5109))+(((-1.0)*r01*x5110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5109))+(((-1.0)*r11*x5110))), ((((-1.0)*r00*x5109))+(((-1.0)*r01*x5110))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5111=IKsin(j0);
IkReal x5112=IKcos(j0);
IkReal x5113=(r10*sj5);
IkReal x5114=(r00*sj5);
IkReal x5115=(cj5*r11);
IkReal x5116=(cj5*r01);
evalcond[0]=(x5114+x5116+x5112);
evalcond[1]=(x5115+x5111+x5113);
evalcond[2]=((((-0.1)*x5116))+(((-0.1)*x5114))+(((-0.134)*x5111))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x5113))+(((-0.1)*x5115))+(((-1.0)*py))+(((0.134)*x5112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5117=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5117;
j4eval[1]=IKsign(x5117);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5118=((1.0)*cj5);
IkReal x5119=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5118)));
j4eval[0]=x5119;
j4eval[1]=IKsign(x5119);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5120=cj5*cj5;
IkReal x5121=(r01*r11);
IkReal x5122=((1.0)*r00);
IkReal x5123=(r01*sj5);
IkReal x5124=((((-1.0)*r02*r12))+((cj5*r10*x5123))+(((-1.0)*x5121))+((x5120*x5121))+(((-1.0)*r10*x5120*x5122))+((cj5*r00*r11*sj5)));
j4eval[0]=x5124;
j4eval[1]=IKsign(x5124);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5123))+(((-1.0)*cj0*cj5*x5122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5125=cj5*cj5;
IkReal x5126=(r01*r11);
IkReal x5127=(cj5*r00);
IkReal x5128=(r01*sj5);
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5125*x5126))+((cj5*r10*x5128))+(((-1.0)*r00*r10*x5125))+(((-1.0)*x5126))+((r11*sj5*x5127)))),-1);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5127))+((cj0*x5128)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5129.value)))+(x5130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5131=IKcos(j4);
IkReal x5132=IKsin(j4);
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
IkReal x5135=(cj5*r10);
IkReal x5136=(cj5*r20);
IkReal x5137=((1.0)*x5131);
IkReal x5138=((1.0)*x5132);
IkReal x5139=(sj5*x5132);
IkReal x5140=(sj5*x5131);
evalcond[0]=(((x5131*x5134))+((r02*x5132))+(((-1.0)*x5133*x5137)));
evalcond[1]=(((r12*x5132))+(((-1.0)*x5135*x5137))+((r11*x5140)));
evalcond[2]=((((-1.0)*x5136*x5138))+((r21*x5139))+(((-1.0)*r22*x5137)));
evalcond[3]=((-1.0)+((r21*x5140))+((r22*x5132))+(((-1.0)*x5136*x5137)));
evalcond[4]=(cj0+(((-1.0)*x5135*x5138))+((r11*x5139))+(((-1.0)*r12*x5137)));
evalcond[5]=(((x5132*x5134))+(((-1.0)*sj0))+(((-1.0)*r02*x5137))+(((-1.0)*x5133*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5141=((1.0)*cj5);
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5141)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
CheckValue<IkReal> x5143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5141)))),-1);
if(!x5143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5142.value)+(((1.5707963267949)*(x5143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5144=IKcos(j4);
IkReal x5145=IKsin(j4);
IkReal x5146=(cj5*r00);
IkReal x5147=(r01*sj5);
IkReal x5148=(cj5*r10);
IkReal x5149=(cj5*r20);
IkReal x5150=((1.0)*x5144);
IkReal x5151=((1.0)*x5145);
IkReal x5152=(sj5*x5145);
IkReal x5153=(sj5*x5144);
evalcond[0]=(((x5144*x5147))+(((-1.0)*x5146*x5150))+((r02*x5145)));
evalcond[1]=(((r11*x5153))+((r12*x5145))+(((-1.0)*x5148*x5150)));
evalcond[2]=(((r21*x5152))+(((-1.0)*r22*x5150))+(((-1.0)*x5149*x5151)));
evalcond[3]=((-1.0)+((r21*x5153))+(((-1.0)*x5149*x5150))+((r22*x5145)));
evalcond[4]=(((r11*x5152))+cj0+(((-1.0)*r12*x5150))+(((-1.0)*x5148*x5151)));
evalcond[5]=((((-1.0)*sj0))+((x5145*x5147))+(((-1.0)*x5146*x5151))+(((-1.0)*r02*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5154=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5154.valid){
continue;
}
CheckValue<IkReal> x5155 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5154.value)))+(x5155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5156=IKcos(j4);
IkReal x5157=IKsin(j4);
IkReal x5158=(cj5*r00);
IkReal x5159=(r01*sj5);
IkReal x5160=(cj5*r10);
IkReal x5161=(cj5*r20);
IkReal x5162=((1.0)*x5156);
IkReal x5163=((1.0)*x5157);
IkReal x5164=(sj5*x5157);
IkReal x5165=(sj5*x5156);
evalcond[0]=(((r02*x5157))+(((-1.0)*x5158*x5162))+((x5156*x5159)));
evalcond[1]=((((-1.0)*x5160*x5162))+((r12*x5157))+((r11*x5165)));
evalcond[2]=((((-1.0)*r22*x5162))+((r21*x5164))+(((-1.0)*x5161*x5163)));
evalcond[3]=((-1.0)+((r21*x5165))+(((-1.0)*x5161*x5162))+((r22*x5157)));
evalcond[4]=(cj0+(((-1.0)*x5160*x5163))+(((-1.0)*r12*x5162))+((r11*x5164)));
evalcond[5]=((((-1.0)*sj0))+((x5157*x5159))+(((-1.0)*r02*x5162))+(((-1.0)*x5158*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5166=IKsin(j0);
IkReal x5167=IKcos(j0);
evalcond[0]=((((0.392)*x5167))+(((-1.0)*px))+(((-0.134)*x5166)));
evalcond[1]=((((0.392)*x5166))+(((-1.0)*py))+(((0.134)*x5167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5168=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5168;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5169=((1.0)*cj5);
IkReal x5170=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5169)));
j4eval[0]=x5170;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5169)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5171=((1.0)*cj5);
IkReal x5172=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5171)));
j4eval[0]=x5172;
j4eval[1]=IKsign(x5172);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5171))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5173=((1.0)*cj5);
CheckValue<IkReal> x5174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5173)))),-1);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5173))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5174.value)))+(x5175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=((1.0)*sj0);
IkReal x5179=(cj5*r00);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5176);
IkReal x5185=(sj5*x5177);
evalcond[0]=(((r21*x5184))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[1]=((((-1.0)*r22*x5182))+((r21*x5185))+(((-1.0)*x5181*x5183)));
evalcond[2]=(cj0+(((-1.0)*r12*x5182))+((r11*x5185))+(((-1.0)*x5180*x5183)));
evalcond[3]=(((r01*x5184))+((r02*x5177))+(((-1.0)*x5179*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5178))+((r12*x5177))+((r11*x5184))+(((-1.0)*x5180*x5182)));
evalcond[5]=((((-1.0)*r02*x5182))+((r01*x5185))+(((-1.0)*x5178))+(((-1.0)*x5179*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5186=((1.0)*cj5);
CheckValue<IkReal> x5187 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5187.valid){
continue;
}
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5186)))),-1);
if(!x5188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5187.value)+(((1.5707963267949)*(x5188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5189=IKcos(j4);
IkReal x5190=IKsin(j4);
IkReal x5191=((1.0)*sj0);
IkReal x5192=(cj5*r00);
IkReal x5193=(cj5*r10);
IkReal x5194=(cj5*r20);
IkReal x5195=((1.0)*x5189);
IkReal x5196=((1.0)*x5190);
IkReal x5197=(sj5*x5189);
IkReal x5198=(sj5*x5190);
evalcond[0]=(((r21*x5197))+((r22*x5190))+(((-1.0)*x5194*x5195)));
evalcond[1]=(((r21*x5198))+(((-1.0)*r22*x5195))+(((-1.0)*x5194*x5196)));
evalcond[2]=((((-1.0)*r12*x5195))+cj0+((r11*x5198))+(((-1.0)*x5193*x5196)));
evalcond[3]=(((r02*x5190))+(((-1.0)*x5192*x5195))+((r01*x5197))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5197))+(((-1.0)*x5191))+(((-1.0)*x5193*x5195))+((r12*x5190)));
evalcond[5]=((((-1.0)*x5191))+(((-1.0)*x5192*x5196))+(((-1.0)*r02*x5195))+((r01*x5198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
CheckValue<IkReal> x5200=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5199.value)+(((1.5707963267949)*(x5200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5201=IKcos(j4);
IkReal x5202=IKsin(j4);
IkReal x5203=((1.0)*sj0);
IkReal x5204=(cj5*r00);
IkReal x5205=(cj5*r10);
IkReal x5206=(cj5*r20);
IkReal x5207=((1.0)*x5201);
IkReal x5208=((1.0)*x5202);
IkReal x5209=(sj5*x5201);
IkReal x5210=(sj5*x5202);
evalcond[0]=((((-1.0)*x5206*x5207))+((r22*x5202))+((r21*x5209)));
evalcond[1]=((((-1.0)*x5206*x5208))+(((-1.0)*r22*x5207))+((r21*x5210)));
evalcond[2]=(cj0+((r11*x5210))+(((-1.0)*x5205*x5208))+(((-1.0)*r12*x5207)));
evalcond[3]=(((r01*x5209))+((r02*x5202))+(((-1.0)*x5204*x5207))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5203))+((r11*x5209))+(((-1.0)*x5205*x5207))+((r12*x5202)));
evalcond[5]=((((-1.0)*x5203))+((r01*x5210))+(((-1.0)*r02*x5207))+(((-1.0)*x5204*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5211=IKcos(j0);
IkReal x5212=IKsin(j0);
evalcond[0]=((((-0.134)*x5212))+(((-1.0)*px))+(((-0.817)*x5211)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5211))+(((-0.817)*x5212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5213=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5213;
j4eval[1]=IKsign(x5213);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5214=((1.0)*cj5);
IkReal x5215=((((-1.0)*r11*x5214))+(((-1.0)*r10*sj5)));
j4eval[0]=x5215;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5214)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5216=cj5*cj5;
IkReal x5217=((1.0)*r20);
IkReal x5218=(r01*r21);
IkReal x5219=(r21*sj5);
IkReal x5220=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5216*x5218))+(((-1.0)*r00*x5216*x5217))+((cj5*r00*x5219))+(((-1.0)*x5218)));
j4eval[0]=x5220;
j4eval[1]=((IKabs((((cj0*x5219))+(((-1.0)*cj0*cj5*x5217)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5221=cj5*cj5;
IkReal x5222=((1.0)*r20);
IkReal x5223=(r01*r21);
IkReal x5224=(r21*sj5);
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5224))+((x5221*x5223))+(((-1.0)*r00*x5221*x5222))+(((-1.0)*x5223)))),-1);
if(!x5225.valid){
continue;
}
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5222))+((cj0*x5224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5225.value)))+(x5226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5227=IKcos(j4);
IkReal x5228=IKsin(j4);
IkReal x5229=(cj5*r00);
IkReal x5230=(cj5*r10);
IkReal x5231=(cj5*r20);
IkReal x5232=((1.0)*x5227);
IkReal x5233=((1.0)*x5228);
IkReal x5234=(sj5*x5227);
IkReal x5235=(sj5*x5228);
evalcond[0]=(((r22*x5228))+(((-1.0)*x5231*x5232))+((r21*x5234)));
evalcond[1]=((((-1.0)*r22*x5232))+(((-1.0)*x5231*x5233))+((r21*x5235)));
evalcond[2]=(cj0+((r02*x5228))+((r01*x5234))+(((-1.0)*x5229*x5232)));
evalcond[3]=(sj0+((r11*x5234))+((r12*x5228))+(((-1.0)*x5230*x5232)));
evalcond[4]=(cj0+((r11*x5235))+(((-1.0)*r12*x5232))+(((-1.0)*x5230*x5233)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5232))+((r01*x5235))+(((-1.0)*x5229*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5236=((1.0)*cj5);
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5236))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5236))+(((-1.0)*r10*sj5)))),-1);
if(!x5238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5237.value)+(((1.5707963267949)*(x5238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5239=IKcos(j4);
IkReal x5240=IKsin(j4);
IkReal x5241=(cj5*r00);
IkReal x5242=(cj5*r10);
IkReal x5243=(cj5*r20);
IkReal x5244=((1.0)*x5239);
IkReal x5245=((1.0)*x5240);
IkReal x5246=(sj5*x5239);
IkReal x5247=(sj5*x5240);
evalcond[0]=((((-1.0)*x5243*x5244))+((r21*x5246))+((r22*x5240)));
evalcond[1]=((((-1.0)*x5243*x5245))+(((-1.0)*r22*x5244))+((r21*x5247)));
evalcond[2]=(cj0+((r01*x5246))+(((-1.0)*x5241*x5244))+((r02*x5240)));
evalcond[3]=(sj0+((r11*x5246))+(((-1.0)*x5242*x5244))+((r12*x5240)));
evalcond[4]=((((-1.0)*r12*x5244))+((r11*x5247))+cj0+(((-1.0)*x5242*x5245)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5247))+(((-1.0)*r02*x5244))+(((-1.0)*x5241*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5248.value)+(((1.5707963267949)*(x5249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5250=IKcos(j4);
IkReal x5251=IKsin(j4);
IkReal x5252=(cj5*r00);
IkReal x5253=(cj5*r10);
IkReal x5254=(cj5*r20);
IkReal x5255=((1.0)*x5250);
IkReal x5256=((1.0)*x5251);
IkReal x5257=(sj5*x5250);
IkReal x5258=(sj5*x5251);
evalcond[0]=(((r22*x5251))+(((-1.0)*x5254*x5255))+((r21*x5257)));
evalcond[1]=((((-1.0)*x5254*x5256))+((r21*x5258))+(((-1.0)*r22*x5255)));
evalcond[2]=(((r01*x5257))+cj0+(((-1.0)*x5252*x5255))+((r02*x5251)));
evalcond[3]=(sj0+((r12*x5251))+((r11*x5257))+(((-1.0)*x5253*x5255)));
evalcond[4]=(cj0+(((-1.0)*r12*x5255))+((r11*x5258))+(((-1.0)*x5253*x5256)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5255))+((r01*x5258))+(((-1.0)*x5252*x5256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5259=IKcos(j0);
IkReal x5260=IKsin(j0);
evalcond[0]=((((-0.033)*x5259))+(((-0.134)*x5260))+(((-1.0)*px)));
evalcond[1]=((((-0.033)*x5260))+(((-1.0)*py))+(((0.134)*x5259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5261=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5261;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5262=((1.0)*cj5);
IkReal x5263=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5262)));
j4eval[0]=x5263;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5262))))));
j4eval[2]=IKsign(x5263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5264=((1.0)*cj5);
IkReal x5265=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5264)));
j4eval[0]=x5265;
j4eval[1]=IKsign(x5265);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5264))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5266=((1.0)*cj5);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5266))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5266)))),-1);
if(!x5268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5267.value)+(((1.5707963267949)*(x5268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5269=IKcos(j4);
IkReal x5270=IKsin(j4);
IkReal x5271=((1.0)*sj0);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(cj5*r20);
IkReal x5275=((1.0)*x5269);
IkReal x5276=((1.0)*x5270);
IkReal x5277=(sj5*x5269);
IkReal x5278=(sj5*x5270);
evalcond[0]=(((r22*x5270))+(((-1.0)*x5274*x5275))+((r21*x5277)));
evalcond[1]=((((-1.0)*x5274*x5276))+((r21*x5278))+(((-1.0)*r22*x5275)));
evalcond[2]=(cj0+(((-1.0)*r12*x5275))+((r11*x5278))+(((-1.0)*x5273*x5276)));
evalcond[3]=((((-1.0)*x5272*x5275))+((r02*x5270))+((r01*x5277))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5271))+((r11*x5277))+(((-1.0)*x5273*x5275))+((r12*x5270)));
evalcond[5]=((((-1.0)*x5272*x5276))+(((-1.0)*x5271))+((r01*x5278))+(((-1.0)*r02*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5279=((1.0)*cj5);
CheckValue<IkReal> x5280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5279))+(((-1.0)*r00*sj5)))),-1);
if(!x5280.valid){
continue;
}
CheckValue<IkReal> x5281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5280.value)))+(x5281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5282=IKcos(j4);
IkReal x5283=IKsin(j4);
IkReal x5284=((1.0)*sj0);
IkReal x5285=(cj5*r00);
IkReal x5286=(cj5*r10);
IkReal x5287=(cj5*r20);
IkReal x5288=((1.0)*x5282);
IkReal x5289=((1.0)*x5283);
IkReal x5290=(sj5*x5282);
IkReal x5291=(sj5*x5283);
evalcond[0]=((((-1.0)*x5287*x5288))+((r22*x5283))+((r21*x5290)));
evalcond[1]=((((-1.0)*r22*x5288))+(((-1.0)*x5287*x5289))+((r21*x5291)));
evalcond[2]=(cj0+(((-1.0)*x5286*x5289))+(((-1.0)*r12*x5288))+((r11*x5291)));
evalcond[3]=(((r02*x5283))+((r01*x5290))+(((-1.0)*cj0))+(((-1.0)*x5285*x5288)));
evalcond[4]=(((r12*x5283))+(((-1.0)*x5286*x5288))+(((-1.0)*x5284))+((r11*x5290)));
evalcond[5]=((((-1.0)*x5284))+(((-1.0)*r02*x5288))+((r01*x5291))+(((-1.0)*x5285*x5289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
CheckValue<IkReal> x5293=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5292.value)+(((1.5707963267949)*(x5293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5294=IKcos(j4);
IkReal x5295=IKsin(j4);
IkReal x5296=((1.0)*sj0);
IkReal x5297=(cj5*r00);
IkReal x5298=(cj5*r10);
IkReal x5299=(cj5*r20);
IkReal x5300=((1.0)*x5294);
IkReal x5301=((1.0)*x5295);
IkReal x5302=(sj5*x5294);
IkReal x5303=(sj5*x5295);
evalcond[0]=(((r21*x5302))+((r22*x5295))+(((-1.0)*x5299*x5300)));
evalcond[1]=((((-1.0)*r22*x5300))+((r21*x5303))+(((-1.0)*x5299*x5301)));
evalcond[2]=(cj0+(((-1.0)*r12*x5300))+(((-1.0)*x5298*x5301))+((r11*x5303)));
evalcond[3]=((((-1.0)*x5297*x5300))+((r02*x5295))+((r01*x5302))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5295))+(((-1.0)*x5296))+(((-1.0)*x5298*x5300))+((r11*x5302)));
evalcond[5]=((((-1.0)*x5297*x5301))+(((-1.0)*x5296))+(((-1.0)*r02*x5300))+((r01*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5304=((1.0)*sj5);
IkReal x5305=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5305))+(((-1.0)*r10*x5304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5305))+(((-1.0)*r00*x5304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5305))+(((-1.0)*r10*x5304))))+IKsqr(((((-1.0)*r01*x5305))+(((-1.0)*r00*x5304))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5305))+(((-1.0)*r10*x5304))), ((((-1.0)*r01*x5305))+(((-1.0)*r00*x5304))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5306=IKsin(j0);
IkReal x5307=IKcos(j0);
IkReal x5308=(r10*sj5);
IkReal x5309=(r00*sj5);
IkReal x5310=(cj5*r11);
IkReal x5311=(cj5*r01);
evalcond[0]=(x5309+x5307+x5311);
evalcond[1]=(x5308+x5306+x5310);
evalcond[2]=((((-0.1)*x5309))+(((-0.1)*x5311))+(((-1.0)*px))+(((-0.134)*x5306)));
evalcond[3]=((((-0.1)*x5308))+(((-0.1)*x5310))+(((-1.0)*py))+(((0.134)*x5307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5312;
j4eval[1]=IKsign(x5312);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5313=((1.0)*cj5);
IkReal x5314=((((-1.0)*r11*x5313))+(((-1.0)*r10*sj5)));
j4eval[0]=x5314;
j4eval[1]=IKsign(x5314);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5315=cj5*cj5;
IkReal x5316=(r01*r11);
IkReal x5317=((1.0)*r00);
IkReal x5318=(r01*sj5);
IkReal x5319=(((cj5*r10*x5318))+(((-1.0)*r02*r12))+((x5315*x5316))+(((-1.0)*r10*x5315*x5317))+(((-1.0)*x5316))+((cj5*r00*r11*sj5)));
j4eval[0]=x5319;
j4eval[1]=IKsign(x5319);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5318))+(((-1.0)*cj0*cj5*x5317))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5320=cj5*cj5;
IkReal x5321=(r01*r11);
IkReal x5322=(cj5*r00);
IkReal x5323=(r01*sj5);
CheckValue<IkReal> x5324=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5321))+(((-1.0)*r00*r10*x5320))+(((-1.0)*r02*r12))+((x5320*x5321))+((r11*sj5*x5322))+((cj5*r10*x5323)))),-1);
if(!x5324.valid){
continue;
}
CheckValue<IkReal> x5325 = IKatan2WithCheck(IkReal((((cj0*x5323))+(((-1.0)*cj0*x5322)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5324.value)))+(x5325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5326=IKcos(j4);
IkReal x5327=IKsin(j4);
IkReal x5328=(cj5*r00);
IkReal x5329=(r01*sj5);
IkReal x5330=(cj5*r10);
IkReal x5331=(cj5*r20);
IkReal x5332=((1.0)*x5326);
IkReal x5333=((1.0)*x5327);
IkReal x5334=(sj5*x5327);
IkReal x5335=(sj5*x5326);
evalcond[0]=(((x5326*x5329))+(((-1.0)*x5328*x5332))+((r02*x5327)));
evalcond[1]=((((-1.0)*x5330*x5332))+((r11*x5335))+((r12*x5327)));
evalcond[2]=((((-1.0)*x5331*x5333))+(((-1.0)*r22*x5332))+((r21*x5334)));
evalcond[3]=((-1.0)+(((-1.0)*x5331*x5332))+((r22*x5327))+((r21*x5335)));
evalcond[4]=((((-1.0)*x5330*x5333))+cj0+((r11*x5334))+(((-1.0)*r12*x5332)));
evalcond[5]=((((-1.0)*sj0))+((x5327*x5329))+(((-1.0)*r02*x5332))+(((-1.0)*x5328*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5336=((1.0)*cj5);
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5336)))),-1);
if(!x5337.valid){
continue;
}
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5336))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5337.value)))+(x5338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5339=IKcos(j4);
IkReal x5340=IKsin(j4);
IkReal x5341=(cj5*r00);
IkReal x5342=(r01*sj5);
IkReal x5343=(cj5*r10);
IkReal x5344=(cj5*r20);
IkReal x5345=((1.0)*x5339);
IkReal x5346=((1.0)*x5340);
IkReal x5347=(sj5*x5340);
IkReal x5348=(sj5*x5339);
evalcond[0]=(((x5339*x5342))+(((-1.0)*x5341*x5345))+((r02*x5340)));
evalcond[1]=(((r12*x5340))+((r11*x5348))+(((-1.0)*x5343*x5345)));
evalcond[2]=((((-1.0)*x5344*x5346))+(((-1.0)*r22*x5345))+((r21*x5347)));
evalcond[3]=((-1.0)+(((-1.0)*x5344*x5345))+((r22*x5340))+((r21*x5348)));
evalcond[4]=(cj0+((r11*x5347))+(((-1.0)*r12*x5345))+(((-1.0)*x5343*x5346)));
evalcond[5]=((((-1.0)*r02*x5345))+(((-1.0)*sj0))+(((-1.0)*x5341*x5346))+((x5340*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5349.value)))+(x5350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5351=IKcos(j4);
IkReal x5352=IKsin(j4);
IkReal x5353=(cj5*r00);
IkReal x5354=(r01*sj5);
IkReal x5355=(cj5*r10);
IkReal x5356=(cj5*r20);
IkReal x5357=((1.0)*x5351);
IkReal x5358=((1.0)*x5352);
IkReal x5359=(sj5*x5352);
IkReal x5360=(sj5*x5351);
evalcond[0]=((((-1.0)*x5353*x5357))+((x5351*x5354))+((r02*x5352)));
evalcond[1]=((((-1.0)*x5355*x5357))+((r12*x5352))+((r11*x5360)));
evalcond[2]=((((-1.0)*x5356*x5358))+(((-1.0)*r22*x5357))+((r21*x5359)));
evalcond[3]=((-1.0)+(((-1.0)*x5356*x5357))+((r22*x5352))+((r21*x5360)));
evalcond[4]=((((-1.0)*x5355*x5358))+cj0+((r11*x5359))+(((-1.0)*r12*x5357)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5357))+(((-1.0)*x5353*x5358))+((x5352*x5354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5361=IKsin(j0);
IkReal x5362=IKcos(j0);
evalcond[0]=((((-0.134)*x5361))+(((-1.0)*px))+(((0.392)*x5362)));
evalcond[1]=((((-1.0)*py))+(((0.392)*x5361))+(((0.134)*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5363=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5363;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5364=((1.0)*cj5);
IkReal x5365=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5364)));
j4eval[0]=x5365;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5364)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5366=((1.0)*cj5);
IkReal x5367=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5366)));
j4eval[0]=x5367;
j4eval[1]=IKsign(x5367);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5366)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5368=((1.0)*cj5);
CheckValue<IkReal> x5369 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5368)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5369.valid){
continue;
}
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5368)))),-1);
if(!x5370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5369.value)+(((1.5707963267949)*(x5370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5371=IKcos(j4);
IkReal x5372=IKsin(j4);
IkReal x5373=((1.0)*sj0);
IkReal x5374=(cj5*r00);
IkReal x5375=(cj5*r10);
IkReal x5376=(cj5*r20);
IkReal x5377=((1.0)*x5371);
IkReal x5378=((1.0)*x5372);
IkReal x5379=(sj5*x5371);
IkReal x5380=(sj5*x5372);
evalcond[0]=(((r21*x5379))+(((-1.0)*x5376*x5377))+((r22*x5372)));
evalcond[1]=((((-1.0)*r22*x5377))+(((-1.0)*x5376*x5378))+((r21*x5380)));
evalcond[2]=(cj0+(((-1.0)*r12*x5377))+((r11*x5380))+(((-1.0)*x5375*x5378)));
evalcond[3]=(((r02*x5372))+(((-1.0)*x5374*x5377))+((r01*x5379))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5373))+((r12*x5372))+(((-1.0)*x5375*x5377))+((r11*x5379)));
evalcond[5]=((((-1.0)*x5373))+(((-1.0)*r02*x5377))+((r01*x5380))+(((-1.0)*x5374*x5378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5381=((1.0)*cj5);
CheckValue<IkReal> x5382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5382.valid){
continue;
}
CheckValue<IkReal> x5383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5381)))),-1);
if(!x5383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5382.value)+(((1.5707963267949)*(x5383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5384=IKcos(j4);
IkReal x5385=IKsin(j4);
IkReal x5386=((1.0)*sj0);
IkReal x5387=(cj5*r00);
IkReal x5388=(cj5*r10);
IkReal x5389=(cj5*r20);
IkReal x5390=((1.0)*x5384);
IkReal x5391=((1.0)*x5385);
IkReal x5392=(sj5*x5384);
IkReal x5393=(sj5*x5385);
evalcond[0]=((((-1.0)*x5389*x5390))+((r21*x5392))+((r22*x5385)));
evalcond[1]=((((-1.0)*x5389*x5391))+(((-1.0)*r22*x5390))+((r21*x5393)));
evalcond[2]=((((-1.0)*x5388*x5391))+cj0+((r11*x5393))+(((-1.0)*r12*x5390)));
evalcond[3]=(((r02*x5385))+(((-1.0)*x5387*x5390))+((r01*x5392))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5388*x5390))+((r11*x5392))+((r12*x5385))+(((-1.0)*x5386)));
evalcond[5]=((((-1.0)*r02*x5390))+(((-1.0)*x5387*x5391))+((r01*x5393))+(((-1.0)*x5386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
CheckValue<IkReal> x5395=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5394.value)+(((1.5707963267949)*(x5395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5396=IKcos(j4);
IkReal x5397=IKsin(j4);
IkReal x5398=((1.0)*sj0);
IkReal x5399=(cj5*r00);
IkReal x5400=(cj5*r10);
IkReal x5401=(cj5*r20);
IkReal x5402=((1.0)*x5396);
IkReal x5403=((1.0)*x5397);
IkReal x5404=(sj5*x5396);
IkReal x5405=(sj5*x5397);
evalcond[0]=(((r21*x5404))+((r22*x5397))+(((-1.0)*x5401*x5402)));
evalcond[1]=(((r21*x5405))+(((-1.0)*r22*x5402))+(((-1.0)*x5401*x5403)));
evalcond[2]=((((-1.0)*x5400*x5403))+cj0+(((-1.0)*r12*x5402))+((r11*x5405)));
evalcond[3]=(((r02*x5397))+(((-1.0)*x5399*x5402))+((r01*x5404))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5400*x5402))+((r12*x5397))+(((-1.0)*x5398))+((r11*x5404)));
evalcond[5]=((((-1.0)*r02*x5402))+(((-1.0)*x5399*x5403))+(((-1.0)*x5398))+((r01*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5406=IKsin(j0);
IkReal x5407=IKcos(j0);
IkReal x5408=((0.1)*sj5);
IkReal x5409=(cj5*r11);
IkReal x5410=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5407))+x5410);
evalcond[1]=((((-1.0)*x5406))+x5409+((r10*sj5)));
evalcond[2]=((((-1.0)*r00*x5408))+(((-1.0)*px))+(((-0.1)*x5410))+(((-0.134)*x5406)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x5407))+(((-1.0)*r10*x5408))+(((-0.1)*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5411=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5411;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5412=((1.0)*cj5);
IkReal x5413=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5412)));
j4eval[0]=x5413;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5412))+((r11*sj5))))));
j4eval[2]=IKsign(x5413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5414=cj5*cj5;
IkReal x5415=(r01*r11);
IkReal x5416=((1.0)*r00);
IkReal x5417=(r01*sj5);
IkReal x5418=((((-1.0)*x5415))+((cj5*r10*x5417))+((x5414*x5415))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5414*x5416))+((cj5*r00*r11*sj5)));
j4eval[0]=x5418;
j4eval[1]=IKsign(x5418);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5416))+((cj0*x5417))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5419=cj5*cj5;
IkReal x5420=(r01*r11);
IkReal x5421=(cj5*r00);
IkReal x5422=(r01*sj5);
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5421))+(((-1.0)*r02*r12))+((x5419*x5420))+((cj5*r10*x5422))+(((-1.0)*r00*r10*x5419))+(((-1.0)*x5420)))),-1);
if(!x5423.valid){
continue;
}
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5421))+((cj0*x5422)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5423.value)))+(x5424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5425=IKcos(j4);
IkReal x5426=IKsin(j4);
IkReal x5427=(cj5*r00);
IkReal x5428=(r01*sj5);
IkReal x5429=(cj5*r10);
IkReal x5430=(cj5*r20);
IkReal x5431=((1.0)*x5425);
IkReal x5432=((1.0)*x5426);
IkReal x5433=(sj5*x5426);
IkReal x5434=(sj5*x5425);
evalcond[0]=((((-1.0)*x5427*x5431))+((r02*x5426))+((x5425*x5428)));
evalcond[1]=(((r12*x5426))+(((-1.0)*x5429*x5431))+((r11*x5434)));
evalcond[2]=((((-1.0)*r22*x5431))+(((-1.0)*x5430*x5432))+((r21*x5433)));
evalcond[3]=((1.0)+((r22*x5426))+(((-1.0)*x5430*x5431))+((r21*x5434)));
evalcond[4]=(cj0+(((-1.0)*r12*x5431))+(((-1.0)*x5429*x5432))+((r11*x5433)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5431))+(((-1.0)*x5427*x5432))+((x5426*x5428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5435=((1.0)*cj5);
CheckValue<IkReal> x5436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5435))+(((-1.0)*r00*sj5)))),-1);
if(!x5436.valid){
continue;
}
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5435)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5436.value)))+(x5437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5438=IKcos(j4);
IkReal x5439=IKsin(j4);
IkReal x5440=(cj5*r00);
IkReal x5441=(r01*sj5);
IkReal x5442=(cj5*r10);
IkReal x5443=(cj5*r20);
IkReal x5444=((1.0)*x5438);
IkReal x5445=((1.0)*x5439);
IkReal x5446=(sj5*x5439);
IkReal x5447=(sj5*x5438);
evalcond[0]=(((r02*x5439))+((x5438*x5441))+(((-1.0)*x5440*x5444)));
evalcond[1]=((((-1.0)*x5442*x5444))+((r11*x5447))+((r12*x5439)));
evalcond[2]=((((-1.0)*x5443*x5445))+(((-1.0)*r22*x5444))+((r21*x5446)));
evalcond[3]=((1.0)+((r22*x5439))+(((-1.0)*x5443*x5444))+((r21*x5447)));
evalcond[4]=(cj0+(((-1.0)*r12*x5444))+(((-1.0)*x5442*x5445))+((r11*x5446)));
evalcond[5]=((((-1.0)*sj0))+((x5439*x5441))+(((-1.0)*r02*x5444))+(((-1.0)*x5440*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
CheckValue<IkReal> x5449=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5448.value)+(((1.5707963267949)*(x5449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5450=IKcos(j4);
IkReal x5451=IKsin(j4);
IkReal x5452=(cj5*r00);
IkReal x5453=(r01*sj5);
IkReal x5454=(cj5*r10);
IkReal x5455=(cj5*r20);
IkReal x5456=((1.0)*x5450);
IkReal x5457=((1.0)*x5451);
IkReal x5458=(sj5*x5451);
IkReal x5459=(sj5*x5450);
evalcond[0]=((((-1.0)*x5452*x5456))+((r02*x5451))+((x5450*x5453)));
evalcond[1]=(((r12*x5451))+(((-1.0)*x5454*x5456))+((r11*x5459)));
evalcond[2]=((((-1.0)*x5455*x5457))+((r21*x5458))+(((-1.0)*r22*x5456)));
evalcond[3]=((1.0)+(((-1.0)*x5455*x5456))+((r21*x5459))+((r22*x5451)));
evalcond[4]=((((-1.0)*r12*x5456))+(((-1.0)*x5454*x5457))+cj0+((r11*x5458)));
evalcond[5]=((((-1.0)*x5452*x5457))+(((-1.0)*sj0))+(((-1.0)*r02*x5456))+((x5451*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5460=IKcos(j0);
IkReal x5461=IKsin(j0);
evalcond[0]=((((-0.392)*x5460))+(((-1.0)*px))+(((-0.134)*x5461)));
evalcond[1]=((((-0.392)*x5461))+(((-1.0)*py))+(((0.134)*x5460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5462=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5462;
j4eval[1]=IKsign(x5462);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5463=((1.0)*cj5);
IkReal x5464=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5463)));
j4eval[0]=x5464;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5463))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5465=cj5*cj5;
IkReal x5466=((1.0)*r20);
IkReal x5467=(r01*r21);
IkReal x5468=(r21*sj5);
IkReal x5469=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5467))+((cj5*r00*x5468))+((x5465*x5467))+(((-1.0)*r00*x5465*x5466)));
j4eval[0]=x5469;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5466))+((cj0*x5468))))));
j4eval[2]=IKsign(x5469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5470=cj5*cj5;
IkReal x5471=((1.0)*r20);
IkReal x5472=(r01*r21);
IkReal x5473=(r21*sj5);
CheckValue<IkReal> x5474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5471))+((cj0*x5473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5474.valid){
continue;
}
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5472))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5470*x5471))+((cj5*r00*x5473))+((x5470*x5472)))),-1);
if(!x5475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5474.value)+(((1.5707963267949)*(x5475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5476=IKcos(j4);
IkReal x5477=IKsin(j4);
IkReal x5478=(cj5*r00);
IkReal x5479=(cj5*r10);
IkReal x5480=(cj5*r20);
IkReal x5481=((1.0)*x5476);
IkReal x5482=((1.0)*x5477);
IkReal x5483=(sj5*x5476);
IkReal x5484=(sj5*x5477);
evalcond[0]=(((r21*x5483))+((r22*x5477))+(((-1.0)*x5480*x5481)));
evalcond[1]=((((-1.0)*r22*x5481))+((r21*x5484))+(((-1.0)*x5480*x5482)));
evalcond[2]=(cj0+((r01*x5483))+(((-1.0)*x5478*x5481))+((r02*x5477)));
evalcond[3]=((((-1.0)*x5479*x5481))+sj0+((r11*x5483))+((r12*x5477)));
evalcond[4]=((((-1.0)*x5479*x5482))+(((-1.0)*r12*x5481))+cj0+((r11*x5484)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5484))+(((-1.0)*x5478*x5482))+(((-1.0)*r02*x5481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5485=((1.0)*cj5);
CheckValue<IkReal> x5486 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5485)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5486.valid){
continue;
}
CheckValue<IkReal> x5487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5485))+(((-1.0)*r10*sj5)))),-1);
if(!x5487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5486.value)+(((1.5707963267949)*(x5487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5488=IKcos(j4);
IkReal x5489=IKsin(j4);
IkReal x5490=(cj5*r00);
IkReal x5491=(cj5*r10);
IkReal x5492=(cj5*r20);
IkReal x5493=((1.0)*x5488);
IkReal x5494=((1.0)*x5489);
IkReal x5495=(sj5*x5488);
IkReal x5496=(sj5*x5489);
evalcond[0]=(((r21*x5495))+(((-1.0)*x5492*x5493))+((r22*x5489)));
evalcond[1]=(((r21*x5496))+(((-1.0)*r22*x5493))+(((-1.0)*x5492*x5494)));
evalcond[2]=(((r01*x5495))+cj0+(((-1.0)*x5490*x5493))+((r02*x5489)));
evalcond[3]=(sj0+(((-1.0)*x5491*x5493))+((r12*x5489))+((r11*x5495)));
evalcond[4]=(cj0+(((-1.0)*x5491*x5494))+(((-1.0)*r12*x5493))+((r11*x5496)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5496))+(((-1.0)*r02*x5493))+(((-1.0)*x5490*x5494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5497 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5497.valid){
continue;
}
CheckValue<IkReal> x5498=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5497.value)+(((1.5707963267949)*(x5498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5499=IKcos(j4);
IkReal x5500=IKsin(j4);
IkReal x5501=(cj5*r00);
IkReal x5502=(cj5*r10);
IkReal x5503=(cj5*r20);
IkReal x5504=((1.0)*x5499);
IkReal x5505=((1.0)*x5500);
IkReal x5506=(sj5*x5499);
IkReal x5507=(sj5*x5500);
evalcond[0]=((((-1.0)*x5503*x5504))+((r21*x5506))+((r22*x5500)));
evalcond[1]=((((-1.0)*x5503*x5505))+(((-1.0)*r22*x5504))+((r21*x5507)));
evalcond[2]=(cj0+((r02*x5500))+(((-1.0)*x5501*x5504))+((r01*x5506)));
evalcond[3]=((((-1.0)*x5502*x5504))+sj0+((r12*x5500))+((r11*x5506)));
evalcond[4]=((((-1.0)*x5502*x5505))+cj0+(((-1.0)*r12*x5504))+((r11*x5507)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5501*x5505))+(((-1.0)*r02*x5504))+((r01*x5507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5508=cj1*cj1;
IkReal x5509=((500.0)*py);
IkReal x5510=(cj1*sj2);
IkReal x5511=(cj2*sj2);
IkReal x5512=(cj5*r01);
IkReal x5513=(cj2*sj1);
IkReal x5514=(cj1*sj1);
IkReal x5515=(r00*sj5);
IkReal x5516=((50.0)*r10*sj5);
IkReal x5517=((50.0)*cj5*r11);
CheckValue<IkReal> x5518=IKPowWithIntegerCheck(((((-392.0)*x5508*x5511))+(((-392.0)*cj1*cj2*x5513))+(((-212.5)*sj2*x5508))+(((196.0)*x5514))+(((196.0)*x5511))+(((-212.5)*cj1*x5513))),-1);
if(!x5518.valid){
continue;
}
CheckValue<IkReal> x5519=IKPowWithIntegerCheck(((((-1.0)*x5510))+(((-1.0)*x5513))),-1);
if(!x5519.valid){
continue;
}
if( IKabs(((x5518.value)*(((((-1.0)*x5510*x5517))+(((-1.0)*x5510*x5516))+(((-1.0)*x5513*x5516))+(((-1.0)*x5513*x5517))+(((67.0)*x5512))+(((67.0)*x5515))+(((-1.0)*x5509*x5513))+(((-1.0)*x5509*x5510)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5519.value)*(((((-1.0)*x5512))+(((-1.0)*x5515)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5518.value)*(((((-1.0)*x5510*x5517))+(((-1.0)*x5510*x5516))+(((-1.0)*x5513*x5516))+(((-1.0)*x5513*x5517))+(((67.0)*x5512))+(((67.0)*x5515))+(((-1.0)*x5509*x5513))+(((-1.0)*x5509*x5510))))))+IKsqr(((x5519.value)*(((((-1.0)*x5512))+(((-1.0)*x5515))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5518.value)*(((((-1.0)*x5510*x5517))+(((-1.0)*x5510*x5516))+(((-1.0)*x5513*x5516))+(((-1.0)*x5513*x5517))+(((67.0)*x5512))+(((67.0)*x5515))+(((-1.0)*x5509*x5513))+(((-1.0)*x5509*x5510))))), ((x5519.value)*(((((-1.0)*x5512))+(((-1.0)*x5515))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5520=IKcos(j0);
IkReal x5521=IKsin(j0);
IkReal x5522=((0.1)*sj5);
IkReal x5523=(cj5*r11);
IkReal x5524=(cj5*r01);
IkReal x5525=((0.392)*cj2);
IkReal x5526=((1.0)*cj2);
IkReal x5527=((0.392)*sj2);
IkReal x5528=((1.0)*cj1*sj2);
IkReal x5529=(cj1*x5520);
IkReal x5530=(cj1*x5521);
IkReal x5531=(sj1*x5520);
IkReal x5532=(sj1*x5521);
evalcond[0]=(((r00*sj5))+x5524+(((-1.0)*x5526*x5531))+(((-1.0)*x5520*x5528)));
evalcond[1]=(x5523+((r10*sj5))+(((-1.0)*x5526*x5532))+(((-1.0)*x5521*x5528)));
evalcond[2]=((((-0.134)*x5521))+(((-1.0)*x5527*x5531))+(((-1.0)*px))+(((-0.1)*x5524))+(((-1.0)*r00*x5522))+((x5525*x5529))+(((0.425)*x5529)));
evalcond[3]=((((-1.0)*r10*x5522))+(((-1.0)*x5527*x5532))+(((-1.0)*py))+(((0.134)*x5520))+(((-0.1)*x5523))+(((0.425)*x5530))+((x5525*x5530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5533=((1.0)*cj5);
IkReal x5534=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5533)));
j4eval[0]=x5534;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5533)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5535=((1.0)*cj5);
IkReal x5536=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5535)));
j4eval[0]=x5536;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5535))))));
j4eval[2]=IKsign(x5536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5537=((1.0)*sj0);
IkReal x5538=((1.0)*cj0);
IkReal x5539=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5539;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5538))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5537)))))+(IKabs(((((-1.0)*r02*x5538))+(((-1.0)*r12*x5537))))));
j4eval[2]=IKsign(x5539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5540=((-1.0)*r20);
IkReal x5542 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5542)==0){
continue;
}
IkReal x5541=pow(x5542,-0.5);
CheckValue<IkReal> x5543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5540),IKFAST_ATAN2_MAGTHRESH);
if(!x5543.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5543.value));
IkReal gconst115=(r21*x5541);
IkReal gconst116=(x5540*x5541);
CheckValue<IkReal> x5544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5544.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5544.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5545=((-1.0)*r20);
IkReal x5546=x5541;
CheckValue<IkReal> x5548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5545),IKFAST_ATAN2_MAGTHRESH);
if(!x5548.valid){
continue;
}
IkReal x5547=((-1.0)*(x5548.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5547;
IkReal gconst114=x5547;
IkReal gconst115=(r21*x5546);
IkReal gconst116=(x5545*x5546);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5549=((-1.0)*r20);
IkReal x5550=x5541;
CheckValue<IkReal> x5552 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5549),IKFAST_ATAN2_MAGTHRESH);
if(!x5552.valid){
continue;
}
IkReal x5551=((-1.0)*(x5552.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5551;
IkReal gconst114=x5551;
IkReal gconst115=(r21*x5550);
IkReal gconst116=(x5549*x5550);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5553=((-1.0)*r20);
IkReal x5554=x5541;
CheckValue<IkReal> x5556 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5553),IKFAST_ATAN2_MAGTHRESH);
if(!x5556.valid){
continue;
}
IkReal x5555=((-1.0)*(x5556.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5555;
IkReal gconst114=x5555;
IkReal gconst115=(r21*x5554);
IkReal gconst116=(x5553*x5554);
IkReal x5557=((1.0)*(r22*r22));
CheckValue<IkReal> x5561=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5557))),-1);
if(!x5561.valid){
continue;
}
IkReal x5558=x5561.value;
IkReal x5559=((1.0)*x5558);
IkReal x5560=((((-1.0)*x5559*(r20*r20*r20*r20)))+(((-2.0)*x5558*(r20*r20)*(r21*r21)))+(((-1.0)*x5559*(r21*r21*r21*r21)))+(((-1.0)*x5557)));
j4eval[0]=x5560;
j4eval[1]=IKsign(x5560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5562=(cj2*sj1);
IkReal x5563=(gconst115*r21);
IkReal x5564=(cj1*sj2);
IkReal x5565=((1.0)*gconst116*r20);
CheckValue<IkReal> x5566=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5563*x5563)))+(((-1.0)*gconst116*r20*x5565))+(((2.0)*gconst116*r20*x5563))+(((-1.0)*(r22*r22))))),-1);
if(!x5566.valid){
continue;
}
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal((((r22*x5564))+((r22*x5562)))),IkReal(((((-1.0)*x5564*x5565))+((x5562*x5563))+((x5563*x5564))+(((-1.0)*x5562*x5565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5566.value)))+(x5567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5568=IKsin(j4);
IkReal x5569=IKcos(j4);
IkReal x5570=(sj1*sj2);
IkReal x5571=((1.0)*x5569);
IkReal x5572=((1.0)*cj1*cj2);
IkReal x5573=(gconst115*x5568);
IkReal x5574=(gconst115*x5569);
IkReal x5575=((1.0)*gconst116*x5568);
evalcond[0]=(((r21*x5573))+(((-1.0)*r20*x5575))+(((-1.0)*r22*x5571)));
evalcond[1]=(cj0+(((-1.0)*r10*x5575))+(((-1.0)*r12*x5571))+((r11*x5573)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5571))+(((-1.0)*r00*x5575))+((r01*x5573)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5568))+((r21*x5574))+(((-1.0)*gconst116*r20*x5571)));
evalcond[4]=(((cj0*x5570))+((r02*x5568))+(((-1.0)*gconst116*r00*x5571))+(((-1.0)*cj0*x5572))+((r01*x5574)));
evalcond[5]=((((-1.0)*sj0*x5572))+((r11*x5574))+((sj0*x5570))+(((-1.0)*gconst116*r10*x5571))+((r12*x5568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5576=((1.0)*gconst116);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
CheckValue<IkReal> x5578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5576))+(((-1.0)*gconst115*r10)))),-1);
if(!x5578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5577.value)+(((1.5707963267949)*(x5578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5579=IKsin(j4);
IkReal x5580=IKcos(j4);
IkReal x5581=(sj1*sj2);
IkReal x5582=((1.0)*x5580);
IkReal x5583=((1.0)*cj1*cj2);
IkReal x5584=(gconst115*x5579);
IkReal x5585=(gconst115*x5580);
IkReal x5586=((1.0)*gconst116*x5579);
evalcond[0]=(((r21*x5584))+(((-1.0)*r20*x5586))+(((-1.0)*r22*x5582)));
evalcond[1]=((((-1.0)*r12*x5582))+cj0+((r11*x5584))+(((-1.0)*r10*x5586)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5582))+(((-1.0)*r00*x5586))+((r01*x5584)));
evalcond[3]=(((cj2*sj1))+((r21*x5585))+((cj1*sj2))+((r22*x5579))+(((-1.0)*gconst116*r20*x5582)));
evalcond[4]=(((r02*x5579))+(((-1.0)*cj0*x5583))+((cj0*x5581))+(((-1.0)*gconst116*r00*x5582))+((r01*x5585)));
evalcond[5]=(((r11*x5585))+((sj0*x5581))+(((-1.0)*gconst116*r10*x5582))+((r12*x5579))+(((-1.0)*sj0*x5583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5587=((1.0)*gconst116);
CheckValue<IkReal> x5588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5588.valid){
continue;
}
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5587)))),-1);
if(!x5589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5588.value)+(((1.5707963267949)*(x5589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5590=IKsin(j4);
IkReal x5591=IKcos(j4);
IkReal x5592=(sj1*sj2);
IkReal x5593=((1.0)*x5591);
IkReal x5594=((1.0)*cj1*cj2);
IkReal x5595=(gconst115*x5590);
IkReal x5596=(gconst115*x5591);
IkReal x5597=((1.0)*gconst116*x5590);
evalcond[0]=(((r21*x5595))+(((-1.0)*r20*x5597))+(((-1.0)*r22*x5593)));
evalcond[1]=((((-1.0)*r12*x5593))+cj0+((r11*x5595))+(((-1.0)*r10*x5597)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5593))+(((-1.0)*r00*x5597))+((r01*x5595)));
evalcond[3]=(((r21*x5596))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5593))+((r22*x5590)));
evalcond[4]=((((-1.0)*cj0*x5594))+((cj0*x5592))+((r02*x5590))+(((-1.0)*gconst116*r00*x5593))+((r01*x5596)));
evalcond[5]=(((sj0*x5592))+((r11*x5596))+((r12*x5590))+(((-1.0)*gconst116*r10*x5593))+(((-1.0)*sj0*x5594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5598=((-1.0)*r21);
IkReal x5600 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5600)==0){
continue;
}
IkReal x5599=pow(x5600,-0.5);
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal(x5598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5601.value))));
IkReal gconst118=(x5598*x5599);
IkReal gconst119=((1.0)*r20*x5599);
CheckValue<IkReal> x5602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5602.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5603=((-1.0)*r21);
CheckValue<IkReal> x5606 = IKatan2WithCheck(IkReal(x5603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5606.valid){
continue;
}
IkReal x5604=((1.0)*(x5606.value));
IkReal x5605=x5599;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5604)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5604)));
IkReal gconst118=(x5603*x5605);
IkReal gconst119=((1.0)*r20*x5605);
IkReal x5607=r22*r22;
IkReal x5608=((1.0)*x5607);
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(((-1.0)+x5607),-1);
if(!x5612.valid){
continue;
}
IkReal x5609=x5612.value;
if((((1.0)+(((-1.0)*x5608)))) < -0.00001)
continue;
IkReal x5610=IKsqrt(((1.0)+(((-1.0)*x5608))));
IkReal x5611=(cj0*x5609*x5610);
j4eval[0]=((IKabs((x5611+(((-1.0)*x5608*x5611)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5613=((-1.0)*r21);
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal(x5613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
IkReal x5614=((1.0)*(x5616.value));
IkReal x5615=x5599;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5614)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5614)));
IkReal gconst118=(x5613*x5615);
IkReal gconst119=((1.0)*r20*x5615);
IkReal x5617=r22*r22;
IkReal x5618=((1.0)*x5617);
CheckValue<IkReal> x5622=IKPowWithIntegerCheck(((-1.0)+x5617),-1);
if(!x5622.valid){
continue;
}
IkReal x5619=x5622.value;
if((((1.0)+(((-1.0)*x5618)))) < -0.00001)
continue;
IkReal x5620=IKsqrt(((1.0)+(((-1.0)*x5618))));
IkReal x5621=(sj0*x5619*x5620);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5621+(((-1.0)*x5618*x5621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5623=((-1.0)*r21);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(x5623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
IkReal x5624=((1.0)*(x5626.value));
IkReal x5625=x5599;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5624)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5624)));
IkReal gconst118=(x5623*x5625);
IkReal gconst119=((1.0)*r20*x5625);
IkReal x5627=r22*r22;
IkReal x5628=(r12*sj0);
IkReal x5629=(cj0*r02);
CheckValue<IkReal> x5633=IKPowWithIntegerCheck(((-1.0)+x5627),-1);
if(!x5633.valid){
continue;
}
IkReal x5630=x5633.value;
if((((1.0)+(((-1.0)*x5627)))) < -0.00001)
continue;
IkReal x5631=IKsqrt(((1.0)+(((-1.0)*x5627))));
IkReal x5632=(r22*x5630*x5631);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5629))+(((-1.0)*x5628)))))+(IKabs((((x5629*x5632))+((x5628*x5632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5634=((1.0)*sj0);
IkReal x5635=((1.0)*gconst118);
CheckValue<IkReal> x5636 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5634))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5634))+(((-1.0)*cj0*r01*x5635))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5636.valid){
continue;
}
CheckValue<IkReal> x5637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5635)))),-1);
if(!x5637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5636.value)+(((1.5707963267949)*(x5637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5638=IKsin(j4);
IkReal x5639=IKcos(j4);
IkReal x5640=(gconst118*r01);
IkReal x5641=(sj1*sj2);
IkReal x5642=(gconst119*r20);
IkReal x5643=(gconst119*r10);
IkReal x5644=(gconst119*r00);
IkReal x5645=(gconst118*r21);
IkReal x5646=(gconst118*r11);
IkReal x5647=((1.0)*x5639);
IkReal x5648=((1.0)*cj1*cj2);
IkReal x5649=((1.0)*x5638);
evalcond[0]=((((-1.0)*r22*x5647))+(((-1.0)*x5642*x5649))+((x5638*x5645)));
evalcond[1]=(cj0+(((-1.0)*r12*x5647))+((x5638*x5646))+(((-1.0)*x5643*x5649)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5644*x5649))+(((-1.0)*r02*x5647))+((x5638*x5640)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5642*x5647))+((x5639*x5645))+((cj1*sj2))+((r22*x5638)));
evalcond[4]=(((cj0*x5641))+((x5639*x5640))+(((-1.0)*x5644*x5647))+(((-1.0)*cj0*x5648))+((r02*x5638)));
evalcond[5]=(((r12*x5638))+((x5639*x5646))+(((-1.0)*sj0*x5648))+((sj0*x5641))+(((-1.0)*x5643*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5650=((1.0)*gconst119);
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5650))+(((-1.0)*gconst118*r10)))),-1);
if(!x5651.valid){
continue;
}
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5651.value)))+(x5652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5653=IKsin(j4);
IkReal x5654=IKcos(j4);
IkReal x5655=(gconst118*r01);
IkReal x5656=(sj1*sj2);
IkReal x5657=(gconst119*r20);
IkReal x5658=(gconst119*r10);
IkReal x5659=(gconst119*r00);
IkReal x5660=(gconst118*r21);
IkReal x5661=(gconst118*r11);
IkReal x5662=((1.0)*x5654);
IkReal x5663=((1.0)*cj1*cj2);
IkReal x5664=((1.0)*x5653);
evalcond[0]=((((-1.0)*r22*x5662))+(((-1.0)*x5657*x5664))+((x5653*x5660)));
evalcond[1]=(cj0+(((-1.0)*r12*x5662))+((x5653*x5661))+(((-1.0)*x5658*x5664)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5662))+(((-1.0)*x5659*x5664))+((x5653*x5655)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5657*x5662))+((cj1*sj2))+((r22*x5653))+((x5654*x5660)));
evalcond[4]=(((cj0*x5656))+((x5654*x5655))+(((-1.0)*x5659*x5662))+(((-1.0)*cj0*x5663))+((r02*x5653)));
evalcond[5]=(((sj0*x5656))+((r12*x5653))+(((-1.0)*sj0*x5663))+((x5654*x5661))+(((-1.0)*x5658*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5665=((1.0)*gconst119);
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5665))+(((-1.0)*gconst118*r00)))),-1);
if(!x5666.valid){
continue;
}
CheckValue<IkReal> x5667 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5666.value)))+(x5667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5668=IKsin(j4);
IkReal x5669=IKcos(j4);
IkReal x5670=(gconst118*r01);
IkReal x5671=(sj1*sj2);
IkReal x5672=(gconst119*r20);
IkReal x5673=(gconst119*r10);
IkReal x5674=(gconst119*r00);
IkReal x5675=(gconst118*r21);
IkReal x5676=(gconst118*r11);
IkReal x5677=((1.0)*x5669);
IkReal x5678=((1.0)*cj1*cj2);
IkReal x5679=((1.0)*x5668);
evalcond[0]=((((-1.0)*x5672*x5679))+((x5668*x5675))+(((-1.0)*r22*x5677)));
evalcond[1]=(((x5668*x5676))+cj0+(((-1.0)*r12*x5677))+(((-1.0)*x5673*x5679)));
evalcond[2]=(((x5668*x5670))+(((-1.0)*sj0))+(((-1.0)*x5674*x5679))+(((-1.0)*r02*x5677)));
evalcond[3]=((((-1.0)*x5672*x5677))+((cj2*sj1))+((r22*x5668))+((cj1*sj2))+((x5669*x5675)));
evalcond[4]=(((cj0*x5671))+((r02*x5668))+(((-1.0)*cj0*x5678))+((x5669*x5670))+(((-1.0)*x5674*x5677)));
evalcond[5]=(((sj0*x5671))+((x5669*x5676))+((r12*x5668))+(((-1.0)*x5673*x5677))+(((-1.0)*sj0*x5678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5680=((-1.0)*r10);
IkReal x5682 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5682)==0){
continue;
}
IkReal x5681=pow(x5682,-0.5);
CheckValue<IkReal> x5683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5680),IKFAST_ATAN2_MAGTHRESH);
if(!x5683.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5683.value));
IkReal gconst121=(r11*x5681);
IkReal gconst122=(x5680*x5681);
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5684.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5685=((-1.0)*r10);
IkReal x5686=x5681;
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5685),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
IkReal x5687=((-1.0)*(x5688.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5687;
IkReal gconst120=x5687;
IkReal gconst121=(r11*x5686);
IkReal gconst122=(x5685*x5686);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5689=((1.0)*sj0);
IkReal x5690=((1.0)*gconst121);
CheckValue<IkReal> x5691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5690)))),-1);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5689)))),IkReal(((((-1.0)*cj0*r01*x5690))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5689))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5691.value)))+(x5692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j4);
IkReal x5694=IKcos(j4);
IkReal x5695=(gconst121*r11);
IkReal x5696=(sj1*sj2);
IkReal x5697=(gconst122*r00);
IkReal x5698=(gconst122*r10);
IkReal x5699=(gconst122*r20);
IkReal x5700=((1.0)*x5694);
IkReal x5701=((1.0)*cj1*cj2);
IkReal x5702=((1.0)*x5693);
IkReal x5703=(gconst121*x5693);
IkReal x5704=(gconst121*x5694);
evalcond[0]=((((-1.0)*r22*x5700))+(((-1.0)*x5699*x5702))+((r21*x5703)));
evalcond[1]=((((-1.0)*r12*x5700))+((x5693*x5695))+cj0+(((-1.0)*x5698*x5702)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5697*x5702))+((r01*x5703))+(((-1.0)*r02*x5700)));
evalcond[3]=(((cj2*sj1))+((r22*x5693))+((cj1*sj2))+(((-1.0)*x5699*x5700))+((r21*x5704)));
evalcond[4]=((((-1.0)*x5697*x5700))+((r02*x5693))+((r01*x5704))+(((-1.0)*cj0*x5701))+((cj0*x5696)));
evalcond[5]=(((x5694*x5695))+(((-1.0)*x5698*x5700))+((sj0*x5696))+(((-1.0)*sj0*x5701))+((r12*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5705=((1.0)*gconst122);
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5705)))),-1);
if(!x5706.valid){
continue;
}
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5705))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5706.value)))+(x5707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5708=IKsin(j4);
IkReal x5709=IKcos(j4);
IkReal x5710=(gconst121*r11);
IkReal x5711=(sj1*sj2);
IkReal x5712=(gconst122*r00);
IkReal x5713=(gconst122*r10);
IkReal x5714=(gconst122*r20);
IkReal x5715=((1.0)*x5709);
IkReal x5716=((1.0)*cj1*cj2);
IkReal x5717=((1.0)*x5708);
IkReal x5718=(gconst121*x5708);
IkReal x5719=(gconst121*x5709);
evalcond[0]=((((-1.0)*r22*x5715))+(((-1.0)*x5714*x5717))+((r21*x5718)));
evalcond[1]=(cj0+(((-1.0)*x5713*x5717))+(((-1.0)*r12*x5715))+((x5708*x5710)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5712*x5717))+((r01*x5718))+(((-1.0)*r02*x5715)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5714*x5715))+((cj1*sj2))+((r22*x5708))+((r21*x5719)));
evalcond[4]=((((-1.0)*cj0*x5716))+((r02*x5708))+((cj0*x5711))+(((-1.0)*x5712*x5715))+((r01*x5719)));
evalcond[5]=((((-1.0)*x5713*x5715))+((r12*x5708))+((sj0*x5711))+(((-1.0)*sj0*x5716))+((x5709*x5710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5720=((-1.0)*r11);
IkReal x5722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5722)==0){
continue;
}
IkReal x5721=pow(x5722,-0.5);
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(x5720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5723.value))));
IkReal gconst124=(x5720*x5721);
IkReal gconst125=((1.0)*r10*x5721);
CheckValue<IkReal> x5724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5725=((-1.0)*r11);
CheckValue<IkReal> x5728 = IKatan2WithCheck(IkReal(x5725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5728.valid){
continue;
}
IkReal x5726=((1.0)*(x5728.value));
IkReal x5727=x5721;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5726)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5726)));
IkReal gconst124=(x5725*x5727);
IkReal gconst125=((1.0)*r10*x5727);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5729=((-1.0)*r11);
CheckValue<IkReal> x5732 = IKatan2WithCheck(IkReal(x5729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5732.valid){
continue;
}
IkReal x5730=((1.0)*(x5732.value));
IkReal x5731=x5721;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5730)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5730)));
IkReal gconst124=(x5729*x5731);
IkReal gconst125=((1.0)*r10*x5731);
IkReal x5733=r12*r12;
IkReal x5734=((1.0)*sj0);
IkReal x5735=(cj0*r02);
IkReal x5736=x5721;
j4eval[0]=((IKabs(((((-1.0)*x5734*x5736))+((sj0*x5733*x5736))+((r12*x5735*x5736)))))+(IKabs(((((-1.0)*r12*x5734))+(((-1.0)*x5735))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5737=((-1.0)*r11);
CheckValue<IkReal> x5740 = IKatan2WithCheck(IkReal(x5737),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5740.valid){
continue;
}
IkReal x5738=((1.0)*(x5740.value));
IkReal x5739=x5721;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5738)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5738)));
IkReal gconst124=(x5737*x5739);
IkReal gconst125=((1.0)*r10*x5739);
IkReal x5741=r12*r12;
IkReal x5742=((1.0)+(((-1.0)*x5741)));
IkReal x5743=(cj2*r22*sj1);
IkReal x5744=(cj1*r22*sj2);
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(x5742,-1);
if(!x5751.valid){
continue;
}
IkReal x5745=x5751.value;
CheckValue<IkReal> x5752=IKPowWithIntegerCheck(((-1.0)+x5741),-1);
if(!x5752.valid){
continue;
}
IkReal x5746=x5752.value;
IkReal x5747=((1.0)*x5745);
if((x5742) < -0.00001)
continue;
IkReal x5748=IKsqrt(x5742);
IkReal x5749=((1.0)*r12*x5746*x5748);
IkReal x5750=((((-2.0)*r10*r11*r20*r21*x5745))+(((-1.0)*x5747*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5747*(r10*r10)*(r20*r20))));
j4eval[0]=x5750;
j4eval[1]=IKsign(x5750);
j4eval[2]=((IKabs((x5743+x5744)))+(IKabs(((((-1.0)*x5744*x5749))+(((-1.0)*x5743*x5749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5753=(gconst124*r21);
IkReal x5754=(cj1*sj2);
IkReal x5755=(cj2*sj1);
IkReal x5756=(gconst125*r20);
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5756*x5756)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5753*x5753)))+(((2.0)*x5753*x5756)))),-1);
if(!x5757.valid){
continue;
}
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal((((r22*x5755))+((r22*x5754)))),IkReal(((((-1.0)*x5754*x5756))+(((-1.0)*x5755*x5756))+((x5753*x5755))+((x5753*x5754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5757.value)))+(x5758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5759=IKsin(j4);
IkReal x5760=IKcos(j4);
IkReal x5761=(sj1*sj2);
IkReal x5762=(gconst125*r20);
IkReal x5763=(gconst124*r01);
IkReal x5764=(gconst125*r00);
IkReal x5765=(gconst125*r10);
IkReal x5766=((1.0)*x5760);
IkReal x5767=((1.0)*cj1*cj2);
IkReal x5768=((1.0)*x5759);
IkReal x5769=(gconst124*x5759);
IkReal x5770=(gconst124*x5760);
evalcond[0]=(((r21*x5769))+(((-1.0)*x5762*x5768))+(((-1.0)*r22*x5766)));
evalcond[1]=(cj0+(((-1.0)*r12*x5766))+((r11*x5769))+(((-1.0)*x5765*x5768)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5766))+(((-1.0)*x5764*x5768))+((x5759*x5763)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5770))+(((-1.0)*x5762*x5766))+((r22*x5759)));
evalcond[4]=((((-1.0)*cj0*x5767))+((cj0*x5761))+((x5760*x5763))+((r02*x5759))+(((-1.0)*x5764*x5766)));
evalcond[5]=((((-1.0)*sj0*x5767))+((r11*x5770))+(((-1.0)*x5765*x5766))+((r12*x5759))+((sj0*x5761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5771=((1.0)*sj0);
IkReal x5772=((1.0)*cj0);
CheckValue<IkReal> x5773 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5771))+(((-1.0)*r02*x5772)))),IkReal(((((-1.0)*gconst124*r11*x5771))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5772))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5773.valid){
continue;
}
CheckValue<IkReal> x5774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5773.value)+(((1.5707963267949)*(x5774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5775=IKsin(j4);
IkReal x5776=IKcos(j4);
IkReal x5777=(sj1*sj2);
IkReal x5778=(gconst125*r20);
IkReal x5779=(gconst124*r01);
IkReal x5780=(gconst125*r00);
IkReal x5781=(gconst125*r10);
IkReal x5782=((1.0)*x5776);
IkReal x5783=((1.0)*cj1*cj2);
IkReal x5784=((1.0)*x5775);
IkReal x5785=(gconst124*x5775);
IkReal x5786=(gconst124*x5776);
evalcond[0]=(((r21*x5785))+(((-1.0)*x5778*x5784))+(((-1.0)*r22*x5782)));
evalcond[1]=(cj0+((r11*x5785))+(((-1.0)*r12*x5782))+(((-1.0)*x5781*x5784)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5780*x5784))+((x5775*x5779))+(((-1.0)*r02*x5782)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5786))+((r22*x5775))+(((-1.0)*x5778*x5782)));
evalcond[4]=(((x5776*x5779))+((cj0*x5777))+(((-1.0)*x5780*x5782))+((r02*x5775))+(((-1.0)*cj0*x5783)));
evalcond[5]=(((r11*x5786))+((r12*x5775))+(((-1.0)*x5781*x5782))+(((-1.0)*sj0*x5783))+((sj0*x5777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5787=((1.0)*gconst125);
CheckValue<IkReal> x5788 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5787))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5788.valid){
continue;
}
CheckValue<IkReal> x5789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5787)))),-1);
if(!x5789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5788.value)+(((1.5707963267949)*(x5789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5790=IKsin(j4);
IkReal x5791=IKcos(j4);
IkReal x5792=(sj1*sj2);
IkReal x5793=(gconst125*r20);
IkReal x5794=(gconst124*r01);
IkReal x5795=(gconst125*r00);
IkReal x5796=(gconst125*r10);
IkReal x5797=((1.0)*x5791);
IkReal x5798=((1.0)*cj1*cj2);
IkReal x5799=((1.0)*x5790);
IkReal x5800=(gconst124*x5790);
IkReal x5801=(gconst124*x5791);
evalcond[0]=((((-1.0)*x5793*x5799))+((r21*x5800))+(((-1.0)*r22*x5797)));
evalcond[1]=(cj0+((r11*x5800))+(((-1.0)*x5796*x5799))+(((-1.0)*r12*x5797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5795*x5799))+(((-1.0)*r02*x5797))+((x5790*x5794)));
evalcond[3]=((((-1.0)*x5793*x5797))+((cj2*sj1))+((cj1*sj2))+((r21*x5801))+((r22*x5790)));
evalcond[4]=(((x5791*x5794))+(((-1.0)*x5795*x5797))+(((-1.0)*cj0*x5798))+((cj0*x5792))+((r02*x5790)));
evalcond[5]=(((r12*x5790))+((r11*x5801))+((sj0*x5792))+(((-1.0)*x5796*x5797))+(((-1.0)*sj0*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5802=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5802;
j4eval[1]=IKsign(x5802);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5803=((1.0)*cj5);
IkReal x5804=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5803)));
j4eval[0]=x5804;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5803))+((r21*sj5))))));
j4eval[2]=IKsign(x5804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5805=cj5*cj5;
IkReal x5806=r11*r11;
IkReal x5807=(cj5*r10);
IkReal x5808=(r11*sj5);
IkReal x5809=(((x5805*x5806))+(((-1.0)*x5805*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5807*x5808))+(((-1.0)*x5806)));
j4eval[0]=x5809;
j4eval[1]=IKsign(x5809);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5807))+x5808))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5810=cj5*cj5;
IkReal x5811=r11*r11;
IkReal x5812=(cj5*r10);
IkReal x5813=(r11*sj5);
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(((((-1.0)*x5812))+x5813)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5811))+((x5810*x5811))+(((-1.0)*(r12*r12)))+(((-1.0)*x5810*(r10*r10)))+(((2.0)*x5812*x5813)))),-1);
if(!x5815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5814.value)+(((1.5707963267949)*(x5815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5816=IKcos(j4);
IkReal x5817=IKsin(j4);
IkReal x5818=(cj5*r00);
IkReal x5819=(cj5*r10);
IkReal x5820=(r21*sj5);
IkReal x5821=(cj5*r20);
IkReal x5822=((1.0)*x5816);
IkReal x5823=((1.0)*x5817);
IkReal x5824=(sj5*x5817);
IkReal x5825=(sj5*x5816);
evalcond[0]=(((r11*x5825))+((r12*x5817))+(((-1.0)*x5819*x5822)));
evalcond[1]=((((-1.0)*r22*x5822))+(((-1.0)*x5821*x5823))+((x5817*x5820)));
evalcond[2]=((((-1.0)*r02*x5822))+(((-1.0)*x5818*x5823))+((r01*x5824)));
evalcond[3]=((1.0)+((r11*x5824))+(((-1.0)*r12*x5822))+(((-1.0)*x5819*x5823)));
evalcond[4]=(((cj2*sj1))+((x5816*x5820))+((r22*x5817))+(((-1.0)*x5821*x5822))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x5818*x5822))+((r02*x5817))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5826=((1.0)*cj5);
CheckValue<IkReal> x5827 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5826))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5827.valid){
continue;
}
CheckValue<IkReal> x5828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5826))+(((-1.0)*r00*sj5)))),-1);
if(!x5828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5827.value)+(((1.5707963267949)*(x5828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5829=IKcos(j4);
IkReal x5830=IKsin(j4);
IkReal x5831=(cj5*r00);
IkReal x5832=(cj5*r10);
IkReal x5833=(r21*sj5);
IkReal x5834=(cj5*r20);
IkReal x5835=((1.0)*x5829);
IkReal x5836=((1.0)*x5830);
IkReal x5837=(sj5*x5830);
IkReal x5838=(sj5*x5829);
evalcond[0]=((((-1.0)*x5832*x5835))+((r12*x5830))+((r11*x5838)));
evalcond[1]=((((-1.0)*r22*x5835))+((x5830*x5833))+(((-1.0)*x5834*x5836)));
evalcond[2]=((((-1.0)*r02*x5835))+(((-1.0)*x5831*x5836))+((r01*x5837)));
evalcond[3]=((1.0)+(((-1.0)*x5832*x5836))+((r11*x5837))+(((-1.0)*r12*x5835)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5829*x5833))+((r22*x5830))+(((-1.0)*x5834*x5835)));
evalcond[5]=(((r02*x5830))+(((-1.0)*x5831*x5835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5839=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5839.valid){
continue;
}
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5839.value)))+(x5840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5841=IKcos(j4);
IkReal x5842=IKsin(j4);
IkReal x5843=(cj5*r00);
IkReal x5844=(cj5*r10);
IkReal x5845=(r21*sj5);
IkReal x5846=(cj5*r20);
IkReal x5847=((1.0)*x5841);
IkReal x5848=((1.0)*x5842);
IkReal x5849=(sj5*x5842);
IkReal x5850=(sj5*x5841);
evalcond[0]=(((r11*x5850))+((r12*x5842))+(((-1.0)*x5844*x5847)));
evalcond[1]=(((x5842*x5845))+(((-1.0)*x5846*x5848))+(((-1.0)*r22*x5847)));
evalcond[2]=((((-1.0)*r02*x5847))+((r01*x5849))+(((-1.0)*x5843*x5848)));
evalcond[3]=((1.0)+((r11*x5849))+(((-1.0)*x5844*x5848))+(((-1.0)*r12*x5847)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5841*x5845))+(((-1.0)*x5846*x5847))+((r22*x5842)));
evalcond[5]=(((r01*x5850))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5843*x5847))+((r02*x5842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5851=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5851;
j4eval[1]=IKsign(x5851);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5852=((1.0)*cj5);
IkReal x5853=((((-1.0)*r21*x5852))+(((-1.0)*r20*sj5)));
j4eval[0]=x5853;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5852)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5854=cj5*cj5;
IkReal x5855=r11*r11;
IkReal x5856=(r11*sj5);
IkReal x5857=(cj5*r10);
IkReal x5858=((r12*r12)+((x5854*(r10*r10)))+(((-1.0)*x5854*x5855))+(((-2.0)*x5856*x5857))+x5855);
j4eval[0]=x5858;
j4eval[1]=IKsign(x5858);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5857))+x5856))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5859=cj5*cj5;
IkReal x5860=r11*r11;
IkReal x5861=(cj5*r10);
IkReal x5862=(r11*sj5);
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5859*x5860))+(((-2.0)*x5861*x5862))+((x5859*(r10*r10)))+x5860)),-1);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(((((-1.0)*x5861))+x5862)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5863.value)))+(x5864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5865=IKcos(j4);
IkReal x5866=IKsin(j4);
IkReal x5867=(cj5*r00);
IkReal x5868=(cj5*r10);
IkReal x5869=(r21*sj5);
IkReal x5870=(cj5*r20);
IkReal x5871=((1.0)*x5865);
IkReal x5872=((1.0)*x5866);
IkReal x5873=(sj5*x5866);
IkReal x5874=(sj5*x5865);
evalcond[0]=(((r11*x5874))+((r12*x5866))+(((-1.0)*x5868*x5871)));
evalcond[1]=((((-1.0)*r22*x5871))+((x5866*x5869))+(((-1.0)*x5870*x5872)));
evalcond[2]=((((-1.0)*r02*x5871))+((r01*x5873))+(((-1.0)*x5867*x5872)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5871))+((r11*x5873))+(((-1.0)*x5868*x5872)));
evalcond[4]=(((cj2*sj1))+((r22*x5866))+((cj1*sj2))+(((-1.0)*x5870*x5871))+((x5865*x5869)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5866))+((cj1*cj2))+((r01*x5874))+(((-1.0)*x5867*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5875=((1.0)*cj5);
CheckValue<IkReal> x5876 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5876.valid){
continue;
}
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5875))+(((-1.0)*r20*sj5)))),-1);
if(!x5877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5876.value)+(((1.5707963267949)*(x5877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5878=IKcos(j4);
IkReal x5879=IKsin(j4);
IkReal x5880=(cj5*r00);
IkReal x5881=(cj5*r10);
IkReal x5882=(r21*sj5);
IkReal x5883=(cj5*r20);
IkReal x5884=((1.0)*x5878);
IkReal x5885=((1.0)*x5879);
IkReal x5886=(sj5*x5879);
IkReal x5887=(sj5*x5878);
evalcond[0]=(((r11*x5887))+((r12*x5879))+(((-1.0)*x5881*x5884)));
evalcond[1]=((((-1.0)*x5883*x5885))+((x5879*x5882))+(((-1.0)*r22*x5884)));
evalcond[2]=(((r01*x5886))+(((-1.0)*x5880*x5885))+(((-1.0)*r02*x5884)));
evalcond[3]=((-1.0)+((r11*x5886))+(((-1.0)*r12*x5884))+(((-1.0)*x5881*x5885)));
evalcond[4]=((((-1.0)*x5883*x5884))+((cj2*sj1))+((cj1*sj2))+((r22*x5879))+((x5878*x5882)));
evalcond[5]=(((r01*x5887))+(((-1.0)*sj1*sj2))+(((-1.0)*x5880*x5884))+((r02*x5879))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5888.value)+(((1.5707963267949)*(x5889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKcos(j4);
IkReal x5891=IKsin(j4);
IkReal x5892=(cj5*r00);
IkReal x5893=(cj5*r10);
IkReal x5894=(r21*sj5);
IkReal x5895=(cj5*r20);
IkReal x5896=((1.0)*x5890);
IkReal x5897=((1.0)*x5891);
IkReal x5898=(sj5*x5891);
IkReal x5899=(sj5*x5890);
evalcond[0]=((((-1.0)*x5893*x5896))+((r12*x5891))+((r11*x5899)));
evalcond[1]=((((-1.0)*r22*x5896))+(((-1.0)*x5895*x5897))+((x5891*x5894)));
evalcond[2]=((((-1.0)*x5892*x5897))+(((-1.0)*r02*x5896))+((r01*x5898)));
evalcond[3]=((-1.0)+(((-1.0)*x5893*x5897))+(((-1.0)*r12*x5896))+((r11*x5898)));
evalcond[4]=(((r22*x5891))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5895*x5896))+((x5890*x5894)));
evalcond[5]=((((-1.0)*x5892*x5896))+(((-1.0)*sj1*sj2))+((r02*x5891))+((r01*x5899))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5900=((-1.0)*r00);
IkReal x5902 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5902)==0){
continue;
}
IkReal x5901=pow(x5902,-0.5);
CheckValue<IkReal> x5903 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5900),IKFAST_ATAN2_MAGTHRESH);
if(!x5903.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5903.value));
IkReal gconst127=(r01*x5901);
IkReal gconst128=(x5900*x5901);
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5905=((-1.0)*r00);
IkReal x5906=x5901;
CheckValue<IkReal> x5908 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5905),IKFAST_ATAN2_MAGTHRESH);
if(!x5908.valid){
continue;
}
IkReal x5907=((-1.0)*(x5908.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5907;
IkReal gconst126=x5907;
IkReal gconst127=(r01*x5906);
IkReal gconst128=(x5905*x5906);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5909=((1.0)*sj0);
IkReal x5910=((1.0)*gconst127);
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5909))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5910))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5910))+(((-1.0)*gconst128*r21)))),-1);
if(!x5912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5911.value)+(((1.5707963267949)*(x5912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5913=IKsin(j4);
IkReal x5914=IKcos(j4);
IkReal x5915=(gconst127*r01);
IkReal x5916=(sj1*sj2);
IkReal x5917=(gconst128*r10);
IkReal x5918=(gconst128*r00);
IkReal x5919=(gconst128*r20);
IkReal x5920=((1.0)*x5914);
IkReal x5921=((1.0)*cj1*cj2);
IkReal x5922=((1.0)*x5913);
IkReal x5923=(gconst127*x5914);
IkReal x5924=(gconst127*x5913);
evalcond[0]=((((-1.0)*r22*x5920))+((r21*x5924))+(((-1.0)*x5919*x5922)));
evalcond[1]=(cj0+((r11*x5924))+(((-1.0)*x5917*x5922))+(((-1.0)*r12*x5920)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5918*x5922))+(((-1.0)*r02*x5920))+((x5913*x5915)));
evalcond[3]=(((cj2*sj1))+((r22*x5913))+((cj1*sj2))+((r21*x5923))+(((-1.0)*x5919*x5920)));
evalcond[4]=((((-1.0)*x5918*x5920))+((r02*x5913))+((x5914*x5915))+(((-1.0)*cj0*x5921))+((cj0*x5916)));
evalcond[5]=(((r12*x5913))+((sj0*x5916))+(((-1.0)*sj0*x5921))+((r11*x5923))+(((-1.0)*x5917*x5920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5925=((1.0)*gconst128);
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5925))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
CheckValue<IkReal> x5927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5925))+(((-1.0)*gconst127*r10)))),-1);
if(!x5927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5926.value)+(((1.5707963267949)*(x5927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5928=IKsin(j4);
IkReal x5929=IKcos(j4);
IkReal x5930=(gconst127*r01);
IkReal x5931=(sj1*sj2);
IkReal x5932=(gconst128*r10);
IkReal x5933=(gconst128*r00);
IkReal x5934=(gconst128*r20);
IkReal x5935=((1.0)*x5929);
IkReal x5936=((1.0)*cj1*cj2);
IkReal x5937=((1.0)*x5928);
IkReal x5938=(gconst127*x5929);
IkReal x5939=(gconst127*x5928);
evalcond[0]=((((-1.0)*x5934*x5937))+((r21*x5939))+(((-1.0)*r22*x5935)));
evalcond[1]=(cj0+((r11*x5939))+(((-1.0)*x5932*x5937))+(((-1.0)*r12*x5935)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5935))+(((-1.0)*x5933*x5937))+((x5928*x5930)));
evalcond[3]=((((-1.0)*x5934*x5935))+((cj2*sj1))+((cj1*sj2))+((r22*x5928))+((r21*x5938)));
evalcond[4]=(((x5929*x5930))+((cj0*x5931))+(((-1.0)*x5933*x5935))+(((-1.0)*cj0*x5936))+((r02*x5928)));
evalcond[5]=((((-1.0)*sj0*x5936))+((r11*x5938))+(((-1.0)*x5932*x5935))+((r12*x5928))+((sj0*x5931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5940=((-1.0)*r01);
IkReal x5942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5942)==0){
continue;
}
IkReal x5941=pow(x5942,-0.5);
CheckValue<IkReal> x5943 = IKatan2WithCheck(IkReal(x5940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5943.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5943.value))));
IkReal gconst130=(x5940*x5941);
IkReal gconst131=((1.0)*r00*x5941);
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5944.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5945=((-1.0)*r01);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(x5945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
IkReal x5946=((1.0)*(x5948.value));
IkReal x5947=x5941;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5946)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5946)));
IkReal gconst130=(x5945*x5947);
IkReal gconst131=((1.0)*r00*x5947);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5949=((-1.0)*r01);
CheckValue<IkReal> x5952 = IKatan2WithCheck(IkReal(x5949),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5952.valid){
continue;
}
IkReal x5950=((1.0)*(x5952.value));
IkReal x5951=x5941;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5950)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5950)));
IkReal gconst130=(x5949*x5951);
IkReal gconst131=((1.0)*r00*x5951);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5953=((-1.0)*r01);
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal(x5953),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
IkReal x5954=((1.0)*(x5956.value));
IkReal x5955=x5941;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5954)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5954)));
IkReal gconst130=(x5953*x5955);
IkReal gconst131=((1.0)*r00*x5955);
IkReal x5957=r02*r02;
IkReal x5958=(r12*sj0);
IkReal x5959=((1.0)*cj0);
IkReal x5960=x5941;
j4eval[0]=((IKabs(((((-1.0)*r02*x5959))+(((-1.0)*x5958)))))+(IKabs((((r02*x5958*x5960))+(((-1.0)*x5959*x5960))+((cj0*x5957*x5960))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5961=((1.0)*sj0);
IkReal x5962=((1.0)*gconst130);
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5962))+(((-1.0)*gconst131*r21)))),-1);
if(!x5963.valid){
continue;
}
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5961)))),IkReal(((((-1.0)*gconst130*r11*x5961))+(((-1.0)*cj0*r01*x5962))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5963.value)))+(x5964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5965=IKsin(j4);
IkReal x5966=IKcos(j4);
IkReal x5967=(gconst131*r10);
IkReal x5968=(sj1*sj2);
IkReal x5969=(gconst131*r20);
IkReal x5970=(gconst131*r00);
IkReal x5971=((1.0)*x5966);
IkReal x5972=((1.0)*cj1*cj2);
IkReal x5973=(gconst130*x5965);
IkReal x5974=((1.0)*x5965);
IkReal x5975=(gconst130*x5966);
evalcond[0]=((((-1.0)*r22*x5971))+((r21*x5973))+(((-1.0)*x5969*x5974)));
evalcond[1]=(cj0+(((-1.0)*r12*x5971))+((r11*x5973))+(((-1.0)*x5967*x5974)));
evalcond[2]=((((-1.0)*r02*x5971))+(((-1.0)*sj0))+((r01*x5973))+(((-1.0)*x5970*x5974)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5965))+((r21*x5975))+(((-1.0)*x5969*x5971)));
evalcond[4]=(((r02*x5965))+((cj0*x5968))+((r01*x5975))+(((-1.0)*cj0*x5972))+(((-1.0)*x5970*x5971)));
evalcond[5]=((((-1.0)*sj0*x5972))+((r11*x5975))+((r12*x5965))+((sj0*x5968))+(((-1.0)*x5967*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5976=((1.0)*gconst131);
CheckValue<IkReal> x5977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5976))+(((-1.0)*gconst130*r10)))),-1);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5976))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5977.value)))+(x5978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5979=IKsin(j4);
IkReal x5980=IKcos(j4);
IkReal x5981=(gconst131*r10);
IkReal x5982=(sj1*sj2);
IkReal x5983=(gconst131*r20);
IkReal x5984=(gconst131*r00);
IkReal x5985=((1.0)*x5980);
IkReal x5986=((1.0)*cj1*cj2);
IkReal x5987=(gconst130*x5979);
IkReal x5988=((1.0)*x5979);
IkReal x5989=(gconst130*x5980);
evalcond[0]=(((r21*x5987))+(((-1.0)*r22*x5985))+(((-1.0)*x5983*x5988)));
evalcond[1]=((((-1.0)*r12*x5985))+cj0+((r11*x5987))+(((-1.0)*x5981*x5988)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5984*x5988))+(((-1.0)*r02*x5985))+((r01*x5987)));
evalcond[3]=(((cj2*sj1))+((r21*x5989))+((cj1*sj2))+((r22*x5979))+(((-1.0)*x5983*x5985)));
evalcond[4]=((((-1.0)*x5984*x5985))+((cj0*x5982))+(((-1.0)*cj0*x5986))+((r02*x5979))+((r01*x5989)));
evalcond[5]=(((r11*x5989))+((sj0*x5982))+(((-1.0)*sj0*x5986))+(((-1.0)*x5981*x5985))+((r12*x5979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=((1.0)*gconst131);
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5990)))),-1);
if(!x5991.valid){
continue;
}
CheckValue<IkReal> x5992 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5991.value)))+(x5992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5993=IKsin(j4);
IkReal x5994=IKcos(j4);
IkReal x5995=(gconst131*r10);
IkReal x5996=(sj1*sj2);
IkReal x5997=(gconst131*r20);
IkReal x5998=(gconst131*r00);
IkReal x5999=((1.0)*x5994);
IkReal x6000=((1.0)*cj1*cj2);
IkReal x6001=(gconst130*x5993);
IkReal x6002=((1.0)*x5993);
IkReal x6003=(gconst130*x5994);
evalcond[0]=(((r21*x6001))+(((-1.0)*x5997*x6002))+(((-1.0)*r22*x5999)));
evalcond[1]=((((-1.0)*r12*x5999))+cj0+((r11*x6001))+(((-1.0)*x5995*x6002)));
evalcond[2]=((((-1.0)*x5998*x6002))+(((-1.0)*sj0))+(((-1.0)*r02*x5999))+((r01*x6001)));
evalcond[3]=(((r21*x6003))+((cj2*sj1))+(((-1.0)*x5997*x5999))+((cj1*sj2))+((r22*x5993)));
evalcond[4]=(((r02*x5993))+(((-1.0)*cj0*x6000))+(((-1.0)*x5998*x5999))+((cj0*x5996))+((r01*x6003)));
evalcond[5]=(((r12*x5993))+(((-1.0)*sj0*x6000))+((sj0*x5996))+((r11*x6003))+(((-1.0)*x5995*x5999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6004=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6004;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6005=((1.0)*cj5);
IkReal x6006=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6005)));
j4eval[0]=x6006;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6005)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6007=cj5*cj5;
IkReal x6008=r01*r01;
IkReal x6009=(cj5*r00);
IkReal x6010=(r01*sj5);
IkReal x6011=(((x6007*(r00*r00)))+x6008+(((-2.0)*x6009*x6010))+(((-1.0)*x6007*x6008))+(r02*r02));
j4eval[0]=x6011;
j4eval[1]=IKsign(x6011);
j4eval[2]=((IKabs(r02))+(IKabs((x6010+(((-1.0)*x6009))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6012=cj5*cj5;
IkReal x6013=r01*r01;
IkReal x6014=(r01*sj5);
IkReal x6015=(cj5*r00);
CheckValue<IkReal> x6016=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6014*x6015))+x6013+((x6012*(r00*r00)))+(((-1.0)*x6012*x6013))+(r02*r02))),-1);
if(!x6016.valid){
continue;
}
CheckValue<IkReal> x6017 = IKatan2WithCheck(IkReal(((((-1.0)*x6015))+x6014)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6016.value)))+(x6017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6018=IKcos(j4);
IkReal x6019=IKsin(j4);
IkReal x6020=(cj5*r00);
IkReal x6021=(cj5*r10);
IkReal x6022=(r21*sj5);
IkReal x6023=(cj5*r20);
IkReal x6024=((1.0)*x6018);
IkReal x6025=((1.0)*x6019);
IkReal x6026=(sj5*x6019);
IkReal x6027=(sj5*x6018);
evalcond[0]=((((-1.0)*x6020*x6024))+((r01*x6027))+((r02*x6019)));
evalcond[1]=((((-1.0)*x6023*x6025))+(((-1.0)*r22*x6024))+((x6019*x6022)));
evalcond[2]=((((-1.0)*x6021*x6025))+((r11*x6026))+(((-1.0)*r12*x6024)));
evalcond[3]=((-1.0)+(((-1.0)*x6020*x6025))+((r01*x6026))+(((-1.0)*r02*x6024)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6023*x6024))+((cj1*sj2))+((x6018*x6022))+((r22*x6019)));
evalcond[5]=((((-1.0)*x6021*x6024))+((r12*x6019))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6028=((1.0)*cj5);
CheckValue<IkReal> x6029 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6029.valid){
continue;
}
CheckValue<IkReal> x6030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6028))+(((-1.0)*r10*sj5)))),-1);
if(!x6030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6029.value)+(((1.5707963267949)*(x6030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6031=IKcos(j4);
IkReal x6032=IKsin(j4);
IkReal x6033=(cj5*r00);
IkReal x6034=(cj5*r10);
IkReal x6035=(r21*sj5);
IkReal x6036=(cj5*r20);
IkReal x6037=((1.0)*x6031);
IkReal x6038=((1.0)*x6032);
IkReal x6039=(sj5*x6032);
IkReal x6040=(sj5*x6031);
evalcond[0]=(((r02*x6032))+(((-1.0)*x6033*x6037))+((r01*x6040)));
evalcond[1]=((((-1.0)*x6036*x6038))+((x6032*x6035))+(((-1.0)*r22*x6037)));
evalcond[2]=(((r11*x6039))+(((-1.0)*r12*x6037))+(((-1.0)*x6034*x6038)));
evalcond[3]=((-1.0)+(((-1.0)*x6033*x6038))+((r01*x6039))+(((-1.0)*r02*x6037)));
evalcond[4]=(((r22*x6032))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6036*x6037))+((x6031*x6035)));
evalcond[5]=(((r11*x6040))+((r12*x6032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6034*x6037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6041.valid){
continue;
}
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6041.value)))+(x6042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6043=IKcos(j4);
IkReal x6044=IKsin(j4);
IkReal x6045=(cj5*r00);
IkReal x6046=(cj5*r10);
IkReal x6047=(r21*sj5);
IkReal x6048=(cj5*r20);
IkReal x6049=((1.0)*x6043);
IkReal x6050=((1.0)*x6044);
IkReal x6051=(sj5*x6044);
IkReal x6052=(sj5*x6043);
evalcond[0]=(((r01*x6052))+(((-1.0)*x6045*x6049))+((r02*x6044)));
evalcond[1]=((((-1.0)*x6048*x6050))+(((-1.0)*r22*x6049))+((x6044*x6047)));
evalcond[2]=((((-1.0)*x6046*x6050))+(((-1.0)*r12*x6049))+((r11*x6051)));
evalcond[3]=((-1.0)+((r01*x6051))+(((-1.0)*r02*x6049))+(((-1.0)*x6045*x6050)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6044))+((x6043*x6047))+(((-1.0)*x6048*x6049)));
evalcond[5]=((((-1.0)*x6046*x6049))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6044))+((r11*x6052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6053=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6053;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6054=((1.0)*cj5);
IkReal x6055=((((-1.0)*r21*x6054))+(((-1.0)*r20*sj5)));
j4eval[0]=x6055;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6054))+((r11*sj5))))));
j4eval[2]=IKsign(x6055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6056=(r01*sj5);
IkReal x6057=(cj1*sj2);
IkReal x6058=(cj2*sj1);
IkReal x6059=((1.0)*r02);
IkReal x6060=((1.0)*cj5*r00);
IkReal x6061=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6061;
j4eval[1]=((IKabs(((((-1.0)*x6057*x6060))+((x6056*x6057))+((x6056*x6058))+(((-1.0)*x6058*x6060)))))+(IKabs(((((-1.0)*x6058*x6059))+(((-1.0)*x6057*x6059))))));
j4eval[2]=IKsign(x6061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6062=(r01*sj5);
IkReal x6063=(cj1*sj2);
IkReal x6064=(cj2*sj1);
IkReal x6065=((1.0)*r02);
IkReal x6066=((1.0)*cj5*r00);
CheckValue<IkReal> x6067 = IKatan2WithCheck(IkReal(((((-1.0)*x6064*x6066))+((x6062*x6063))+((x6062*x6064))+(((-1.0)*x6063*x6066)))),IkReal(((((-1.0)*x6064*x6065))+(((-1.0)*x6063*x6065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6067.valid){
continue;
}
CheckValue<IkReal> x6068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6067.value)+(((1.5707963267949)*(x6068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6069=IKcos(j4);
IkReal x6070=IKsin(j4);
IkReal x6071=(cj5*r00);
IkReal x6072=(cj5*r10);
IkReal x6073=(r21*sj5);
IkReal x6074=(cj5*r20);
IkReal x6075=((1.0)*x6069);
IkReal x6076=((1.0)*x6070);
IkReal x6077=(sj5*x6070);
IkReal x6078=(sj5*x6069);
evalcond[0]=(((r01*x6078))+((r02*x6070))+(((-1.0)*x6071*x6075)));
evalcond[1]=(((x6070*x6073))+(((-1.0)*x6074*x6076))+(((-1.0)*r22*x6075)));
evalcond[2]=(((r11*x6077))+(((-1.0)*x6072*x6076))+(((-1.0)*r12*x6075)));
evalcond[3]=((1.0)+((r01*x6077))+(((-1.0)*r02*x6075))+(((-1.0)*x6071*x6076)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6070))+(((-1.0)*x6074*x6075))+((x6069*x6073)));
evalcond[5]=(((r11*x6078))+(((-1.0)*sj1*sj2))+(((-1.0)*x6072*x6075))+((cj1*cj2))+((r12*x6070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6079=((1.0)*cj5);
CheckValue<IkReal> x6080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6079))+(((-1.0)*r20*sj5)))),-1);
if(!x6080.valid){
continue;
}
CheckValue<IkReal> x6081 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6079))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6080.value)))+(x6081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6082=IKcos(j4);
IkReal x6083=IKsin(j4);
IkReal x6084=(cj5*r00);
IkReal x6085=(cj5*r10);
IkReal x6086=(r21*sj5);
IkReal x6087=(cj5*r20);
IkReal x6088=((1.0)*x6082);
IkReal x6089=((1.0)*x6083);
IkReal x6090=(sj5*x6083);
IkReal x6091=(sj5*x6082);
evalcond[0]=(((r01*x6091))+(((-1.0)*x6084*x6088))+((r02*x6083)));
evalcond[1]=((((-1.0)*r22*x6088))+((x6083*x6086))+(((-1.0)*x6087*x6089)));
evalcond[2]=((((-1.0)*x6085*x6089))+(((-1.0)*r12*x6088))+((r11*x6090)));
evalcond[3]=((1.0)+((r01*x6090))+(((-1.0)*r02*x6088))+(((-1.0)*x6084*x6089)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6083))+((x6082*x6086))+(((-1.0)*x6087*x6088)));
evalcond[5]=((((-1.0)*x6085*x6088))+(((-1.0)*sj1*sj2))+((r12*x6083))+((r11*x6091))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6092.value)+(((1.5707963267949)*(x6093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6094=IKcos(j4);
IkReal x6095=IKsin(j4);
IkReal x6096=(cj5*r00);
IkReal x6097=(cj5*r10);
IkReal x6098=(r21*sj5);
IkReal x6099=(cj5*r20);
IkReal x6100=((1.0)*x6094);
IkReal x6101=((1.0)*x6095);
IkReal x6102=(sj5*x6095);
IkReal x6103=(sj5*x6094);
evalcond[0]=((((-1.0)*x6096*x6100))+((r01*x6103))+((r02*x6095)));
evalcond[1]=(((x6095*x6098))+(((-1.0)*x6099*x6101))+(((-1.0)*r22*x6100)));
evalcond[2]=(((r11*x6102))+(((-1.0)*r12*x6100))+(((-1.0)*x6097*x6101)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6100))+(((-1.0)*x6096*x6101))+((r01*x6102)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6099*x6100))+((x6094*x6098))+((r22*x6095)));
evalcond[5]=(((r11*x6103))+(((-1.0)*sj1*sj2))+((r12*x6095))+((cj1*cj2))+(((-1.0)*x6097*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6104=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6104);
rxp1_1=(px*r21);
rxp1_2=(r11*x6104);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6105=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6105);
rxp1_1=(px*r21);
rxp1_2=(r11*x6105);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6106=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6106);
rxp1_1=(px*r21);
rxp1_2=(r11*x6106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6109=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6109.valid){
continue;
}
IkReal x6107=x6109.value;
IkReal x6108=(sj0*x6107);
cj4array[0]=(((cj1*cj2*x6108))+(((-1.0)*sj1*sj2*x6108)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6110=IKsin(j4);
IkReal x6111=IKcos(j4);
IkReal x6112=(r21*sj5);
IkReal x6113=((1.0)*cj5*r20);
evalcond[0]=(r02*x6110);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6111)));
evalcond[2]=(((x6110*x6112))+(((-1.0)*x6110*x6113)));
evalcond[3]=(((r11*sj5*x6110))+(((-1.0)*cj5*r10*x6110)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6111*x6112))+(((-1.0)*x6111*x6113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6116=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6116.valid){
continue;
}
IkReal x6114=x6116.value;
IkReal x6115=((1.0)*x6114);
cj4array[0]=((((-1.0)*cj1*sj2*x6115))+(((-1.0)*cj2*sj1*x6115)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6117=IKsin(j4);
IkReal x6118=IKcos(j4);
IkReal x6119=((1.0)*sj0);
IkReal x6120=((1.0)*cj5);
IkReal x6121=(sj5*x6117);
evalcond[0]=(r02*x6117);
evalcond[1]=((((-1.0)*x6119))+(((-1.0)*r02*x6118)));
evalcond[2]=((((-1.0)*r20*x6117*x6120))+((r21*x6121)));
evalcond[3]=((((-1.0)*r10*x6117*x6120))+((r11*x6121)));
evalcond[4]=(((r11*sj5*x6118))+(((-1.0)*r10*x6118*x6120))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6122=IKPowWithIntegerCheck(r02,-1);
if(!x6122.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6122.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6123=IKsin(j4);
IkReal x6124=IKcos(j4);
IkReal x6125=(r21*sj5);
IkReal x6126=((1.0)*cj5);
IkReal x6127=(r11*sj5);
evalcond[0]=(r02*x6123);
evalcond[1]=(((x6123*x6125))+(((-1.0)*r20*x6123*x6126)));
evalcond[2]=((((-1.0)*r10*x6123*x6126))+((x6123*x6127)));
evalcond[3]=(((cj2*sj1))+((x6124*x6125))+(((-1.0)*r20*x6124*x6126))+((cj1*sj2)));
evalcond[4]=(((x6124*x6127))+(((-1.0)*r10*x6124*x6126))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6128=((1.0)*sj0);
IkReal x6129=((1.0)*cj0);
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6129))+(((-1.0)*r12*x6128)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6129))+(((-1.0)*r11*sj5*x6128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
CheckValue<IkReal> x6131=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6130.value)+(((1.5707963267949)*(x6131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6132=IKsin(j4);
IkReal x6133=IKcos(j4);
IkReal x6134=(cj5*r00);
IkReal x6135=(cj5*r10);
IkReal x6136=(r21*sj5);
IkReal x6137=(sj1*sj2);
IkReal x6138=(cj5*r20);
IkReal x6139=((1.0)*x6133);
IkReal x6140=((1.0)*cj1*cj2);
IkReal x6141=((1.0)*x6132);
IkReal x6142=(sj5*x6132);
IkReal x6143=(sj5*x6133);
evalcond[0]=((((-1.0)*r22*x6139))+(((-1.0)*x6138*x6141))+((x6132*x6136)));
evalcond[1]=(cj0+((r11*x6142))+(((-1.0)*x6135*x6141))+(((-1.0)*r12*x6139)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6142))+(((-1.0)*x6134*x6141))+(((-1.0)*r02*x6139)));
evalcond[3]=(((cj2*sj1))+((r22*x6132))+((cj1*sj2))+((x6133*x6136))+(((-1.0)*x6138*x6139)));
evalcond[4]=(((cj0*x6137))+(((-1.0)*x6134*x6139))+((r01*x6143))+((r02*x6132))+(((-1.0)*cj0*x6140)));
evalcond[5]=((((-1.0)*sj0*x6140))+((r11*x6143))+((r12*x6132))+(((-1.0)*x6135*x6139))+((sj0*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6144=((1.0)*cj5);
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6144)))),-1);
if(!x6145.valid){
continue;
}
CheckValue<IkReal> x6146 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6144))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6145.value)))+(x6146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=(cj5*r00);
IkReal x6150=(cj5*r10);
IkReal x6151=(r21*sj5);
IkReal x6152=(sj1*sj2);
IkReal x6153=(cj5*r20);
IkReal x6154=((1.0)*x6148);
IkReal x6155=((1.0)*cj1*cj2);
IkReal x6156=((1.0)*x6147);
IkReal x6157=(sj5*x6147);
IkReal x6158=(sj5*x6148);
evalcond[0]=((((-1.0)*r22*x6154))+((x6147*x6151))+(((-1.0)*x6153*x6156)));
evalcond[1]=(cj0+(((-1.0)*x6150*x6156))+(((-1.0)*r12*x6154))+((r11*x6157)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6154))+(((-1.0)*x6149*x6156))+((r01*x6157)));
evalcond[3]=(((cj2*sj1))+((x6148*x6151))+((cj1*sj2))+((r22*x6147))+(((-1.0)*x6153*x6154)));
evalcond[4]=(((cj0*x6152))+(((-1.0)*cj0*x6155))+(((-1.0)*x6149*x6154))+((r02*x6147))+((r01*x6158)));
evalcond[5]=(((sj0*x6152))+(((-1.0)*x6150*x6154))+((r12*x6147))+((r11*x6158))+(((-1.0)*sj0*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6159=((1.0)*cj5);
CheckValue<IkReal> x6160 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6160.valid){
continue;
}
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6159)))),-1);
if(!x6161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6160.value)+(((1.5707963267949)*(x6161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6162=IKsin(j4);
IkReal x6163=IKcos(j4);
IkReal x6164=(cj5*r00);
IkReal x6165=(cj5*r10);
IkReal x6166=(r21*sj5);
IkReal x6167=(sj1*sj2);
IkReal x6168=(cj5*r20);
IkReal x6169=((1.0)*x6163);
IkReal x6170=((1.0)*cj1*cj2);
IkReal x6171=((1.0)*x6162);
IkReal x6172=(sj5*x6162);
IkReal x6173=(sj5*x6163);
evalcond[0]=((((-1.0)*x6168*x6171))+((x6162*x6166))+(((-1.0)*r22*x6169)));
evalcond[1]=(cj0+((r11*x6172))+(((-1.0)*r12*x6169))+(((-1.0)*x6165*x6171)));
evalcond[2]=((((-1.0)*x6164*x6171))+(((-1.0)*sj0))+((r01*x6172))+(((-1.0)*r02*x6169)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6168*x6169))+((cj1*sj2))+((x6163*x6166))+((r22*x6162)));
evalcond[4]=((((-1.0)*cj0*x6170))+((r02*x6162))+((r01*x6173))+((cj0*x6167))+(((-1.0)*x6164*x6169)));
evalcond[5]=((((-1.0)*sj0*x6170))+((sj0*x6167))+((r12*x6162))+((r11*x6173))+(((-1.0)*x6165*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6174=r21*r21;
IkReal x6175=cj5*cj5;
IkReal x6176=(cj2*sj1);
IkReal x6177=(cj1*sj2);
IkReal x6178=(r21*sj5);
IkReal x6179=((1.0)*cj5*r20);
CheckValue<IkReal> x6180=IKPowWithIntegerCheck(IKsign((((x6174*x6175))+(((2.0)*cj5*r20*x6178))+(((-1.0)*x6174))+(((-1.0)*(r22*r22)))+(((-1.0)*x6175*(r20*r20))))),-1);
if(!x6180.valid){
continue;
}
CheckValue<IkReal> x6181 = IKatan2WithCheck(IkReal((((r22*x6176))+((r22*x6177)))),IkReal(((((-1.0)*x6176*x6179))+(((-1.0)*x6177*x6179))+((x6176*x6178))+((x6177*x6178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6180.value)))+(x6181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6182=IKsin(j4);
IkReal x6183=IKcos(j4);
IkReal x6184=(r21*sj5);
IkReal x6185=(cj5*r20);
IkReal x6186=((1.0)*x6183);
evalcond[0]=((((-1.0)*r22*x6186))+(((-1.0)*x6182*x6185))+((x6182*x6184)));
evalcond[1]=(((cj2*sj1))+((r22*x6182))+(((-1.0)*x6185*x6186))+((cj1*sj2))+((x6183*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6187=(cj5*sj4);
IkReal x6188=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6188))+(((-1.0)*r00*x6187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6187))+(((-1.0)*r11*x6188))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6188))+(((-1.0)*r00*x6187))))+IKsqr((((r10*x6187))+(((-1.0)*r11*x6188))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6188))+(((-1.0)*r00*x6187))), (((r10*x6187))+(((-1.0)*r11*x6188))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6189=IKcos(j0);
IkReal x6190=IKsin(j0);
IkReal x6191=((0.1)*sj5);
IkReal x6192=((0.392)*sj1);
IkReal x6193=(cj5*r11);
IkReal x6194=(cj5*r01);
IkReal x6195=((1.0)*cj1);
IkReal x6196=(r11*sj5);
IkReal x6197=((0.392)*cj2);
IkReal x6198=((1.0)*sj1);
IkReal x6199=((1.0)*cj4);
IkReal x6200=(r01*sj5);
IkReal x6201=(sj2*x6190);
IkReal x6202=(sj2*x6189);
IkReal x6203=(cj5*x6199);
IkReal x6204=(cj1*x6189);
IkReal x6205=(cj1*x6190);
IkReal x6206=(cj2*x6189);
IkReal x6207=((1.0)*cj5*sj4);
IkReal x6208=(cj2*x6190);
evalcond[0]=((((-1.0)*r12*x6199))+x6189+((sj4*x6196))+(((-1.0)*r10*x6207)));
evalcond[1]=((((-1.0)*r00*x6207))+(((-1.0)*x6190))+(((-1.0)*r02*x6199))+((sj4*x6200)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x6198*x6206))+x6194+(((-1.0)*x6195*x6202)));
evalcond[3]=(((r10*sj5))+(((-1.0)*x6198*x6208))+x6193+(((-1.0)*x6195*x6201)));
evalcond[4]=((((-1.0)*r00*x6203))+(((-1.0)*x6195*x6206))+((sj1*x6202))+((r02*sj4))+((cj4*x6200)));
evalcond[5]=((((-1.0)*x6195*x6208))+((sj1*x6201))+((r12*sj4))+((cj4*x6196))+(((-1.0)*r10*x6203)));
evalcond[6]=((((-0.1)*x6194))+(((-1.0)*x6192*x6202))+(((-1.0)*px))+(((0.425)*x6204))+((x6197*x6204))+(((-0.134)*x6190))+(((-1.0)*r00*x6191)));
evalcond[7]=((((-1.0)*r10*x6191))+(((0.134)*x6189))+(((-0.1)*x6193))+(((-1.0)*x6192*x6201))+(((-1.0)*py))+(((0.425)*x6205))+((x6197*x6205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6209=((1.0)*cj5);
IkReal x6210=((1.0)*sj5);
CheckValue<IkReal> x6211 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6209))+(((-1.0)*r10*x6210)))),IkReal(((((-1.0)*r00*x6210))+(((-1.0)*r01*x6209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6211.valid){
continue;
}
CheckValue<IkReal> x6212=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6212.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6211.value)+(((1.5707963267949)*(x6212.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6213=IKcos(j0);
IkReal x6214=IKsin(j0);
IkReal x6215=((0.1)*sj5);
IkReal x6216=(cj5*r11);
IkReal x6217=(cj5*r01);
IkReal x6218=((0.392)*cj2);
IkReal x6219=((1.0)*cj2);
IkReal x6220=((0.392)*sj2);
IkReal x6221=((1.0)*cj1*sj2);
IkReal x6222=(cj1*x6213);
IkReal x6223=(cj1*x6214);
IkReal x6224=(sj1*x6213);
IkReal x6225=(sj1*x6214);
evalcond[0]=(((r00*sj5))+x6217+(((-1.0)*x6213*x6221))+(((-1.0)*x6219*x6224)));
evalcond[1]=(x6216+((r10*sj5))+(((-1.0)*x6219*x6225))+(((-1.0)*x6214*x6221)));
evalcond[2]=((((-0.134)*x6214))+(((-1.0)*r00*x6215))+(((-1.0)*px))+(((-1.0)*x6220*x6224))+(((-0.1)*x6217))+(((0.425)*x6222))+((x6218*x6222)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x6213))+(((-1.0)*x6220*x6225))+(((-0.1)*x6216))+(((0.425)*x6223))+((x6218*x6223))+(((-1.0)*r10*x6215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6226=((1.0)*cj5);
IkReal x6227=((((-1.0)*r01*x6226))+(((-1.0)*r00*sj5)));
j4eval[0]=x6227;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6226)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6228=((1.0)*cj5);
IkReal x6229=((((-1.0)*r11*x6228))+(((-1.0)*r10*sj5)));
j4eval[0]=x6229;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6228)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6230=((1.0)*sj0);
IkReal x6231=((1.0)*cj0);
IkReal x6232=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6232;
j4eval[1]=((IKabs(((((-1.0)*r12*x6230))+(((-1.0)*r02*x6231)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6231))+(((-1.0)*r11*sj5*x6230))))));
j4eval[2]=IKsign(x6232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6233=((-1.0)*r20);
IkReal x6235 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6235)==0){
continue;
}
IkReal x6234=pow(x6235,-0.5);
CheckValue<IkReal> x6236 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6233),IKFAST_ATAN2_MAGTHRESH);
if(!x6236.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6236.value));
IkReal gconst115=(r21*x6234);
IkReal gconst116=(x6233*x6234);
CheckValue<IkReal> x6237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6237.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6238=((-1.0)*r20);
IkReal x6239=x6234;
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6238),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
IkReal x6240=((-1.0)*(x6241.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6240;
IkReal gconst114=x6240;
IkReal gconst115=(r21*x6239);
IkReal gconst116=(x6238*x6239);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6242=((-1.0)*r20);
IkReal x6243=x6234;
CheckValue<IkReal> x6245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6242),IKFAST_ATAN2_MAGTHRESH);
if(!x6245.valid){
continue;
}
IkReal x6244=((-1.0)*(x6245.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6244;
IkReal gconst114=x6244;
IkReal gconst115=(r21*x6243);
IkReal gconst116=(x6242*x6243);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6246=((-1.0)*r20);
IkReal x6247=x6234;
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6246),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
IkReal x6248=((-1.0)*(x6249.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6248;
IkReal gconst114=x6248;
IkReal gconst115=(r21*x6247);
IkReal gconst116=(x6246*x6247);
IkReal x6250=((1.0)*(r22*r22));
CheckValue<IkReal> x6254=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6250))),-1);
if(!x6254.valid){
continue;
}
IkReal x6251=x6254.value;
IkReal x6252=((1.0)*x6251);
IkReal x6253=((((-2.0)*x6251*(r20*r20)*(r21*r21)))+(((-1.0)*x6252*(r20*r20*r20*r20)))+(((-1.0)*x6250))+(((-1.0)*x6252*(r21*r21*r21*r21))));
j4eval[0]=x6253;
j4eval[1]=IKsign(x6253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6255=(cj2*sj1);
IkReal x6256=(gconst115*r21);
IkReal x6257=(cj1*sj2);
IkReal x6258=((1.0)*gconst116*r20);
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal((((r22*x6257))+((r22*x6255)))),IkReal((((x6256*x6257))+(((-1.0)*x6255*x6258))+((x6255*x6256))+(((-1.0)*x6257*x6258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
CheckValue<IkReal> x6260=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6256*x6256)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6256))+(((-1.0)*gconst116*r20*x6258)))),-1);
if(!x6260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6259.value)+(((1.5707963267949)*(x6260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6261=IKsin(j4);
IkReal x6262=IKcos(j4);
IkReal x6263=(sj1*sj2);
IkReal x6264=((1.0)*x6262);
IkReal x6265=((1.0)*cj1*cj2);
IkReal x6266=(gconst115*x6261);
IkReal x6267=(gconst115*x6262);
IkReal x6268=((1.0)*gconst116*x6261);
evalcond[0]=(((r21*x6266))+(((-1.0)*r22*x6264))+(((-1.0)*r20*x6268)));
evalcond[1]=(cj0+(((-1.0)*r10*x6268))+(((-1.0)*r12*x6264))+((r11*x6266)));
evalcond[2]=(((r01*x6266))+(((-1.0)*sj0))+(((-1.0)*r02*x6264))+(((-1.0)*r00*x6268)));
evalcond[3]=(((cj2*sj1))+((r22*x6261))+((cj1*sj2))+((r21*x6267))+(((-1.0)*gconst116*r20*x6264)));
evalcond[4]=(((r01*x6267))+(((-1.0)*gconst116*r00*x6264))+(((-1.0)*cj0*x6265))+((r02*x6261))+((cj0*x6263)));
evalcond[5]=((((-1.0)*gconst116*r10*x6264))+((sj0*x6263))+((r12*x6261))+(((-1.0)*sj0*x6265))+((r11*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6269=((1.0)*gconst116);
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6269)))),-1);
if(!x6270.valid){
continue;
}
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6269))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6270.value)))+(x6271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6272=IKsin(j4);
IkReal x6273=IKcos(j4);
IkReal x6274=(sj1*sj2);
IkReal x6275=((1.0)*x6273);
IkReal x6276=((1.0)*cj1*cj2);
IkReal x6277=(gconst115*x6272);
IkReal x6278=(gconst115*x6273);
IkReal x6279=((1.0)*gconst116*x6272);
evalcond[0]=((((-1.0)*r20*x6279))+((r21*x6277))+(((-1.0)*r22*x6275)));
evalcond[1]=((((-1.0)*r10*x6279))+cj0+(((-1.0)*r12*x6275))+((r11*x6277)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6277))+(((-1.0)*r02*x6275))+(((-1.0)*r00*x6279)));
evalcond[3]=(((r22*x6272))+((cj2*sj1))+((cj1*sj2))+((r21*x6278))+(((-1.0)*gconst116*r20*x6275)));
evalcond[4]=(((r01*x6278))+((r02*x6272))+(((-1.0)*gconst116*r00*x6275))+(((-1.0)*cj0*x6276))+((cj0*x6274)));
evalcond[5]=(((r12*x6272))+(((-1.0)*sj0*x6276))+(((-1.0)*gconst116*r10*x6275))+((sj0*x6274))+((r11*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6280=((1.0)*gconst116);
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6280)))),-1);
if(!x6281.valid){
continue;
}
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6281.value)))+(x6282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6283=IKsin(j4);
IkReal x6284=IKcos(j4);
IkReal x6285=(sj1*sj2);
IkReal x6286=((1.0)*x6284);
IkReal x6287=((1.0)*cj1*cj2);
IkReal x6288=(gconst115*x6283);
IkReal x6289=(gconst115*x6284);
IkReal x6290=((1.0)*gconst116*x6283);
evalcond[0]=((((-1.0)*r20*x6290))+(((-1.0)*r22*x6286))+((r21*x6288)));
evalcond[1]=(cj0+((r11*x6288))+(((-1.0)*r10*x6290))+(((-1.0)*r12*x6286)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6290))+(((-1.0)*r02*x6286))+((r01*x6288)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6286))+((r22*x6283))+((cj1*sj2))+((r21*x6289)));
evalcond[4]=((((-1.0)*gconst116*r00*x6286))+((cj0*x6285))+(((-1.0)*cj0*x6287))+((r02*x6283))+((r01*x6289)));
evalcond[5]=(((r12*x6283))+(((-1.0)*gconst116*r10*x6286))+((r11*x6289))+((sj0*x6285))+(((-1.0)*sj0*x6287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6291=((-1.0)*r21);
IkReal x6293 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6293)==0){
continue;
}
IkReal x6292=pow(x6293,-0.5);
CheckValue<IkReal> x6294 = IKatan2WithCheck(IkReal(x6291),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6294.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6294.value))));
IkReal gconst118=(x6291*x6292);
IkReal gconst119=((1.0)*r20*x6292);
CheckValue<IkReal> x6295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6295.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6295.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6296=((-1.0)*r21);
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(x6296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
IkReal x6297=((1.0)*(x6299.value));
IkReal x6298=x6292;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6297)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6297)));
IkReal gconst118=(x6296*x6298);
IkReal gconst119=((1.0)*r20*x6298);
IkReal x6300=r22*r22;
IkReal x6301=((1.0)*x6300);
CheckValue<IkReal> x6305=IKPowWithIntegerCheck(((-1.0)+x6300),-1);
if(!x6305.valid){
continue;
}
IkReal x6302=x6305.value;
if((((1.0)+(((-1.0)*x6301)))) < -0.00001)
continue;
IkReal x6303=IKsqrt(((1.0)+(((-1.0)*x6301))));
IkReal x6304=(cj0*x6302*x6303);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6304+(((-1.0)*x6301*x6304))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6306=((-1.0)*r21);
CheckValue<IkReal> x6309 = IKatan2WithCheck(IkReal(x6306),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6309.valid){
continue;
}
IkReal x6307=((1.0)*(x6309.value));
IkReal x6308=x6292;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6307)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6307)));
IkReal gconst118=(x6306*x6308);
IkReal gconst119=((1.0)*r20*x6308);
IkReal x6310=r22*r22;
IkReal x6311=((1.0)*x6310);
CheckValue<IkReal> x6315=IKPowWithIntegerCheck(((-1.0)+x6310),-1);
if(!x6315.valid){
continue;
}
IkReal x6312=x6315.value;
if((((1.0)+(((-1.0)*x6311)))) < -0.00001)
continue;
IkReal x6313=IKsqrt(((1.0)+(((-1.0)*x6311))));
IkReal x6314=(sj0*x6312*x6313);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6311*x6314))+x6314))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6316=((-1.0)*r21);
CheckValue<IkReal> x6319 = IKatan2WithCheck(IkReal(x6316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6319.valid){
continue;
}
IkReal x6317=((1.0)*(x6319.value));
IkReal x6318=x6292;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6317)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6317)));
IkReal gconst118=(x6316*x6318);
IkReal gconst119=((1.0)*r20*x6318);
IkReal x6320=r22*r22;
IkReal x6321=(r12*sj0);
IkReal x6322=(cj0*r02);
CheckValue<IkReal> x6326=IKPowWithIntegerCheck(((-1.0)+x6320),-1);
if(!x6326.valid){
continue;
}
IkReal x6323=x6326.value;
if((((1.0)+(((-1.0)*x6320)))) < -0.00001)
continue;
IkReal x6324=IKsqrt(((1.0)+(((-1.0)*x6320))));
IkReal x6325=(r22*x6323*x6324);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6322*x6325))+((x6321*x6325)))))+(IKabs(((((-1.0)*x6321))+(((-1.0)*x6322))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6327=((1.0)*sj0);
IkReal x6328=((1.0)*gconst118);
CheckValue<IkReal> x6329 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6327)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6328))+(((-1.0)*gconst118*r11*x6327))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6329.valid){
continue;
}
CheckValue<IkReal> x6330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6328)))),-1);
if(!x6330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6329.value)+(((1.5707963267949)*(x6330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6331=IKsin(j4);
IkReal x6332=IKcos(j4);
IkReal x6333=(gconst118*r01);
IkReal x6334=(sj1*sj2);
IkReal x6335=(gconst119*r20);
IkReal x6336=(gconst119*r10);
IkReal x6337=(gconst119*r00);
IkReal x6338=(gconst118*r21);
IkReal x6339=(gconst118*r11);
IkReal x6340=((1.0)*x6332);
IkReal x6341=((1.0)*cj1*cj2);
IkReal x6342=((1.0)*x6331);
evalcond[0]=((((-1.0)*r22*x6340))+((x6331*x6338))+(((-1.0)*x6335*x6342)));
evalcond[1]=(cj0+((x6331*x6339))+(((-1.0)*x6336*x6342))+(((-1.0)*r12*x6340)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6337*x6342))+((x6331*x6333))+(((-1.0)*r02*x6340)));
evalcond[3]=(((cj2*sj1))+((r22*x6331))+((cj1*sj2))+((x6332*x6338))+(((-1.0)*x6335*x6340)));
evalcond[4]=(((r02*x6331))+(((-1.0)*x6337*x6340))+(((-1.0)*cj0*x6341))+((x6332*x6333))+((cj0*x6334)));
evalcond[5]=(((r12*x6331))+((sj0*x6334))+((x6332*x6339))+(((-1.0)*x6336*x6340))+(((-1.0)*sj0*x6341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6343=((1.0)*gconst119);
CheckValue<IkReal> x6344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6343))+(((-1.0)*gconst118*r10)))),-1);
if(!x6344.valid){
continue;
}
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6344.value)))+(x6345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6346=IKsin(j4);
IkReal x6347=IKcos(j4);
IkReal x6348=(gconst118*r01);
IkReal x6349=(sj1*sj2);
IkReal x6350=(gconst119*r20);
IkReal x6351=(gconst119*r10);
IkReal x6352=(gconst119*r00);
IkReal x6353=(gconst118*r21);
IkReal x6354=(gconst118*r11);
IkReal x6355=((1.0)*x6347);
IkReal x6356=((1.0)*cj1*cj2);
IkReal x6357=((1.0)*x6346);
evalcond[0]=(((x6346*x6353))+(((-1.0)*x6350*x6357))+(((-1.0)*r22*x6355)));
evalcond[1]=(cj0+(((-1.0)*x6351*x6357))+((x6346*x6354))+(((-1.0)*r12*x6355)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6355))+((x6346*x6348))+(((-1.0)*x6352*x6357)));
evalcond[3]=(((cj2*sj1))+((r22*x6346))+((cj1*sj2))+(((-1.0)*x6350*x6355))+((x6347*x6353)));
evalcond[4]=((((-1.0)*cj0*x6356))+((cj0*x6349))+((r02*x6346))+((x6347*x6348))+(((-1.0)*x6352*x6355)));
evalcond[5]=(((sj0*x6349))+((r12*x6346))+(((-1.0)*x6351*x6355))+(((-1.0)*sj0*x6356))+((x6347*x6354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6358=((1.0)*gconst119);
CheckValue<IkReal> x6359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6358))+(((-1.0)*gconst118*r00)))),-1);
if(!x6359.valid){
continue;
}
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6358))+((cj0*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6359.value)))+(x6360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6361=IKsin(j4);
IkReal x6362=IKcos(j4);
IkReal x6363=(gconst118*r01);
IkReal x6364=(sj1*sj2);
IkReal x6365=(gconst119*r20);
IkReal x6366=(gconst119*r10);
IkReal x6367=(gconst119*r00);
IkReal x6368=(gconst118*r21);
IkReal x6369=(gconst118*r11);
IkReal x6370=((1.0)*x6362);
IkReal x6371=((1.0)*cj1*cj2);
IkReal x6372=((1.0)*x6361);
evalcond[0]=((((-1.0)*x6365*x6372))+((x6361*x6368))+(((-1.0)*r22*x6370)));
evalcond[1]=((((-1.0)*x6366*x6372))+cj0+((x6361*x6369))+(((-1.0)*r12*x6370)));
evalcond[2]=((((-1.0)*sj0))+((x6361*x6363))+(((-1.0)*r02*x6370))+(((-1.0)*x6367*x6372)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6365*x6370))+((x6362*x6368))+((cj1*sj2))+((r22*x6361)));
evalcond[4]=(((x6362*x6363))+(((-1.0)*x6367*x6370))+((cj0*x6364))+((r02*x6361))+(((-1.0)*cj0*x6371)));
evalcond[5]=((((-1.0)*x6366*x6370))+(((-1.0)*sj0*x6371))+((x6362*x6369))+((r12*x6361))+((sj0*x6364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6373=((-1.0)*r10);
IkReal x6375 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6375)==0){
continue;
}
IkReal x6374=pow(x6375,-0.5);
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6373),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6376.value));
IkReal gconst121=(r11*x6374);
IkReal gconst122=(x6373*x6374);
CheckValue<IkReal> x6377 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6377.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6377.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6378=((-1.0)*r10);
IkReal x6379=x6374;
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6378),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
IkReal x6380=((-1.0)*(x6381.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6380;
IkReal gconst120=x6380;
IkReal gconst121=(r11*x6379);
IkReal gconst122=(x6378*x6379);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6382=((1.0)*sj0);
IkReal x6383=((1.0)*gconst121);
CheckValue<IkReal> x6384 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6382))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x6382))+(((-1.0)*cj0*r01*x6383))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6384.valid){
continue;
}
CheckValue<IkReal> x6385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6383))+(((-1.0)*gconst122*r21)))),-1);
if(!x6385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6384.value)+(((1.5707963267949)*(x6385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6386=IKsin(j4);
IkReal x6387=IKcos(j4);
IkReal x6388=(gconst121*r11);
IkReal x6389=(sj1*sj2);
IkReal x6390=(gconst122*r00);
IkReal x6391=(gconst122*r10);
IkReal x6392=(gconst122*r20);
IkReal x6393=((1.0)*x6387);
IkReal x6394=((1.0)*cj1*cj2);
IkReal x6395=((1.0)*x6386);
IkReal x6396=(gconst121*x6386);
IkReal x6397=(gconst121*x6387);
evalcond[0]=((((-1.0)*r22*x6393))+(((-1.0)*x6392*x6395))+((r21*x6396)));
evalcond[1]=(cj0+((x6386*x6388))+(((-1.0)*x6391*x6395))+(((-1.0)*r12*x6393)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6396))+(((-1.0)*r02*x6393))+(((-1.0)*x6390*x6395)));
evalcond[3]=(((cj2*sj1))+((r22*x6386))+((cj1*sj2))+(((-1.0)*x6392*x6393))+((r21*x6397)));
evalcond[4]=(((cj0*x6389))+(((-1.0)*cj0*x6394))+((r02*x6386))+((r01*x6397))+(((-1.0)*x6390*x6393)));
evalcond[5]=((((-1.0)*sj0*x6394))+((sj0*x6389))+((x6387*x6388))+(((-1.0)*x6391*x6393))+((r12*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6398=((1.0)*gconst122);
CheckValue<IkReal> x6399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6398)))),-1);
if(!x6399.valid){
continue;
}
CheckValue<IkReal> x6400 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6398))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6399.value)))+(x6400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6401=IKsin(j4);
IkReal x6402=IKcos(j4);
IkReal x6403=(gconst121*r11);
IkReal x6404=(sj1*sj2);
IkReal x6405=(gconst122*r00);
IkReal x6406=(gconst122*r10);
IkReal x6407=(gconst122*r20);
IkReal x6408=((1.0)*x6402);
IkReal x6409=((1.0)*cj1*cj2);
IkReal x6410=((1.0)*x6401);
IkReal x6411=(gconst121*x6401);
IkReal x6412=(gconst121*x6402);
evalcond[0]=(((r21*x6411))+(((-1.0)*x6407*x6410))+(((-1.0)*r22*x6408)));
evalcond[1]=(cj0+(((-1.0)*x6406*x6410))+((x6401*x6403))+(((-1.0)*r12*x6408)));
evalcond[2]=((((-1.0)*x6405*x6410))+(((-1.0)*sj0))+((r01*x6411))+(((-1.0)*r02*x6408)));
evalcond[3]=(((cj2*sj1))+((r21*x6412))+((cj1*sj2))+(((-1.0)*x6407*x6408))+((r22*x6401)));
evalcond[4]=(((r02*x6401))+((r01*x6412))+((cj0*x6404))+(((-1.0)*cj0*x6409))+(((-1.0)*x6405*x6408)));
evalcond[5]=(((sj0*x6404))+(((-1.0)*x6406*x6408))+((r12*x6401))+(((-1.0)*sj0*x6409))+((x6402*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6413=((-1.0)*r11);
IkReal x6415 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6415)==0){
continue;
}
IkReal x6414=pow(x6415,-0.5);
CheckValue<IkReal> x6416 = IKatan2WithCheck(IkReal(x6413),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6416.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6416.value))));
IkReal gconst124=(x6413*x6414);
IkReal gconst125=((1.0)*r10*x6414);
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6417.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6418=((-1.0)*r11);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(x6418),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
IkReal x6419=((1.0)*(x6421.value));
IkReal x6420=x6414;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6419)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6419)));
IkReal gconst124=(x6418*x6420);
IkReal gconst125=((1.0)*r10*x6420);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6422=((-1.0)*r11);
CheckValue<IkReal> x6425 = IKatan2WithCheck(IkReal(x6422),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6425.valid){
continue;
}
IkReal x6423=((1.0)*(x6425.value));
IkReal x6424=x6414;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6423)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6423)));
IkReal gconst124=(x6422*x6424);
IkReal gconst125=((1.0)*r10*x6424);
IkReal x6426=r12*r12;
IkReal x6427=((1.0)*sj0);
IkReal x6428=(cj0*r02);
IkReal x6429=x6414;
j4eval[0]=((IKabs(((((-1.0)*x6428))+(((-1.0)*r12*x6427)))))+(IKabs((((r12*x6428*x6429))+((sj0*x6426*x6429))+(((-1.0)*x6427*x6429))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6430=((-1.0)*r11);
CheckValue<IkReal> x6433 = IKatan2WithCheck(IkReal(x6430),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6433.valid){
continue;
}
IkReal x6431=((1.0)*(x6433.value));
IkReal x6432=x6414;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6431)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6431)));
IkReal gconst124=(x6430*x6432);
IkReal gconst125=((1.0)*r10*x6432);
IkReal x6434=r12*r12;
IkReal x6435=((1.0)+(((-1.0)*x6434)));
IkReal x6436=(cj2*r22*sj1);
IkReal x6437=(cj1*r22*sj2);
CheckValue<IkReal> x6444=IKPowWithIntegerCheck(x6435,-1);
if(!x6444.valid){
continue;
}
IkReal x6438=x6444.value;
CheckValue<IkReal> x6445=IKPowWithIntegerCheck(((-1.0)+x6434),-1);
if(!x6445.valid){
continue;
}
IkReal x6439=x6445.value;
IkReal x6440=((1.0)*x6438);
if((x6435) < -0.00001)
continue;
IkReal x6441=IKsqrt(x6435);
IkReal x6442=((1.0)*r12*x6439*x6441);
IkReal x6443=((((-1.0)*x6440*(r10*r10)*(r20*r20)))+(((-1.0)*x6440*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x6438))+(((-1.0)*(r22*r22))));
j4eval[0]=x6443;
j4eval[1]=IKsign(x6443);
j4eval[2]=((IKabs(((((-1.0)*x6436*x6442))+(((-1.0)*x6437*x6442)))))+(IKabs((x6437+x6436))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6446=(gconst124*r21);
IkReal x6447=(cj1*sj2);
IkReal x6448=(cj2*sj1);
IkReal x6449=(gconst125*r20);
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal((((r22*x6448))+((r22*x6447)))),IkReal((((x6446*x6447))+((x6446*x6448))+(((-1.0)*x6448*x6449))+(((-1.0)*x6447*x6449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6449*x6449)))+(((-1.0)*(r22*r22)))+(((2.0)*x6446*x6449))+(((-1.0)*(x6446*x6446))))),-1);
if(!x6451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6450.value)+(((1.5707963267949)*(x6451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6452=IKsin(j4);
IkReal x6453=IKcos(j4);
IkReal x6454=(sj1*sj2);
IkReal x6455=(gconst125*r20);
IkReal x6456=(gconst124*r01);
IkReal x6457=(gconst125*r00);
IkReal x6458=(gconst125*r10);
IkReal x6459=((1.0)*x6453);
IkReal x6460=((1.0)*cj1*cj2);
IkReal x6461=((1.0)*x6452);
IkReal x6462=(gconst124*x6452);
IkReal x6463=(gconst124*x6453);
evalcond[0]=(((r21*x6462))+(((-1.0)*x6455*x6461))+(((-1.0)*r22*x6459)));
evalcond[1]=(cj0+(((-1.0)*x6458*x6461))+(((-1.0)*r12*x6459))+((r11*x6462)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6459))+(((-1.0)*x6457*x6461))+((x6452*x6456)));
evalcond[3]=(((cj2*sj1))+((r21*x6463))+((cj1*sj2))+((r22*x6452))+(((-1.0)*x6455*x6459)));
evalcond[4]=(((x6453*x6456))+((cj0*x6454))+(((-1.0)*x6457*x6459))+((r02*x6452))+(((-1.0)*cj0*x6460)));
evalcond[5]=(((sj0*x6454))+((r11*x6463))+(((-1.0)*sj0*x6460))+(((-1.0)*x6458*x6459))+((r12*x6452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6464=((1.0)*sj0);
IkReal x6465=((1.0)*cj0);
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6466.valid){
continue;
}
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6465))+(((-1.0)*r12*x6464)))),IkReal((((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x6465))+(((-1.0)*gconst124*r11*x6464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6466.value)))+(x6467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6468=IKsin(j4);
IkReal x6469=IKcos(j4);
IkReal x6470=(sj1*sj2);
IkReal x6471=(gconst125*r20);
IkReal x6472=(gconst124*r01);
IkReal x6473=(gconst125*r00);
IkReal x6474=(gconst125*r10);
IkReal x6475=((1.0)*x6469);
IkReal x6476=((1.0)*cj1*cj2);
IkReal x6477=((1.0)*x6468);
IkReal x6478=(gconst124*x6468);
IkReal x6479=(gconst124*x6469);
evalcond[0]=((((-1.0)*r22*x6475))+(((-1.0)*x6471*x6477))+((r21*x6478)));
evalcond[1]=((((-1.0)*r12*x6475))+cj0+((r11*x6478))+(((-1.0)*x6474*x6477)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6473*x6477))+((x6468*x6472))+(((-1.0)*r02*x6475)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6468))+(((-1.0)*x6471*x6475))+((r21*x6479)));
evalcond[4]=((((-1.0)*cj0*x6476))+(((-1.0)*x6473*x6475))+((cj0*x6470))+((x6469*x6472))+((r02*x6468)));
evalcond[5]=((((-1.0)*sj0*x6476))+((r11*x6479))+((r12*x6468))+(((-1.0)*x6474*x6475))+((sj0*x6470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6480=((1.0)*gconst125);
CheckValue<IkReal> x6481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x6480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6481.valid){
continue;
}
CheckValue<IkReal> x6482=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6480)))),-1);
if(!x6482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6481.value)+(((1.5707963267949)*(x6482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6483=IKsin(j4);
IkReal x6484=IKcos(j4);
IkReal x6485=(sj1*sj2);
IkReal x6486=(gconst125*r20);
IkReal x6487=(gconst124*r01);
IkReal x6488=(gconst125*r00);
IkReal x6489=(gconst125*r10);
IkReal x6490=((1.0)*x6484);
IkReal x6491=((1.0)*cj1*cj2);
IkReal x6492=((1.0)*x6483);
IkReal x6493=(gconst124*x6483);
IkReal x6494=(gconst124*x6484);
evalcond[0]=((((-1.0)*r22*x6490))+(((-1.0)*x6486*x6492))+((r21*x6493)));
evalcond[1]=(cj0+((r11*x6493))+(((-1.0)*x6489*x6492))+(((-1.0)*r12*x6490)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6488*x6492))+(((-1.0)*r02*x6490))+((x6483*x6487)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6486*x6490))+((cj1*sj2))+((r22*x6483))+((r21*x6494)));
evalcond[4]=((((-1.0)*x6488*x6490))+((cj0*x6485))+((r02*x6483))+(((-1.0)*cj0*x6491))+((x6484*x6487)));
evalcond[5]=(((r11*x6494))+(((-1.0)*x6489*x6490))+(((-1.0)*sj0*x6491))+((r12*x6483))+((sj0*x6485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6495=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6495;
j4eval[1]=IKsign(x6495);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6496=((1.0)*cj5);
IkReal x6497=((((-1.0)*r01*x6496))+(((-1.0)*r00*sj5)));
j4eval[0]=x6497;
j4eval[1]=((IKabs(((((-1.0)*r20*x6496))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6498=cj5*cj5;
IkReal x6499=r11*r11;
IkReal x6500=(cj5*r10);
IkReal x6501=(r11*sj5);
IkReal x6502=((((-1.0)*x6498*(r10*r10)))+(((-1.0)*x6499))+(((2.0)*x6500*x6501))+(((-1.0)*(r12*r12)))+((x6498*x6499)));
j4eval[0]=x6502;
j4eval[1]=IKsign(x6502);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6500))+x6501))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6503=cj5*cj5;
IkReal x6504=r11*r11;
IkReal x6505=(cj5*r10);
IkReal x6506=(r11*sj5);
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal(((((-1.0)*x6505))+x6506)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6503*(r10*r10)))+(((2.0)*x6505*x6506))+(((-1.0)*x6504))+(((-1.0)*(r12*r12)))+((x6503*x6504)))),-1);
if(!x6508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6507.value)+(((1.5707963267949)*(x6508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6509=IKcos(j4);
IkReal x6510=IKsin(j4);
IkReal x6511=(cj5*r00);
IkReal x6512=(cj5*r10);
IkReal x6513=(r21*sj5);
IkReal x6514=(cj5*r20);
IkReal x6515=((1.0)*x6509);
IkReal x6516=((1.0)*x6510);
IkReal x6517=(sj5*x6510);
IkReal x6518=(sj5*x6509);
evalcond[0]=((((-1.0)*x6512*x6515))+((r11*x6518))+((r12*x6510)));
evalcond[1]=((((-1.0)*r22*x6515))+(((-1.0)*x6514*x6516))+((x6510*x6513)));
evalcond[2]=((((-1.0)*r02*x6515))+((r01*x6517))+(((-1.0)*x6511*x6516)));
evalcond[3]=((1.0)+(((-1.0)*x6512*x6516))+((r11*x6517))+(((-1.0)*r12*x6515)));
evalcond[4]=(((cj2*sj1))+((x6509*x6513))+(((-1.0)*x6514*x6515))+((cj1*sj2))+((r22*x6510)));
evalcond[5]=(((r01*x6518))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6510))+(((-1.0)*x6511*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6519=((1.0)*cj5);
CheckValue<IkReal> x6520=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6519)))),-1);
if(!x6520.valid){
continue;
}
CheckValue<IkReal> x6521 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6520.value)))+(x6521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6522=IKcos(j4);
IkReal x6523=IKsin(j4);
IkReal x6524=(cj5*r00);
IkReal x6525=(cj5*r10);
IkReal x6526=(r21*sj5);
IkReal x6527=(cj5*r20);
IkReal x6528=((1.0)*x6522);
IkReal x6529=((1.0)*x6523);
IkReal x6530=(sj5*x6523);
IkReal x6531=(sj5*x6522);
evalcond[0]=(((r12*x6523))+(((-1.0)*x6525*x6528))+((r11*x6531)));
evalcond[1]=((((-1.0)*r22*x6528))+(((-1.0)*x6527*x6529))+((x6523*x6526)));
evalcond[2]=((((-1.0)*r02*x6528))+((r01*x6530))+(((-1.0)*x6524*x6529)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6528))+(((-1.0)*x6525*x6529))+((r11*x6530)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6527*x6528))+((x6522*x6526))+((r22*x6523)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6523))+((r01*x6531))+(((-1.0)*x6524*x6528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6532.valid){
continue;
}
CheckValue<IkReal> x6533 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6532.value)))+(x6533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6534=IKcos(j4);
IkReal x6535=IKsin(j4);
IkReal x6536=(cj5*r00);
IkReal x6537=(cj5*r10);
IkReal x6538=(r21*sj5);
IkReal x6539=(cj5*r20);
IkReal x6540=((1.0)*x6534);
IkReal x6541=((1.0)*x6535);
IkReal x6542=(sj5*x6535);
IkReal x6543=(sj5*x6534);
evalcond[0]=((((-1.0)*x6537*x6540))+((r11*x6543))+((r12*x6535)));
evalcond[1]=((((-1.0)*r22*x6540))+(((-1.0)*x6539*x6541))+((x6535*x6538)));
evalcond[2]=((((-1.0)*x6536*x6541))+(((-1.0)*r02*x6540))+((r01*x6542)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6540))+(((-1.0)*x6537*x6541))+((r11*x6542)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6535))+(((-1.0)*x6539*x6540))+((x6534*x6538)));
evalcond[5]=(((r02*x6535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6536*x6540))+((r01*x6543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6544=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6544;
j4eval[1]=IKsign(x6544);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6545=((1.0)*cj5);
IkReal x6546=((((-1.0)*r21*x6545))+(((-1.0)*r20*sj5)));
j4eval[0]=x6546;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6545))+((r01*sj5))))));
j4eval[2]=IKsign(x6546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6547=cj5*cj5;
IkReal x6548=r11*r11;
IkReal x6549=(r11*sj5);
IkReal x6550=(cj5*r10);
IkReal x6551=((((-2.0)*x6549*x6550))+(r12*r12)+x6548+((x6547*(r10*r10)))+(((-1.0)*x6547*x6548)));
j4eval[0]=x6551;
j4eval[1]=IKsign(x6551);
j4eval[2]=((IKabs(r12))+(IKabs((x6549+(((-1.0)*x6550))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6552=cj5*cj5;
IkReal x6553=r11*r11;
IkReal x6554=(cj5*r10);
IkReal x6555=(r11*sj5);
CheckValue<IkReal> x6556=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6552*x6553))+((x6552*(r10*r10)))+x6553+(((-2.0)*x6554*x6555)))),-1);
if(!x6556.valid){
continue;
}
CheckValue<IkReal> x6557 = IKatan2WithCheck(IkReal((x6555+(((-1.0)*x6554)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6556.value)))+(x6557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6558=IKcos(j4);
IkReal x6559=IKsin(j4);
IkReal x6560=(cj5*r00);
IkReal x6561=(cj5*r10);
IkReal x6562=(r21*sj5);
IkReal x6563=(cj5*r20);
IkReal x6564=((1.0)*x6558);
IkReal x6565=((1.0)*x6559);
IkReal x6566=(sj5*x6559);
IkReal x6567=(sj5*x6558);
evalcond[0]=(((r11*x6567))+(((-1.0)*x6561*x6564))+((r12*x6559)));
evalcond[1]=((((-1.0)*r22*x6564))+(((-1.0)*x6563*x6565))+((x6559*x6562)));
evalcond[2]=((((-1.0)*r02*x6564))+(((-1.0)*x6560*x6565))+((r01*x6566)));
evalcond[3]=((-1.0)+((r11*x6566))+(((-1.0)*x6561*x6565))+(((-1.0)*r12*x6564)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6559))+((x6558*x6562))+(((-1.0)*x6563*x6564)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6559))+((cj1*cj2))+(((-1.0)*x6560*x6564))+((r01*x6567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6568=((1.0)*cj5);
CheckValue<IkReal> x6569 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6569.valid){
continue;
}
CheckValue<IkReal> x6570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6568))+(((-1.0)*r20*sj5)))),-1);
if(!x6570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6569.value)+(((1.5707963267949)*(x6570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6571=IKcos(j4);
IkReal x6572=IKsin(j4);
IkReal x6573=(cj5*r00);
IkReal x6574=(cj5*r10);
IkReal x6575=(r21*sj5);
IkReal x6576=(cj5*r20);
IkReal x6577=((1.0)*x6571);
IkReal x6578=((1.0)*x6572);
IkReal x6579=(sj5*x6572);
IkReal x6580=(sj5*x6571);
evalcond[0]=(((r11*x6580))+((r12*x6572))+(((-1.0)*x6574*x6577)));
evalcond[1]=((((-1.0)*x6576*x6578))+((x6572*x6575))+(((-1.0)*r22*x6577)));
evalcond[2]=(((r01*x6579))+(((-1.0)*x6573*x6578))+(((-1.0)*r02*x6577)));
evalcond[3]=((-1.0)+(((-1.0)*x6574*x6578))+((r11*x6579))+(((-1.0)*r12*x6577)));
evalcond[4]=(((r22*x6572))+((cj2*sj1))+(((-1.0)*x6576*x6577))+((cj1*sj2))+((x6571*x6575)));
evalcond[5]=((((-1.0)*x6573*x6577))+(((-1.0)*sj1*sj2))+((r01*x6580))+((cj1*cj2))+((r02*x6572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6581 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6581.valid){
continue;
}
CheckValue<IkReal> x6582=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6581.value)+(((1.5707963267949)*(x6582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6583=IKcos(j4);
IkReal x6584=IKsin(j4);
IkReal x6585=(cj5*r00);
IkReal x6586=(cj5*r10);
IkReal x6587=(r21*sj5);
IkReal x6588=(cj5*r20);
IkReal x6589=((1.0)*x6583);
IkReal x6590=((1.0)*x6584);
IkReal x6591=(sj5*x6584);
IkReal x6592=(sj5*x6583);
evalcond[0]=(((r11*x6592))+(((-1.0)*x6586*x6589))+((r12*x6584)));
evalcond[1]=((((-1.0)*r22*x6589))+(((-1.0)*x6588*x6590))+((x6584*x6587)));
evalcond[2]=((((-1.0)*r02*x6589))+((r01*x6591))+(((-1.0)*x6585*x6590)));
evalcond[3]=((-1.0)+((r11*x6591))+(((-1.0)*r12*x6589))+(((-1.0)*x6586*x6590)));
evalcond[4]=(((cj2*sj1))+((r22*x6584))+((cj1*sj2))+((x6583*x6587))+(((-1.0)*x6588*x6589)));
evalcond[5]=(((r02*x6584))+(((-1.0)*sj1*sj2))+((r01*x6592))+((cj1*cj2))+(((-1.0)*x6585*x6589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6593=((-1.0)*r00);
IkReal x6595 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6595)==0){
continue;
}
IkReal x6594=pow(x6595,-0.5);
CheckValue<IkReal> x6596 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6593),IKFAST_ATAN2_MAGTHRESH);
if(!x6596.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6596.value));
IkReal gconst127=(r01*x6594);
IkReal gconst128=(x6593*x6594);
CheckValue<IkReal> x6597 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6597.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6597.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6598=((-1.0)*r00);
IkReal x6599=x6594;
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6598),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
IkReal x6600=((-1.0)*(x6601.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6600;
IkReal gconst126=x6600;
IkReal gconst127=(r01*x6599);
IkReal gconst128=(x6598*x6599);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6602=((1.0)*sj0);
IkReal x6603=((1.0)*gconst127);
CheckValue<IkReal> x6604 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6602)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6602))+(((-1.0)*cj0*r01*x6603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6604.valid){
continue;
}
CheckValue<IkReal> x6605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6603)))),-1);
if(!x6605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6604.value)+(((1.5707963267949)*(x6605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6606=IKsin(j4);
IkReal x6607=IKcos(j4);
IkReal x6608=(gconst127*r01);
IkReal x6609=(sj1*sj2);
IkReal x6610=(gconst128*r10);
IkReal x6611=(gconst128*r00);
IkReal x6612=(gconst128*r20);
IkReal x6613=((1.0)*x6607);
IkReal x6614=((1.0)*cj1*cj2);
IkReal x6615=((1.0)*x6606);
IkReal x6616=(gconst127*x6607);
IkReal x6617=(gconst127*x6606);
evalcond[0]=(((r21*x6617))+(((-1.0)*x6612*x6615))+(((-1.0)*r22*x6613)));
evalcond[1]=((((-1.0)*r12*x6613))+cj0+(((-1.0)*x6610*x6615))+((r11*x6617)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6611*x6615))+(((-1.0)*r02*x6613))+((x6606*x6608)));
evalcond[3]=(((cj2*sj1))+((r21*x6616))+((r22*x6606))+(((-1.0)*x6612*x6613))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x6611*x6613))+(((-1.0)*cj0*x6614))+((r02*x6606))+((cj0*x6609))+((x6607*x6608)));
evalcond[5]=(((sj0*x6609))+(((-1.0)*x6610*x6613))+((r11*x6616))+(((-1.0)*sj0*x6614))+((r12*x6606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6618=((1.0)*gconst128);
CheckValue<IkReal> x6619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6618))+(((-1.0)*gconst127*r10)))),-1);
if(!x6619.valid){
continue;
}
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6619.value)))+(x6620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6621=IKsin(j4);
IkReal x6622=IKcos(j4);
IkReal x6623=(gconst127*r01);
IkReal x6624=(sj1*sj2);
IkReal x6625=(gconst128*r10);
IkReal x6626=(gconst128*r00);
IkReal x6627=(gconst128*r20);
IkReal x6628=((1.0)*x6622);
IkReal x6629=((1.0)*cj1*cj2);
IkReal x6630=((1.0)*x6621);
IkReal x6631=(gconst127*x6622);
IkReal x6632=(gconst127*x6621);
evalcond[0]=(((r21*x6632))+(((-1.0)*r22*x6628))+(((-1.0)*x6627*x6630)));
evalcond[1]=((((-1.0)*r12*x6628))+cj0+((r11*x6632))+(((-1.0)*x6625*x6630)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6628))+((x6621*x6623))+(((-1.0)*x6626*x6630)));
evalcond[3]=(((cj2*sj1))+((r21*x6631))+((cj1*sj2))+((r22*x6621))+(((-1.0)*x6627*x6628)));
evalcond[4]=(((r02*x6621))+(((-1.0)*cj0*x6629))+((cj0*x6624))+(((-1.0)*x6626*x6628))+((x6622*x6623)));
evalcond[5]=(((r12*x6621))+((r11*x6631))+(((-1.0)*sj0*x6629))+(((-1.0)*x6625*x6628))+((sj0*x6624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6633=((-1.0)*r01);
IkReal x6635 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6635)==0){
continue;
}
IkReal x6634=pow(x6635,-0.5);
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal(x6633),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6636.value))));
IkReal gconst130=(x6633*x6634);
IkReal gconst131=((1.0)*r00*x6634);
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6638=((-1.0)*r01);
CheckValue<IkReal> x6641 = IKatan2WithCheck(IkReal(x6638),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6641.valid){
continue;
}
IkReal x6639=((1.0)*(x6641.value));
IkReal x6640=x6634;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6639)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6639)));
IkReal gconst130=(x6638*x6640);
IkReal gconst131=((1.0)*r00*x6640);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6642=((-1.0)*r01);
CheckValue<IkReal> x6645 = IKatan2WithCheck(IkReal(x6642),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6645.valid){
continue;
}
IkReal x6643=((1.0)*(x6645.value));
IkReal x6644=x6634;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6643)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6643)));
IkReal gconst130=(x6642*x6644);
IkReal gconst131=((1.0)*r00*x6644);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6646=((-1.0)*r01);
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal(x6646),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
IkReal x6647=((1.0)*(x6649.value));
IkReal x6648=x6634;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6647)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6647)));
IkReal gconst130=(x6646*x6648);
IkReal gconst131=((1.0)*r00*x6648);
IkReal x6650=r02*r02;
IkReal x6651=(r12*sj0);
IkReal x6652=((1.0)*cj0);
IkReal x6653=x6634;
j4eval[0]=((IKabs(((((-1.0)*x6651))+(((-1.0)*r02*x6652)))))+(IKabs(((((-1.0)*x6652*x6653))+((r02*x6651*x6653))+((cj0*x6650*x6653))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6654=((1.0)*sj0);
IkReal x6655=((1.0)*gconst130);
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6654))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6655))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
CheckValue<IkReal> x6657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6655))+(((-1.0)*gconst131*r21)))),-1);
if(!x6657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6656.value)+(((1.5707963267949)*(x6657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6658=IKsin(j4);
IkReal x6659=IKcos(j4);
IkReal x6660=(gconst131*r10);
IkReal x6661=(sj1*sj2);
IkReal x6662=(gconst131*r20);
IkReal x6663=(gconst131*r00);
IkReal x6664=((1.0)*x6659);
IkReal x6665=((1.0)*cj1*cj2);
IkReal x6666=(gconst130*x6658);
IkReal x6667=((1.0)*x6658);
IkReal x6668=(gconst130*x6659);
evalcond[0]=(((r21*x6666))+(((-1.0)*x6662*x6667))+(((-1.0)*r22*x6664)));
evalcond[1]=(cj0+((r11*x6666))+(((-1.0)*x6660*x6667))+(((-1.0)*r12*x6664)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6666))+(((-1.0)*r02*x6664))+(((-1.0)*x6663*x6667)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6668))+((r22*x6658))+(((-1.0)*x6662*x6664)));
evalcond[4]=(((r02*x6658))+((r01*x6668))+(((-1.0)*cj0*x6665))+(((-1.0)*x6663*x6664))+((cj0*x6661)));
evalcond[5]=(((r12*x6658))+(((-1.0)*sj0*x6665))+((r11*x6668))+(((-1.0)*x6660*x6664))+((sj0*x6661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6669=((1.0)*gconst131);
CheckValue<IkReal> x6670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6669))+(((-1.0)*gconst130*r10)))),-1);
if(!x6670.valid){
continue;
}
CheckValue<IkReal> x6671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6669))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6670.value)))+(x6671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6672=IKsin(j4);
IkReal x6673=IKcos(j4);
IkReal x6674=(gconst131*r10);
IkReal x6675=(sj1*sj2);
IkReal x6676=(gconst131*r20);
IkReal x6677=(gconst131*r00);
IkReal x6678=((1.0)*x6673);
IkReal x6679=((1.0)*cj1*cj2);
IkReal x6680=(gconst130*x6672);
IkReal x6681=((1.0)*x6672);
IkReal x6682=(gconst130*x6673);
evalcond[0]=((((-1.0)*x6676*x6681))+((r21*x6680))+(((-1.0)*r22*x6678)));
evalcond[1]=(cj0+(((-1.0)*r12*x6678))+((r11*x6680))+(((-1.0)*x6674*x6681)));
evalcond[2]=((((-1.0)*r02*x6678))+(((-1.0)*sj0))+((r01*x6680))+(((-1.0)*x6677*x6681)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6682))+(((-1.0)*x6676*x6678))+((r22*x6672)));
evalcond[4]=(((cj0*x6675))+((r02*x6672))+((r01*x6682))+(((-1.0)*x6677*x6678))+(((-1.0)*cj0*x6679)));
evalcond[5]=(((r11*x6682))+((r12*x6672))+(((-1.0)*sj0*x6679))+(((-1.0)*x6674*x6678))+((sj0*x6675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6683=((1.0)*gconst131);
CheckValue<IkReal> x6684 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6684.valid){
continue;
}
CheckValue<IkReal> x6685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6683))+(((-1.0)*gconst130*r00)))),-1);
if(!x6685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6684.value)+(((1.5707963267949)*(x6685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6686=IKsin(j4);
IkReal x6687=IKcos(j4);
IkReal x6688=(gconst131*r10);
IkReal x6689=(sj1*sj2);
IkReal x6690=(gconst131*r20);
IkReal x6691=(gconst131*r00);
IkReal x6692=((1.0)*x6687);
IkReal x6693=((1.0)*cj1*cj2);
IkReal x6694=(gconst130*x6686);
IkReal x6695=((1.0)*x6686);
IkReal x6696=(gconst130*x6687);
evalcond[0]=((((-1.0)*x6690*x6695))+((r21*x6694))+(((-1.0)*r22*x6692)));
evalcond[1]=(((r11*x6694))+cj0+(((-1.0)*x6688*x6695))+(((-1.0)*r12*x6692)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6692))+((r01*x6694))+(((-1.0)*x6691*x6695)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6686))+(((-1.0)*x6690*x6692))+((r21*x6696)));
evalcond[4]=(((r02*x6686))+(((-1.0)*cj0*x6693))+((r01*x6696))+(((-1.0)*x6691*x6692))+((cj0*x6689)));
evalcond[5]=(((r12*x6686))+((r11*x6696))+((sj0*x6689))+(((-1.0)*x6688*x6692))+(((-1.0)*sj0*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6697=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6697;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6698=((1.0)*cj5);
IkReal x6699=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6698)));
j4eval[0]=x6699;
j4eval[1]=((IKabs(((((-1.0)*r20*x6698))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6700=cj5*cj5;
IkReal x6701=r01*r01;
IkReal x6702=(cj5*r00);
IkReal x6703=(r01*sj5);
IkReal x6704=(x6701+((x6700*(r00*r00)))+(((-2.0)*x6702*x6703))+(r02*r02)+(((-1.0)*x6700*x6701)));
j4eval[0]=x6704;
j4eval[1]=IKsign(x6704);
j4eval[2]=((IKabs(r02))+(IKabs((x6703+(((-1.0)*x6702))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6705=cj5*cj5;
IkReal x6706=r01*r01;
IkReal x6707=(r01*sj5);
IkReal x6708=(cj5*r00);
CheckValue<IkReal> x6709 = IKatan2WithCheck(IkReal((x6707+(((-1.0)*x6708)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6709.valid){
continue;
}
CheckValue<IkReal> x6710=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6705*x6706))+x6706+(((-2.0)*x6707*x6708))+((x6705*(r00*r00)))+(r02*r02))),-1);
if(!x6710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6709.value)+(((1.5707963267949)*(x6710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6711=IKcos(j4);
IkReal x6712=IKsin(j4);
IkReal x6713=(cj5*r00);
IkReal x6714=(cj5*r10);
IkReal x6715=(r21*sj5);
IkReal x6716=(cj5*r20);
IkReal x6717=((1.0)*x6711);
IkReal x6718=((1.0)*x6712);
IkReal x6719=(sj5*x6712);
IkReal x6720=(sj5*x6711);
evalcond[0]=((((-1.0)*x6713*x6717))+((r02*x6712))+((r01*x6720)));
evalcond[1]=(((x6712*x6715))+(((-1.0)*x6716*x6718))+(((-1.0)*r22*x6717)));
evalcond[2]=(((r11*x6719))+(((-1.0)*x6714*x6718))+(((-1.0)*r12*x6717)));
evalcond[3]=((-1.0)+(((-1.0)*x6713*x6718))+(((-1.0)*r02*x6717))+((r01*x6719)));
evalcond[4]=(((cj2*sj1))+((x6711*x6715))+((cj1*sj2))+((r22*x6712))+(((-1.0)*x6716*x6717)));
evalcond[5]=(((r11*x6720))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6714*x6717))+((r12*x6712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6721=((1.0)*cj5);
CheckValue<IkReal> x6722 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6721))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6722.valid){
continue;
}
CheckValue<IkReal> x6723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6721)))),-1);
if(!x6723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6722.value)+(((1.5707963267949)*(x6723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6724=IKcos(j4);
IkReal x6725=IKsin(j4);
IkReal x6726=(cj5*r00);
IkReal x6727=(cj5*r10);
IkReal x6728=(r21*sj5);
IkReal x6729=(cj5*r20);
IkReal x6730=((1.0)*x6724);
IkReal x6731=((1.0)*x6725);
IkReal x6732=(sj5*x6725);
IkReal x6733=(sj5*x6724);
evalcond[0]=((((-1.0)*x6726*x6730))+((r02*x6725))+((r01*x6733)));
evalcond[1]=((((-1.0)*r22*x6730))+(((-1.0)*x6729*x6731))+((x6725*x6728)));
evalcond[2]=((((-1.0)*r12*x6730))+(((-1.0)*x6727*x6731))+((r11*x6732)));
evalcond[3]=((-1.0)+(((-1.0)*x6726*x6731))+(((-1.0)*r02*x6730))+((r01*x6732)));
evalcond[4]=(((x6724*x6728))+((cj2*sj1))+((cj1*sj2))+((r22*x6725))+(((-1.0)*x6729*x6730)));
evalcond[5]=(((r12*x6725))+(((-1.0)*x6727*x6730))+((r11*x6733))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6734=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6734.valid){
continue;
}
CheckValue<IkReal> x6735 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6734.value)))+(x6735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6736=IKcos(j4);
IkReal x6737=IKsin(j4);
IkReal x6738=(cj5*r00);
IkReal x6739=(cj5*r10);
IkReal x6740=(r21*sj5);
IkReal x6741=(cj5*r20);
IkReal x6742=((1.0)*x6736);
IkReal x6743=((1.0)*x6737);
IkReal x6744=(sj5*x6737);
IkReal x6745=(sj5*x6736);
evalcond[0]=((((-1.0)*x6738*x6742))+((r01*x6745))+((r02*x6737)));
evalcond[1]=((((-1.0)*r22*x6742))+((x6737*x6740))+(((-1.0)*x6741*x6743)));
evalcond[2]=((((-1.0)*r12*x6742))+((r11*x6744))+(((-1.0)*x6739*x6743)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6742))+(((-1.0)*x6738*x6743))+((r01*x6744)));
evalcond[4]=(((r22*x6737))+((cj2*sj1))+((cj1*sj2))+((x6736*x6740))+(((-1.0)*x6741*x6742)));
evalcond[5]=(((r11*x6745))+((r12*x6737))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6739*x6742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6746=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6746;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6747=((1.0)*cj5);
IkReal x6748=((((-1.0)*r21*x6747))+(((-1.0)*r20*sj5)));
j4eval[0]=x6748;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6747))+((r11*sj5))))));
j4eval[2]=IKsign(x6748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6749=(r01*sj5);
IkReal x6750=(cj1*sj2);
IkReal x6751=(cj2*sj1);
IkReal x6752=((1.0)*r02);
IkReal x6753=((1.0)*cj5*r00);
IkReal x6754=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6754;
j4eval[1]=((IKabs(((((-1.0)*x6750*x6752))+(((-1.0)*x6751*x6752)))))+(IKabs(((((-1.0)*x6750*x6753))+(((-1.0)*x6751*x6753))+((x6749*x6751))+((x6749*x6750))))));
j4eval[2]=IKsign(x6754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6755=(r01*sj5);
IkReal x6756=(cj1*sj2);
IkReal x6757=(cj2*sj1);
IkReal x6758=((1.0)*r02);
IkReal x6759=((1.0)*cj5*r00);
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal(((((-1.0)*x6756*x6759))+((x6755*x6757))+((x6755*x6756))+(((-1.0)*x6757*x6759)))),IkReal(((((-1.0)*x6756*x6758))+(((-1.0)*x6757*x6758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
CheckValue<IkReal> x6761=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6760.value)+(((1.5707963267949)*(x6761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6762=IKcos(j4);
IkReal x6763=IKsin(j4);
IkReal x6764=(cj5*r00);
IkReal x6765=(cj5*r10);
IkReal x6766=(r21*sj5);
IkReal x6767=(cj5*r20);
IkReal x6768=((1.0)*x6762);
IkReal x6769=((1.0)*x6763);
IkReal x6770=(sj5*x6763);
IkReal x6771=(sj5*x6762);
evalcond[0]=((((-1.0)*x6764*x6768))+((r02*x6763))+((r01*x6771)));
evalcond[1]=((((-1.0)*x6767*x6769))+(((-1.0)*r22*x6768))+((x6763*x6766)));
evalcond[2]=(((r11*x6770))+(((-1.0)*x6765*x6769))+(((-1.0)*r12*x6768)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6768))+(((-1.0)*x6764*x6769))+((r01*x6770)));
evalcond[4]=(((cj2*sj1))+((r22*x6763))+(((-1.0)*x6767*x6768))+((cj1*sj2))+((x6762*x6766)));
evalcond[5]=(((r11*x6771))+((r12*x6763))+(((-1.0)*sj1*sj2))+(((-1.0)*x6765*x6768))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6772=((1.0)*cj5);
CheckValue<IkReal> x6773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6772))+(((-1.0)*r20*sj5)))),-1);
if(!x6773.valid){
continue;
}
CheckValue<IkReal> x6774 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6773.value)))+(x6774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6775=IKcos(j4);
IkReal x6776=IKsin(j4);
IkReal x6777=(cj5*r00);
IkReal x6778=(cj5*r10);
IkReal x6779=(r21*sj5);
IkReal x6780=(cj5*r20);
IkReal x6781=((1.0)*x6775);
IkReal x6782=((1.0)*x6776);
IkReal x6783=(sj5*x6776);
IkReal x6784=(sj5*x6775);
evalcond[0]=(((r02*x6776))+((r01*x6784))+(((-1.0)*x6777*x6781)));
evalcond[1]=(((x6776*x6779))+(((-1.0)*r22*x6781))+(((-1.0)*x6780*x6782)));
evalcond[2]=(((r11*x6783))+(((-1.0)*x6778*x6782))+(((-1.0)*r12*x6781)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6781))+((r01*x6783))+(((-1.0)*x6777*x6782)));
evalcond[4]=(((cj2*sj1))+((x6775*x6779))+((cj1*sj2))+((r22*x6776))+(((-1.0)*x6780*x6781)));
evalcond[5]=(((r12*x6776))+((r11*x6784))+(((-1.0)*x6778*x6781))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6785 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6785.valid){
continue;
}
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6785.value)+(((1.5707963267949)*(x6786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6787=IKcos(j4);
IkReal x6788=IKsin(j4);
IkReal x6789=(cj5*r00);
IkReal x6790=(cj5*r10);
IkReal x6791=(r21*sj5);
IkReal x6792=(cj5*r20);
IkReal x6793=((1.0)*x6787);
IkReal x6794=((1.0)*x6788);
IkReal x6795=(sj5*x6788);
IkReal x6796=(sj5*x6787);
evalcond[0]=((((-1.0)*x6789*x6793))+((r01*x6796))+((r02*x6788)));
evalcond[1]=((((-1.0)*x6792*x6794))+(((-1.0)*r22*x6793))+((x6788*x6791)));
evalcond[2]=(((r11*x6795))+(((-1.0)*x6790*x6794))+(((-1.0)*r12*x6793)));
evalcond[3]=((1.0)+(((-1.0)*x6789*x6794))+((r01*x6795))+(((-1.0)*r02*x6793)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6792*x6793))+((cj1*sj2))+((x6787*x6791))+((r22*x6788)));
evalcond[5]=(((r12*x6788))+(((-1.0)*sj1*sj2))+((r11*x6796))+(((-1.0)*x6790*x6793))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6797=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6797);
rxp1_1=(px*r21);
rxp1_2=(r11*x6797);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6798=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6798);
rxp1_1=(px*r21);
rxp1_2=(r11*x6798);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6799=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6799);
rxp1_1=(px*r21);
rxp1_2=(r11*x6799);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6802=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6802.valid){
continue;
}
IkReal x6800=x6802.value;
IkReal x6801=(sj0*x6800);
cj4array[0]=(((cj1*cj2*x6801))+(((-1.0)*sj1*sj2*x6801)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6803=IKsin(j4);
IkReal x6804=IKcos(j4);
IkReal x6805=(r21*sj5);
IkReal x6806=((1.0)*cj5*r20);
evalcond[0]=(r02*x6803);
evalcond[1]=((((-1.0)*r02*x6804))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6803*x6806))+((x6803*x6805)));
evalcond[3]=(((r11*sj5*x6803))+(((-1.0)*cj5*r10*x6803)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6804*x6806))+((x6804*x6805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6809=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6809.valid){
continue;
}
IkReal x6807=x6809.value;
IkReal x6808=((1.0)*x6807);
cj4array[0]=((((-1.0)*cj2*sj1*x6808))+(((-1.0)*cj1*sj2*x6808)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6810=IKsin(j4);
IkReal x6811=IKcos(j4);
IkReal x6812=((1.0)*sj0);
IkReal x6813=((1.0)*cj5);
IkReal x6814=(sj5*x6810);
evalcond[0]=(r02*x6810);
evalcond[1]=((((-1.0)*r02*x6811))+(((-1.0)*x6812)));
evalcond[2]=(((r21*x6814))+(((-1.0)*r20*x6810*x6813)));
evalcond[3]=(((r11*x6814))+(((-1.0)*r10*x6810*x6813)));
evalcond[4]=((((-1.0)*r10*x6811*x6813))+((r11*sj5*x6811))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(r02,-1);
if(!x6815.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6815.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6816=IKsin(j4);
IkReal x6817=IKcos(j4);
IkReal x6818=(r21*sj5);
IkReal x6819=((1.0)*cj5);
IkReal x6820=(r11*sj5);
evalcond[0]=(r02*x6816);
evalcond[1]=((((-1.0)*r20*x6816*x6819))+((x6816*x6818)));
evalcond[2]=((((-1.0)*r10*x6816*x6819))+((x6816*x6820)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6817*x6819))+((x6817*x6818)));
evalcond[4]=(((x6817*x6820))+(((-1.0)*r10*x6817*x6819))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6821=((1.0)*sj0);
IkReal x6822=((1.0)*cj0);
CheckValue<IkReal> x6823 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6822))+(((-1.0)*r12*x6821)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6821))+(((-1.0)*r01*sj5*x6822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6823.valid){
continue;
}
CheckValue<IkReal> x6824=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6823.value)+(((1.5707963267949)*(x6824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6825=IKsin(j4);
IkReal x6826=IKcos(j4);
IkReal x6827=(cj5*r00);
IkReal x6828=(cj5*r10);
IkReal x6829=(r21*sj5);
IkReal x6830=(sj1*sj2);
IkReal x6831=(cj5*r20);
IkReal x6832=((1.0)*x6826);
IkReal x6833=((1.0)*cj1*cj2);
IkReal x6834=((1.0)*x6825);
IkReal x6835=(sj5*x6825);
IkReal x6836=(sj5*x6826);
evalcond[0]=(((x6825*x6829))+(((-1.0)*r22*x6832))+(((-1.0)*x6831*x6834)));
evalcond[1]=(cj0+(((-1.0)*r12*x6832))+((r11*x6835))+(((-1.0)*x6828*x6834)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6832))+((r01*x6835))+(((-1.0)*x6827*x6834)));
evalcond[3]=(((cj2*sj1))+((r22*x6825))+((cj1*sj2))+((x6826*x6829))+(((-1.0)*x6831*x6832)));
evalcond[4]=(((r02*x6825))+((r01*x6836))+(((-1.0)*cj0*x6833))+(((-1.0)*x6827*x6832))+((cj0*x6830)));
evalcond[5]=((((-1.0)*sj0*x6833))+((sj0*x6830))+((r11*x6836))+((r12*x6825))+(((-1.0)*x6828*x6832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6837=((1.0)*cj5);
CheckValue<IkReal> x6838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6837)))),-1);
if(!x6838.valid){
continue;
}
CheckValue<IkReal> x6839 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6837))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6838.value)))+(x6839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6840=IKsin(j4);
IkReal x6841=IKcos(j4);
IkReal x6842=(cj5*r00);
IkReal x6843=(cj5*r10);
IkReal x6844=(r21*sj5);
IkReal x6845=(sj1*sj2);
IkReal x6846=(cj5*r20);
IkReal x6847=((1.0)*x6841);
IkReal x6848=((1.0)*cj1*cj2);
IkReal x6849=((1.0)*x6840);
IkReal x6850=(sj5*x6840);
IkReal x6851=(sj5*x6841);
evalcond[0]=((((-1.0)*r22*x6847))+(((-1.0)*x6846*x6849))+((x6840*x6844)));
evalcond[1]=((((-1.0)*x6843*x6849))+cj0+((r11*x6850))+(((-1.0)*r12*x6847)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6850))+(((-1.0)*r02*x6847))+(((-1.0)*x6842*x6849)));
evalcond[3]=(((cj2*sj1))+((r22*x6840))+((cj1*sj2))+(((-1.0)*x6846*x6847))+((x6841*x6844)));
evalcond[4]=(((cj0*x6845))+((r01*x6851))+(((-1.0)*x6842*x6847))+(((-1.0)*cj0*x6848))+((r02*x6840)));
evalcond[5]=((((-1.0)*x6843*x6847))+((r12*x6840))+((r11*x6851))+(((-1.0)*sj0*x6848))+((sj0*x6845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6852=((1.0)*cj5);
CheckValue<IkReal> x6853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6852)))),-1);
if(!x6853.valid){
continue;
}
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6852))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6853.value)))+(x6854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6855=IKsin(j4);
IkReal x6856=IKcos(j4);
IkReal x6857=(cj5*r00);
IkReal x6858=(cj5*r10);
IkReal x6859=(r21*sj5);
IkReal x6860=(sj1*sj2);
IkReal x6861=(cj5*r20);
IkReal x6862=((1.0)*x6856);
IkReal x6863=((1.0)*cj1*cj2);
IkReal x6864=((1.0)*x6855);
IkReal x6865=(sj5*x6855);
IkReal x6866=(sj5*x6856);
evalcond[0]=((((-1.0)*r22*x6862))+((x6855*x6859))+(((-1.0)*x6861*x6864)));
evalcond[1]=(((r11*x6865))+cj0+(((-1.0)*r12*x6862))+(((-1.0)*x6858*x6864)));
evalcond[2]=((((-1.0)*x6857*x6864))+(((-1.0)*sj0))+(((-1.0)*r02*x6862))+((r01*x6865)));
evalcond[3]=(((cj2*sj1))+((x6856*x6859))+((r22*x6855))+((cj1*sj2))+(((-1.0)*x6861*x6862)));
evalcond[4]=((((-1.0)*x6857*x6862))+((r02*x6855))+((cj0*x6860))+((r01*x6866))+(((-1.0)*cj0*x6863)));
evalcond[5]=(((sj0*x6860))+((r11*x6866))+((r12*x6855))+(((-1.0)*x6858*x6862))+(((-1.0)*sj0*x6863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6867=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6867;
j0eval[1]=IKsign(x6867);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6868=cj5*cj5;
IkReal x6869=r21*r21;
IkReal x6870=(cj2*sj1);
IkReal x6871=(cj1*sj2);
IkReal x6872=(r21*sj5);
IkReal x6873=((1.0)*cj5*r20);
IkReal x6874=((r22*r22)+((x6868*(r20*r20)))+x6869+(((-1.0)*x6868*x6869))+(((-2.0)*cj5*r20*x6872)));
j4eval[0]=x6874;
j4eval[1]=IKsign(x6874);
j4eval[2]=((IKabs((((r22*x6871))+((r22*x6870)))))+(IKabs(((((-1.0)*x6871*x6873))+((x6870*x6872))+(((-1.0)*x6870*x6873))+((x6871*x6872))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6875=cj1*cj1;
IkReal x6876=(cj2*sj2);
IkReal x6877=(cj2*sj1);
IkReal x6878=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x6877))+x6878+x6876+(((-1.08418367346939)*cj1*x6877))+(((-1.08418367346939)*sj2*x6875))+(((-2.0)*x6875*x6876)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6877)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6879=IKcos(j0);
IkReal x6880=IKsin(j0);
evalcond[0]=((((-0.134)*x6880))+(((0.817)*x6879))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x6879))+(((0.817)*x6880))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6881=((1.0)*cj5);
IkReal x6882=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6881)));
j4eval[0]=x6882;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6881)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6883=((1.0)*cj5);
IkReal x6884=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6883)));
j4eval[0]=x6884;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6883)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6885=cj5*cj5;
IkReal x6886=((1.0)*sj5);
IkReal x6887=(cj5*r20);
IkReal x6888=(r11*r21);
IkReal x6889=((((-1.0)*x6885*x6888))+((r10*r20*x6885))+((r12*r22))+(((-1.0)*r11*x6886*x6887))+x6888+(((-1.0)*cj5*r10*r21*x6886)));
j4eval[0]=x6889;
j4eval[1]=IKsign(x6889);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6887))+(((-1.0)*cj0*r21*x6886))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6890=cj5*cj5;
IkReal x6891=((1.0)*sj5);
IkReal x6892=(cj5*r20);
IkReal x6893=(r11*r21);
CheckValue<IkReal> x6894 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6891))+((cj0*x6892)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6894.valid){
continue;
}
CheckValue<IkReal> x6895=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6891))+(((-1.0)*r11*x6891*x6892))+((r10*r20*x6890))+((r12*r22))+x6893+(((-1.0)*x6890*x6893)))),-1);
if(!x6895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6894.value)+(((1.5707963267949)*(x6895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6896=IKsin(j4);
IkReal x6897=IKcos(j4);
IkReal x6898=((1.0)*sj0);
IkReal x6899=(cj5*r00);
IkReal x6900=(r11*sj5);
IkReal x6901=(cj5*r10);
IkReal x6902=(r21*sj5);
IkReal x6903=(cj5*r20);
IkReal x6904=(r01*sj5);
IkReal x6905=((1.0)*x6897);
IkReal x6906=((1.0)*x6896);
evalcond[0]=(((x6896*x6902))+(((-1.0)*r22*x6905))+(((-1.0)*x6903*x6906)));
evalcond[1]=(((x6897*x6903))+(((-1.0)*r22*x6906))+(((-1.0)*x6902*x6905)));
evalcond[2]=(((x6896*x6900))+cj0+(((-1.0)*r12*x6905))+(((-1.0)*x6901*x6906)));
evalcond[3]=((((-1.0)*r02*x6905))+((x6896*x6904))+(((-1.0)*x6898))+(((-1.0)*x6899*x6906)));
evalcond[4]=((((-1.0)*r02*x6906))+(((-1.0)*x6904*x6905))+((x6897*x6899))+(((-1.0)*cj0)));
evalcond[5]=(((x6897*x6901))+(((-1.0)*x6900*x6905))+(((-1.0)*r12*x6906))+(((-1.0)*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6907=((1.0)*cj5);
CheckValue<IkReal> x6908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6907)))),-1);
if(!x6908.valid){
continue;
}
CheckValue<IkReal> x6909 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6907))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6908.value)))+(x6909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6910=IKsin(j4);
IkReal x6911=IKcos(j4);
IkReal x6912=((1.0)*sj0);
IkReal x6913=(cj5*r00);
IkReal x6914=(r11*sj5);
IkReal x6915=(cj5*r10);
IkReal x6916=(r21*sj5);
IkReal x6917=(cj5*r20);
IkReal x6918=(r01*sj5);
IkReal x6919=((1.0)*x6911);
IkReal x6920=((1.0)*x6910);
evalcond[0]=((((-1.0)*r22*x6919))+((x6910*x6916))+(((-1.0)*x6917*x6920)));
evalcond[1]=((((-1.0)*r22*x6920))+(((-1.0)*x6916*x6919))+((x6911*x6917)));
evalcond[2]=(cj0+(((-1.0)*r12*x6919))+((x6910*x6914))+(((-1.0)*x6915*x6920)));
evalcond[3]=((((-1.0)*x6913*x6920))+(((-1.0)*x6912))+((x6910*x6918))+(((-1.0)*r02*x6919)));
evalcond[4]=((((-1.0)*r02*x6920))+((x6911*x6913))+(((-1.0)*x6918*x6919))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6912))+((x6911*x6915))+(((-1.0)*r12*x6920))+(((-1.0)*x6914*x6919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6921=((1.0)*cj5);
CheckValue<IkReal> x6922 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6922.valid){
continue;
}
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6921)))),-1);
if(!x6923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6922.value)+(((1.5707963267949)*(x6923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6924=IKsin(j4);
IkReal x6925=IKcos(j4);
IkReal x6926=((1.0)*sj0);
IkReal x6927=(cj5*r00);
IkReal x6928=(r11*sj5);
IkReal x6929=(cj5*r10);
IkReal x6930=(r21*sj5);
IkReal x6931=(cj5*r20);
IkReal x6932=(r01*sj5);
IkReal x6933=((1.0)*x6925);
IkReal x6934=((1.0)*x6924);
evalcond[0]=((((-1.0)*r22*x6933))+((x6924*x6930))+(((-1.0)*x6931*x6934)));
evalcond[1]=((((-1.0)*x6930*x6933))+(((-1.0)*r22*x6934))+((x6925*x6931)));
evalcond[2]=(cj0+(((-1.0)*r12*x6933))+((x6924*x6928))+(((-1.0)*x6929*x6934)));
evalcond[3]=((((-1.0)*r02*x6933))+(((-1.0)*x6926))+((x6924*x6932))+(((-1.0)*x6927*x6934)));
evalcond[4]=((((-1.0)*x6932*x6933))+(((-1.0)*r02*x6934))+((x6925*x6927))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6934))+(((-1.0)*x6928*x6933))+((x6925*x6929))+(((-1.0)*x6926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6935=IKcos(j0);
IkReal x6936=IKsin(j0);
evalcond[0]=((((-0.134)*x6936))+(((-1.0)*px))+(((0.033)*x6935)));
evalcond[1]=((((-1.0)*py))+(((0.033)*x6936))+(((0.134)*x6935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6937=((1.0)*cj5);
IkReal x6938=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6937)));
j4eval[0]=x6938;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6937))))));
j4eval[2]=IKsign(x6938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6939=cj5*cj5;
IkReal x6940=((1.0)*r21);
IkReal x6941=(cj5*sj5);
IkReal x6942=((1.0)*r20);
IkReal x6943=((((-1.0)*r01*x6939*x6940))+((r01*r21))+(((-1.0)*r00*x6940*x6941))+(((-1.0)*r01*x6941*x6942))+((r00*r20*x6939))+((r02*r22)));
j4eval[0]=x6943;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6942))))));
j4eval[2]=IKsign(x6943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6944=cj5*cj5;
IkReal x6945=(r21*sj5);
IkReal x6946=(r11*r21);
IkReal x6947=((1.0)*cj5*r20);
IkReal x6948=((((-1.0)*cj5*r10*x6945))+((r12*r22))+(((-1.0)*r11*sj5*x6947))+(((-1.0)*x6944*x6946))+x6946+((r10*r20*x6944)));
j4eval[0]=x6948;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6947))+((sj0*x6945)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6949=cj5*cj5;
IkReal x6950=(r21*sj5);
IkReal x6951=(r11*r21);
IkReal x6952=((1.0)*cj5*r20);
CheckValue<IkReal> x6953 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6952))+((sj0*x6950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6953.valid){
continue;
}
CheckValue<IkReal> x6954=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6949*x6951))+(((-1.0)*cj5*r10*x6950))+((r12*r22))+(((-1.0)*r11*sj5*x6952))+x6951+((r10*r20*x6949)))),-1);
if(!x6954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6953.value)+(((1.5707963267949)*(x6954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6955=IKsin(j4);
IkReal x6956=IKcos(j4);
IkReal x6957=(r11*sj5);
IkReal x6958=(cj5*r00);
IkReal x6959=(cj5*r10);
IkReal x6960=(r21*sj5);
IkReal x6961=(cj5*r20);
IkReal x6962=(r01*sj5);
IkReal x6963=((1.0)*x6956);
IkReal x6964=((1.0)*x6955);
evalcond[0]=(((x6955*x6960))+(((-1.0)*x6961*x6964))+(((-1.0)*r22*x6963)));
evalcond[1]=(((x6956*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6960*x6963)));
evalcond[2]=((((-1.0)*x6959*x6964))+cj0+(((-1.0)*r12*x6963))+((x6955*x6957)));
evalcond[3]=(((x6956*x6958))+(((-1.0)*r02*x6964))+cj0+(((-1.0)*x6962*x6963)));
evalcond[4]=(((x6956*x6959))+sj0+(((-1.0)*r12*x6964))+(((-1.0)*x6957*x6963)));
evalcond[5]=(((x6955*x6962))+(((-1.0)*sj0))+(((-1.0)*r02*x6963))+(((-1.0)*x6958*x6964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6965=cj5*cj5;
IkReal x6966=((1.0)*r21);
IkReal x6967=(cj5*sj5);
IkReal x6968=((1.0)*r20);
CheckValue<IkReal> x6969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6965*x6966))+((r01*r21))+((r00*r20*x6965))+(((-1.0)*r00*x6966*x6967))+(((-1.0)*r01*x6967*x6968))+((r02*r22)))),-1);
if(!x6969.valid){
continue;
}
CheckValue<IkReal> x6970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6969.value)))+(x6970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6971=IKsin(j4);
IkReal x6972=IKcos(j4);
IkReal x6973=(r11*sj5);
IkReal x6974=(cj5*r00);
IkReal x6975=(cj5*r10);
IkReal x6976=(r21*sj5);
IkReal x6977=(cj5*r20);
IkReal x6978=(r01*sj5);
IkReal x6979=((1.0)*x6972);
IkReal x6980=((1.0)*x6971);
evalcond[0]=((((-1.0)*r22*x6979))+(((-1.0)*x6977*x6980))+((x6971*x6976)));
evalcond[1]=(((x6972*x6977))+(((-1.0)*x6976*x6979))+(((-1.0)*r22*x6980)));
evalcond[2]=((((-1.0)*x6975*x6980))+cj0+(((-1.0)*r12*x6979))+((x6971*x6973)));
evalcond[3]=(((x6972*x6974))+cj0+(((-1.0)*x6978*x6979))+(((-1.0)*r02*x6980)));
evalcond[4]=(((x6972*x6975))+sj0+(((-1.0)*r12*x6980))+(((-1.0)*x6973*x6979)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6979))+(((-1.0)*x6974*x6980))+((x6971*x6978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6981=((1.0)*cj5);
CheckValue<IkReal> x6982 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6981))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6982.valid){
continue;
}
CheckValue<IkReal> x6983=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6981)))),-1);
if(!x6983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6982.value)+(((1.5707963267949)*(x6983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6984=IKsin(j4);
IkReal x6985=IKcos(j4);
IkReal x6986=(r11*sj5);
IkReal x6987=(cj5*r00);
IkReal x6988=(cj5*r10);
IkReal x6989=(r21*sj5);
IkReal x6990=(cj5*r20);
IkReal x6991=(r01*sj5);
IkReal x6992=((1.0)*x6985);
IkReal x6993=((1.0)*x6984);
evalcond[0]=((((-1.0)*r22*x6992))+(((-1.0)*x6990*x6993))+((x6984*x6989)));
evalcond[1]=(((x6985*x6990))+(((-1.0)*r22*x6993))+(((-1.0)*x6989*x6992)));
evalcond[2]=((((-1.0)*r12*x6992))+cj0+((x6984*x6986))+(((-1.0)*x6988*x6993)));
evalcond[3]=(cj0+(((-1.0)*r02*x6993))+((x6985*x6987))+(((-1.0)*x6991*x6992)));
evalcond[4]=((((-1.0)*r12*x6993))+sj0+(((-1.0)*x6986*x6992))+((x6985*x6988)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6987*x6993))+(((-1.0)*r02*x6992))+((x6984*x6991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6994=((1.0)*sj5);
IkReal x6995=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6995))+(((-1.0)*r10*x6994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6994))+(((-1.0)*r01*x6995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6995))+(((-1.0)*r10*x6994))))+IKsqr(((((-1.0)*r00*x6994))+(((-1.0)*r01*x6995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6995))+(((-1.0)*r10*x6994))), ((((-1.0)*r00*x6994))+(((-1.0)*r01*x6995))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6996=IKsin(j0);
IkReal x6997=IKcos(j0);
IkReal x6998=((0.1)*sj5);
IkReal x6999=(cj5*r11);
IkReal x7000=(cj5*r01);
IkReal x7001=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7000))+(((-1.0)*x6997))+(((-1.0)*r00*x7001)));
evalcond[1]=((((-1.0)*x6996))+(((-1.0)*x6999))+(((-1.0)*r10*x7001)));
evalcond[2]=((((-1.0)*r00*x6998))+(((-0.1)*x7000))+(((-1.0)*px))+(((-0.134)*x6996)));
evalcond[3]=((((-1.0)*r10*x6998))+(((-0.1)*x6999))+(((-1.0)*py))+(((0.134)*x6997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7002=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7002;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7003=((1.0)*cj5);
IkReal x7004=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7003)));
j4eval[0]=x7004;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7003))))));
j4eval[2]=IKsign(x7004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7005=cj5*cj5;
IkReal x7006=r21*r21;
IkReal x7007=(r21*sj5);
IkReal x7008=(cj5*r20);
IkReal x7009=(x7006+(r22*r22)+(((-1.0)*x7005*x7006))+(((-2.0)*x7007*x7008))+((x7005*(r20*r20))));
j4eval[0]=x7009;
j4eval[1]=IKsign(x7009);
j4eval[2]=((IKabs(((((-1.0)*x7008))+x7007)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7010=cj5*cj5;
IkReal x7011=r21*r21;
IkReal x7012=(r21*sj5);
IkReal x7013=(cj5*r20);
CheckValue<IkReal> x7014 = IKatan2WithCheck(IkReal(r22),IkReal((x7012+(((-1.0)*x7013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7014.valid){
continue;
}
CheckValue<IkReal> x7015=IKPowWithIntegerCheck(IKsign((((x7010*(r20*r20)))+x7011+(r22*r22)+(((-1.0)*x7010*x7011))+(((-2.0)*x7012*x7013)))),-1);
if(!x7015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7014.value)+(((1.5707963267949)*(x7015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7016=IKsin(j4);
IkReal x7017=IKcos(j4);
IkReal x7018=(r11*sj5);
IkReal x7019=(r21*sj5);
IkReal x7020=(cj5*r00);
IkReal x7021=(cj5*r20);
IkReal x7022=(r01*sj5);
IkReal x7023=(cj5*r10);
IkReal x7024=((1.0)*x7017);
IkReal x7025=((1.0)*x7016);
evalcond[0]=((((-1.0)*r22*x7024))+(((-1.0)*x7021*x7025))+((x7016*x7019)));
evalcond[1]=((((-1.0)*r02*x7025))+((x7017*x7020))+(((-1.0)*x7022*x7024)));
evalcond[2]=((((-1.0)*r12*x7025))+(((-1.0)*x7018*x7024))+((x7017*x7023)));
evalcond[3]=((((-1.0)*r12*x7024))+cj0+((x7016*x7018))+(((-1.0)*x7023*x7025)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7025))+(((-1.0)*x7019*x7024))+((x7017*x7021)));
evalcond[5]=((((-1.0)*sj0))+((x7016*x7022))+(((-1.0)*r02*x7024))+(((-1.0)*x7020*x7025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7026=((1.0)*cj5);
CheckValue<IkReal> x7027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7026)))),-1);
if(!x7027.valid){
continue;
}
CheckValue<IkReal> x7028 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7027.value)))+(x7028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7029=IKsin(j4);
IkReal x7030=IKcos(j4);
IkReal x7031=(r11*sj5);
IkReal x7032=(r21*sj5);
IkReal x7033=(cj5*r00);
IkReal x7034=(cj5*r20);
IkReal x7035=(r01*sj5);
IkReal x7036=(cj5*r10);
IkReal x7037=((1.0)*x7030);
IkReal x7038=((1.0)*x7029);
evalcond[0]=((((-1.0)*x7034*x7038))+(((-1.0)*r22*x7037))+((x7029*x7032)));
evalcond[1]=(((x7030*x7033))+(((-1.0)*r02*x7038))+(((-1.0)*x7035*x7037)));
evalcond[2]=(((x7030*x7036))+(((-1.0)*x7031*x7037))+(((-1.0)*r12*x7038)));
evalcond[3]=(cj0+(((-1.0)*x7036*x7038))+(((-1.0)*r12*x7037))+((x7029*x7031)));
evalcond[4]=((1.0)+((x7030*x7034))+(((-1.0)*r22*x7038))+(((-1.0)*x7032*x7037)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7037))+((x7029*x7035))+(((-1.0)*x7033*x7038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7039 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7039.valid){
continue;
}
CheckValue<IkReal> x7040=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7039.value)+(((1.5707963267949)*(x7040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7041=IKsin(j4);
IkReal x7042=IKcos(j4);
IkReal x7043=(r11*sj5);
IkReal x7044=(r21*sj5);
IkReal x7045=(cj5*r00);
IkReal x7046=(cj5*r20);
IkReal x7047=(r01*sj5);
IkReal x7048=(cj5*r10);
IkReal x7049=((1.0)*x7042);
IkReal x7050=((1.0)*x7041);
evalcond[0]=((((-1.0)*x7046*x7050))+((x7041*x7044))+(((-1.0)*r22*x7049)));
evalcond[1]=((((-1.0)*x7047*x7049))+((x7042*x7045))+(((-1.0)*r02*x7050)));
evalcond[2]=((((-1.0)*x7043*x7049))+(((-1.0)*r12*x7050))+((x7042*x7048)));
evalcond[3]=(cj0+(((-1.0)*r12*x7049))+((x7041*x7043))+(((-1.0)*x7048*x7050)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7050))+(((-1.0)*x7044*x7049))+((x7042*x7046)));
evalcond[5]=((((-1.0)*sj0))+((x7041*x7047))+(((-1.0)*r02*x7049))+(((-1.0)*x7045*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7051=IKcos(j0);
IkReal x7052=IKsin(j0);
evalcond[0]=((((-0.134)*x7052))+(((-0.392)*x7051))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x7052))+(((-1.0)*py))+(((0.134)*x7051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7053=((1.0)*cj5);
IkReal x7054=((((-1.0)*r01*x7053))+(((-1.0)*r00*sj5)));
j4eval[0]=x7054;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7053))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7055=cj5*cj5;
IkReal x7056=((1.0)*r21);
IkReal x7057=(cj5*sj5);
IkReal x7058=((1.0)*r20);
IkReal x7059=(((r00*r20*x7055))+((r01*r21))+(((-1.0)*r01*x7057*x7058))+(((-1.0)*r01*x7055*x7056))+((r02*r22))+(((-1.0)*r00*x7056*x7057)));
j4eval[0]=x7059;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7058)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7060=cj5*cj5;
IkReal x7061=(r21*sj5);
IkReal x7062=(r11*r21);
IkReal x7063=((1.0)*cj5*r20);
IkReal x7064=(x7062+(((-1.0)*x7060*x7062))+((r12*r22))+(((-1.0)*r11*sj5*x7063))+(((-1.0)*cj5*r10*x7061))+((r10*r20*x7060)));
j4eval[0]=x7064;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7063))+((sj0*x7061))))));
j4eval[2]=IKsign(x7064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7065=cj5*cj5;
IkReal x7066=(r21*sj5);
IkReal x7067=(r11*r21);
IkReal x7068=((1.0)*cj5*r20);
CheckValue<IkReal> x7069 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7068))+((sj0*x7066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7069.valid){
continue;
}
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign((x7067+(((-1.0)*x7065*x7067))+((r12*r22))+(((-1.0)*r11*sj5*x7068))+(((-1.0)*cj5*r10*x7066))+((r10*r20*x7065)))),-1);
if(!x7070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7069.value)+(((1.5707963267949)*(x7070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7071=IKsin(j4);
IkReal x7072=IKcos(j4);
IkReal x7073=(r11*sj5);
IkReal x7074=(cj5*r00);
IkReal x7075=(cj5*r10);
IkReal x7076=(r21*sj5);
IkReal x7077=(cj5*r20);
IkReal x7078=(r01*sj5);
IkReal x7079=((1.0)*x7072);
IkReal x7080=((1.0)*x7071);
evalcond[0]=(((x7071*x7076))+(((-1.0)*r22*x7079))+(((-1.0)*x7077*x7080)));
evalcond[1]=((((-1.0)*x7076*x7079))+((x7072*x7077))+(((-1.0)*r22*x7080)));
evalcond[2]=(cj0+((x7071*x7073))+(((-1.0)*r12*x7079))+(((-1.0)*x7075*x7080)));
evalcond[3]=(cj0+((x7072*x7074))+(((-1.0)*x7078*x7079))+(((-1.0)*r02*x7080)));
evalcond[4]=(sj0+((x7072*x7075))+(((-1.0)*x7073*x7079))+(((-1.0)*r12*x7080)));
evalcond[5]=((((-1.0)*sj0))+((x7071*x7078))+(((-1.0)*r02*x7079))+(((-1.0)*x7074*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7081=cj5*cj5;
IkReal x7082=((1.0)*r21);
IkReal x7083=(cj5*sj5);
IkReal x7084=((1.0)*r20);
CheckValue<IkReal> x7085 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7085.valid){
continue;
}
CheckValue<IkReal> x7086=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7082*x7083))+((r01*r21))+(((-1.0)*r01*x7081*x7082))+((r00*r20*x7081))+((r02*r22))+(((-1.0)*r01*x7083*x7084)))),-1);
if(!x7086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7085.value)+(((1.5707963267949)*(x7086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7087=IKsin(j4);
IkReal x7088=IKcos(j4);
IkReal x7089=(r11*sj5);
IkReal x7090=(cj5*r00);
IkReal x7091=(cj5*r10);
IkReal x7092=(r21*sj5);
IkReal x7093=(cj5*r20);
IkReal x7094=(r01*sj5);
IkReal x7095=((1.0)*x7088);
IkReal x7096=((1.0)*x7087);
evalcond[0]=((((-1.0)*x7093*x7096))+(((-1.0)*r22*x7095))+((x7087*x7092)));
evalcond[1]=((((-1.0)*x7092*x7095))+((x7088*x7093))+(((-1.0)*r22*x7096)));
evalcond[2]=(cj0+(((-1.0)*r12*x7095))+((x7087*x7089))+(((-1.0)*x7091*x7096)));
evalcond[3]=((((-1.0)*x7094*x7095))+cj0+((x7088*x7090))+(((-1.0)*r02*x7096)));
evalcond[4]=(sj0+(((-1.0)*x7089*x7095))+(((-1.0)*r12*x7096))+((x7088*x7091)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7090*x7096))+((x7087*x7094))+(((-1.0)*r02*x7095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7097=((1.0)*cj5);
CheckValue<IkReal> x7098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7097))+(((-1.0)*r00*sj5)))),-1);
if(!x7098.valid){
continue;
}
CheckValue<IkReal> x7099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7098.value)))+(x7099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7100=IKsin(j4);
IkReal x7101=IKcos(j4);
IkReal x7102=(r11*sj5);
IkReal x7103=(cj5*r00);
IkReal x7104=(cj5*r10);
IkReal x7105=(r21*sj5);
IkReal x7106=(cj5*r20);
IkReal x7107=(r01*sj5);
IkReal x7108=((1.0)*x7101);
IkReal x7109=((1.0)*x7100);
evalcond[0]=(((x7100*x7105))+(((-1.0)*r22*x7108))+(((-1.0)*x7106*x7109)));
evalcond[1]=((((-1.0)*r22*x7109))+(((-1.0)*x7105*x7108))+((x7101*x7106)));
evalcond[2]=(((x7100*x7102))+cj0+(((-1.0)*r12*x7108))+(((-1.0)*x7104*x7109)));
evalcond[3]=(cj0+(((-1.0)*r02*x7109))+(((-1.0)*x7107*x7108))+((x7101*x7103)));
evalcond[4]=(sj0+(((-1.0)*x7102*x7108))+(((-1.0)*r12*x7109))+((x7101*x7104)));
evalcond[5]=(((x7100*x7107))+(((-1.0)*sj0))+(((-1.0)*x7103*x7109))+(((-1.0)*r02*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7110=IKsin(j0);
IkReal x7111=IKcos(j0);
IkReal x7112=((0.1)*sj5);
IkReal x7113=(cj5*r11);
IkReal x7114=(cj5*r01);
IkReal x7115=((1.0)*sj5);
evalcond[0]=(x7111+(((-1.0)*x7114))+(((-1.0)*r00*x7115)));
evalcond[1]=(x7110+(((-1.0)*x7113))+(((-1.0)*r10*x7115)));
evalcond[2]=((((-0.1)*x7114))+(((-0.134)*x7110))+(((-1.0)*px))+(((-1.0)*r00*x7112)));
evalcond[3]=((((-0.1)*x7113))+(((-1.0)*r10*x7112))+(((-1.0)*py))+(((0.134)*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7116=((1.0)*sj5);
IkReal x7117=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7116)));
j4eval[0]=x7117;
j4eval[1]=IKsign(x7117);
j4eval[2]=((IKabs(((((-1.0)*r01*x7116))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7118=((1.0)*cj5);
IkReal x7119=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7118)));
j4eval[0]=x7119;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7118)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7120=r21*r21;
IkReal x7121=cj5*cj5;
IkReal x7122=(r21*sj5);
IkReal x7123=(cj5*r20);
IkReal x7124=((((-1.0)*x7121*(r20*r20)))+((x7120*x7121))+(((-1.0)*x7120))+(((2.0)*x7122*x7123))+(((-1.0)*(r22*r22))));
j4eval[0]=x7124;
j4eval[1]=((IKabs(r22))+(IKabs((x7122+(((-1.0)*x7123))))));
j4eval[2]=IKsign(x7124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7125=r21*r21;
IkReal x7126=cj5*cj5;
IkReal x7127=(r21*sj5);
IkReal x7128=(cj5*r20);
CheckValue<IkReal> x7129 = IKatan2WithCheck(IkReal(r22),IkReal((x7127+(((-1.0)*x7128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7129.valid){
continue;
}
CheckValue<IkReal> x7130=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7125))+(((-1.0)*x7126*(r20*r20)))+(((-1.0)*(r22*r22)))+((x7125*x7126))+(((2.0)*x7127*x7128)))),-1);
if(!x7130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7129.value)+(((1.5707963267949)*(x7130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7131=IKsin(j4);
IkReal x7132=IKcos(j4);
IkReal x7133=(r11*sj5);
IkReal x7134=(r21*sj5);
IkReal x7135=(cj5*r00);
IkReal x7136=(cj5*r20);
IkReal x7137=(r01*sj5);
IkReal x7138=(cj5*r10);
IkReal x7139=((1.0)*x7132);
IkReal x7140=((1.0)*x7131);
evalcond[0]=((((-1.0)*r22*x7139))+(((-1.0)*x7136*x7140))+((x7131*x7134)));
evalcond[1]=(((x7132*x7135))+(((-1.0)*x7137*x7139))+(((-1.0)*r02*x7140)));
evalcond[2]=(((x7132*x7138))+(((-1.0)*r12*x7140))+(((-1.0)*x7133*x7139)));
evalcond[3]=((((-1.0)*r12*x7139))+cj0+(((-1.0)*x7138*x7140))+((x7131*x7133)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7140))+((x7132*x7136))+(((-1.0)*x7134*x7139)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7135*x7140))+((x7131*x7137))+(((-1.0)*r02*x7139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7141=((1.0)*cj5);
CheckValue<IkReal> x7142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7142.valid){
continue;
}
CheckValue<IkReal> x7143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7141)))),-1);
if(!x7143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7142.value)+(((1.5707963267949)*(x7143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7144=IKsin(j4);
IkReal x7145=IKcos(j4);
IkReal x7146=(r11*sj5);
IkReal x7147=(r21*sj5);
IkReal x7148=(cj5*r00);
IkReal x7149=(cj5*r20);
IkReal x7150=(r01*sj5);
IkReal x7151=(cj5*r10);
IkReal x7152=((1.0)*x7145);
IkReal x7153=((1.0)*x7144);
evalcond[0]=((((-1.0)*r22*x7152))+((x7144*x7147))+(((-1.0)*x7149*x7153)));
evalcond[1]=(((x7145*x7148))+(((-1.0)*x7150*x7152))+(((-1.0)*r02*x7153)));
evalcond[2]=((((-1.0)*x7146*x7152))+(((-1.0)*r12*x7153))+((x7145*x7151)));
evalcond[3]=((((-1.0)*r12*x7152))+(((-1.0)*x7151*x7153))+cj0+((x7144*x7146)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7153))+((x7145*x7149))+(((-1.0)*x7147*x7152)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7148*x7153))+((x7144*x7150))+(((-1.0)*r02*x7152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7154=((1.0)*sj5);
CheckValue<IkReal> x7155=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7154)))),-1);
if(!x7155.valid){
continue;
}
CheckValue<IkReal> x7156 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7154))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7155.value)))+(x7156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7157=IKsin(j4);
IkReal x7158=IKcos(j4);
IkReal x7159=(r11*sj5);
IkReal x7160=(r21*sj5);
IkReal x7161=(cj5*r00);
IkReal x7162=(cj5*r20);
IkReal x7163=(r01*sj5);
IkReal x7164=(cj5*r10);
IkReal x7165=((1.0)*x7158);
IkReal x7166=((1.0)*x7157);
evalcond[0]=((((-1.0)*r22*x7165))+((x7157*x7160))+(((-1.0)*x7162*x7166)));
evalcond[1]=((((-1.0)*r02*x7166))+(((-1.0)*x7163*x7165))+((x7158*x7161)));
evalcond[2]=((((-1.0)*x7159*x7165))+((x7158*x7164))+(((-1.0)*r12*x7166)));
evalcond[3]=(cj0+(((-1.0)*x7164*x7166))+(((-1.0)*r12*x7165))+((x7157*x7159)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7166))+(((-1.0)*x7160*x7165))+((x7158*x7162)));
evalcond[5]=((((-1.0)*r02*x7165))+(((-1.0)*sj0))+(((-1.0)*x7161*x7166))+((x7157*x7163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7167=IKsin(j0);
IkReal x7168=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7167))+(((0.392)*x7168)));
evalcond[1]=((((0.134)*x7168))+(((-1.0)*py))+(((0.392)*x7167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7169=((1.0)*cj5);
IkReal x7170=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7169)));
j4eval[0]=x7170;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7169)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7171=((1.0)*cj5);
IkReal x7172=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7171)));
j4eval[0]=x7172;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7171))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7173=cj5*cj5;
IkReal x7174=((1.0)*sj5);
IkReal x7175=(cj5*r20);
IkReal x7176=(r11*r21);
IkReal x7177=(x7176+(((-1.0)*cj5*r10*r21*x7174))+((r12*r22))+(((-1.0)*r11*x7174*x7175))+((r10*r20*x7173))+(((-1.0)*x7173*x7176)));
j4eval[0]=x7177;
j4eval[1]=IKsign(x7177);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7174))+((cj0*x7175)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7178=cj5*cj5;
IkReal x7179=((1.0)*sj5);
IkReal x7180=(cj5*r20);
IkReal x7181=(r11*r21);
CheckValue<IkReal> x7182 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7179))+((cj0*x7180)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7182.valid){
continue;
}
CheckValue<IkReal> x7183=IKPowWithIntegerCheck(IKsign((x7181+(((-1.0)*cj5*r10*r21*x7179))+((r12*r22))+((r10*r20*x7178))+(((-1.0)*r11*x7179*x7180))+(((-1.0)*x7178*x7181)))),-1);
if(!x7183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7182.value)+(((1.5707963267949)*(x7183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7184=IKsin(j4);
IkReal x7185=IKcos(j4);
IkReal x7186=((1.0)*sj0);
IkReal x7187=(cj5*r00);
IkReal x7188=(r11*sj5);
IkReal x7189=(cj5*r10);
IkReal x7190=(r21*sj5);
IkReal x7191=(cj5*r20);
IkReal x7192=(r01*sj5);
IkReal x7193=((1.0)*x7185);
IkReal x7194=((1.0)*x7184);
evalcond[0]=((((-1.0)*x7191*x7194))+(((-1.0)*r22*x7193))+((x7184*x7190)));
evalcond[1]=((((-1.0)*x7190*x7193))+(((-1.0)*r22*x7194))+((x7185*x7191)));
evalcond[2]=(cj0+(((-1.0)*x7189*x7194))+(((-1.0)*r12*x7193))+((x7184*x7188)));
evalcond[3]=((((-1.0)*x7187*x7194))+(((-1.0)*x7186))+(((-1.0)*r02*x7193))+((x7184*x7192)));
evalcond[4]=(((x7185*x7187))+(((-1.0)*r02*x7194))+(((-1.0)*x7192*x7193))+(((-1.0)*cj0)));
evalcond[5]=(((x7185*x7189))+(((-1.0)*x7186))+(((-1.0)*x7188*x7193))+(((-1.0)*r12*x7194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7195=((1.0)*cj5);
CheckValue<IkReal> x7196 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7196.valid){
continue;
}
CheckValue<IkReal> x7197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7195)))),-1);
if(!x7197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7196.value)+(((1.5707963267949)*(x7197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7198=IKsin(j4);
IkReal x7199=IKcos(j4);
IkReal x7200=((1.0)*sj0);
IkReal x7201=(cj5*r00);
IkReal x7202=(r11*sj5);
IkReal x7203=(cj5*r10);
IkReal x7204=(r21*sj5);
IkReal x7205=(cj5*r20);
IkReal x7206=(r01*sj5);
IkReal x7207=((1.0)*x7199);
IkReal x7208=((1.0)*x7198);
evalcond[0]=(((x7198*x7204))+(((-1.0)*x7205*x7208))+(((-1.0)*r22*x7207)));
evalcond[1]=(((x7199*x7205))+(((-1.0)*x7204*x7207))+(((-1.0)*r22*x7208)));
evalcond[2]=(((x7198*x7202))+cj0+(((-1.0)*x7203*x7208))+(((-1.0)*r12*x7207)));
evalcond[3]=(((x7198*x7206))+(((-1.0)*x7201*x7208))+(((-1.0)*x7200))+(((-1.0)*r02*x7207)));
evalcond[4]=((((-1.0)*x7206*x7207))+((x7199*x7201))+(((-1.0)*cj0))+(((-1.0)*r02*x7208)));
evalcond[5]=(((x7199*x7203))+(((-1.0)*x7202*x7207))+(((-1.0)*r12*x7208))+(((-1.0)*x7200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7209=((1.0)*cj5);
CheckValue<IkReal> x7210 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7209))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7210.valid){
continue;
}
CheckValue<IkReal> x7211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7209)))),-1);
if(!x7211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7210.value)+(((1.5707963267949)*(x7211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7212=IKsin(j4);
IkReal x7213=IKcos(j4);
IkReal x7214=((1.0)*sj0);
IkReal x7215=(cj5*r00);
IkReal x7216=(r11*sj5);
IkReal x7217=(cj5*r10);
IkReal x7218=(r21*sj5);
IkReal x7219=(cj5*r20);
IkReal x7220=(r01*sj5);
IkReal x7221=((1.0)*x7213);
IkReal x7222=((1.0)*x7212);
evalcond[0]=((((-1.0)*r22*x7221))+((x7212*x7218))+(((-1.0)*x7219*x7222)));
evalcond[1]=((((-1.0)*x7218*x7221))+((x7213*x7219))+(((-1.0)*r22*x7222)));
evalcond[2]=((((-1.0)*x7217*x7222))+cj0+(((-1.0)*r12*x7221))+((x7212*x7216)));
evalcond[3]=((((-1.0)*r02*x7221))+((x7212*x7220))+(((-1.0)*x7214))+(((-1.0)*x7215*x7222)));
evalcond[4]=((((-1.0)*r02*x7222))+(((-1.0)*x7220*x7221))+((x7213*x7215))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7214))+(((-1.0)*x7216*x7221))+(((-1.0)*r12*x7222))+((x7213*x7217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7223=IKcos(j0);
IkReal x7224=IKsin(j0);
evalcond[0]=((((-0.134)*x7224))+(((-1.0)*px))+(((-0.817)*x7223)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7223))+(((-0.817)*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7225=((1.0)*cj5);
IkReal x7226=((((-1.0)*r01*x7225))+(((-1.0)*r00*sj5)));
j4eval[0]=x7226;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7225)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7227=cj5*cj5;
IkReal x7228=((1.0)*r21);
IkReal x7229=(cj5*sj5);
IkReal x7230=((1.0)*r20);
IkReal x7231=(((r01*r21))+(((-1.0)*r01*x7229*x7230))+(((-1.0)*r01*x7227*x7228))+((r02*r22))+((r00*r20*x7227))+(((-1.0)*r00*x7228*x7229)));
j4eval[0]=x7231;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7230))))));
j4eval[2]=IKsign(x7231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7232=cj5*cj5;
IkReal x7233=(r21*sj5);
IkReal x7234=(r11*r21);
IkReal x7235=((1.0)*cj5*r20);
IkReal x7236=((((-1.0)*r11*sj5*x7235))+(((-1.0)*cj5*r10*x7233))+((r10*r20*x7232))+x7234+(((-1.0)*x7232*x7234))+((r12*r22)));
j4eval[0]=x7236;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7235))+((sj0*x7233))))));
j4eval[2]=IKsign(x7236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7237=cj5*cj5;
IkReal x7238=(r21*sj5);
IkReal x7239=(r11*r21);
IkReal x7240=((1.0)*cj5*r20);
CheckValue<IkReal> x7241=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7238))+(((-1.0)*x7237*x7239))+((r10*r20*x7237))+x7239+(((-1.0)*r11*sj5*x7240))+((r12*r22)))),-1);
if(!x7241.valid){
continue;
}
CheckValue<IkReal> x7242 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7238))+(((-1.0)*sj0*x7240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7241.value)))+(x7242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7243=IKsin(j4);
IkReal x7244=IKcos(j4);
IkReal x7245=(r11*sj5);
IkReal x7246=(cj5*r00);
IkReal x7247=(cj5*r10);
IkReal x7248=(r21*sj5);
IkReal x7249=(cj5*r20);
IkReal x7250=(r01*sj5);
IkReal x7251=((1.0)*x7244);
IkReal x7252=((1.0)*x7243);
evalcond[0]=(((x7243*x7248))+(((-1.0)*x7249*x7252))+(((-1.0)*r22*x7251)));
evalcond[1]=(((x7244*x7249))+(((-1.0)*x7248*x7251))+(((-1.0)*r22*x7252)));
evalcond[2]=(cj0+(((-1.0)*x7247*x7252))+(((-1.0)*r12*x7251))+((x7243*x7245)));
evalcond[3]=(cj0+((x7244*x7246))+(((-1.0)*r02*x7252))+(((-1.0)*x7250*x7251)));
evalcond[4]=(sj0+((x7244*x7247))+(((-1.0)*r12*x7252))+(((-1.0)*x7245*x7251)));
evalcond[5]=((((-1.0)*sj0))+((x7243*x7250))+(((-1.0)*x7246*x7252))+(((-1.0)*r02*x7251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7253=cj5*cj5;
IkReal x7254=((1.0)*r21);
IkReal x7255=(cj5*sj5);
IkReal x7256=((1.0)*r20);
CheckValue<IkReal> x7257=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7253*x7254))+(((-1.0)*r00*x7254*x7255))+(((-1.0)*r01*x7255*x7256))+((r02*r22))+((r00*r20*x7253)))),-1);
if(!x7257.valid){
continue;
}
CheckValue<IkReal> x7258 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7257.value)))+(x7258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7259=IKsin(j4);
IkReal x7260=IKcos(j4);
IkReal x7261=(r11*sj5);
IkReal x7262=(cj5*r00);
IkReal x7263=(cj5*r10);
IkReal x7264=(r21*sj5);
IkReal x7265=(cj5*r20);
IkReal x7266=(r01*sj5);
IkReal x7267=((1.0)*x7260);
IkReal x7268=((1.0)*x7259);
evalcond[0]=((((-1.0)*r22*x7267))+((x7259*x7264))+(((-1.0)*x7265*x7268)));
evalcond[1]=((((-1.0)*x7264*x7267))+(((-1.0)*r22*x7268))+((x7260*x7265)));
evalcond[2]=(cj0+(((-1.0)*x7263*x7268))+((x7259*x7261))+(((-1.0)*r12*x7267)));
evalcond[3]=(cj0+(((-1.0)*x7266*x7267))+((x7260*x7262))+(((-1.0)*r02*x7268)));
evalcond[4]=(sj0+(((-1.0)*x7261*x7267))+((x7260*x7263))+(((-1.0)*r12*x7268)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7262*x7268))+((x7259*x7266))+(((-1.0)*r02*x7267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7269=((1.0)*cj5);
CheckValue<IkReal> x7270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7269))+(((-1.0)*r00*sj5)))),-1);
if(!x7270.valid){
continue;
}
CheckValue<IkReal> x7271 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7270.value)))+(x7271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7272=IKsin(j4);
IkReal x7273=IKcos(j4);
IkReal x7274=(r11*sj5);
IkReal x7275=(cj5*r00);
IkReal x7276=(cj5*r10);
IkReal x7277=(r21*sj5);
IkReal x7278=(cj5*r20);
IkReal x7279=(r01*sj5);
IkReal x7280=((1.0)*x7273);
IkReal x7281=((1.0)*x7272);
evalcond[0]=((((-1.0)*x7278*x7281))+((x7272*x7277))+(((-1.0)*r22*x7280)));
evalcond[1]=((((-1.0)*x7277*x7280))+((x7273*x7278))+(((-1.0)*r22*x7281)));
evalcond[2]=(cj0+(((-1.0)*x7276*x7281))+(((-1.0)*r12*x7280))+((x7272*x7274)));
evalcond[3]=(cj0+((x7273*x7275))+(((-1.0)*r02*x7281))+(((-1.0)*x7279*x7280)));
evalcond[4]=(sj0+(((-1.0)*x7274*x7280))+(((-1.0)*r12*x7281))+((x7273*x7276)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7275*x7281))+((x7272*x7279))+(((-1.0)*r02*x7280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7282=IKcos(j0);
IkReal x7283=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.033)*x7282))+(((-0.134)*x7283)));
evalcond[1]=((((0.134)*x7282))+(((-1.0)*py))+(((-0.033)*x7283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7284=((1.0)*cj5);
IkReal x7285=((((-1.0)*r01*x7284))+(((-1.0)*r00*sj5)));
j4eval[0]=x7285;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7284))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7286=((1.0)*cj5);
IkReal x7287=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7286)));
j4eval[0]=x7287;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7286))))));
j4eval[2]=IKsign(x7287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7288=cj5*cj5;
IkReal x7289=((1.0)*sj5);
IkReal x7290=(cj5*r20);
IkReal x7291=(r11*r21);
IkReal x7292=((((-1.0)*x7288*x7291))+x7291+(((-1.0)*r11*x7289*x7290))+(((-1.0)*cj5*r10*r21*x7289))+((r10*r20*x7288))+((r12*r22)));
j4eval[0]=x7292;
j4eval[1]=IKsign(x7292);
j4eval[2]=((IKabs((((cj0*x7290))+(((-1.0)*cj0*r21*x7289)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7293=cj5*cj5;
IkReal x7294=((1.0)*sj5);
IkReal x7295=(cj5*r20);
IkReal x7296=(r11*r21);
CheckValue<IkReal> x7297 = IKatan2WithCheck(IkReal((((cj0*x7295))+(((-1.0)*cj0*r21*x7294)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7297.valid){
continue;
}
CheckValue<IkReal> x7298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7294*x7295))+x7296+(((-1.0)*cj5*r10*r21*x7294))+((r10*r20*x7293))+((r12*r22))+(((-1.0)*x7293*x7296)))),-1);
if(!x7298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7297.value)+(((1.5707963267949)*(x7298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7299=IKsin(j4);
IkReal x7300=IKcos(j4);
IkReal x7301=((1.0)*sj0);
IkReal x7302=(cj5*r00);
IkReal x7303=(r11*sj5);
IkReal x7304=(cj5*r10);
IkReal x7305=(r21*sj5);
IkReal x7306=(cj5*r20);
IkReal x7307=(r01*sj5);
IkReal x7308=((1.0)*x7300);
IkReal x7309=((1.0)*x7299);
evalcond[0]=(((x7299*x7305))+(((-1.0)*r22*x7308))+(((-1.0)*x7306*x7309)));
evalcond[1]=(((x7300*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7305*x7308)));
evalcond[2]=(cj0+(((-1.0)*r12*x7308))+((x7299*x7303))+(((-1.0)*x7304*x7309)));
evalcond[3]=((((-1.0)*r02*x7308))+(((-1.0)*x7302*x7309))+((x7299*x7307))+(((-1.0)*x7301)));
evalcond[4]=((((-1.0)*r02*x7309))+((x7300*x7302))+(((-1.0)*x7307*x7308))+(((-1.0)*cj0)));
evalcond[5]=(((x7300*x7304))+(((-1.0)*x7303*x7308))+(((-1.0)*r12*x7309))+(((-1.0)*x7301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7310=((1.0)*cj5);
CheckValue<IkReal> x7311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7310)))),-1);
if(!x7311.valid){
continue;
}
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7310))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7311.value)))+(x7312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7313=IKsin(j4);
IkReal x7314=IKcos(j4);
IkReal x7315=((1.0)*sj0);
IkReal x7316=(cj5*r00);
IkReal x7317=(r11*sj5);
IkReal x7318=(cj5*r10);
IkReal x7319=(r21*sj5);
IkReal x7320=(cj5*r20);
IkReal x7321=(r01*sj5);
IkReal x7322=((1.0)*x7314);
IkReal x7323=((1.0)*x7313);
evalcond[0]=(((x7313*x7319))+(((-1.0)*r22*x7322))+(((-1.0)*x7320*x7323)));
evalcond[1]=((((-1.0)*r22*x7323))+(((-1.0)*x7319*x7322))+((x7314*x7320)));
evalcond[2]=(cj0+((x7313*x7317))+(((-1.0)*x7318*x7323))+(((-1.0)*r12*x7322)));
evalcond[3]=((((-1.0)*x7316*x7323))+(((-1.0)*x7315))+((x7313*x7321))+(((-1.0)*r02*x7322)));
evalcond[4]=(((x7314*x7316))+(((-1.0)*x7321*x7322))+(((-1.0)*cj0))+(((-1.0)*r02*x7323)));
evalcond[5]=((((-1.0)*x7317*x7322))+((x7314*x7318))+(((-1.0)*x7315))+(((-1.0)*r12*x7323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7324=((1.0)*cj5);
CheckValue<IkReal> x7325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7325.valid){
continue;
}
CheckValue<IkReal> x7326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7324)))),-1);
if(!x7326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7325.value)+(((1.5707963267949)*(x7326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7327=IKsin(j4);
IkReal x7328=IKcos(j4);
IkReal x7329=((1.0)*sj0);
IkReal x7330=(cj5*r00);
IkReal x7331=(r11*sj5);
IkReal x7332=(cj5*r10);
IkReal x7333=(r21*sj5);
IkReal x7334=(cj5*r20);
IkReal x7335=(r01*sj5);
IkReal x7336=((1.0)*x7328);
IkReal x7337=((1.0)*x7327);
evalcond[0]=(((x7327*x7333))+(((-1.0)*r22*x7336))+(((-1.0)*x7334*x7337)));
evalcond[1]=(((x7328*x7334))+(((-1.0)*r22*x7337))+(((-1.0)*x7333*x7336)));
evalcond[2]=(cj0+(((-1.0)*r12*x7336))+((x7327*x7331))+(((-1.0)*x7332*x7337)));
evalcond[3]=((((-1.0)*r02*x7336))+((x7327*x7335))+(((-1.0)*x7329))+(((-1.0)*x7330*x7337)));
evalcond[4]=((((-1.0)*r02*x7337))+((x7328*x7330))+(((-1.0)*x7335*x7336))+(((-1.0)*cj0)));
evalcond[5]=(((x7328*x7332))+(((-1.0)*r12*x7337))+(((-1.0)*x7329))+(((-1.0)*x7331*x7336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7338=IKsin(j0);
IkReal x7339=IKcos(j0);
IkReal x7340=((0.1)*sj5);
IkReal x7341=(cj5*r11);
IkReal x7342=(cj5*r01);
IkReal x7343=((1.0)*sj5);
evalcond[0]=(x7339+(((-1.0)*r00*x7343))+(((-1.0)*x7342)));
evalcond[1]=(x7338+(((-1.0)*r10*x7343))+(((-1.0)*x7341)));
evalcond[2]=((((-0.134)*x7338))+(((-1.0)*r00*x7340))+(((-0.1)*x7342))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7340))+(((-0.1)*x7341))+(((-1.0)*py))+(((0.134)*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7344=((1.0)*sj5);
IkReal x7345=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7344)));
j4eval[0]=x7345;
j4eval[1]=IKsign(x7345);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7344))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7346=((1.0)*cj5);
IkReal x7347=((((-1.0)*r01*x7346))+(((-1.0)*r00*sj5)));
j4eval[0]=x7347;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7346))))));
j4eval[2]=IKsign(x7347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7348=r21*r21;
IkReal x7349=cj5*cj5;
IkReal x7350=(r21*sj5);
IkReal x7351=(cj5*r20);
IkReal x7352=((((-1.0)*x7349*(r20*r20)))+(((2.0)*x7350*x7351))+(((-1.0)*(r22*r22)))+(((-1.0)*x7348))+((x7348*x7349)));
j4eval[0]=x7352;
j4eval[1]=((IKabs(r22))+(IKabs((x7350+(((-1.0)*x7351))))));
j4eval[2]=IKsign(x7352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7353=r21*r21;
IkReal x7354=cj5*cj5;
IkReal x7355=(r21*sj5);
IkReal x7356=(cj5*r20);
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(IKsign((((x7353*x7354))+(((-1.0)*x7354*(r20*r20)))+(((2.0)*x7355*x7356))+(((-1.0)*(r22*r22)))+(((-1.0)*x7353)))),-1);
if(!x7357.valid){
continue;
}
CheckValue<IkReal> x7358 = IKatan2WithCheck(IkReal(r22),IkReal((x7355+(((-1.0)*x7356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7357.value)))+(x7358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7359=IKsin(j4);
IkReal x7360=IKcos(j4);
IkReal x7361=(r11*sj5);
IkReal x7362=(r21*sj5);
IkReal x7363=(cj5*r00);
IkReal x7364=(cj5*r20);
IkReal x7365=(r01*sj5);
IkReal x7366=(cj5*r10);
IkReal x7367=((1.0)*x7360);
IkReal x7368=((1.0)*x7359);
evalcond[0]=(((x7359*x7362))+(((-1.0)*x7364*x7368))+(((-1.0)*r22*x7367)));
evalcond[1]=((((-1.0)*x7365*x7367))+((x7360*x7363))+(((-1.0)*r02*x7368)));
evalcond[2]=((((-1.0)*r12*x7368))+((x7360*x7366))+(((-1.0)*x7361*x7367)));
evalcond[3]=(cj0+((x7359*x7361))+(((-1.0)*r12*x7367))+(((-1.0)*x7366*x7368)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7368))+((x7360*x7364))+(((-1.0)*x7362*x7367)));
evalcond[5]=((((-1.0)*sj0))+((x7359*x7365))+(((-1.0)*x7363*x7368))+(((-1.0)*r02*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7369=((1.0)*cj5);
CheckValue<IkReal> x7370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7369)))),-1);
if(!x7370.valid){
continue;
}
CheckValue<IkReal> x7371 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7369))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7370.value)))+(x7371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7372=IKsin(j4);
IkReal x7373=IKcos(j4);
IkReal x7374=(r11*sj5);
IkReal x7375=(r21*sj5);
IkReal x7376=(cj5*r00);
IkReal x7377=(cj5*r20);
IkReal x7378=(r01*sj5);
IkReal x7379=(cj5*r10);
IkReal x7380=((1.0)*x7373);
IkReal x7381=((1.0)*x7372);
evalcond[0]=((((-1.0)*r22*x7380))+(((-1.0)*x7377*x7381))+((x7372*x7375)));
evalcond[1]=((((-1.0)*x7378*x7380))+(((-1.0)*r02*x7381))+((x7373*x7376)));
evalcond[2]=(((x7373*x7379))+(((-1.0)*x7374*x7380))+(((-1.0)*r12*x7381)));
evalcond[3]=(cj0+(((-1.0)*x7379*x7381))+(((-1.0)*r12*x7380))+((x7372*x7374)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7381))+(((-1.0)*x7375*x7380))+((x7373*x7377)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7380))+(((-1.0)*x7376*x7381))+((x7372*x7378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7382=((1.0)*sj5);
CheckValue<IkReal> x7383 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7382))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7383.valid){
continue;
}
CheckValue<IkReal> x7384=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7382)))),-1);
if(!x7384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7383.value)+(((1.5707963267949)*(x7384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7385=IKsin(j4);
IkReal x7386=IKcos(j4);
IkReal x7387=(r11*sj5);
IkReal x7388=(r21*sj5);
IkReal x7389=(cj5*r00);
IkReal x7390=(cj5*r20);
IkReal x7391=(r01*sj5);
IkReal x7392=(cj5*r10);
IkReal x7393=((1.0)*x7386);
IkReal x7394=((1.0)*x7385);
evalcond[0]=((((-1.0)*x7390*x7394))+(((-1.0)*r22*x7393))+((x7385*x7388)));
evalcond[1]=(((x7386*x7389))+(((-1.0)*r02*x7394))+(((-1.0)*x7391*x7393)));
evalcond[2]=((((-1.0)*r12*x7394))+((x7386*x7392))+(((-1.0)*x7387*x7393)));
evalcond[3]=((((-1.0)*r12*x7393))+cj0+(((-1.0)*x7392*x7394))+((x7385*x7387)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7394))+(((-1.0)*x7388*x7393))+((x7386*x7390)));
evalcond[5]=((((-1.0)*sj0))+((x7385*x7391))+(((-1.0)*r02*x7393))+(((-1.0)*x7389*x7394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7395=IKsin(j0);
IkReal x7396=IKcos(j0);
evalcond[0]=((((-0.134)*x7395))+(((0.392)*x7396))+(((-1.0)*px)));
evalcond[1]=((((0.392)*x7395))+(((-1.0)*py))+(((0.134)*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7397=((1.0)*cj5);
IkReal x7398=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7397)));
j4eval[0]=x7398;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7397))))));
j4eval[2]=IKsign(x7398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7399=((1.0)*cj5);
IkReal x7400=((((-1.0)*r11*x7399))+(((-1.0)*r10*sj5)));
j4eval[0]=x7400;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7399))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7401=cj5*cj5;
IkReal x7402=((1.0)*sj5);
IkReal x7403=(cj5*r20);
IkReal x7404=(r11*r21);
IkReal x7405=((((-1.0)*x7401*x7404))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7402))+x7404+(((-1.0)*r11*x7402*x7403))+((r10*r20*x7401)));
j4eval[0]=x7405;
j4eval[1]=IKsign(x7405);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7402))+((cj0*x7403))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7406=cj5*cj5;
IkReal x7407=((1.0)*sj5);
IkReal x7408=(cj5*r20);
IkReal x7409=(r11*r21);
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7407))+((cj0*x7408)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
CheckValue<IkReal> x7411=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7406*x7409))+(((-1.0)*r11*x7407*x7408))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7407))+x7409+((r10*r20*x7406)))),-1);
if(!x7411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7410.value)+(((1.5707963267949)*(x7411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7412=IKsin(j4);
IkReal x7413=IKcos(j4);
IkReal x7414=((1.0)*sj0);
IkReal x7415=(cj5*r00);
IkReal x7416=(r11*sj5);
IkReal x7417=(cj5*r10);
IkReal x7418=(r21*sj5);
IkReal x7419=(cj5*r20);
IkReal x7420=(r01*sj5);
IkReal x7421=((1.0)*x7413);
IkReal x7422=((1.0)*x7412);
evalcond[0]=((((-1.0)*r22*x7421))+(((-1.0)*x7419*x7422))+((x7412*x7418)));
evalcond[1]=(((x7413*x7419))+(((-1.0)*r22*x7422))+(((-1.0)*x7418*x7421)));
evalcond[2]=(cj0+(((-1.0)*r12*x7421))+(((-1.0)*x7417*x7422))+((x7412*x7416)));
evalcond[3]=((((-1.0)*x7415*x7422))+(((-1.0)*r02*x7421))+(((-1.0)*x7414))+((x7412*x7420)));
evalcond[4]=(((x7413*x7415))+(((-1.0)*r02*x7422))+(((-1.0)*cj0))+(((-1.0)*x7420*x7421)));
evalcond[5]=(((x7413*x7417))+(((-1.0)*x7416*x7421))+(((-1.0)*r12*x7422))+(((-1.0)*x7414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7423=((1.0)*cj5);
CheckValue<IkReal> x7424 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7423))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7424.valid){
continue;
}
CheckValue<IkReal> x7425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7423)))),-1);
if(!x7425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7424.value)+(((1.5707963267949)*(x7425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7426=IKsin(j4);
IkReal x7427=IKcos(j4);
IkReal x7428=((1.0)*sj0);
IkReal x7429=(cj5*r00);
IkReal x7430=(r11*sj5);
IkReal x7431=(cj5*r10);
IkReal x7432=(r21*sj5);
IkReal x7433=(cj5*r20);
IkReal x7434=(r01*sj5);
IkReal x7435=((1.0)*x7427);
IkReal x7436=((1.0)*x7426);
evalcond[0]=((((-1.0)*r22*x7435))+((x7426*x7432))+(((-1.0)*x7433*x7436)));
evalcond[1]=((((-1.0)*r22*x7436))+((x7427*x7433))+(((-1.0)*x7432*x7435)));
evalcond[2]=(cj0+(((-1.0)*r12*x7435))+((x7426*x7430))+(((-1.0)*x7431*x7436)));
evalcond[3]=((((-1.0)*x7429*x7436))+(((-1.0)*r02*x7435))+((x7426*x7434))+(((-1.0)*x7428)));
evalcond[4]=((((-1.0)*r02*x7436))+(((-1.0)*x7434*x7435))+((x7427*x7429))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7430*x7435))+(((-1.0)*r12*x7436))+((x7427*x7431))+(((-1.0)*x7428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7437=((1.0)*cj5);
CheckValue<IkReal> x7438 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7438.valid){
continue;
}
CheckValue<IkReal> x7439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7437))+(((-1.0)*r00*sj5)))),-1);
if(!x7439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7438.value)+(((1.5707963267949)*(x7439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7440=IKsin(j4);
IkReal x7441=IKcos(j4);
IkReal x7442=((1.0)*sj0);
IkReal x7443=(cj5*r00);
IkReal x7444=(r11*sj5);
IkReal x7445=(cj5*r10);
IkReal x7446=(r21*sj5);
IkReal x7447=(cj5*r20);
IkReal x7448=(r01*sj5);
IkReal x7449=((1.0)*x7441);
IkReal x7450=((1.0)*x7440);
evalcond[0]=((((-1.0)*x7447*x7450))+((x7440*x7446))+(((-1.0)*r22*x7449)));
evalcond[1]=((((-1.0)*x7446*x7449))+(((-1.0)*r22*x7450))+((x7441*x7447)));
evalcond[2]=(cj0+((x7440*x7444))+(((-1.0)*x7445*x7450))+(((-1.0)*r12*x7449)));
evalcond[3]=((((-1.0)*x7443*x7450))+(((-1.0)*x7442))+(((-1.0)*r02*x7449))+((x7440*x7448)));
evalcond[4]=((((-1.0)*x7448*x7449))+(((-1.0)*r02*x7450))+((x7441*x7443))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7442))+(((-1.0)*x7444*x7449))+(((-1.0)*r12*x7450))+((x7441*x7445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7451=((1.0)*sj5);
IkReal x7452=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7451))+(((-1.0)*r11*x7452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7451))+(((-1.0)*r01*x7452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7451))+(((-1.0)*r11*x7452))))+IKsqr(((((-1.0)*r00*x7451))+(((-1.0)*r01*x7452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7451))+(((-1.0)*r11*x7452))), ((((-1.0)*r00*x7451))+(((-1.0)*r01*x7452))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7453=IKsin(j0);
IkReal x7454=IKcos(j0);
IkReal x7455=((0.1)*sj5);
IkReal x7456=(cj5*r11);
IkReal x7457=(cj5*r01);
IkReal x7458=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7454))+(((-1.0)*x7457))+(((-1.0)*r00*x7458)));
evalcond[1]=((((-1.0)*r10*x7458))+(((-1.0)*x7453))+(((-1.0)*x7456)));
evalcond[2]=((((-0.1)*x7457))+(((-1.0)*r00*x7455))+(((-1.0)*px))+(((-0.134)*x7453)));
evalcond[3]=((((-0.1)*x7456))+(((-1.0)*r10*x7455))+(((-1.0)*py))+(((0.134)*x7454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7459=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7459;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7460=((1.0)*cj5);
IkReal x7461=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7460)));
j4eval[0]=x7461;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7460))))));
j4eval[2]=IKsign(x7461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7462=cj5*cj5;
IkReal x7463=r21*r21;
IkReal x7464=(r21*sj5);
IkReal x7465=(cj5*r20);
IkReal x7466=(((x7462*(r20*r20)))+(r22*r22)+(((-1.0)*x7462*x7463))+x7463+(((-2.0)*x7464*x7465)));
j4eval[0]=x7466;
j4eval[1]=IKsign(x7466);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7465))+x7464))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7467=cj5*cj5;
IkReal x7468=r21*r21;
IkReal x7469=(r21*sj5);
IkReal x7470=(cj5*r20);
CheckValue<IkReal> x7471 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7470))+x7469)),IKFAST_ATAN2_MAGTHRESH);
if(!x7471.valid){
continue;
}
CheckValue<IkReal> x7472=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7467*x7468))+((x7467*(r20*r20)))+(r22*r22)+(((-2.0)*x7469*x7470))+x7468)),-1);
if(!x7472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7471.value)+(((1.5707963267949)*(x7472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7473=IKsin(j4);
IkReal x7474=IKcos(j4);
IkReal x7475=(r11*sj5);
IkReal x7476=(r21*sj5);
IkReal x7477=(cj5*r00);
IkReal x7478=(cj5*r20);
IkReal x7479=(r01*sj5);
IkReal x7480=(cj5*r10);
IkReal x7481=((1.0)*x7474);
IkReal x7482=((1.0)*x7473);
evalcond[0]=((((-1.0)*x7478*x7482))+(((-1.0)*r22*x7481))+((x7473*x7476)));
evalcond[1]=(((x7474*x7477))+(((-1.0)*x7479*x7481))+(((-1.0)*r02*x7482)));
evalcond[2]=((((-1.0)*x7475*x7481))+((x7474*x7480))+(((-1.0)*r12*x7482)));
evalcond[3]=((((-1.0)*x7480*x7482))+cj0+(((-1.0)*r12*x7481))+((x7473*x7475)));
evalcond[4]=((1.0)+(((-1.0)*x7476*x7481))+((x7474*x7478))+(((-1.0)*r22*x7482)));
evalcond[5]=((((-1.0)*sj0))+((x7473*x7479))+(((-1.0)*r02*x7481))+(((-1.0)*x7477*x7482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7483=((1.0)*cj5);
CheckValue<IkReal> x7484 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7484.valid){
continue;
}
CheckValue<IkReal> x7485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7483)))),-1);
if(!x7485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7484.value)+(((1.5707963267949)*(x7485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7486=IKsin(j4);
IkReal x7487=IKcos(j4);
IkReal x7488=(r11*sj5);
IkReal x7489=(r21*sj5);
IkReal x7490=(cj5*r00);
IkReal x7491=(cj5*r20);
IkReal x7492=(r01*sj5);
IkReal x7493=(cj5*r10);
IkReal x7494=((1.0)*x7487);
IkReal x7495=((1.0)*x7486);
evalcond[0]=((((-1.0)*x7491*x7495))+(((-1.0)*r22*x7494))+((x7486*x7489)));
evalcond[1]=(((x7487*x7490))+(((-1.0)*r02*x7495))+(((-1.0)*x7492*x7494)));
evalcond[2]=(((x7487*x7493))+(((-1.0)*x7488*x7494))+(((-1.0)*r12*x7495)));
evalcond[3]=(cj0+(((-1.0)*x7493*x7495))+(((-1.0)*r12*x7494))+((x7486*x7488)));
evalcond[4]=((1.0)+((x7487*x7491))+(((-1.0)*x7489*x7494))+(((-1.0)*r22*x7495)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7490*x7495))+(((-1.0)*r02*x7494))+((x7486*x7492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7496 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7496.valid){
continue;
}
CheckValue<IkReal> x7497=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7496.value)+(((1.5707963267949)*(x7497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7498=IKsin(j4);
IkReal x7499=IKcos(j4);
IkReal x7500=(r11*sj5);
IkReal x7501=(r21*sj5);
IkReal x7502=(cj5*r00);
IkReal x7503=(cj5*r20);
IkReal x7504=(r01*sj5);
IkReal x7505=(cj5*r10);
IkReal x7506=((1.0)*x7499);
IkReal x7507=((1.0)*x7498);
evalcond[0]=((((-1.0)*r22*x7506))+(((-1.0)*x7503*x7507))+((x7498*x7501)));
evalcond[1]=(((x7499*x7502))+(((-1.0)*r02*x7507))+(((-1.0)*x7504*x7506)));
evalcond[2]=((((-1.0)*x7500*x7506))+((x7499*x7505))+(((-1.0)*r12*x7507)));
evalcond[3]=(cj0+((x7498*x7500))+(((-1.0)*x7505*x7507))+(((-1.0)*r12*x7506)));
evalcond[4]=((1.0)+(((-1.0)*x7501*x7506))+(((-1.0)*r22*x7507))+((x7499*x7503)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7502*x7507))+(((-1.0)*r02*x7506))+((x7498*x7504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7508=IKcos(j0);
IkReal x7509=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x7508))+(((-0.134)*x7509)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7508))+(((-0.392)*x7509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7510=((1.0)*cj5);
IkReal x7511=((((-1.0)*r01*x7510))+(((-1.0)*r00*sj5)));
j4eval[0]=x7511;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7510))))));
j4eval[2]=IKsign(x7511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7512=cj5*cj5;
IkReal x7513=((1.0)*r21);
IkReal x7514=(cj5*sj5);
IkReal x7515=((1.0)*r20);
IkReal x7516=(((r00*r20*x7512))+((r01*r21))+(((-1.0)*r01*x7514*x7515))+((r02*r22))+(((-1.0)*r00*x7513*x7514))+(((-1.0)*r01*x7512*x7513)));
j4eval[0]=x7516;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7515)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7517=cj5*cj5;
IkReal x7518=(r21*sj5);
IkReal x7519=(r11*r21);
IkReal x7520=((1.0)*cj5*r20);
IkReal x7521=((((-1.0)*x7517*x7519))+((r12*r22))+(((-1.0)*r11*sj5*x7520))+(((-1.0)*cj5*r10*x7518))+x7519+((r10*r20*x7517)));
j4eval[0]=x7521;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7518))+(((-1.0)*sj0*x7520))))));
j4eval[2]=IKsign(x7521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7522=cj5*cj5;
IkReal x7523=(r21*sj5);
IkReal x7524=(r11*r21);
IkReal x7525=((1.0)*cj5*r20);
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7523))+(((-1.0)*sj0*x7525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*x7523))+(((-1.0)*r11*sj5*x7525))+((r10*r20*x7522))+x7524+(((-1.0)*x7522*x7524)))),-1);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7526.value)+(((1.5707963267949)*(x7527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKsin(j4);
IkReal x7529=IKcos(j4);
IkReal x7530=(r11*sj5);
IkReal x7531=(cj5*r00);
IkReal x7532=(cj5*r10);
IkReal x7533=(r21*sj5);
IkReal x7534=(cj5*r20);
IkReal x7535=(r01*sj5);
IkReal x7536=((1.0)*x7529);
IkReal x7537=((1.0)*x7528);
evalcond[0]=(((x7528*x7533))+(((-1.0)*r22*x7536))+(((-1.0)*x7534*x7537)));
evalcond[1]=((((-1.0)*r22*x7537))+(((-1.0)*x7533*x7536))+((x7529*x7534)));
evalcond[2]=((((-1.0)*x7532*x7537))+cj0+(((-1.0)*r12*x7536))+((x7528*x7530)));
evalcond[3]=(cj0+(((-1.0)*x7535*x7536))+((x7529*x7531))+(((-1.0)*r02*x7537)));
evalcond[4]=(sj0+(((-1.0)*r12*x7537))+(((-1.0)*x7530*x7536))+((x7529*x7532)));
evalcond[5]=((((-1.0)*sj0))+((x7528*x7535))+(((-1.0)*x7531*x7537))+(((-1.0)*r02*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7538=cj5*cj5;
IkReal x7539=((1.0)*r21);
IkReal x7540=(cj5*sj5);
IkReal x7541=((1.0)*r20);
CheckValue<IkReal> x7542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7540*x7541))+(((-1.0)*r00*x7539*x7540))+((r01*r21))+((r02*r22))+((r00*r20*x7538))+(((-1.0)*r01*x7538*x7539)))),-1);
if(!x7542.valid){
continue;
}
CheckValue<IkReal> x7543 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7542.value)))+(x7543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7544=IKsin(j4);
IkReal x7545=IKcos(j4);
IkReal x7546=(r11*sj5);
IkReal x7547=(cj5*r00);
IkReal x7548=(cj5*r10);
IkReal x7549=(r21*sj5);
IkReal x7550=(cj5*r20);
IkReal x7551=(r01*sj5);
IkReal x7552=((1.0)*x7545);
IkReal x7553=((1.0)*x7544);
evalcond[0]=((((-1.0)*x7550*x7553))+(((-1.0)*r22*x7552))+((x7544*x7549)));
evalcond[1]=(((x7545*x7550))+(((-1.0)*r22*x7553))+(((-1.0)*x7549*x7552)));
evalcond[2]=(cj0+((x7544*x7546))+(((-1.0)*r12*x7552))+(((-1.0)*x7548*x7553)));
evalcond[3]=(((x7545*x7547))+cj0+(((-1.0)*x7551*x7552))+(((-1.0)*r02*x7553)));
evalcond[4]=(((x7545*x7548))+sj0+(((-1.0)*r12*x7553))+(((-1.0)*x7546*x7552)));
evalcond[5]=((((-1.0)*sj0))+((x7544*x7551))+(((-1.0)*x7547*x7553))+(((-1.0)*r02*x7552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7554=((1.0)*cj5);
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7554)))),-1);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7555.value)))+(x7556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j4);
IkReal x7558=IKcos(j4);
IkReal x7559=(r11*sj5);
IkReal x7560=(cj5*r00);
IkReal x7561=(cj5*r10);
IkReal x7562=(r21*sj5);
IkReal x7563=(cj5*r20);
IkReal x7564=(r01*sj5);
IkReal x7565=((1.0)*x7558);
IkReal x7566=((1.0)*x7557);
evalcond[0]=((((-1.0)*x7563*x7566))+(((-1.0)*r22*x7565))+((x7557*x7562)));
evalcond[1]=((((-1.0)*x7562*x7565))+(((-1.0)*r22*x7566))+((x7558*x7563)));
evalcond[2]=(cj0+((x7557*x7559))+(((-1.0)*r12*x7565))+(((-1.0)*x7561*x7566)));
evalcond[3]=((((-1.0)*r02*x7566))+cj0+(((-1.0)*x7564*x7565))+((x7558*x7560)));
evalcond[4]=(sj0+(((-1.0)*x7559*x7565))+(((-1.0)*r12*x7566))+((x7558*x7561)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7565))+((x7557*x7564))+(((-1.0)*x7560*x7566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7567=cj1*cj1;
IkReal x7568=((500.0)*py);
IkReal x7569=(cj1*sj2);
IkReal x7570=(cj2*sj2);
IkReal x7571=(cj5*r01);
IkReal x7572=(cj2*sj1);
IkReal x7573=(cj1*sj1);
IkReal x7574=(r00*sj5);
IkReal x7575=((50.0)*r10*sj5);
IkReal x7576=((50.0)*cj5*r11);
CheckValue<IkReal> x7577=IKPowWithIntegerCheck(((((-392.0)*x7567*x7570))+(((196.0)*x7570))+(((196.0)*x7573))+(((-392.0)*cj1*cj2*x7572))+(((-212.5)*sj2*x7567))+(((-212.5)*cj1*x7572))),-1);
if(!x7577.valid){
continue;
}
CheckValue<IkReal> x7578=IKPowWithIntegerCheck(((((-1.0)*x7569))+(((-1.0)*x7572))),-1);
if(!x7578.valid){
continue;
}
if( IKabs(((x7577.value)*(((((-1.0)*x7568*x7569))+(((-67.0)*x7571))+(((-67.0)*x7574))+(((-1.0)*x7568*x7572))+(((-1.0)*x7569*x7576))+(((-1.0)*x7569*x7575))+(((-1.0)*x7572*x7576))+(((-1.0)*x7572*x7575)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7578.value)*((x7571+x7574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7577.value)*(((((-1.0)*x7568*x7569))+(((-67.0)*x7571))+(((-67.0)*x7574))+(((-1.0)*x7568*x7572))+(((-1.0)*x7569*x7576))+(((-1.0)*x7569*x7575))+(((-1.0)*x7572*x7576))+(((-1.0)*x7572*x7575))))))+IKsqr(((x7578.value)*((x7571+x7574))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7577.value)*(((((-1.0)*x7568*x7569))+(((-67.0)*x7571))+(((-67.0)*x7574))+(((-1.0)*x7568*x7572))+(((-1.0)*x7569*x7576))+(((-1.0)*x7569*x7575))+(((-1.0)*x7572*x7576))+(((-1.0)*x7572*x7575))))), ((x7578.value)*((x7571+x7574))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7579=IKcos(j0);
IkReal x7580=IKsin(j0);
IkReal x7581=(r00*sj5);
IkReal x7582=(cj5*r11);
IkReal x7583=(r10*sj5);
IkReal x7584=((1.0)*cj2);
IkReal x7585=(cj5*r01);
IkReal x7586=((0.392)*sj2);
IkReal x7587=((0.425)*cj1);
IkReal x7588=((1.0)*cj1*sj2);
IkReal x7589=((0.392)*cj1*cj2);
IkReal x7590=(sj1*x7579);
IkReal x7591=(sj1*x7580);
evalcond[0]=((((-1.0)*x7581))+(((-1.0)*x7585))+(((-1.0)*x7579*x7588))+(((-1.0)*x7584*x7590)));
evalcond[1]=((((-1.0)*x7582))+(((-1.0)*x7583))+(((-1.0)*x7580*x7588))+(((-1.0)*x7584*x7591)));
evalcond[2]=((((-1.0)*x7586*x7590))+((x7579*x7587))+((x7579*x7589))+(((-0.134)*x7580))+(((-1.0)*px))+(((-0.1)*x7581))+(((-0.1)*x7585)));
evalcond[3]=((((-1.0)*x7586*x7591))+(((0.134)*x7579))+(((-1.0)*py))+(((-0.1)*x7583))+(((-0.1)*x7582))+((x7580*x7589))+((x7580*x7587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7592=((1.0)*cj5);
IkReal x7593=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7592)));
j4eval[0]=x7593;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7592)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7594=((1.0)*cj5);
IkReal x7595=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7594)));
j4eval[0]=x7595;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7594))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7596=((1.0)*sj0);
IkReal x7597=((1.0)*cj0);
IkReal x7598=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7598;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7597))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7596)))))+(IKabs(((((-1.0)*r12*x7596))+(((-1.0)*r02*x7597))))));
j4eval[2]=IKsign(x7598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7599=((-1.0)*r20);
IkReal x7601 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7601)==0){
continue;
}
IkReal x7600=pow(x7601,-0.5);
CheckValue<IkReal> x7602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7599),IKFAST_ATAN2_MAGTHRESH);
if(!x7602.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7602.value));
IkReal gconst133=(r21*x7600);
IkReal gconst134=(x7599*x7600);
CheckValue<IkReal> x7603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7604=((-1.0)*r20);
IkReal x7605=x7600;
CheckValue<IkReal> x7607 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7604),IKFAST_ATAN2_MAGTHRESH);
if(!x7607.valid){
continue;
}
IkReal x7606=((-1.0)*(x7607.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7606;
IkReal gconst132=x7606;
IkReal gconst133=(r21*x7605);
IkReal gconst134=(x7604*x7605);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7608=((-1.0)*r20);
IkReal x7609=x7600;
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7608),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
IkReal x7610=((-1.0)*(x7611.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7610;
IkReal gconst132=x7610;
IkReal gconst133=(r21*x7609);
IkReal gconst134=(x7608*x7609);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7612=((-1.0)*r20);
IkReal x7613=x7600;
CheckValue<IkReal> x7615 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7612),IKFAST_ATAN2_MAGTHRESH);
if(!x7615.valid){
continue;
}
IkReal x7614=((-1.0)*(x7615.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7614;
IkReal gconst132=x7614;
IkReal gconst133=(r21*x7613);
IkReal gconst134=(x7612*x7613);
IkReal x7616=r22*r22;
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7616))),-1);
if(!x7619.valid){
continue;
}
IkReal x7617=x7619.value;
IkReal x7618=(((x7617*(r20*r20*r20*r20)))+(((2.0)*x7617*(r20*r20)*(r21*r21)))+((x7617*(r21*r21*r21*r21)))+x7616);
j4eval[0]=x7618;
j4eval[1]=IKsign(x7618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7620=(gconst133*r21);
IkReal x7621=(cj1*sj2);
IkReal x7622=(gconst134*r20);
IkReal x7623=(cj2*sj1);
CheckValue<IkReal> x7624=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7620*x7622))+(x7620*x7620)+(x7622*x7622))),-1);
if(!x7624.valid){
continue;
}
CheckValue<IkReal> x7625 = IKatan2WithCheck(IkReal((((r22*x7621))+((r22*x7623)))),IkReal(((((-1.0)*x7622*x7623))+((x7620*x7623))+((x7620*x7621))+(((-1.0)*x7621*x7622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7624.value)))+(x7625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7626=IKsin(j4);
IkReal x7627=IKcos(j4);
IkReal x7628=(sj1*sj2);
IkReal x7629=(gconst133*r11);
IkReal x7630=(gconst133*r21);
IkReal x7631=(gconst133*r01);
IkReal x7632=((1.0)*x7627);
IkReal x7633=(gconst134*x7627);
IkReal x7634=((1.0)*x7626);
IkReal x7635=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7632))+(((-1.0)*gconst134*r20*x7634))+((x7626*x7630)));
evalcond[1]=((((-1.0)*gconst134*r10*x7634))+cj0+((x7626*x7629))+(((-1.0)*r12*x7632)));
evalcond[2]=((((-1.0)*sj0))+((x7626*x7631))+(((-1.0)*r02*x7632))+(((-1.0)*gconst134*r00*x7634)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7634))+(((-1.0)*x7630*x7632))+((cj1*sj2))+((r20*x7633)));
evalcond[4]=((((-1.0)*cj0*x7635))+((r00*x7633))+(((-1.0)*r02*x7634))+(((-1.0)*x7631*x7632))+((cj0*x7628)));
evalcond[5]=((((-1.0)*x7629*x7632))+((sj0*x7628))+((r10*x7633))+(((-1.0)*r12*x7634))+(((-1.0)*sj0*x7635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7636=((1.0)*gconst134);
CheckValue<IkReal> x7637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7636)))),-1);
if(!x7637.valid){
continue;
}
CheckValue<IkReal> x7638 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7637.value)))+(x7638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7639=IKsin(j4);
IkReal x7640=IKcos(j4);
IkReal x7641=(sj1*sj2);
IkReal x7642=(gconst133*r11);
IkReal x7643=(gconst133*r21);
IkReal x7644=(gconst133*r01);
IkReal x7645=((1.0)*x7640);
IkReal x7646=(gconst134*x7640);
IkReal x7647=((1.0)*x7639);
IkReal x7648=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7645))+((x7639*x7643))+(((-1.0)*gconst134*r20*x7647)));
evalcond[1]=(cj0+((x7639*x7642))+(((-1.0)*r12*x7645))+(((-1.0)*gconst134*r10*x7647)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7645))+((x7639*x7644))+(((-1.0)*gconst134*r00*x7647)));
evalcond[3]=((((-1.0)*r22*x7647))+((cj2*sj1))+((cj1*sj2))+((r20*x7646))+(((-1.0)*x7643*x7645)));
evalcond[4]=((((-1.0)*x7644*x7645))+(((-1.0)*r02*x7647))+(((-1.0)*cj0*x7648))+((r00*x7646))+((cj0*x7641)));
evalcond[5]=(((sj0*x7641))+(((-1.0)*sj0*x7648))+(((-1.0)*r12*x7647))+((r10*x7646))+(((-1.0)*x7642*x7645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7649=((1.0)*gconst134);
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7649)))),-1);
if(!x7650.valid){
continue;
}
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7649))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7650.value)))+(x7651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7652=IKsin(j4);
IkReal x7653=IKcos(j4);
IkReal x7654=(sj1*sj2);
IkReal x7655=(gconst133*r11);
IkReal x7656=(gconst133*r21);
IkReal x7657=(gconst133*r01);
IkReal x7658=((1.0)*x7653);
IkReal x7659=(gconst134*x7653);
IkReal x7660=((1.0)*x7652);
IkReal x7661=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7658))+(((-1.0)*gconst134*r20*x7660))+((x7652*x7656)));
evalcond[1]=((((-1.0)*gconst134*r10*x7660))+cj0+(((-1.0)*r12*x7658))+((x7652*x7655)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7658))+(((-1.0)*gconst134*r00*x7660))+((x7652*x7657)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7660))+(((-1.0)*x7656*x7658))+((r20*x7659)));
evalcond[4]=((((-1.0)*cj0*x7661))+(((-1.0)*x7657*x7658))+(((-1.0)*r02*x7660))+((cj0*x7654))+((r00*x7659)));
evalcond[5]=((((-1.0)*r12*x7660))+(((-1.0)*x7655*x7658))+((r10*x7659))+(((-1.0)*sj0*x7661))+((sj0*x7654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7662=((-1.0)*r21);
IkReal x7664 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7664)==0){
continue;
}
IkReal x7663=pow(x7664,-0.5);
CheckValue<IkReal> x7665 = IKatan2WithCheck(IkReal(x7662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7665.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7665.value))));
IkReal gconst136=(x7662*x7663);
IkReal gconst137=((1.0)*r20*x7663);
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7666.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7667=((-1.0)*r21);
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal(x7667),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
IkReal x7668=((1.0)*(x7670.value));
IkReal x7669=x7663;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7668)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7668)));
IkReal gconst136=(x7667*x7669);
IkReal gconst137=((1.0)*r20*x7669);
IkReal x7671=r22*r22;
IkReal x7672=((1.0)*x7671);
CheckValue<IkReal> x7676=IKPowWithIntegerCheck(((-1.0)+x7671),-1);
if(!x7676.valid){
continue;
}
IkReal x7673=x7676.value;
if((((1.0)+(((-1.0)*x7672)))) < -0.00001)
continue;
IkReal x7674=IKsqrt(((1.0)+(((-1.0)*x7672))));
IkReal x7675=(cj0*x7673*x7674);
j4eval[0]=((IKabs(((((-1.0)*x7672*x7675))+x7675)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7677=((-1.0)*r21);
CheckValue<IkReal> x7680 = IKatan2WithCheck(IkReal(x7677),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7680.valid){
continue;
}
IkReal x7678=((1.0)*(x7680.value));
IkReal x7679=x7663;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7678)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7678)));
IkReal gconst136=(x7677*x7679);
IkReal gconst137=((1.0)*r20*x7679);
IkReal x7681=r22*r22;
IkReal x7682=((1.0)*x7681);
CheckValue<IkReal> x7686=IKPowWithIntegerCheck(((-1.0)+x7681),-1);
if(!x7686.valid){
continue;
}
IkReal x7683=x7686.value;
if((((1.0)+(((-1.0)*x7682)))) < -0.00001)
continue;
IkReal x7684=IKsqrt(((1.0)+(((-1.0)*x7682))));
IkReal x7685=(sj0*x7683*x7684);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7682*x7685))+x7685))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7687=((-1.0)*r21);
CheckValue<IkReal> x7690 = IKatan2WithCheck(IkReal(x7687),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7690.valid){
continue;
}
IkReal x7688=((1.0)*(x7690.value));
IkReal x7689=x7663;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7688)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7688)));
IkReal gconst136=(x7687*x7689);
IkReal gconst137=((1.0)*r20*x7689);
IkReal x7691=r22*r22;
IkReal x7692=(r12*sj0);
IkReal x7693=(cj0*r02);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(((-1.0)+x7691),-1);
if(!x7697.valid){
continue;
}
IkReal x7694=x7697.value;
if((((1.0)+(((-1.0)*x7691)))) < -0.00001)
continue;
IkReal x7695=IKsqrt(((1.0)+(((-1.0)*x7691))));
IkReal x7696=(r22*x7694*x7695);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7692*x7696))+((x7693*x7696)))))+(IKabs(((((-1.0)*x7692))+(((-1.0)*x7693))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7698=((1.0)*sj0);
IkReal x7699=((1.0)*cj0);
CheckValue<IkReal> x7700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7700.valid){
continue;
}
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7699))+(((-1.0)*r12*x7698)))),IkReal(((((-1.0)*gconst136*r01*x7699))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7698))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7700.value)))+(x7701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7702=IKsin(j4);
IkReal x7703=IKcos(j4);
IkReal x7704=(gconst136*r01);
IkReal x7705=(gconst137*r10);
IkReal x7706=(sj1*sj2);
IkReal x7707=(gconst137*r20);
IkReal x7708=(gconst136*r11);
IkReal x7709=(gconst136*r21);
IkReal x7710=(gconst137*r00);
IkReal x7711=((1.0)*x7703);
IkReal x7712=((1.0)*cj1*cj2);
IkReal x7713=((1.0)*x7702);
evalcond[0]=((((-1.0)*r22*x7711))+(((-1.0)*x7707*x7713))+((x7702*x7709)));
evalcond[1]=(cj0+(((-1.0)*r12*x7711))+(((-1.0)*x7705*x7713))+((x7702*x7708)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7711))+((x7702*x7704))+(((-1.0)*x7710*x7713)));
evalcond[3]=(((cj2*sj1))+((x7703*x7707))+(((-1.0)*r22*x7713))+((cj1*sj2))+(((-1.0)*x7709*x7711)));
evalcond[4]=(((x7703*x7710))+(((-1.0)*cj0*x7712))+((cj0*x7706))+(((-1.0)*r02*x7713))+(((-1.0)*x7704*x7711)));
evalcond[5]=((((-1.0)*x7708*x7711))+((x7703*x7705))+(((-1.0)*r12*x7713))+((sj0*x7706))+(((-1.0)*sj0*x7712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7714=((1.0)*gconst137);
CheckValue<IkReal> x7715 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7714))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7715.valid){
continue;
}
CheckValue<IkReal> x7716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7714))+(((-1.0)*gconst136*r10)))),-1);
if(!x7716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7715.value)+(((1.5707963267949)*(x7716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7717=IKsin(j4);
IkReal x7718=IKcos(j4);
IkReal x7719=(gconst136*r01);
IkReal x7720=(gconst137*r10);
IkReal x7721=(sj1*sj2);
IkReal x7722=(gconst137*r20);
IkReal x7723=(gconst136*r11);
IkReal x7724=(gconst136*r21);
IkReal x7725=(gconst137*r00);
IkReal x7726=((1.0)*x7718);
IkReal x7727=((1.0)*cj1*cj2);
IkReal x7728=((1.0)*x7717);
evalcond[0]=(((x7717*x7724))+(((-1.0)*r22*x7726))+(((-1.0)*x7722*x7728)));
evalcond[1]=(cj0+((x7717*x7723))+(((-1.0)*x7720*x7728))+(((-1.0)*r12*x7726)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7725*x7728))+(((-1.0)*r02*x7726))+((x7717*x7719)));
evalcond[3]=((((-1.0)*x7724*x7726))+((cj2*sj1))+((cj1*sj2))+((x7718*x7722))+(((-1.0)*r22*x7728)));
evalcond[4]=((((-1.0)*r02*x7728))+(((-1.0)*x7719*x7726))+((x7718*x7725))+(((-1.0)*cj0*x7727))+((cj0*x7721)));
evalcond[5]=(((sj0*x7721))+(((-1.0)*sj0*x7727))+(((-1.0)*x7723*x7726))+((x7718*x7720))+(((-1.0)*r12*x7728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7729=((1.0)*gconst137);
CheckValue<IkReal> x7730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7729))+(((-1.0)*gconst136*r00)))),-1);
if(!x7730.valid){
continue;
}
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7729))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7730.value)))+(x7731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7732=IKsin(j4);
IkReal x7733=IKcos(j4);
IkReal x7734=(gconst136*r01);
IkReal x7735=(gconst137*r10);
IkReal x7736=(sj1*sj2);
IkReal x7737=(gconst137*r20);
IkReal x7738=(gconst136*r11);
IkReal x7739=(gconst136*r21);
IkReal x7740=(gconst137*r00);
IkReal x7741=((1.0)*x7733);
IkReal x7742=((1.0)*cj1*cj2);
IkReal x7743=((1.0)*x7732);
evalcond[0]=((((-1.0)*r22*x7741))+((x7732*x7739))+(((-1.0)*x7737*x7743)));
evalcond[1]=(cj0+((x7732*x7738))+(((-1.0)*x7735*x7743))+(((-1.0)*r12*x7741)));
evalcond[2]=((((-1.0)*sj0))+((x7732*x7734))+(((-1.0)*r02*x7741))+(((-1.0)*x7740*x7743)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7743))+((x7733*x7737))+((cj1*sj2))+(((-1.0)*x7739*x7741)));
evalcond[4]=(((x7733*x7740))+(((-1.0)*r02*x7743))+((cj0*x7736))+(((-1.0)*cj0*x7742))+(((-1.0)*x7734*x7741)));
evalcond[5]=(((x7733*x7735))+(((-1.0)*r12*x7743))+((sj0*x7736))+(((-1.0)*x7738*x7741))+(((-1.0)*sj0*x7742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7744=((-1.0)*r10);
IkReal x7746 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7746)==0){
continue;
}
IkReal x7745=pow(x7746,-0.5);
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7744),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7747.value));
IkReal gconst139=(r11*x7745);
IkReal gconst140=(x7744*x7745);
CheckValue<IkReal> x7748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7748.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7748.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7749=((-1.0)*r10);
IkReal x7750=x7745;
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7749),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
IkReal x7751=((-1.0)*(x7752.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7751;
IkReal gconst138=x7751;
IkReal gconst139=(r11*x7750);
IkReal gconst140=(x7749*x7750);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7753=((1.0)*sj0);
IkReal x7754=((1.0)*gconst139);
CheckValue<IkReal> x7755 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7753)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7753))+(((-1.0)*cj0*r01*x7754))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7755.valid){
continue;
}
CheckValue<IkReal> x7756=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7754)))),-1);
if(!x7756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7755.value)+(((1.5707963267949)*(x7756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7757=IKsin(j4);
IkReal x7758=IKcos(j4);
IkReal x7759=(gconst140*r00);
IkReal x7760=(sj1*sj2);
IkReal x7761=(gconst139*r11);
IkReal x7762=(gconst139*r01);
IkReal x7763=(gconst139*r21);
IkReal x7764=((1.0)*x7758);
IkReal x7765=((1.0)*x7757);
IkReal x7766=((1.0)*cj1*cj2);
IkReal x7767=(gconst140*x7758);
evalcond[0]=((((-1.0)*r22*x7764))+((x7757*x7763))+(((-1.0)*gconst140*r20*x7765)));
evalcond[1]=(cj0+(((-1.0)*r12*x7764))+((x7757*x7761))+(((-1.0)*gconst140*r10*x7765)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7764))+(((-1.0)*x7759*x7765))+((x7757*x7762)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7765))+((cj1*sj2))+((r20*x7767))+(((-1.0)*x7763*x7764)));
evalcond[4]=((((-1.0)*r02*x7765))+(((-1.0)*cj0*x7766))+((cj0*x7760))+((x7758*x7759))+(((-1.0)*x7762*x7764)));
evalcond[5]=(((sj0*x7760))+(((-1.0)*sj0*x7766))+(((-1.0)*r12*x7765))+(((-1.0)*x7761*x7764))+((r10*x7767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7768=((1.0)*gconst140);
CheckValue<IkReal> x7769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7768))+(((-1.0)*gconst139*r00)))),-1);
if(!x7769.valid){
continue;
}
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7769.value)))+(x7770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7771=IKsin(j4);
IkReal x7772=IKcos(j4);
IkReal x7773=(gconst140*r00);
IkReal x7774=(sj1*sj2);
IkReal x7775=(gconst139*r11);
IkReal x7776=(gconst139*r01);
IkReal x7777=(gconst139*r21);
IkReal x7778=((1.0)*x7772);
IkReal x7779=((1.0)*x7771);
IkReal x7780=((1.0)*cj1*cj2);
IkReal x7781=(gconst140*x7772);
evalcond[0]=((((-1.0)*r22*x7778))+((x7771*x7777))+(((-1.0)*gconst140*r20*x7779)));
evalcond[1]=(cj0+((x7771*x7775))+(((-1.0)*r12*x7778))+(((-1.0)*gconst140*r10*x7779)));
evalcond[2]=((((-1.0)*r02*x7778))+(((-1.0)*sj0))+((x7771*x7776))+(((-1.0)*x7773*x7779)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7779))+((cj1*sj2))+(((-1.0)*x7777*x7778))+((r20*x7781)));
evalcond[4]=((((-1.0)*r02*x7779))+((x7772*x7773))+(((-1.0)*x7776*x7778))+((cj0*x7774))+(((-1.0)*cj0*x7780)));
evalcond[5]=(((sj0*x7774))+(((-1.0)*x7775*x7778))+((r10*x7781))+(((-1.0)*sj0*x7780))+(((-1.0)*r12*x7779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7782=((-1.0)*r11);
IkReal x7784 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7784)==0){
continue;
}
IkReal x7783=pow(x7784,-0.5);
CheckValue<IkReal> x7785 = IKatan2WithCheck(IkReal(x7782),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7785.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7785.value))));
IkReal gconst142=(x7782*x7783);
IkReal gconst143=((1.0)*r10*x7783);
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7786.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7787=((-1.0)*r11);
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(x7787),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
IkReal x7788=((1.0)*(x7790.value));
IkReal x7789=x7783;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7788)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7788)));
IkReal gconst142=(x7787*x7789);
IkReal gconst143=((1.0)*r10*x7789);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7791=((-1.0)*r11);
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(x7791),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
IkReal x7792=((1.0)*(x7794.value));
IkReal x7793=x7783;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7792)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7792)));
IkReal gconst142=(x7791*x7793);
IkReal gconst143=((1.0)*r10*x7793);
IkReal x7795=r12*r12;
IkReal x7796=((1.0)*sj0);
IkReal x7797=(cj0*r02);
IkReal x7798=x7783;
j4eval[0]=((IKabs(((((-1.0)*r12*x7796))+(((-1.0)*x7797)))))+(IKabs((((r12*x7797*x7798))+((sj0*x7795*x7798))+(((-1.0)*x7796*x7798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7799=((-1.0)*r11);
CheckValue<IkReal> x7802 = IKatan2WithCheck(IkReal(x7799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7802.valid){
continue;
}
IkReal x7800=((1.0)*(x7802.value));
IkReal x7801=x7783;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7800)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7800)));
IkReal gconst142=(x7799*x7801);
IkReal gconst143=((1.0)*r10*x7801);
IkReal x7803=r12*r12;
IkReal x7804=(cj1*r22*sj2);
IkReal x7805=(cj2*r22*sj1);
CheckValue<IkReal> x7809=IKPowWithIntegerCheck(((-1.0)+x7803),-1);
if(!x7809.valid){
continue;
}
IkReal x7806=x7809.value;
if((((1.0)+(((-1.0)*x7803)))) < -0.00001)
continue;
IkReal x7807=IKsqrt(((1.0)+(((-1.0)*x7803))));
IkReal x7808=((1.0)*r12*x7806*x7807);
j4eval[0]=((IKabs(((((-1.0)*x7805*x7808))+(((-1.0)*x7804*x7808)))))+(IKabs((x7805+x7804))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7810=(gconst142*r21);
IkReal x7811=(cj1*sj2);
IkReal x7812=(cj2*sj1);
IkReal x7813=(gconst143*r20);
CheckValue<IkReal> x7814=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7810*x7810)+(x7813*x7813)+(((-2.0)*x7810*x7813)))),-1);
if(!x7814.valid){
continue;
}
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal((((r22*x7812))+((r22*x7811)))),IkReal(((((-1.0)*x7811*x7813))+((x7810*x7811))+((x7810*x7812))+(((-1.0)*x7812*x7813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7814.value)))+(x7815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7816=IKsin(j4);
IkReal x7817=IKcos(j4);
IkReal x7818=(sj1*sj2);
IkReal x7819=(gconst143*r20);
IkReal x7820=((1.0)*x7817);
IkReal x7821=((1.0)*cj1*cj2);
IkReal x7822=((1.0)*x7816);
IkReal x7823=(gconst142*x7816);
IkReal x7824=(gconst143*x7817);
evalcond[0]=(((r21*x7823))+(((-1.0)*r22*x7820))+(((-1.0)*x7819*x7822)));
evalcond[1]=(cj0+((r11*x7823))+(((-1.0)*r12*x7820))+(((-1.0)*gconst143*r10*x7822)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7820))+((r01*x7823))+(((-1.0)*gconst143*r00*x7822)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7817*x7819))+(((-1.0)*gconst142*r21*x7820))+(((-1.0)*r22*x7822)));
evalcond[4]=((((-1.0)*gconst142*r01*x7820))+(((-1.0)*r02*x7822))+((r00*x7824))+(((-1.0)*cj0*x7821))+((cj0*x7818)));
evalcond[5]=(((r10*x7824))+(((-1.0)*gconst142*r11*x7820))+((sj0*x7818))+(((-1.0)*sj0*x7821))+(((-1.0)*r12*x7822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7825=((1.0)*sj0);
IkReal x7826=((1.0)*gconst142);
CheckValue<IkReal> x7827 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7825)))),IkReal(((((-1.0)*gconst142*r11*x7825))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7826))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7827.valid){
continue;
}
CheckValue<IkReal> x7828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7826))+(((-1.0)*gconst143*r21)))),-1);
if(!x7828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7827.value)+(((1.5707963267949)*(x7828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7829=IKsin(j4);
IkReal x7830=IKcos(j4);
IkReal x7831=(sj1*sj2);
IkReal x7832=(gconst143*r20);
IkReal x7833=((1.0)*x7830);
IkReal x7834=((1.0)*cj1*cj2);
IkReal x7835=((1.0)*x7829);
IkReal x7836=(gconst142*x7829);
IkReal x7837=(gconst143*x7830);
evalcond[0]=(((r21*x7836))+(((-1.0)*r22*x7833))+(((-1.0)*x7832*x7835)));
evalcond[1]=((((-1.0)*gconst143*r10*x7835))+cj0+(((-1.0)*r12*x7833))+((r11*x7836)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7835))+(((-1.0)*r02*x7833))+((r01*x7836)));
evalcond[3]=(((cj2*sj1))+((x7830*x7832))+(((-1.0)*r22*x7835))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7833)));
evalcond[4]=((((-1.0)*cj0*x7834))+(((-1.0)*gconst142*r01*x7833))+((cj0*x7831))+(((-1.0)*r02*x7835))+((r00*x7837)));
evalcond[5]=(((r10*x7837))+(((-1.0)*r12*x7835))+(((-1.0)*sj0*x7834))+((sj0*x7831))+(((-1.0)*gconst142*r11*x7833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7838=((1.0)*gconst143);
CheckValue<IkReal> x7839=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7838)))),-1);
if(!x7839.valid){
continue;
}
CheckValue<IkReal> x7840 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7838))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7839.value)))+(x7840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7841=IKsin(j4);
IkReal x7842=IKcos(j4);
IkReal x7843=(sj1*sj2);
IkReal x7844=(gconst143*r20);
IkReal x7845=((1.0)*x7842);
IkReal x7846=((1.0)*cj1*cj2);
IkReal x7847=((1.0)*x7841);
IkReal x7848=(gconst142*x7841);
IkReal x7849=(gconst143*x7842);
evalcond[0]=((((-1.0)*x7844*x7847))+((r21*x7848))+(((-1.0)*r22*x7845)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7847))+(((-1.0)*r12*x7845))+((r11*x7848)));
evalcond[2]=((((-1.0)*gconst143*r00*x7847))+(((-1.0)*sj0))+(((-1.0)*r02*x7845))+((r01*x7848)));
evalcond[3]=(((x7842*x7844))+((cj2*sj1))+(((-1.0)*r22*x7847))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7845)));
evalcond[4]=((((-1.0)*cj0*x7846))+(((-1.0)*gconst142*r01*x7845))+((cj0*x7843))+((r00*x7849))+(((-1.0)*r02*x7847)));
evalcond[5]=((((-1.0)*gconst142*r11*x7845))+((r10*x7849))+(((-1.0)*r12*x7847))+(((-1.0)*sj0*x7846))+((sj0*x7843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7850=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7850;
j4eval[1]=IKsign(x7850);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7851=((1.0)*cj5);
IkReal x7852=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7851)));
j4eval[0]=x7852;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7851)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7853=cj5*cj5;
IkReal x7854=r11*r11;
IkReal x7855=(r11*sj5);
IkReal x7856=(cj5*r10);
IkReal x7857=((r12*r12)+(((-2.0)*x7855*x7856))+x7854+((x7853*(r10*r10)))+(((-1.0)*x7853*x7854)));
j4eval[0]=x7857;
j4eval[1]=IKsign(x7857);
j4eval[2]=((IKabs(r12))+(IKabs((x7856+(((-1.0)*x7855))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7858=cj5*cj5;
IkReal x7859=r11*r11;
IkReal x7860=(cj5*r10);
IkReal x7861=(r11*sj5);
CheckValue<IkReal> x7862=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7860*x7861))+(r12*r12)+(((-1.0)*x7858*x7859))+x7859+((x7858*(r10*r10))))),-1);
if(!x7862.valid){
continue;
}
CheckValue<IkReal> x7863 = IKatan2WithCheck(IkReal((x7860+(((-1.0)*x7861)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7862.value)))+(x7863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7864=IKsin(j4);
IkReal x7865=IKcos(j4);
IkReal x7866=(cj5*r10);
IkReal x7867=(r01*sj5);
IkReal x7868=(cj5*r00);
IkReal x7869=(cj5*r20);
IkReal x7870=((1.0)*x7865);
IkReal x7871=((1.0)*x7864);
IkReal x7872=(sj5*x7864);
evalcond[0]=((((-1.0)*r22*x7870))+(((-1.0)*x7869*x7871))+((r21*x7872)));
evalcond[1]=(((x7864*x7867))+(((-1.0)*x7868*x7871))+(((-1.0)*r02*x7870)));
evalcond[2]=(((x7865*x7866))+(((-1.0)*r11*sj5*x7870))+(((-1.0)*r12*x7871)));
evalcond[3]=((1.0)+((r11*x7872))+(((-1.0)*r12*x7870))+(((-1.0)*x7866*x7871)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7871))+((x7865*x7869))+((cj1*sj2))+(((-1.0)*r21*sj5*x7870)));
evalcond[5]=((((-1.0)*x7867*x7870))+((x7865*x7868))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7873=((1.0)*cj5);
CheckValue<IkReal> x7874 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7874.valid){
continue;
}
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7873))+(((-1.0)*r00*sj5)))),-1);
if(!x7875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7874.value)+(((1.5707963267949)*(x7875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7876=IKsin(j4);
IkReal x7877=IKcos(j4);
IkReal x7878=(cj5*r10);
IkReal x7879=(r01*sj5);
IkReal x7880=(cj5*r00);
IkReal x7881=(cj5*r20);
IkReal x7882=((1.0)*x7877);
IkReal x7883=((1.0)*x7876);
IkReal x7884=(sj5*x7876);
evalcond[0]=((((-1.0)*r22*x7882))+((r21*x7884))+(((-1.0)*x7881*x7883)));
evalcond[1]=((((-1.0)*x7880*x7883))+(((-1.0)*r02*x7882))+((x7876*x7879)));
evalcond[2]=(((x7877*x7878))+(((-1.0)*r11*sj5*x7882))+(((-1.0)*r12*x7883)));
evalcond[3]=((1.0)+(((-1.0)*x7878*x7883))+((r11*x7884))+(((-1.0)*r12*x7882)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7883))+((cj1*sj2))+((x7877*x7881))+(((-1.0)*r21*sj5*x7882)));
evalcond[5]=((((-1.0)*r02*x7883))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7877*x7880))+(((-1.0)*x7879*x7882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7885=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7885.valid){
continue;
}
CheckValue<IkReal> x7886 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7885.value)))+(x7886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7887=IKsin(j4);
IkReal x7888=IKcos(j4);
IkReal x7889=(cj5*r10);
IkReal x7890=(r01*sj5);
IkReal x7891=(cj5*r00);
IkReal x7892=(cj5*r20);
IkReal x7893=((1.0)*x7888);
IkReal x7894=((1.0)*x7887);
IkReal x7895=(sj5*x7887);
evalcond[0]=(((r21*x7895))+(((-1.0)*r22*x7893))+(((-1.0)*x7892*x7894)));
evalcond[1]=((((-1.0)*x7891*x7894))+((x7887*x7890))+(((-1.0)*r02*x7893)));
evalcond[2]=((((-1.0)*r11*sj5*x7893))+(((-1.0)*r12*x7894))+((x7888*x7889)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7893))+(((-1.0)*x7889*x7894))+((r11*x7895)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7888*x7892))+(((-1.0)*r21*sj5*x7893))+(((-1.0)*r22*x7894)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7888*x7891))+(((-1.0)*x7890*x7893))+(((-1.0)*r02*x7894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7896=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7896;
j4eval[1]=IKsign(x7896);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7897=((1.0)*cj5);
IkReal x7898=((((-1.0)*r21*x7897))+(((-1.0)*r20*sj5)));
j4eval[0]=x7898;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7897))))));
j4eval[2]=IKsign(x7898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7899=cj5*cj5;
IkReal x7900=r11*r11;
IkReal x7901=(cj5*r10);
IkReal x7902=(r11*sj5);
IkReal x7903=((((-1.0)*x7900))+((x7899*x7900))+(((2.0)*x7901*x7902))+(((-1.0)*(r12*r12)))+(((-1.0)*x7899*(r10*r10))));
j4eval[0]=x7903;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7902))+x7901))));
j4eval[2]=IKsign(x7903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7904=cj5*cj5;
IkReal x7905=r11*r11;
IkReal x7906=(cj5*r10);
IkReal x7907=(r11*sj5);
CheckValue<IkReal> x7908=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7905))+(((2.0)*x7906*x7907))+(((-1.0)*(r12*r12)))+(((-1.0)*x7904*(r10*r10)))+((x7904*x7905)))),-1);
if(!x7908.valid){
continue;
}
CheckValue<IkReal> x7909 = IKatan2WithCheck(IkReal(((((-1.0)*x7907))+x7906)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7908.value)))+(x7909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7910=IKsin(j4);
IkReal x7911=IKcos(j4);
IkReal x7912=(cj5*r10);
IkReal x7913=(r01*sj5);
IkReal x7914=(cj5*r00);
IkReal x7915=(cj5*r20);
IkReal x7916=((1.0)*x7911);
IkReal x7917=((1.0)*x7910);
IkReal x7918=(sj5*x7910);
evalcond[0]=(((r21*x7918))+(((-1.0)*x7915*x7917))+(((-1.0)*r22*x7916)));
evalcond[1]=((((-1.0)*r02*x7916))+(((-1.0)*x7914*x7917))+((x7910*x7913)));
evalcond[2]=(((x7911*x7912))+(((-1.0)*r11*sj5*x7916))+(((-1.0)*r12*x7917)));
evalcond[3]=((-1.0)+(((-1.0)*x7912*x7917))+((r11*x7918))+(((-1.0)*r12*x7916)));
evalcond[4]=(((cj2*sj1))+((x7911*x7915))+((cj1*sj2))+(((-1.0)*r22*x7917))+(((-1.0)*r21*sj5*x7916)));
evalcond[5]=(((x7911*x7914))+(((-1.0)*r02*x7917))+(((-1.0)*x7913*x7916))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7919=((1.0)*cj5);
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
CheckValue<IkReal> x7921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7919))+(((-1.0)*r20*sj5)))),-1);
if(!x7921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7920.value)+(((1.5707963267949)*(x7921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7922=IKsin(j4);
IkReal x7923=IKcos(j4);
IkReal x7924=(cj5*r10);
IkReal x7925=(r01*sj5);
IkReal x7926=(cj5*r00);
IkReal x7927=(cj5*r20);
IkReal x7928=((1.0)*x7923);
IkReal x7929=((1.0)*x7922);
IkReal x7930=(sj5*x7922);
evalcond[0]=(((r21*x7930))+(((-1.0)*r22*x7928))+(((-1.0)*x7927*x7929)));
evalcond[1]=((((-1.0)*r02*x7928))+((x7922*x7925))+(((-1.0)*x7926*x7929)));
evalcond[2]=((((-1.0)*r11*sj5*x7928))+((x7923*x7924))+(((-1.0)*r12*x7929)));
evalcond[3]=((-1.0)+(((-1.0)*x7924*x7929))+((r11*x7930))+(((-1.0)*r12*x7928)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7929))+(((-1.0)*r21*sj5*x7928))+((x7923*x7927)));
evalcond[5]=((((-1.0)*r02*x7929))+(((-1.0)*sj1*sj2))+(((-1.0)*x7925*x7928))+((x7923*x7926))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
CheckValue<IkReal> x7932=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7931.value)+(((1.5707963267949)*(x7932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7933=IKsin(j4);
IkReal x7934=IKcos(j4);
IkReal x7935=(cj5*r10);
IkReal x7936=(r01*sj5);
IkReal x7937=(cj5*r00);
IkReal x7938=(cj5*r20);
IkReal x7939=((1.0)*x7934);
IkReal x7940=((1.0)*x7933);
IkReal x7941=(sj5*x7933);
evalcond[0]=(((r21*x7941))+(((-1.0)*x7938*x7940))+(((-1.0)*r22*x7939)));
evalcond[1]=(((x7933*x7936))+(((-1.0)*r02*x7939))+(((-1.0)*x7937*x7940)));
evalcond[2]=((((-1.0)*r11*sj5*x7939))+(((-1.0)*r12*x7940))+((x7934*x7935)));
evalcond[3]=((-1.0)+(((-1.0)*x7935*x7940))+(((-1.0)*r12*x7939))+((r11*x7941)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7940))+(((-1.0)*r21*sj5*x7939))+((cj1*sj2))+((x7934*x7938)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7940))+(((-1.0)*x7936*x7939))+((cj1*cj2))+((x7934*x7937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7942=((-1.0)*r00);
IkReal x7944 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7944)==0){
continue;
}
IkReal x7943=pow(x7944,-0.5);
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7942),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7945.value));
IkReal gconst145=(r01*x7943);
IkReal gconst146=(x7942*x7943);
CheckValue<IkReal> x7946 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7946.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7946.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7947=((-1.0)*r00);
IkReal x7948=x7943;
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7947),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
IkReal x7949=((-1.0)*(x7950.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7949;
IkReal gconst144=x7949;
IkReal gconst145=(r01*x7948);
IkReal gconst146=(x7947*x7948);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7951=((1.0)*sj0);
IkReal x7952=((1.0)*gconst145);
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7952)))),-1);
if(!x7953.valid){
continue;
}
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7951)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7951))+(((-1.0)*cj0*r01*x7952))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7953.value)))+(x7954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7955=IKsin(j4);
IkReal x7956=IKcos(j4);
IkReal x7957=(gconst146*r10);
IkReal x7958=(sj1*sj2);
IkReal x7959=(gconst146*r20);
IkReal x7960=(gconst146*r00);
IkReal x7961=((1.0)*x7956);
IkReal x7962=((1.0)*x7955);
IkReal x7963=(gconst145*x7955);
IkReal x7964=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7963))+(((-1.0)*r22*x7961))+(((-1.0)*x7959*x7962)));
evalcond[1]=((((-1.0)*x7957*x7962))+((r11*x7963))+cj0+(((-1.0)*r12*x7961)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7960*x7962))+((r01*x7963))+(((-1.0)*r02*x7961)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7962))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7961))+((x7956*x7959)));
evalcond[4]=((((-1.0)*gconst145*r01*x7961))+((x7956*x7960))+((cj0*x7958))+(((-1.0)*cj0*x7964))+(((-1.0)*r02*x7962)));
evalcond[5]=((((-1.0)*sj0*x7964))+(((-1.0)*r12*x7962))+((sj0*x7958))+((x7956*x7957))+(((-1.0)*gconst145*r11*x7961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7965=((1.0)*gconst146);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7965))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
CheckValue<IkReal> x7967=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7965)))),-1);
if(!x7967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7966.value)+(((1.5707963267949)*(x7967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7968=IKsin(j4);
IkReal x7969=IKcos(j4);
IkReal x7970=(gconst146*r10);
IkReal x7971=(sj1*sj2);
IkReal x7972=(gconst146*r20);
IkReal x7973=(gconst146*r00);
IkReal x7974=((1.0)*x7969);
IkReal x7975=((1.0)*x7968);
IkReal x7976=(gconst145*x7968);
IkReal x7977=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7974))+(((-1.0)*x7972*x7975))+((r21*x7976)));
evalcond[1]=(cj0+((r11*x7976))+(((-1.0)*x7970*x7975))+(((-1.0)*r12*x7974)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7976))+(((-1.0)*x7973*x7975))+(((-1.0)*r02*x7974)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7975))+((cj1*sj2))+((x7969*x7972))+(((-1.0)*gconst145*r21*x7974)));
evalcond[4]=((((-1.0)*gconst145*r01*x7974))+((x7969*x7973))+((cj0*x7971))+(((-1.0)*cj0*x7977))+(((-1.0)*r02*x7975)));
evalcond[5]=((((-1.0)*sj0*x7977))+((x7969*x7970))+(((-1.0)*r12*x7975))+((sj0*x7971))+(((-1.0)*gconst145*r11*x7974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7978=((-1.0)*r01);
IkReal x7980 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7980)==0){
continue;
}
IkReal x7979=pow(x7980,-0.5);
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(x7978),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7981.value))));
IkReal gconst148=(x7978*x7979);
IkReal gconst149=((1.0)*r00*x7979);
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7982.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7983=((-1.0)*r01);
CheckValue<IkReal> x7986 = IKatan2WithCheck(IkReal(x7983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7986.valid){
continue;
}
IkReal x7984=((1.0)*(x7986.value));
IkReal x7985=x7979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7984)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7984)));
IkReal gconst148=(x7983*x7985);
IkReal gconst149=((1.0)*r00*x7985);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7987=((-1.0)*r01);
CheckValue<IkReal> x7990 = IKatan2WithCheck(IkReal(x7987),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7990.valid){
continue;
}
IkReal x7988=((1.0)*(x7990.value));
IkReal x7989=x7979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7988)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7988)));
IkReal gconst148=(x7987*x7989);
IkReal gconst149=((1.0)*r00*x7989);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7991=((-1.0)*r01);
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal(x7991),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
IkReal x7992=((1.0)*(x7994.value));
IkReal x7993=x7979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7992)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7992)));
IkReal gconst148=(x7991*x7993);
IkReal gconst149=((1.0)*r00*x7993);
IkReal x7995=r02*r02;
IkReal x7996=(r12*sj0);
IkReal x7997=((1.0)*cj0);
IkReal x7998=x7979;
j4eval[0]=((IKabs(((((-1.0)*x7996))+(((-1.0)*r02*x7997)))))+(IKabs((((r02*x7996*x7998))+((cj0*x7995*x7998))+(((-1.0)*x7997*x7998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7999=((1.0)*sj0);
IkReal x8000=((1.0)*gconst148);
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8000))+(((-1.0)*gconst149*r21)))),-1);
if(!x8001.valid){
continue;
}
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7999))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7999))+(((-1.0)*cj0*r01*x8000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8001.value)))+(x8002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8003=IKsin(j4);
IkReal x8004=IKcos(j4);
IkReal x8005=(gconst148*r11);
IkReal x8006=(sj1*sj2);
IkReal x8007=((1.0)*x8004);
IkReal x8008=(gconst149*x8004);
IkReal x8009=(gconst148*x8003);
IkReal x8010=((1.0)*cj1*cj2);
IkReal x8011=((1.0)*x8003);
evalcond[0]=(((r21*x8009))+(((-1.0)*gconst149*r20*x8011))+(((-1.0)*r22*x8007)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8011))+(((-1.0)*r12*x8007))+((x8003*x8005)));
evalcond[2]=(((r01*x8009))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8011))+(((-1.0)*r02*x8007)));
evalcond[3]=((((-1.0)*r22*x8011))+((cj2*sj1))+(((-1.0)*gconst148*r21*x8007))+((cj1*sj2))+((r20*x8008)));
evalcond[4]=((((-1.0)*r02*x8011))+((r00*x8008))+((cj0*x8006))+(((-1.0)*cj0*x8010))+(((-1.0)*gconst148*r01*x8007)));
evalcond[5]=(((sj0*x8006))+(((-1.0)*sj0*x8010))+(((-1.0)*x8005*x8007))+(((-1.0)*r12*x8011))+((r10*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8012=((1.0)*gconst149);
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8012))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
CheckValue<IkReal> x8014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8012)))),-1);
if(!x8014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8013.value)+(((1.5707963267949)*(x8014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8015=IKsin(j4);
IkReal x8016=IKcos(j4);
IkReal x8017=(gconst148*r11);
IkReal x8018=(sj1*sj2);
IkReal x8019=((1.0)*x8016);
IkReal x8020=(gconst149*x8016);
IkReal x8021=(gconst148*x8015);
IkReal x8022=((1.0)*cj1*cj2);
IkReal x8023=((1.0)*x8015);
evalcond[0]=((((-1.0)*r22*x8019))+(((-1.0)*gconst149*r20*x8023))+((r21*x8021)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8023))+((x8015*x8017))+(((-1.0)*r12*x8019)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8019))+(((-1.0)*gconst149*r00*x8023))+((r01*x8021)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8019))+((cj1*sj2))+((r20*x8020))+(((-1.0)*r22*x8023)));
evalcond[4]=(((cj0*x8018))+(((-1.0)*r02*x8023))+((r00*x8020))+(((-1.0)*cj0*x8022))+(((-1.0)*gconst148*r01*x8019)));
evalcond[5]=(((r10*x8020))+(((-1.0)*r12*x8023))+(((-1.0)*sj0*x8022))+(((-1.0)*x8017*x8019))+((sj0*x8018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8024=((1.0)*gconst149);
CheckValue<IkReal> x8025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8024)))),-1);
if(!x8025.valid){
continue;
}
CheckValue<IkReal> x8026 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8025.value)))+(x8026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8027=IKsin(j4);
IkReal x8028=IKcos(j4);
IkReal x8029=(gconst148*r11);
IkReal x8030=(sj1*sj2);
IkReal x8031=((1.0)*x8028);
IkReal x8032=(gconst149*x8028);
IkReal x8033=(gconst148*x8027);
IkReal x8034=((1.0)*cj1*cj2);
IkReal x8035=((1.0)*x8027);
evalcond[0]=((((-1.0)*gconst149*r20*x8035))+((r21*x8033))+(((-1.0)*r22*x8031)));
evalcond[1]=(((x8027*x8029))+cj0+(((-1.0)*r12*x8031))+(((-1.0)*gconst149*r10*x8035)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8031))+(((-1.0)*gconst149*r00*x8035))+((r01*x8033)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8031))+((cj1*sj2))+((r20*x8032))+(((-1.0)*r22*x8035)));
evalcond[4]=((((-1.0)*gconst148*r01*x8031))+((cj0*x8030))+(((-1.0)*r02*x8035))+(((-1.0)*cj0*x8034))+((r00*x8032)));
evalcond[5]=((((-1.0)*sj0*x8034))+((r10*x8032))+(((-1.0)*r12*x8035))+((sj0*x8030))+(((-1.0)*x8029*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8036=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8036;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8037=((1.0)*cj5);
IkReal x8038=((((-1.0)*r11*x8037))+(((-1.0)*r10*sj5)));
j4eval[0]=x8038;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8037)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8039=cj5*cj5;
IkReal x8040=r01*r01;
IkReal x8041=(r01*sj5);
IkReal x8042=(cj5*r00);
IkReal x8043=((((-1.0)*x8039*(r00*r00)))+(((-1.0)*x8040))+((x8039*x8040))+(((-1.0)*(r02*r02)))+(((2.0)*x8041*x8042)));
j4eval[0]=x8043;
j4eval[1]=IKsign(x8043);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8041))+x8042))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8044=cj5*cj5;
IkReal x8045=r01*r01;
IkReal x8046=(r01*sj5);
IkReal x8047=(cj5*r00);
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal(((((-1.0)*x8046))+x8047)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
CheckValue<IkReal> x8049=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8045))+(((-1.0)*(r02*r02)))+((x8044*x8045))+(((-1.0)*x8044*(r00*r00)))+(((2.0)*x8046*x8047)))),-1);
if(!x8049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8048.value)+(((1.5707963267949)*(x8049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8050=IKsin(j4);
IkReal x8051=IKcos(j4);
IkReal x8052=(cj5*r10);
IkReal x8053=(r01*sj5);
IkReal x8054=(cj5*r00);
IkReal x8055=(cj5*r20);
IkReal x8056=((1.0)*x8051);
IkReal x8057=((1.0)*x8050);
IkReal x8058=(sj5*x8050);
evalcond[0]=((((-1.0)*x8055*x8057))+(((-1.0)*r22*x8056))+((r21*x8058)));
evalcond[1]=((((-1.0)*r12*x8056))+(((-1.0)*x8052*x8057))+((r11*x8058)));
evalcond[2]=((((-1.0)*r02*x8057))+((x8051*x8054))+(((-1.0)*x8053*x8056)));
evalcond[3]=((-1.0)+((x8050*x8053))+(((-1.0)*r02*x8056))+(((-1.0)*x8054*x8057)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8056))+((x8051*x8055))+(((-1.0)*r22*x8057)));
evalcond[5]=((((-1.0)*r12*x8057))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8056))+((x8051*x8052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8059=((1.0)*cj5);
CheckValue<IkReal> x8060 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8060.valid){
continue;
}
CheckValue<IkReal> x8061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8059)))),-1);
if(!x8061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8060.value)+(((1.5707963267949)*(x8061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8062=IKsin(j4);
IkReal x8063=IKcos(j4);
IkReal x8064=(cj5*r10);
IkReal x8065=(r01*sj5);
IkReal x8066=(cj5*r00);
IkReal x8067=(cj5*r20);
IkReal x8068=((1.0)*x8063);
IkReal x8069=((1.0)*x8062);
IkReal x8070=(sj5*x8062);
evalcond[0]=((((-1.0)*x8067*x8069))+((r21*x8070))+(((-1.0)*r22*x8068)));
evalcond[1]=((((-1.0)*x8064*x8069))+(((-1.0)*r12*x8068))+((r11*x8070)));
evalcond[2]=(((x8063*x8066))+(((-1.0)*x8065*x8068))+(((-1.0)*r02*x8069)));
evalcond[3]=((-1.0)+((x8062*x8065))+(((-1.0)*x8066*x8069))+(((-1.0)*r02*x8068)));
evalcond[4]=(((cj2*sj1))+((x8063*x8067))+((cj1*sj2))+(((-1.0)*r21*sj5*x8068))+(((-1.0)*r22*x8069)));
evalcond[5]=(((x8063*x8064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8069))+(((-1.0)*r11*sj5*x8068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8071=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8071.valid){
continue;
}
CheckValue<IkReal> x8072 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8071.value)))+(x8072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8073=IKsin(j4);
IkReal x8074=IKcos(j4);
IkReal x8075=(cj5*r10);
IkReal x8076=(r01*sj5);
IkReal x8077=(cj5*r00);
IkReal x8078=(cj5*r20);
IkReal x8079=((1.0)*x8074);
IkReal x8080=((1.0)*x8073);
IkReal x8081=(sj5*x8073);
evalcond[0]=((((-1.0)*x8078*x8080))+((r21*x8081))+(((-1.0)*r22*x8079)));
evalcond[1]=((((-1.0)*x8075*x8080))+((r11*x8081))+(((-1.0)*r12*x8079)));
evalcond[2]=((((-1.0)*r02*x8080))+((x8074*x8077))+(((-1.0)*x8076*x8079)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8079))+(((-1.0)*x8077*x8080))+((x8073*x8076)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8079))+((x8074*x8078))+(((-1.0)*r22*x8080)));
evalcond[5]=((((-1.0)*r11*sj5*x8079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8074*x8075))+(((-1.0)*r12*x8080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8082=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8082;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8083=((1.0)*cj5);
IkReal x8084=((((-1.0)*r21*x8083))+(((-1.0)*r20*sj5)));
j4eval[0]=x8084;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8083)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8085=cj5*cj5;
IkReal x8086=r01*r01;
IkReal x8087=(cj5*r00);
IkReal x8088=(r01*sj5);
IkReal x8089=(((x8085*(r00*r00)))+(((-1.0)*x8085*x8086))+(((-2.0)*x8087*x8088))+x8086+(r02*r02));
j4eval[0]=x8089;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8088))+x8087))));
j4eval[2]=IKsign(x8089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8090=cj5*cj5;
IkReal x8091=r01*r01;
IkReal x8092=(r01*sj5);
IkReal x8093=(cj5*r00);
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal(((((-1.0)*x8092))+x8093)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
CheckValue<IkReal> x8095=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8092*x8093))+(((-1.0)*x8090*x8091))+((x8090*(r00*r00)))+x8091+(r02*r02))),-1);
if(!x8095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8094.value)+(((1.5707963267949)*(x8095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8096=IKsin(j4);
IkReal x8097=IKcos(j4);
IkReal x8098=(cj5*r10);
IkReal x8099=(r01*sj5);
IkReal x8100=(cj5*r00);
IkReal x8101=(cj5*r20);
IkReal x8102=((1.0)*x8097);
IkReal x8103=((1.0)*x8096);
IkReal x8104=(sj5*x8096);
evalcond[0]=((((-1.0)*r22*x8102))+(((-1.0)*x8101*x8103))+((r21*x8104)));
evalcond[1]=((((-1.0)*x8098*x8103))+((r11*x8104))+(((-1.0)*r12*x8102)));
evalcond[2]=((((-1.0)*x8099*x8102))+((x8097*x8100))+(((-1.0)*r02*x8103)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8102))+((x8096*x8099))+(((-1.0)*x8100*x8103)));
evalcond[4]=((((-1.0)*r21*sj5*x8102))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8103))+((x8097*x8101)));
evalcond[5]=(((x8097*x8098))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8102))+(((-1.0)*r12*x8103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8105=((1.0)*cj5);
CheckValue<IkReal> x8106 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8106.valid){
continue;
}
CheckValue<IkReal> x8107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8105))+(((-1.0)*r20*sj5)))),-1);
if(!x8107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8106.value)+(((1.5707963267949)*(x8107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8108=IKsin(j4);
IkReal x8109=IKcos(j4);
IkReal x8110=(cj5*r10);
IkReal x8111=(r01*sj5);
IkReal x8112=(cj5*r00);
IkReal x8113=(cj5*r20);
IkReal x8114=((1.0)*x8109);
IkReal x8115=((1.0)*x8108);
IkReal x8116=(sj5*x8108);
evalcond[0]=((((-1.0)*x8113*x8115))+((r21*x8116))+(((-1.0)*r22*x8114)));
evalcond[1]=((((-1.0)*r12*x8114))+(((-1.0)*x8110*x8115))+((r11*x8116)));
evalcond[2]=((((-1.0)*x8111*x8114))+(((-1.0)*r02*x8115))+((x8109*x8112)));
evalcond[3]=((1.0)+(((-1.0)*x8112*x8115))+(((-1.0)*r02*x8114))+((x8108*x8111)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8114))+((cj1*sj2))+((x8109*x8113))+(((-1.0)*r22*x8115)));
evalcond[5]=((((-1.0)*r11*sj5*x8114))+(((-1.0)*r12*x8115))+(((-1.0)*sj1*sj2))+((x8109*x8110))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8117 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8117.valid){
continue;
}
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8117.value)+(((1.5707963267949)*(x8118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(cj5*r10);
IkReal x8122=(r01*sj5);
IkReal x8123=(cj5*r00);
IkReal x8124=(cj5*r20);
IkReal x8125=((1.0)*x8120);
IkReal x8126=((1.0)*x8119);
IkReal x8127=(sj5*x8119);
evalcond[0]=((((-1.0)*x8124*x8126))+((r21*x8127))+(((-1.0)*r22*x8125)));
evalcond[1]=((((-1.0)*r12*x8125))+(((-1.0)*x8121*x8126))+((r11*x8127)));
evalcond[2]=((((-1.0)*x8122*x8125))+((x8120*x8123))+(((-1.0)*r02*x8126)));
evalcond[3]=((1.0)+(((-1.0)*x8123*x8126))+(((-1.0)*r02*x8125))+((x8119*x8122)));
evalcond[4]=(((cj2*sj1))+((x8120*x8124))+(((-1.0)*r21*sj5*x8125))+((cj1*sj2))+(((-1.0)*r22*x8126)));
evalcond[5]=((((-1.0)*r11*sj5*x8125))+(((-1.0)*r12*x8126))+((x8120*x8121))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8128=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8128);
rxp1_1=(px*r21);
rxp1_2=(r11*x8128);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8129=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8129);
rxp1_1=(px*r21);
rxp1_2=(r11*x8129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8130=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8130);
rxp1_1=(px*r21);
rxp1_2=(r11*x8130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8133=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8133.valid){
continue;
}
IkReal x8131=x8133.value;
IkReal x8132=(sj0*x8131);
cj4array[0]=((((-1.0)*sj1*sj2*x8132))+((cj1*cj2*x8132)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8134=IKsin(j4);
IkReal x8135=IKcos(j4);
IkReal x8136=(r21*sj5);
IkReal x8137=(cj5*r20);
IkReal x8138=((1.0)*x8134);
IkReal x8139=((1.0)*x8135);
evalcond[0]=((-1.0)*r02*x8134);
evalcond[1]=((((-1.0)*r02*x8139))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x8137*x8138))+((x8134*x8136)));
evalcond[3]=((((-1.0)*cj5*r10*x8138))+((r11*sj5*x8134)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8135*x8137))+(((-1.0)*x8136*x8139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8142=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8142.valid){
continue;
}
IkReal x8140=x8142.value;
IkReal x8141=((1.0)*x8140);
cj4array[0]=((((-1.0)*cj2*sj1*x8141))+(((-1.0)*cj1*sj2*x8141)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8143=IKsin(j4);
IkReal x8144=IKcos(j4);
IkReal x8145=(r11*sj5);
IkReal x8146=((1.0)*sj0);
IkReal x8147=((1.0)*x8144);
IkReal x8148=((1.0)*cj5*x8143);
evalcond[0]=((-1.0)*r02*x8143);
evalcond[1]=((((-1.0)*r02*x8147))+(((-1.0)*x8146)));
evalcond[2]=((((-1.0)*r20*x8148))+((r21*sj5*x8143)));
evalcond[3]=(((x8143*x8145))+(((-1.0)*r10*x8148)));
evalcond[4]=(((cj5*r10*x8144))+(((-1.0)*x8145*x8147))+(((-1.0)*cj1*cj2*x8146))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8149=IKPowWithIntegerCheck(r02,-1);
if(!x8149.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8149.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8150=IKsin(j4);
IkReal x8151=IKcos(j4);
IkReal x8152=(cj5*x8151);
IkReal x8153=(sj5*x8150);
IkReal x8154=((1.0)*sj5*x8151);
IkReal x8155=((1.0)*cj5*x8150);
evalcond[0]=((-1.0)*r02*x8150);
evalcond[1]=(((r21*x8153))+(((-1.0)*r20*x8155)));
evalcond[2]=((((-1.0)*r10*x8155))+((r11*x8153)));
evalcond[3]=(((cj2*sj1))+((r20*x8152))+((cj1*sj2))+(((-1.0)*r21*x8154)));
evalcond[4]=(((r10*x8152))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8156=((1.0)*sj0);
IkReal x8157=((1.0)*cj0);
CheckValue<IkReal> x8158 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8157))+(((-1.0)*r12*x8156)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8156))+(((-1.0)*r01*sj5*x8157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8158.valid){
continue;
}
CheckValue<IkReal> x8159=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8158.value)+(((1.5707963267949)*(x8159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8160=IKsin(j4);
IkReal x8161=IKcos(j4);
IkReal x8162=(cj5*r10);
IkReal x8163=(sj1*sj2);
IkReal x8164=(r01*sj5);
IkReal x8165=(cj5*r00);
IkReal x8166=(cj5*r20);
IkReal x8167=((1.0)*x8161);
IkReal x8168=((1.0)*cj1*cj2);
IkReal x8169=((1.0)*x8160);
IkReal x8170=(sj5*x8160);
evalcond[0]=((((-1.0)*x8166*x8169))+((r21*x8170))+(((-1.0)*r22*x8167)));
evalcond[1]=(cj0+(((-1.0)*x8162*x8169))+((r11*x8170))+(((-1.0)*r12*x8167)));
evalcond[2]=((((-1.0)*x8165*x8169))+(((-1.0)*sj0))+((x8160*x8164))+(((-1.0)*r02*x8167)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8167))+((cj1*sj2))+((x8161*x8166))+(((-1.0)*r22*x8169)));
evalcond[4]=(((cj0*x8163))+(((-1.0)*r02*x8169))+((x8161*x8165))+(((-1.0)*cj0*x8168))+(((-1.0)*x8164*x8167)));
evalcond[5]=((((-1.0)*r12*x8169))+((sj0*x8163))+((x8161*x8162))+(((-1.0)*r11*sj5*x8167))+(((-1.0)*sj0*x8168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8171=((1.0)*cj5);
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8171))+(((-1.0)*r10*sj5)))),-1);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8171))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8172.value)))+(x8173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8174=IKsin(j4);
IkReal x8175=IKcos(j4);
IkReal x8176=(cj5*r10);
IkReal x8177=(sj1*sj2);
IkReal x8178=(r01*sj5);
IkReal x8179=(cj5*r00);
IkReal x8180=(cj5*r20);
IkReal x8181=((1.0)*x8175);
IkReal x8182=((1.0)*cj1*cj2);
IkReal x8183=((1.0)*x8174);
IkReal x8184=(sj5*x8174);
evalcond[0]=((((-1.0)*r22*x8181))+((r21*x8184))+(((-1.0)*x8180*x8183)));
evalcond[1]=(((r11*x8184))+cj0+(((-1.0)*x8176*x8183))+(((-1.0)*r12*x8181)));
evalcond[2]=(((x8174*x8178))+(((-1.0)*r02*x8181))+(((-1.0)*x8179*x8183))+(((-1.0)*sj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8183))+((cj1*sj2))+(((-1.0)*r21*sj5*x8181))+((x8175*x8180)));
evalcond[4]=((((-1.0)*r02*x8183))+((cj0*x8177))+(((-1.0)*cj0*x8182))+((x8175*x8179))+(((-1.0)*x8178*x8181)));
evalcond[5]=(((sj0*x8177))+(((-1.0)*r12*x8183))+(((-1.0)*sj0*x8182))+(((-1.0)*r11*sj5*x8181))+((x8175*x8176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8185=((1.0)*cj5);
CheckValue<IkReal> x8186 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8186.valid){
continue;
}
CheckValue<IkReal> x8187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8185))+(((-1.0)*r00*sj5)))),-1);
if(!x8187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8186.value)+(((1.5707963267949)*(x8187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8188=IKsin(j4);
IkReal x8189=IKcos(j4);
IkReal x8190=(cj5*r10);
IkReal x8191=(sj1*sj2);
IkReal x8192=(r01*sj5);
IkReal x8193=(cj5*r00);
IkReal x8194=(cj5*r20);
IkReal x8195=((1.0)*x8189);
IkReal x8196=((1.0)*cj1*cj2);
IkReal x8197=((1.0)*x8188);
IkReal x8198=(sj5*x8188);
evalcond[0]=(((r21*x8198))+(((-1.0)*r22*x8195))+(((-1.0)*x8194*x8197)));
evalcond[1]=(((r11*x8198))+cj0+(((-1.0)*r12*x8195))+(((-1.0)*x8190*x8197)));
evalcond[2]=((((-1.0)*r02*x8195))+(((-1.0)*sj0))+(((-1.0)*x8193*x8197))+((x8188*x8192)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8197))+((cj1*sj2))+(((-1.0)*r21*sj5*x8195))+((x8189*x8194)));
evalcond[4]=((((-1.0)*r02*x8197))+(((-1.0)*x8192*x8195))+(((-1.0)*cj0*x8196))+((x8189*x8193))+((cj0*x8191)));
evalcond[5]=(((sj0*x8191))+(((-1.0)*r12*x8197))+(((-1.0)*sj0*x8196))+(((-1.0)*r11*sj5*x8195))+((x8189*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8199=cj5*cj5;
IkReal x8200=r21*r21;
IkReal x8201=(cj2*sj1);
IkReal x8202=(cj1*sj2);
IkReal x8203=(r21*sj5);
IkReal x8204=((1.0)*cj5*r20);
CheckValue<IkReal> x8205=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8203))+(r22*r22)+((x8199*(r20*r20)))+(((-1.0)*x8199*x8200))+x8200)),-1);
if(!x8205.valid){
continue;
}
CheckValue<IkReal> x8206 = IKatan2WithCheck(IkReal((((r22*x8202))+((r22*x8201)))),IkReal(((((-1.0)*x8202*x8204))+(((-1.0)*x8201*x8204))+((x8201*x8203))+((x8202*x8203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8205.value)))+(x8206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8207=IKsin(j4);
IkReal x8208=IKcos(j4);
IkReal x8209=(r21*sj5);
IkReal x8210=(cj5*r20);
IkReal x8211=((1.0)*x8208);
IkReal x8212=((1.0)*x8207);
evalcond[0]=((((-1.0)*x8210*x8212))+(((-1.0)*r22*x8211))+((x8207*x8209)));
evalcond[1]=(((cj2*sj1))+((x8208*x8210))+(((-1.0)*x8209*x8211))+((cj1*sj2))+(((-1.0)*r22*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8213=(cj5*sj4);
IkReal x8214=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8214))+(((-1.0)*r00*x8213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8214))+((r10*x8213))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8214))+(((-1.0)*r00*x8213))))+IKsqr(((((-1.0)*r11*x8214))+((r10*x8213))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8214))+(((-1.0)*r00*x8213))), ((((-1.0)*r11*x8214))+((r10*x8213))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8215=IKcos(j0);
IkReal x8216=IKsin(j0);
IkReal x8217=(cj4*cj5);
IkReal x8218=((0.1)*sj5);
IkReal x8219=((0.392)*sj1);
IkReal x8220=(cj5*r11);
IkReal x8221=((1.0)*cj1);
IkReal x8222=(r11*sj5);
IkReal x8223=((1.0)*sj5);
IkReal x8224=((1.0)*sj4);
IkReal x8225=((0.392)*cj1);
IkReal x8226=((1.0)*sj1);
IkReal x8227=(cj5*r01);
IkReal x8228=((0.425)*cj1);
IkReal x8229=((1.0)*cj4);
IkReal x8230=(sj2*x8216);
IkReal x8231=(sj2*x8215);
IkReal x8232=(cj2*x8215);
IkReal x8233=(cj2*x8216);
evalcond[0]=((((-1.0)*cj5*r10*x8224))+(((-1.0)*r12*x8229))+((sj4*x8222))+x8215);
evalcond[1]=((((-1.0)*r02*x8229))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8224))+(((-1.0)*x8216)));
evalcond[2]=((((-1.0)*x8221*x8231))+(((-1.0)*x8227))+(((-1.0)*x8226*x8232))+(((-1.0)*r00*x8223)));
evalcond[3]=((((-1.0)*x8221*x8230))+(((-1.0)*x8220))+(((-1.0)*x8226*x8233))+(((-1.0)*r10*x8223)));
evalcond[4]=((((-1.0)*x8221*x8232))+(((-1.0)*r02*x8224))+((r00*x8217))+(((-1.0)*cj4*r01*x8223))+((sj1*x8231)));
evalcond[5]=((((-1.0)*x8221*x8233))+(((-1.0)*r12*x8224))+((r10*x8217))+((sj1*x8230))+(((-1.0)*x8222*x8229)));
evalcond[6]=((((-1.0)*r00*x8218))+(((-1.0)*px))+(((-0.134)*x8216))+((x8225*x8232))+((x8215*x8228))+(((-0.1)*x8227))+(((-1.0)*x8219*x8231)));
evalcond[7]=((((0.134)*x8215))+(((-1.0)*py))+((x8225*x8233))+(((-0.1)*x8220))+(((-1.0)*x8219*x8230))+((x8216*x8228))+(((-1.0)*r10*x8218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8234 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8234.valid){
continue;
}
CheckValue<IkReal> x8235=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8235.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8234.value)+(((1.5707963267949)*(x8235.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8236=IKcos(j0);
IkReal x8237=IKsin(j0);
IkReal x8238=(r00*sj5);
IkReal x8239=(cj5*r11);
IkReal x8240=(r10*sj5);
IkReal x8241=((1.0)*cj2);
IkReal x8242=(cj5*r01);
IkReal x8243=((0.392)*sj2);
IkReal x8244=((0.425)*cj1);
IkReal x8245=((1.0)*cj1*sj2);
IkReal x8246=((0.392)*cj1*cj2);
IkReal x8247=(sj1*x8236);
IkReal x8248=(sj1*x8237);
evalcond[0]=((((-1.0)*x8241*x8247))+(((-1.0)*x8236*x8245))+(((-1.0)*x8238))+(((-1.0)*x8242)));
evalcond[1]=((((-1.0)*x8241*x8248))+(((-1.0)*x8237*x8245))+(((-1.0)*x8239))+(((-1.0)*x8240)));
evalcond[2]=((((-1.0)*x8243*x8247))+(((-1.0)*px))+((x8236*x8244))+((x8236*x8246))+(((-0.1)*x8242))+(((-0.134)*x8237))+(((-0.1)*x8238)));
evalcond[3]=((((-1.0)*x8243*x8248))+(((0.134)*x8236))+(((-1.0)*py))+((x8237*x8246))+((x8237*x8244))+(((-0.1)*x8240))+(((-0.1)*x8239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8249=((1.0)*cj5);
IkReal x8250=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8249)));
j4eval[0]=x8250;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8249))))));
j4eval[2]=IKsign(x8250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8251=((1.0)*cj5);
IkReal x8252=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8251)));
j4eval[0]=x8252;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8251))))));
j4eval[2]=IKsign(x8252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8253=((1.0)*sj0);
IkReal x8254=((1.0)*cj0);
IkReal x8255=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8255;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8253))+(((-1.0)*r01*sj5*x8254)))))+(IKabs(((((-1.0)*r12*x8253))+(((-1.0)*r02*x8254))))));
j4eval[2]=IKsign(x8255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8256=((-1.0)*r20);
IkReal x8258 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8258)==0){
continue;
}
IkReal x8257=pow(x8258,-0.5);
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8256),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8259.value));
IkReal gconst133=(r21*x8257);
IkReal gconst134=(x8256*x8257);
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8260.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8261=((-1.0)*r20);
IkReal x8262=x8257;
CheckValue<IkReal> x8264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8261),IKFAST_ATAN2_MAGTHRESH);
if(!x8264.valid){
continue;
}
IkReal x8263=((-1.0)*(x8264.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8263;
IkReal gconst132=x8263;
IkReal gconst133=(r21*x8262);
IkReal gconst134=(x8261*x8262);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8265=((-1.0)*r20);
IkReal x8266=x8257;
CheckValue<IkReal> x8268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8265),IKFAST_ATAN2_MAGTHRESH);
if(!x8268.valid){
continue;
}
IkReal x8267=((-1.0)*(x8268.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8267;
IkReal gconst132=x8267;
IkReal gconst133=(r21*x8266);
IkReal gconst134=(x8265*x8266);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8269=((-1.0)*r20);
IkReal x8270=x8257;
CheckValue<IkReal> x8272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8269),IKFAST_ATAN2_MAGTHRESH);
if(!x8272.valid){
continue;
}
IkReal x8271=((-1.0)*(x8272.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8271;
IkReal gconst132=x8271;
IkReal gconst133=(r21*x8270);
IkReal gconst134=(x8269*x8270);
IkReal x8273=r22*r22;
CheckValue<IkReal> x8276=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8273))),-1);
if(!x8276.valid){
continue;
}
IkReal x8274=x8276.value;
IkReal x8275=((((2.0)*x8274*(r20*r20)*(r21*r21)))+((x8274*(r20*r20*r20*r20)))+((x8274*(r21*r21*r21*r21)))+x8273);
j4eval[0]=x8275;
j4eval[1]=IKsign(x8275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8277=(gconst133*r21);
IkReal x8278=(cj1*sj2);
IkReal x8279=(gconst134*r20);
IkReal x8280=(cj2*sj1);
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8279*x8279)+(x8277*x8277)+(((-2.0)*x8277*x8279)))),-1);
if(!x8281.valid){
continue;
}
CheckValue<IkReal> x8282 = IKatan2WithCheck(IkReal((((r22*x8278))+((r22*x8280)))),IkReal(((((-1.0)*x8278*x8279))+((x8277*x8280))+(((-1.0)*x8279*x8280))+((x8277*x8278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8281.value)))+(x8282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8283=IKsin(j4);
IkReal x8284=IKcos(j4);
IkReal x8285=(sj1*sj2);
IkReal x8286=(gconst133*r11);
IkReal x8287=(gconst133*r21);
IkReal x8288=(gconst133*r01);
IkReal x8289=((1.0)*x8284);
IkReal x8290=(gconst134*x8284);
IkReal x8291=((1.0)*x8283);
IkReal x8292=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8291))+(((-1.0)*r22*x8289))+((x8283*x8287)));
evalcond[1]=((((-1.0)*r12*x8289))+cj0+(((-1.0)*gconst134*r10*x8291))+((x8283*x8286)));
evalcond[2]=((((-1.0)*r02*x8289))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8291))+((x8283*x8288)));
evalcond[3]=(((cj2*sj1))+((r20*x8290))+((cj1*sj2))+(((-1.0)*x8287*x8289))+(((-1.0)*r22*x8291)));
evalcond[4]=(((r00*x8290))+(((-1.0)*cj0*x8292))+((cj0*x8285))+(((-1.0)*x8288*x8289))+(((-1.0)*r02*x8291)));
evalcond[5]=((((-1.0)*r12*x8291))+((r10*x8290))+((sj0*x8285))+(((-1.0)*x8286*x8289))+(((-1.0)*sj0*x8292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8293=((1.0)*gconst134);
CheckValue<IkReal> x8294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8293))+(((-1.0)*gconst133*r10)))),-1);
if(!x8294.valid){
continue;
}
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8293))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8294.value)))+(x8295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8296=IKsin(j4);
IkReal x8297=IKcos(j4);
IkReal x8298=(sj1*sj2);
IkReal x8299=(gconst133*r11);
IkReal x8300=(gconst133*r21);
IkReal x8301=(gconst133*r01);
IkReal x8302=((1.0)*x8297);
IkReal x8303=(gconst134*x8297);
IkReal x8304=((1.0)*x8296);
IkReal x8305=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8302))+(((-1.0)*gconst134*r20*x8304))+((x8296*x8300)));
evalcond[1]=(((x8296*x8299))+cj0+(((-1.0)*r12*x8302))+(((-1.0)*gconst134*r10*x8304)));
evalcond[2]=((((-1.0)*gconst134*r00*x8304))+(((-1.0)*sj0))+(((-1.0)*r02*x8302))+((x8296*x8301)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8304))+((cj1*sj2))+(((-1.0)*x8300*x8302))+((r20*x8303)));
evalcond[4]=(((r00*x8303))+(((-1.0)*x8301*x8302))+((cj0*x8298))+(((-1.0)*r02*x8304))+(((-1.0)*cj0*x8305)));
evalcond[5]=((((-1.0)*r12*x8304))+((r10*x8303))+((sj0*x8298))+(((-1.0)*sj0*x8305))+(((-1.0)*x8299*x8302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8306=((1.0)*gconst134);
CheckValue<IkReal> x8307=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8306)))),-1);
if(!x8307.valid){
continue;
}
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8306))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8307.value)))+(x8308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8309=IKsin(j4);
IkReal x8310=IKcos(j4);
IkReal x8311=(sj1*sj2);
IkReal x8312=(gconst133*r11);
IkReal x8313=(gconst133*r21);
IkReal x8314=(gconst133*r01);
IkReal x8315=((1.0)*x8310);
IkReal x8316=(gconst134*x8310);
IkReal x8317=((1.0)*x8309);
IkReal x8318=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8315))+((x8309*x8313))+(((-1.0)*gconst134*r20*x8317)));
evalcond[1]=((((-1.0)*gconst134*r10*x8317))+cj0+((x8309*x8312))+(((-1.0)*r12*x8315)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8315))+((x8309*x8314))+(((-1.0)*gconst134*r00*x8317)));
evalcond[3]=((((-1.0)*x8313*x8315))+((cj2*sj1))+((r20*x8316))+((cj1*sj2))+(((-1.0)*r22*x8317)));
evalcond[4]=(((r00*x8316))+(((-1.0)*r02*x8317))+((cj0*x8311))+(((-1.0)*cj0*x8318))+(((-1.0)*x8314*x8315)));
evalcond[5]=((((-1.0)*x8312*x8315))+(((-1.0)*sj0*x8318))+((r10*x8316))+((sj0*x8311))+(((-1.0)*r12*x8317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8319=((-1.0)*r21);
IkReal x8321 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8321)==0){
continue;
}
IkReal x8320=pow(x8321,-0.5);
CheckValue<IkReal> x8322 = IKatan2WithCheck(IkReal(x8319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8322.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8322.value))));
IkReal gconst136=(x8319*x8320);
IkReal gconst137=((1.0)*r20*x8320);
CheckValue<IkReal> x8323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8323.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8323.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8324=((-1.0)*r21);
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal(x8324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
IkReal x8325=((1.0)*(x8327.value));
IkReal x8326=x8320;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8325)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8325)));
IkReal gconst136=(x8324*x8326);
IkReal gconst137=((1.0)*r20*x8326);
IkReal x8328=r22*r22;
IkReal x8329=((1.0)*x8328);
CheckValue<IkReal> x8333=IKPowWithIntegerCheck(((-1.0)+x8328),-1);
if(!x8333.valid){
continue;
}
IkReal x8330=x8333.value;
if((((1.0)+(((-1.0)*x8329)))) < -0.00001)
continue;
IkReal x8331=IKsqrt(((1.0)+(((-1.0)*x8329))));
IkReal x8332=(cj0*x8330*x8331);
j4eval[0]=((IKabs((x8332+(((-1.0)*x8329*x8332)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8334=((-1.0)*r21);
CheckValue<IkReal> x8337 = IKatan2WithCheck(IkReal(x8334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8337.valid){
continue;
}
IkReal x8335=((1.0)*(x8337.value));
IkReal x8336=x8320;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8335)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8335)));
IkReal gconst136=(x8334*x8336);
IkReal gconst137=((1.0)*r20*x8336);
IkReal x8338=r22*r22;
IkReal x8339=((1.0)*x8338);
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(((-1.0)+x8338),-1);
if(!x8343.valid){
continue;
}
IkReal x8340=x8343.value;
if((((1.0)+(((-1.0)*x8339)))) < -0.00001)
continue;
IkReal x8341=IKsqrt(((1.0)+(((-1.0)*x8339))));
IkReal x8342=(sj0*x8340*x8341);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8342+(((-1.0)*x8339*x8342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8344=((-1.0)*r21);
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal(x8344),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
IkReal x8345=((1.0)*(x8347.value));
IkReal x8346=x8320;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8345)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8345)));
IkReal gconst136=(x8344*x8346);
IkReal gconst137=((1.0)*r20*x8346);
IkReal x8348=r22*r22;
IkReal x8349=(r12*sj0);
IkReal x8350=(cj0*r02);
CheckValue<IkReal> x8354=IKPowWithIntegerCheck(((-1.0)+x8348),-1);
if(!x8354.valid){
continue;
}
IkReal x8351=x8354.value;
if((((1.0)+(((-1.0)*x8348)))) < -0.00001)
continue;
IkReal x8352=IKsqrt(((1.0)+(((-1.0)*x8348))));
IkReal x8353=(r22*x8351*x8352);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8349))+(((-1.0)*x8350)))))+(IKabs((((x8350*x8353))+((x8349*x8353))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8355=((1.0)*sj0);
IkReal x8356=((1.0)*cj0);
CheckValue<IkReal> x8357 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8356))+(((-1.0)*r12*x8355)))),IkReal(((((-1.0)*gconst136*r11*x8355))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8357.valid){
continue;
}
CheckValue<IkReal> x8358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8357.value)+(((1.5707963267949)*(x8358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8359=IKsin(j4);
IkReal x8360=IKcos(j4);
IkReal x8361=(gconst136*r01);
IkReal x8362=(gconst137*r10);
IkReal x8363=(sj1*sj2);
IkReal x8364=(gconst137*r20);
IkReal x8365=(gconst136*r11);
IkReal x8366=(gconst136*r21);
IkReal x8367=(gconst137*r00);
IkReal x8368=((1.0)*x8360);
IkReal x8369=((1.0)*cj1*cj2);
IkReal x8370=((1.0)*x8359);
evalcond[0]=((((-1.0)*x8364*x8370))+((x8359*x8366))+(((-1.0)*r22*x8368)));
evalcond[1]=(cj0+(((-1.0)*x8362*x8370))+((x8359*x8365))+(((-1.0)*r12*x8368)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8367*x8370))+((x8359*x8361))+(((-1.0)*r02*x8368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8370))+(((-1.0)*x8366*x8368))+((x8360*x8364)));
evalcond[4]=((((-1.0)*x8361*x8368))+(((-1.0)*r02*x8370))+(((-1.0)*cj0*x8369))+((x8360*x8367))+((cj0*x8363)));
evalcond[5]=((((-1.0)*x8365*x8368))+(((-1.0)*r12*x8370))+((sj0*x8363))+(((-1.0)*sj0*x8369))+((x8360*x8362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8371=((1.0)*gconst137);
CheckValue<IkReal> x8372 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8372.valid){
continue;
}
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8371)))),-1);
if(!x8373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8372.value)+(((1.5707963267949)*(x8373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8374=IKsin(j4);
IkReal x8375=IKcos(j4);
IkReal x8376=(gconst136*r01);
IkReal x8377=(gconst137*r10);
IkReal x8378=(sj1*sj2);
IkReal x8379=(gconst137*r20);
IkReal x8380=(gconst136*r11);
IkReal x8381=(gconst136*r21);
IkReal x8382=(gconst137*r00);
IkReal x8383=((1.0)*x8375);
IkReal x8384=((1.0)*cj1*cj2);
IkReal x8385=((1.0)*x8374);
evalcond[0]=((((-1.0)*x8379*x8385))+(((-1.0)*r22*x8383))+((x8374*x8381)));
evalcond[1]=(cj0+(((-1.0)*x8377*x8385))+((x8374*x8380))+(((-1.0)*r12*x8383)));
evalcond[2]=(((x8374*x8376))+(((-1.0)*sj0))+(((-1.0)*r02*x8383))+(((-1.0)*x8382*x8385)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8381*x8383))+((cj1*sj2))+(((-1.0)*r22*x8385))+((x8375*x8379)));
evalcond[4]=((((-1.0)*r02*x8385))+((cj0*x8378))+(((-1.0)*cj0*x8384))+(((-1.0)*x8376*x8383))+((x8375*x8382)));
evalcond[5]=((((-1.0)*sj0*x8384))+((sj0*x8378))+(((-1.0)*x8380*x8383))+(((-1.0)*r12*x8385))+((x8375*x8377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8386=((1.0)*gconst137);
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8386)))),-1);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8387.value)))+(x8388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(gconst136*r01);
IkReal x8392=(gconst137*r10);
IkReal x8393=(sj1*sj2);
IkReal x8394=(gconst137*r20);
IkReal x8395=(gconst136*r11);
IkReal x8396=(gconst136*r21);
IkReal x8397=(gconst137*r00);
IkReal x8398=((1.0)*x8390);
IkReal x8399=((1.0)*cj1*cj2);
IkReal x8400=((1.0)*x8389);
evalcond[0]=(((x8389*x8396))+(((-1.0)*r22*x8398))+(((-1.0)*x8394*x8400)));
evalcond[1]=(cj0+(((-1.0)*x8392*x8400))+((x8389*x8395))+(((-1.0)*r12*x8398)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8398))+((x8389*x8391))+(((-1.0)*x8397*x8400)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8390*x8394))+(((-1.0)*r22*x8400))+(((-1.0)*x8396*x8398)));
evalcond[4]=(((x8390*x8397))+(((-1.0)*r02*x8400))+(((-1.0)*cj0*x8399))+(((-1.0)*x8391*x8398))+((cj0*x8393)));
evalcond[5]=((((-1.0)*sj0*x8399))+((x8390*x8392))+(((-1.0)*x8395*x8398))+((sj0*x8393))+(((-1.0)*r12*x8400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8401=((-1.0)*r10);
IkReal x8403 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8403)==0){
continue;
}
IkReal x8402=pow(x8403,-0.5);
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8401),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8404.value));
IkReal gconst139=(r11*x8402);
IkReal gconst140=(x8401*x8402);
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8405.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8406=((-1.0)*r10);
IkReal x8407=x8402;
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8406),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
IkReal x8408=((-1.0)*(x8409.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8408;
IkReal gconst138=x8408;
IkReal gconst139=(r11*x8407);
IkReal gconst140=(x8406*x8407);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8410=((1.0)*sj0);
IkReal x8411=((1.0)*gconst139);
CheckValue<IkReal> x8412 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8410))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8410))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8411))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8412.valid){
continue;
}
CheckValue<IkReal> x8413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8411)))),-1);
if(!x8413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8412.value)+(((1.5707963267949)*(x8413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8414=IKsin(j4);
IkReal x8415=IKcos(j4);
IkReal x8416=(gconst140*r00);
IkReal x8417=(sj1*sj2);
IkReal x8418=(gconst139*r11);
IkReal x8419=(gconst139*r01);
IkReal x8420=(gconst139*r21);
IkReal x8421=((1.0)*x8415);
IkReal x8422=((1.0)*x8414);
IkReal x8423=((1.0)*cj1*cj2);
IkReal x8424=(gconst140*x8415);
evalcond[0]=((((-1.0)*r22*x8421))+((x8414*x8420))+(((-1.0)*gconst140*r20*x8422)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8422))+((x8414*x8418))+(((-1.0)*r12*x8421)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8416*x8422))+(((-1.0)*r02*x8421))+((x8414*x8419)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8424))+(((-1.0)*r22*x8422))+(((-1.0)*x8420*x8421)));
evalcond[4]=((((-1.0)*cj0*x8423))+(((-1.0)*r02*x8422))+((cj0*x8417))+(((-1.0)*x8419*x8421))+((x8415*x8416)));
evalcond[5]=(((r10*x8424))+(((-1.0)*x8418*x8421))+(((-1.0)*sj0*x8423))+((sj0*x8417))+(((-1.0)*r12*x8422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8425=((1.0)*gconst140);
CheckValue<IkReal> x8426=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8425)))),-1);
if(!x8426.valid){
continue;
}
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8426.value)))+(x8427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8428=IKsin(j4);
IkReal x8429=IKcos(j4);
IkReal x8430=(gconst140*r00);
IkReal x8431=(sj1*sj2);
IkReal x8432=(gconst139*r11);
IkReal x8433=(gconst139*r01);
IkReal x8434=(gconst139*r21);
IkReal x8435=((1.0)*x8429);
IkReal x8436=((1.0)*x8428);
IkReal x8437=((1.0)*cj1*cj2);
IkReal x8438=(gconst140*x8429);
evalcond[0]=((((-1.0)*gconst140*r20*x8436))+((x8428*x8434))+(((-1.0)*r22*x8435)));
evalcond[1]=(cj0+(((-1.0)*r12*x8435))+((x8428*x8432))+(((-1.0)*gconst140*r10*x8436)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8430*x8436))+((x8428*x8433))+(((-1.0)*r02*x8435)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8436))+(((-1.0)*x8434*x8435))+((r20*x8438)));
evalcond[4]=(((x8429*x8430))+(((-1.0)*r02*x8436))+(((-1.0)*cj0*x8437))+((cj0*x8431))+(((-1.0)*x8433*x8435)));
evalcond[5]=((((-1.0)*x8432*x8435))+(((-1.0)*sj0*x8437))+(((-1.0)*r12*x8436))+((sj0*x8431))+((r10*x8438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8439=((-1.0)*r11);
IkReal x8441 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8441)==0){
continue;
}
IkReal x8440=pow(x8441,-0.5);
CheckValue<IkReal> x8442 = IKatan2WithCheck(IkReal(x8439),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8442.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8442.value))));
IkReal gconst142=(x8439*x8440);
IkReal gconst143=((1.0)*r10*x8440);
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8443.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8444=((-1.0)*r11);
CheckValue<IkReal> x8447 = IKatan2WithCheck(IkReal(x8444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8447.valid){
continue;
}
IkReal x8445=((1.0)*(x8447.value));
IkReal x8446=x8440;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8445)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8445)));
IkReal gconst142=(x8444*x8446);
IkReal gconst143=((1.0)*r10*x8446);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8448=((-1.0)*r11);
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal(x8448),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
IkReal x8449=((1.0)*(x8451.value));
IkReal x8450=x8440;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8449)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8449)));
IkReal gconst142=(x8448*x8450);
IkReal gconst143=((1.0)*r10*x8450);
IkReal x8452=r12*r12;
IkReal x8453=((1.0)*sj0);
IkReal x8454=(cj0*r02);
IkReal x8455=x8440;
j4eval[0]=((IKabs((((sj0*x8452*x8455))+(((-1.0)*x8453*x8455))+((r12*x8454*x8455)))))+(IKabs(((((-1.0)*x8454))+(((-1.0)*r12*x8453))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8456=((-1.0)*r11);
CheckValue<IkReal> x8459 = IKatan2WithCheck(IkReal(x8456),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8459.valid){
continue;
}
IkReal x8457=((1.0)*(x8459.value));
IkReal x8458=x8440;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8457)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8457)));
IkReal gconst142=(x8456*x8458);
IkReal gconst143=((1.0)*r10*x8458);
IkReal x8460=r12*r12;
IkReal x8461=(cj1*r22*sj2);
IkReal x8462=(cj2*r22*sj1);
CheckValue<IkReal> x8466=IKPowWithIntegerCheck(((-1.0)+x8460),-1);
if(!x8466.valid){
continue;
}
IkReal x8463=x8466.value;
if((((1.0)+(((-1.0)*x8460)))) < -0.00001)
continue;
IkReal x8464=IKsqrt(((1.0)+(((-1.0)*x8460))));
IkReal x8465=((1.0)*r12*x8463*x8464);
j4eval[0]=((IKabs(((((-1.0)*x8461*x8465))+(((-1.0)*x8462*x8465)))))+(IKabs((x8462+x8461))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8467=(gconst142*r21);
IkReal x8468=(cj1*sj2);
IkReal x8469=(cj2*sj1);
IkReal x8470=(gconst143*r20);
CheckValue<IkReal> x8471 = IKatan2WithCheck(IkReal((((r22*x8468))+((r22*x8469)))),IkReal((((x8467*x8468))+((x8467*x8469))+(((-1.0)*x8468*x8470))+(((-1.0)*x8469*x8470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8471.valid){
continue;
}
CheckValue<IkReal> x8472=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8467*x8470))+(r22*r22)+(x8467*x8467)+(x8470*x8470))),-1);
if(!x8472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8471.value)+(((1.5707963267949)*(x8472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8473=IKsin(j4);
IkReal x8474=IKcos(j4);
IkReal x8475=(sj1*sj2);
IkReal x8476=(gconst143*r20);
IkReal x8477=((1.0)*x8474);
IkReal x8478=((1.0)*cj1*cj2);
IkReal x8479=((1.0)*x8473);
IkReal x8480=(gconst142*x8473);
IkReal x8481=(gconst143*x8474);
evalcond[0]=((((-1.0)*x8476*x8479))+(((-1.0)*r22*x8477))+((r21*x8480)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8479))+((r11*x8480))+(((-1.0)*r12*x8477)));
evalcond[2]=(((r01*x8480))+(((-1.0)*sj0))+(((-1.0)*r02*x8477))+(((-1.0)*gconst143*r00*x8479)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8479))+((x8474*x8476))+(((-1.0)*gconst142*r21*x8477)));
evalcond[4]=((((-1.0)*r02*x8479))+(((-1.0)*gconst142*r01*x8477))+((cj0*x8475))+(((-1.0)*cj0*x8478))+((r00*x8481)));
evalcond[5]=(((r10*x8481))+(((-1.0)*sj0*x8478))+(((-1.0)*r12*x8479))+(((-1.0)*gconst142*r11*x8477))+((sj0*x8475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8482=((1.0)*sj0);
IkReal x8483=((1.0)*gconst142);
CheckValue<IkReal> x8484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8483))+(((-1.0)*gconst143*r21)))),-1);
if(!x8484.valid){
continue;
}
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8482)))),IkReal(((((-1.0)*cj0*r01*x8483))+((cj0*gconst143*r00))+(((-1.0)*gconst142*r11*x8482))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8484.value)))+(x8485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8486=IKsin(j4);
IkReal x8487=IKcos(j4);
IkReal x8488=(sj1*sj2);
IkReal x8489=(gconst143*r20);
IkReal x8490=((1.0)*x8487);
IkReal x8491=((1.0)*cj1*cj2);
IkReal x8492=((1.0)*x8486);
IkReal x8493=(gconst142*x8486);
IkReal x8494=(gconst143*x8487);
evalcond[0]=((((-1.0)*r22*x8490))+((r21*x8493))+(((-1.0)*x8489*x8492)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8492))+(((-1.0)*r12*x8490))+((r11*x8493)));
evalcond[2]=((((-1.0)*r02*x8490))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8492))+((r01*x8493)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8487*x8489))+(((-1.0)*r22*x8492))+(((-1.0)*gconst142*r21*x8490)));
evalcond[4]=(((r00*x8494))+((cj0*x8488))+(((-1.0)*cj0*x8491))+(((-1.0)*r02*x8492))+(((-1.0)*gconst142*r01*x8490)));
evalcond[5]=(((r10*x8494))+(((-1.0)*sj0*x8491))+(((-1.0)*gconst142*r11*x8490))+((sj0*x8488))+(((-1.0)*r12*x8492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8495=((1.0)*gconst143);
CheckValue<IkReal> x8496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8495)))),-1);
if(!x8496.valid){
continue;
}
CheckValue<IkReal> x8497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8495))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8496.value)))+(x8497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8498=IKsin(j4);
IkReal x8499=IKcos(j4);
IkReal x8500=(sj1*sj2);
IkReal x8501=(gconst143*r20);
IkReal x8502=((1.0)*x8499);
IkReal x8503=((1.0)*cj1*cj2);
IkReal x8504=((1.0)*x8498);
IkReal x8505=(gconst142*x8498);
IkReal x8506=(gconst143*x8499);
evalcond[0]=((((-1.0)*x8501*x8504))+((r21*x8505))+(((-1.0)*r22*x8502)));
evalcond[1]=((((-1.0)*gconst143*r10*x8504))+cj0+((r11*x8505))+(((-1.0)*r12*x8502)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8504))+(((-1.0)*r02*x8502))+((r01*x8505)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8502))+((cj1*sj2))+((x8499*x8501))+(((-1.0)*r22*x8504)));
evalcond[4]=(((cj0*x8500))+(((-1.0)*r02*x8504))+(((-1.0)*gconst142*r01*x8502))+(((-1.0)*cj0*x8503))+((r00*x8506)));
evalcond[5]=(((r10*x8506))+((sj0*x8500))+(((-1.0)*r12*x8504))+(((-1.0)*sj0*x8503))+(((-1.0)*gconst142*r11*x8502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8507=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8507;
j4eval[1]=IKsign(x8507);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8508=((1.0)*cj5);
IkReal x8509=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8508)));
j4eval[0]=x8509;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8508)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8510=cj5*cj5;
IkReal x8511=r11*r11;
IkReal x8512=(r11*sj5);
IkReal x8513=(cj5*r10);
IkReal x8514=((r12*r12)+(((-1.0)*x8510*x8511))+x8511+(((-2.0)*x8512*x8513))+((x8510*(r10*r10))));
j4eval[0]=x8514;
j4eval[1]=IKsign(x8514);
j4eval[2]=((IKabs(r12))+(IKabs((x8513+(((-1.0)*x8512))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8515=cj5*cj5;
IkReal x8516=r11*r11;
IkReal x8517=(cj5*r10);
IkReal x8518=(r11*sj5);
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8516+((x8515*(r10*r10)))+(((-2.0)*x8517*x8518))+(((-1.0)*x8515*x8516)))),-1);
if(!x8519.valid){
continue;
}
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal((x8517+(((-1.0)*x8518)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8519.value)))+(x8520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8521=IKsin(j4);
IkReal x8522=IKcos(j4);
IkReal x8523=(cj5*r10);
IkReal x8524=(r01*sj5);
IkReal x8525=(cj5*r00);
IkReal x8526=(cj5*r20);
IkReal x8527=((1.0)*x8522);
IkReal x8528=((1.0)*x8521);
IkReal x8529=(sj5*x8521);
evalcond[0]=(((r21*x8529))+(((-1.0)*x8526*x8528))+(((-1.0)*r22*x8527)));
evalcond[1]=(((x8521*x8524))+(((-1.0)*r02*x8527))+(((-1.0)*x8525*x8528)));
evalcond[2]=((((-1.0)*r11*sj5*x8527))+((x8522*x8523))+(((-1.0)*r12*x8528)));
evalcond[3]=((1.0)+(((-1.0)*x8523*x8528))+((r11*x8529))+(((-1.0)*r12*x8527)));
evalcond[4]=(((cj2*sj1))+((x8522*x8526))+(((-1.0)*r21*sj5*x8527))+((cj1*sj2))+(((-1.0)*r22*x8528)));
evalcond[5]=(((x8522*x8525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8528))+(((-1.0)*x8524*x8527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8530=((1.0)*cj5);
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8530))+(((-1.0)*r00*sj5)))),-1);
if(!x8531.valid){
continue;
}
CheckValue<IkReal> x8532 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8531.value)))+(x8532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8533=IKsin(j4);
IkReal x8534=IKcos(j4);
IkReal x8535=(cj5*r10);
IkReal x8536=(r01*sj5);
IkReal x8537=(cj5*r00);
IkReal x8538=(cj5*r20);
IkReal x8539=((1.0)*x8534);
IkReal x8540=((1.0)*x8533);
IkReal x8541=(sj5*x8533);
evalcond[0]=((((-1.0)*r22*x8539))+((r21*x8541))+(((-1.0)*x8538*x8540)));
evalcond[1]=((((-1.0)*r02*x8539))+(((-1.0)*x8537*x8540))+((x8533*x8536)));
evalcond[2]=(((x8534*x8535))+(((-1.0)*r12*x8540))+(((-1.0)*r11*sj5*x8539)));
evalcond[3]=((1.0)+(((-1.0)*x8535*x8540))+(((-1.0)*r12*x8539))+((r11*x8541)));
evalcond[4]=(((cj2*sj1))+((x8534*x8538))+((cj1*sj2))+(((-1.0)*r22*x8540))+(((-1.0)*r21*sj5*x8539)));
evalcond[5]=((((-1.0)*r02*x8540))+(((-1.0)*x8536*x8539))+((x8534*x8537))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8542=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8542.valid){
continue;
}
CheckValue<IkReal> x8543 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8542.value)))+(x8543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8544=IKsin(j4);
IkReal x8545=IKcos(j4);
IkReal x8546=(cj5*r10);
IkReal x8547=(r01*sj5);
IkReal x8548=(cj5*r00);
IkReal x8549=(cj5*r20);
IkReal x8550=((1.0)*x8545);
IkReal x8551=((1.0)*x8544);
IkReal x8552=(sj5*x8544);
evalcond[0]=(((r21*x8552))+(((-1.0)*r22*x8550))+(((-1.0)*x8549*x8551)));
evalcond[1]=(((x8544*x8547))+(((-1.0)*x8548*x8551))+(((-1.0)*r02*x8550)));
evalcond[2]=((((-1.0)*r12*x8551))+(((-1.0)*r11*sj5*x8550))+((x8545*x8546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8550))+(((-1.0)*x8546*x8551))+((r11*x8552)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8551))+(((-1.0)*r21*sj5*x8550))+((cj1*sj2))+((x8545*x8549)));
evalcond[5]=((((-1.0)*x8547*x8550))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8545*x8548))+(((-1.0)*r02*x8551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8553=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8553;
j4eval[1]=IKsign(x8553);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8554=((1.0)*cj5);
IkReal x8555=((((-1.0)*r21*x8554))+(((-1.0)*r20*sj5)));
j4eval[0]=x8555;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8554))))));
j4eval[2]=IKsign(x8555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8556=cj5*cj5;
IkReal x8557=r11*r11;
IkReal x8558=(cj5*r10);
IkReal x8559=(r11*sj5);
IkReal x8560=((((-1.0)*x8556*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8557))+(((2.0)*x8558*x8559))+((x8556*x8557)));
j4eval[0]=x8560;
j4eval[1]=((IKabs((x8558+(((-1.0)*x8559)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8561=cj5*cj5;
IkReal x8562=r11*r11;
IkReal x8563=(cj5*r10);
IkReal x8564=(r11*sj5);
CheckValue<IkReal> x8565=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8561*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8561*x8562))+(((2.0)*x8563*x8564))+(((-1.0)*x8562)))),-1);
if(!x8565.valid){
continue;
}
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal((x8563+(((-1.0)*x8564)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8565.value)))+(x8566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=(cj5*r10);
IkReal x8570=(r01*sj5);
IkReal x8571=(cj5*r00);
IkReal x8572=(cj5*r20);
IkReal x8573=((1.0)*x8568);
IkReal x8574=((1.0)*x8567);
IkReal x8575=(sj5*x8567);
evalcond[0]=(((r21*x8575))+(((-1.0)*x8572*x8574))+(((-1.0)*r22*x8573)));
evalcond[1]=((((-1.0)*x8571*x8574))+(((-1.0)*r02*x8573))+((x8567*x8570)));
evalcond[2]=((((-1.0)*r11*sj5*x8573))+((x8568*x8569))+(((-1.0)*r12*x8574)));
evalcond[3]=((-1.0)+(((-1.0)*x8569*x8574))+((r11*x8575))+(((-1.0)*r12*x8573)));
evalcond[4]=((((-1.0)*r21*sj5*x8573))+((cj2*sj1))+((cj1*sj2))+((x8568*x8572))+(((-1.0)*r22*x8574)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x8574))+(((-1.0)*x8570*x8573))+((cj1*cj2))+((x8568*x8571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8576=((1.0)*cj5);
CheckValue<IkReal> x8577 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8576))+(((-1.0)*r20*sj5)))),-1);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8577.value)+(((1.5707963267949)*(x8578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKsin(j4);
IkReal x8580=IKcos(j4);
IkReal x8581=(cj5*r10);
IkReal x8582=(r01*sj5);
IkReal x8583=(cj5*r00);
IkReal x8584=(cj5*r20);
IkReal x8585=((1.0)*x8580);
IkReal x8586=((1.0)*x8579);
IkReal x8587=(sj5*x8579);
evalcond[0]=((((-1.0)*r22*x8585))+(((-1.0)*x8584*x8586))+((r21*x8587)));
evalcond[1]=((((-1.0)*x8583*x8586))+(((-1.0)*r02*x8585))+((x8579*x8582)));
evalcond[2]=(((x8580*x8581))+(((-1.0)*r12*x8586))+(((-1.0)*r11*sj5*x8585)));
evalcond[3]=((-1.0)+(((-1.0)*x8581*x8586))+((r11*x8587))+(((-1.0)*r12*x8585)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8586))+(((-1.0)*r21*sj5*x8585))+((cj1*sj2))+((x8580*x8584)));
evalcond[5]=((((-1.0)*x8582*x8585))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8586))+((x8580*x8583))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8588 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8588.valid){
continue;
}
CheckValue<IkReal> x8589=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8588.value)+(((1.5707963267949)*(x8589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8590=IKsin(j4);
IkReal x8591=IKcos(j4);
IkReal x8592=(cj5*r10);
IkReal x8593=(r01*sj5);
IkReal x8594=(cj5*r00);
IkReal x8595=(cj5*r20);
IkReal x8596=((1.0)*x8591);
IkReal x8597=((1.0)*x8590);
IkReal x8598=(sj5*x8590);
evalcond[0]=((((-1.0)*r22*x8596))+(((-1.0)*x8595*x8597))+((r21*x8598)));
evalcond[1]=((((-1.0)*r02*x8596))+((x8590*x8593))+(((-1.0)*x8594*x8597)));
evalcond[2]=((((-1.0)*r11*sj5*x8596))+(((-1.0)*r12*x8597))+((x8591*x8592)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8596))+(((-1.0)*x8592*x8597))+((r11*x8598)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8597))+((cj1*sj2))+((x8591*x8595))+(((-1.0)*r21*sj5*x8596)));
evalcond[5]=((((-1.0)*r02*x8597))+(((-1.0)*sj1*sj2))+(((-1.0)*x8593*x8596))+((x8591*x8594))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8599=((-1.0)*r00);
IkReal x8601 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8601)==0){
continue;
}
IkReal x8600=pow(x8601,-0.5);
CheckValue<IkReal> x8602 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8599),IKFAST_ATAN2_MAGTHRESH);
if(!x8602.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8602.value));
IkReal gconst145=(r01*x8600);
IkReal gconst146=(x8599*x8600);
CheckValue<IkReal> x8603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8604=((-1.0)*r00);
IkReal x8605=x8600;
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8604),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
IkReal x8606=((-1.0)*(x8607.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8606;
IkReal gconst144=x8606;
IkReal gconst145=(r01*x8605);
IkReal gconst146=(x8604*x8605);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8608=((1.0)*sj0);
IkReal x8609=((1.0)*gconst145);
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8608))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8609))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8609))+(((-1.0)*gconst146*r21)))),-1);
if(!x8611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8610.value)+(((1.5707963267949)*(x8611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8612=IKsin(j4);
IkReal x8613=IKcos(j4);
IkReal x8614=(gconst146*r10);
IkReal x8615=(sj1*sj2);
IkReal x8616=(gconst146*r20);
IkReal x8617=(gconst146*r00);
IkReal x8618=((1.0)*x8613);
IkReal x8619=((1.0)*x8612);
IkReal x8620=(gconst145*x8612);
IkReal x8621=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8620))+(((-1.0)*r22*x8618))+(((-1.0)*x8616*x8619)));
evalcond[1]=((((-1.0)*x8614*x8619))+cj0+(((-1.0)*r12*x8618))+((r11*x8620)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8618))+((r01*x8620))+(((-1.0)*x8617*x8619)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8618))+((cj1*sj2))+(((-1.0)*r22*x8619))+((x8613*x8616)));
evalcond[4]=((((-1.0)*r02*x8619))+(((-1.0)*gconst145*r01*x8618))+((x8613*x8617))+(((-1.0)*cj0*x8621))+((cj0*x8615)));
evalcond[5]=((((-1.0)*gconst145*r11*x8618))+(((-1.0)*r12*x8619))+(((-1.0)*sj0*x8621))+((x8613*x8614))+((sj0*x8615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8622=((1.0)*gconst146);
CheckValue<IkReal> x8623 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8622))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8623.valid){
continue;
}
CheckValue<IkReal> x8624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8622))+(((-1.0)*gconst145*r10)))),-1);
if(!x8624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8623.value)+(((1.5707963267949)*(x8624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8625=IKsin(j4);
IkReal x8626=IKcos(j4);
IkReal x8627=(gconst146*r10);
IkReal x8628=(sj1*sj2);
IkReal x8629=(gconst146*r20);
IkReal x8630=(gconst146*r00);
IkReal x8631=((1.0)*x8626);
IkReal x8632=((1.0)*x8625);
IkReal x8633=(gconst145*x8625);
IkReal x8634=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8629*x8632))+((r21*x8633))+(((-1.0)*r22*x8631)));
evalcond[1]=(cj0+(((-1.0)*r12*x8631))+(((-1.0)*x8627*x8632))+((r11*x8633)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8633))+(((-1.0)*x8630*x8632))+(((-1.0)*r02*x8631)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8631))+((cj1*sj2))+((x8626*x8629))+(((-1.0)*r22*x8632)));
evalcond[4]=((((-1.0)*gconst145*r01*x8631))+((x8626*x8630))+((cj0*x8628))+(((-1.0)*cj0*x8634))+(((-1.0)*r02*x8632)));
evalcond[5]=((((-1.0)*r12*x8632))+(((-1.0)*gconst145*r11*x8631))+((sj0*x8628))+((x8626*x8627))+(((-1.0)*sj0*x8634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8635=((-1.0)*r01);
IkReal x8637 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8637)==0){
continue;
}
IkReal x8636=pow(x8637,-0.5);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(x8635),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8638.value))));
IkReal gconst148=(x8635*x8636);
IkReal gconst149=((1.0)*r00*x8636);
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8639.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8640=((-1.0)*r01);
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(x8640),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
IkReal x8641=((1.0)*(x8643.value));
IkReal x8642=x8636;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8641)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8641)));
IkReal gconst148=(x8640*x8642);
IkReal gconst149=((1.0)*r00*x8642);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8644=((-1.0)*r01);
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(x8644),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
IkReal x8645=((1.0)*(x8647.value));
IkReal x8646=x8636;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8645)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8645)));
IkReal gconst148=(x8644*x8646);
IkReal gconst149=((1.0)*r00*x8646);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8648=((-1.0)*r01);
CheckValue<IkReal> x8651 = IKatan2WithCheck(IkReal(x8648),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8651.valid){
continue;
}
IkReal x8649=((1.0)*(x8651.value));
IkReal x8650=x8636;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8649)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8649)));
IkReal gconst148=(x8648*x8650);
IkReal gconst149=((1.0)*r00*x8650);
IkReal x8652=r02*r02;
IkReal x8653=(r12*sj0);
IkReal x8654=((1.0)*cj0);
IkReal x8655=x8636;
j4eval[0]=((IKabs(((((-1.0)*x8653))+(((-1.0)*r02*x8654)))))+(IKabs(((((-1.0)*x8654*x8655))+((r02*x8653*x8655))+((cj0*x8652*x8655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8656=((1.0)*sj0);
IkReal x8657=((1.0)*gconst148);
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8656))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8657))+(((-1.0)*gconst148*r11*x8656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
CheckValue<IkReal> x8659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8657))+(((-1.0)*gconst149*r21)))),-1);
if(!x8659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8658.value)+(((1.5707963267949)*(x8659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8660=IKsin(j4);
IkReal x8661=IKcos(j4);
IkReal x8662=(gconst148*r11);
IkReal x8663=(sj1*sj2);
IkReal x8664=((1.0)*x8661);
IkReal x8665=(gconst149*x8661);
IkReal x8666=(gconst148*x8660);
IkReal x8667=((1.0)*cj1*cj2);
IkReal x8668=((1.0)*x8660);
evalcond[0]=((((-1.0)*r22*x8664))+(((-1.0)*gconst149*r20*x8668))+((r21*x8666)));
evalcond[1]=(cj0+(((-1.0)*r12*x8664))+((x8660*x8662))+(((-1.0)*gconst149*r10*x8668)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8664))+((r01*x8666))+(((-1.0)*gconst149*r00*x8668)));
evalcond[3]=(((cj2*sj1))+((r20*x8665))+((cj1*sj2))+(((-1.0)*r22*x8668))+(((-1.0)*gconst148*r21*x8664)));
evalcond[4]=(((cj0*x8663))+(((-1.0)*cj0*x8667))+(((-1.0)*r02*x8668))+((r00*x8665))+(((-1.0)*gconst148*r01*x8664)));
evalcond[5]=((((-1.0)*sj0*x8667))+((sj0*x8663))+(((-1.0)*x8662*x8664))+(((-1.0)*r12*x8668))+((r10*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8669=((1.0)*gconst149);
CheckValue<IkReal> x8670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8669))+(((-1.0)*gconst148*r10)))),-1);
if(!x8670.valid){
continue;
}
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8669))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8670.value)))+(x8671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8672=IKsin(j4);
IkReal x8673=IKcos(j4);
IkReal x8674=(gconst148*r11);
IkReal x8675=(sj1*sj2);
IkReal x8676=((1.0)*x8673);
IkReal x8677=(gconst149*x8673);
IkReal x8678=(gconst148*x8672);
IkReal x8679=((1.0)*cj1*cj2);
IkReal x8680=((1.0)*x8672);
evalcond[0]=((((-1.0)*r22*x8676))+(((-1.0)*gconst149*r20*x8680))+((r21*x8678)));
evalcond[1]=(cj0+(((-1.0)*r12*x8676))+((x8672*x8674))+(((-1.0)*gconst149*r10*x8680)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8676))+((r01*x8678))+(((-1.0)*gconst149*r00*x8680)));
evalcond[3]=(((r20*x8677))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8680))+(((-1.0)*gconst148*r21*x8676)));
evalcond[4]=((((-1.0)*gconst148*r01*x8676))+((cj0*x8675))+(((-1.0)*cj0*x8679))+(((-1.0)*r02*x8680))+((r00*x8677)));
evalcond[5]=((((-1.0)*x8674*x8676))+(((-1.0)*r12*x8680))+((r10*x8677))+(((-1.0)*sj0*x8679))+((sj0*x8675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8681=((1.0)*gconst149);
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8681))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
CheckValue<IkReal> x8683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8681))+(((-1.0)*gconst148*r00)))),-1);
if(!x8683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8682.value)+(((1.5707963267949)*(x8683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8684=IKsin(j4);
IkReal x8685=IKcos(j4);
IkReal x8686=(gconst148*r11);
IkReal x8687=(sj1*sj2);
IkReal x8688=((1.0)*x8685);
IkReal x8689=(gconst149*x8685);
IkReal x8690=(gconst148*x8684);
IkReal x8691=((1.0)*cj1*cj2);
IkReal x8692=((1.0)*x8684);
evalcond[0]=(((r21*x8690))+(((-1.0)*r22*x8688))+(((-1.0)*gconst149*r20*x8692)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8692))+(((-1.0)*r12*x8688))+((x8684*x8686)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8688))+((r01*x8690))+(((-1.0)*gconst149*r00*x8692)));
evalcond[3]=(((cj2*sj1))+((r20*x8689))+(((-1.0)*gconst148*r21*x8688))+((cj1*sj2))+(((-1.0)*r22*x8692)));
evalcond[4]=(((r00*x8689))+(((-1.0)*cj0*x8691))+(((-1.0)*r02*x8692))+(((-1.0)*gconst148*r01*x8688))+((cj0*x8687)));
evalcond[5]=((((-1.0)*x8686*x8688))+((r10*x8689))+(((-1.0)*sj0*x8691))+(((-1.0)*r12*x8692))+((sj0*x8687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8693=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8693;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8694=((1.0)*cj5);
IkReal x8695=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8694)));
j4eval[0]=x8695;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8694))))));
j4eval[2]=IKsign(x8695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8696=cj5*cj5;
IkReal x8697=r01*r01;
IkReal x8698=(r01*sj5);
IkReal x8699=(cj5*r00);
IkReal x8700=((((-1.0)*x8697))+(((-1.0)*(r02*r02)))+(((2.0)*x8698*x8699))+(((-1.0)*x8696*(r00*r00)))+((x8696*x8697)));
j4eval[0]=x8700;
j4eval[1]=IKsign(x8700);
j4eval[2]=((IKabs(r02))+(IKabs((x8699+(((-1.0)*x8698))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8701=cj5*cj5;
IkReal x8702=r01*r01;
IkReal x8703=(r01*sj5);
IkReal x8704=(cj5*r00);
CheckValue<IkReal> x8705 = IKatan2WithCheck(IkReal((x8704+(((-1.0)*x8703)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8705.valid){
continue;
}
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(IKsign(((((2.0)*x8703*x8704))+(((-1.0)*(r02*r02)))+(((-1.0)*x8702))+((x8701*x8702))+(((-1.0)*x8701*(r00*r00))))),-1);
if(!x8706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8705.value)+(((1.5707963267949)*(x8706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8707=IKsin(j4);
IkReal x8708=IKcos(j4);
IkReal x8709=(cj5*r10);
IkReal x8710=(r01*sj5);
IkReal x8711=(cj5*r00);
IkReal x8712=(cj5*r20);
IkReal x8713=((1.0)*x8708);
IkReal x8714=((1.0)*x8707);
IkReal x8715=(sj5*x8707);
evalcond[0]=((((-1.0)*r22*x8713))+(((-1.0)*x8712*x8714))+((r21*x8715)));
evalcond[1]=((((-1.0)*x8709*x8714))+(((-1.0)*r12*x8713))+((r11*x8715)));
evalcond[2]=((((-1.0)*r02*x8714))+((x8708*x8711))+(((-1.0)*x8710*x8713)));
evalcond[3]=((-1.0)+((x8707*x8710))+(((-1.0)*r02*x8713))+(((-1.0)*x8711*x8714)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8714))+(((-1.0)*r21*sj5*x8713))+((x8708*x8712)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8714))+(((-1.0)*r11*sj5*x8713))+((x8708*x8709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8716=((1.0)*cj5);
CheckValue<IkReal> x8717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8716)))),-1);
if(!x8717.valid){
continue;
}
CheckValue<IkReal> x8718 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8716))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8717.value)))+(x8718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8719=IKsin(j4);
IkReal x8720=IKcos(j4);
IkReal x8721=(cj5*r10);
IkReal x8722=(r01*sj5);
IkReal x8723=(cj5*r00);
IkReal x8724=(cj5*r20);
IkReal x8725=((1.0)*x8720);
IkReal x8726=((1.0)*x8719);
IkReal x8727=(sj5*x8719);
evalcond[0]=(((r21*x8727))+(((-1.0)*x8724*x8726))+(((-1.0)*r22*x8725)));
evalcond[1]=(((r11*x8727))+(((-1.0)*x8721*x8726))+(((-1.0)*r12*x8725)));
evalcond[2]=(((x8720*x8723))+(((-1.0)*r02*x8726))+(((-1.0)*x8722*x8725)));
evalcond[3]=((-1.0)+(((-1.0)*x8723*x8726))+(((-1.0)*r02*x8725))+((x8719*x8722)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8720*x8724))+(((-1.0)*r21*sj5*x8725))+(((-1.0)*r22*x8726)));
evalcond[5]=((((-1.0)*r11*sj5*x8725))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8720*x8721))+(((-1.0)*r12*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8728=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8728.valid){
continue;
}
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8728.value)))+(x8729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8730=IKsin(j4);
IkReal x8731=IKcos(j4);
IkReal x8732=(cj5*r10);
IkReal x8733=(r01*sj5);
IkReal x8734=(cj5*r00);
IkReal x8735=(cj5*r20);
IkReal x8736=((1.0)*x8731);
IkReal x8737=((1.0)*x8730);
IkReal x8738=(sj5*x8730);
evalcond[0]=(((r21*x8738))+(((-1.0)*x8735*x8737))+(((-1.0)*r22*x8736)));
evalcond[1]=(((r11*x8738))+(((-1.0)*x8732*x8737))+(((-1.0)*r12*x8736)));
evalcond[2]=(((x8731*x8734))+(((-1.0)*x8733*x8736))+(((-1.0)*r02*x8737)));
evalcond[3]=((-1.0)+(((-1.0)*x8734*x8737))+(((-1.0)*r02*x8736))+((x8730*x8733)));
evalcond[4]=(((cj2*sj1))+((x8731*x8735))+((cj1*sj2))+(((-1.0)*r21*sj5*x8736))+(((-1.0)*r22*x8737)));
evalcond[5]=((((-1.0)*r11*sj5*x8736))+((x8731*x8732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8739=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8739;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8740=((1.0)*cj5);
IkReal x8741=((((-1.0)*r21*x8740))+(((-1.0)*r20*sj5)));
j4eval[0]=x8741;
j4eval[1]=((IKabs(((((-1.0)*r10*x8740))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8742=cj5*cj5;
IkReal x8743=r01*r01;
IkReal x8744=(cj5*r00);
IkReal x8745=(r01*sj5);
IkReal x8746=((((-1.0)*x8742*x8743))+x8743+((x8742*(r00*r00)))+(((-2.0)*x8744*x8745))+(r02*r02));
j4eval[0]=x8746;
j4eval[1]=((IKabs(r02))+(IKabs((x8744+(((-1.0)*x8745))))));
j4eval[2]=IKsign(x8746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8747=cj5*cj5;
IkReal x8748=r01*r01;
IkReal x8749=(r01*sj5);
IkReal x8750=(cj5*r00);
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal((x8750+(((-1.0)*x8749)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
CheckValue<IkReal> x8752=IKPowWithIntegerCheck(IKsign((x8748+((x8747*(r00*r00)))+(r02*r02)+(((-1.0)*x8747*x8748))+(((-2.0)*x8749*x8750)))),-1);
if(!x8752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8751.value)+(((1.5707963267949)*(x8752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8753=IKsin(j4);
IkReal x8754=IKcos(j4);
IkReal x8755=(cj5*r10);
IkReal x8756=(r01*sj5);
IkReal x8757=(cj5*r00);
IkReal x8758=(cj5*r20);
IkReal x8759=((1.0)*x8754);
IkReal x8760=((1.0)*x8753);
IkReal x8761=(sj5*x8753);
evalcond[0]=((((-1.0)*r22*x8759))+((r21*x8761))+(((-1.0)*x8758*x8760)));
evalcond[1]=((((-1.0)*x8755*x8760))+(((-1.0)*r12*x8759))+((r11*x8761)));
evalcond[2]=((((-1.0)*r02*x8760))+(((-1.0)*x8756*x8759))+((x8754*x8757)));
evalcond[3]=((1.0)+(((-1.0)*x8757*x8760))+((x8753*x8756))+(((-1.0)*r02*x8759)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8760))+(((-1.0)*r21*sj5*x8759))+((x8754*x8758)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8759))+(((-1.0)*r12*x8760))+((cj1*cj2))+((x8754*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8762=((1.0)*cj5);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8762))+(((-1.0)*r20*sj5)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8762))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKsin(j4);
IkReal x8766=IKcos(j4);
IkReal x8767=(cj5*r10);
IkReal x8768=(r01*sj5);
IkReal x8769=(cj5*r00);
IkReal x8770=(cj5*r20);
IkReal x8771=((1.0)*x8766);
IkReal x8772=((1.0)*x8765);
IkReal x8773=(sj5*x8765);
evalcond[0]=((((-1.0)*r22*x8771))+((r21*x8773))+(((-1.0)*x8770*x8772)));
evalcond[1]=((((-1.0)*x8767*x8772))+(((-1.0)*r12*x8771))+((r11*x8773)));
evalcond[2]=((((-1.0)*r02*x8772))+((x8766*x8769))+(((-1.0)*x8768*x8771)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8771))+((x8765*x8768))+(((-1.0)*x8769*x8772)));
evalcond[4]=(((cj2*sj1))+((x8766*x8770))+((cj1*sj2))+(((-1.0)*r22*x8772))+(((-1.0)*r21*sj5*x8771)));
evalcond[5]=((((-1.0)*r11*sj5*x8771))+((x8766*x8767))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8772))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8774 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8774.valid){
continue;
}
CheckValue<IkReal> x8775=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8774.value)+(((1.5707963267949)*(x8775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8776=IKsin(j4);
IkReal x8777=IKcos(j4);
IkReal x8778=(cj5*r10);
IkReal x8779=(r01*sj5);
IkReal x8780=(cj5*r00);
IkReal x8781=(cj5*r20);
IkReal x8782=((1.0)*x8777);
IkReal x8783=((1.0)*x8776);
IkReal x8784=(sj5*x8776);
evalcond[0]=(((r21*x8784))+(((-1.0)*x8781*x8783))+(((-1.0)*r22*x8782)));
evalcond[1]=(((r11*x8784))+(((-1.0)*x8778*x8783))+(((-1.0)*r12*x8782)));
evalcond[2]=(((x8777*x8780))+(((-1.0)*x8779*x8782))+(((-1.0)*r02*x8783)));
evalcond[3]=((1.0)+(((-1.0)*x8780*x8783))+(((-1.0)*r02*x8782))+((x8776*x8779)));
evalcond[4]=(((cj2*sj1))+((x8777*x8781))+((cj1*sj2))+(((-1.0)*r22*x8783))+(((-1.0)*r21*sj5*x8782)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x8777*x8778))+(((-1.0)*r12*x8783))+(((-1.0)*r11*sj5*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8785=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8785);
rxp1_1=(px*r21);
rxp1_2=(r11*x8785);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8786=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8786);
rxp1_1=(px*r21);
rxp1_2=(r11*x8786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8787=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8787);
rxp1_1=(px*r21);
rxp1_2=(r11*x8787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8790=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8790.valid){
continue;
}
IkReal x8788=x8790.value;
IkReal x8789=(sj0*x8788);
cj4array[0]=((((-1.0)*sj1*sj2*x8789))+((cj1*cj2*x8789)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8791=IKsin(j4);
IkReal x8792=IKcos(j4);
IkReal x8793=(r21*sj5);
IkReal x8794=(cj5*r20);
IkReal x8795=((1.0)*x8791);
IkReal x8796=((1.0)*x8792);
evalcond[0]=((-1.0)*r02*x8791);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8796)));
evalcond[2]=((((-1.0)*x8794*x8795))+((x8791*x8793)));
evalcond[3]=(((r11*sj5*x8791))+(((-1.0)*cj5*r10*x8795)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8793*x8796))+((cj1*sj2))+((x8792*x8794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8799=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8799.valid){
continue;
}
IkReal x8797=x8799.value;
IkReal x8798=((1.0)*x8797);
cj4array[0]=((((-1.0)*cj1*sj2*x8798))+(((-1.0)*cj2*sj1*x8798)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8800=IKsin(j4);
IkReal x8801=IKcos(j4);
IkReal x8802=(r11*sj5);
IkReal x8803=((1.0)*sj0);
IkReal x8804=((1.0)*x8801);
IkReal x8805=((1.0)*cj5*x8800);
evalcond[0]=((-1.0)*r02*x8800);
evalcond[1]=((((-1.0)*r02*x8804))+(((-1.0)*x8803)));
evalcond[2]=((((-1.0)*r20*x8805))+((r21*sj5*x8800)));
evalcond[3]=(((x8800*x8802))+(((-1.0)*r10*x8805)));
evalcond[4]=((((-1.0)*cj1*cj2*x8803))+((sj0*sj1*sj2))+((cj5*r10*x8801))+(((-1.0)*x8802*x8804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8806=IKPowWithIntegerCheck(r02,-1);
if(!x8806.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8806.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8807=IKsin(j4);
IkReal x8808=IKcos(j4);
IkReal x8809=(cj5*x8808);
IkReal x8810=(sj5*x8807);
IkReal x8811=((1.0)*sj5*x8808);
IkReal x8812=((1.0)*cj5*x8807);
evalcond[0]=((-1.0)*r02*x8807);
evalcond[1]=(((r21*x8810))+(((-1.0)*r20*x8812)));
evalcond[2]=((((-1.0)*r10*x8812))+((r11*x8810)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8811))+((cj1*sj2))+((r20*x8809)));
evalcond[4]=((((-1.0)*r11*x8811))+((r10*x8809))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8813=((1.0)*sj0);
IkReal x8814=((1.0)*cj0);
CheckValue<IkReal> x8815 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8813))+(((-1.0)*r02*x8814)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8814))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8815.valid){
continue;
}
CheckValue<IkReal> x8816=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8815.value)+(((1.5707963267949)*(x8816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8817=IKsin(j4);
IkReal x8818=IKcos(j4);
IkReal x8819=(cj5*r10);
IkReal x8820=(sj1*sj2);
IkReal x8821=(r01*sj5);
IkReal x8822=(cj5*r00);
IkReal x8823=(cj5*r20);
IkReal x8824=((1.0)*x8818);
IkReal x8825=((1.0)*cj1*cj2);
IkReal x8826=((1.0)*x8817);
IkReal x8827=(sj5*x8817);
evalcond[0]=(((r21*x8827))+(((-1.0)*x8823*x8826))+(((-1.0)*r22*x8824)));
evalcond[1]=((((-1.0)*r12*x8824))+cj0+((r11*x8827))+(((-1.0)*x8819*x8826)));
evalcond[2]=((((-1.0)*sj0))+((x8817*x8821))+(((-1.0)*r02*x8824))+(((-1.0)*x8822*x8826)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8824))+((x8818*x8823))+(((-1.0)*r22*x8826)));
evalcond[4]=((((-1.0)*x8821*x8824))+(((-1.0)*r02*x8826))+((x8818*x8822))+(((-1.0)*cj0*x8825))+((cj0*x8820)));
evalcond[5]=((((-1.0)*r11*sj5*x8824))+(((-1.0)*r12*x8826))+(((-1.0)*sj0*x8825))+((sj0*x8820))+((x8818*x8819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8828=((1.0)*cj5);
CheckValue<IkReal> x8829 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8828))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8829.valid){
continue;
}
CheckValue<IkReal> x8830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8828))+(((-1.0)*r10*sj5)))),-1);
if(!x8830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8829.value)+(((1.5707963267949)*(x8830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8831=IKsin(j4);
IkReal x8832=IKcos(j4);
IkReal x8833=(cj5*r10);
IkReal x8834=(sj1*sj2);
IkReal x8835=(r01*sj5);
IkReal x8836=(cj5*r00);
IkReal x8837=(cj5*r20);
IkReal x8838=((1.0)*x8832);
IkReal x8839=((1.0)*cj1*cj2);
IkReal x8840=((1.0)*x8831);
IkReal x8841=(sj5*x8831);
evalcond[0]=(((r21*x8841))+(((-1.0)*x8837*x8840))+(((-1.0)*r22*x8838)));
evalcond[1]=(cj0+(((-1.0)*x8833*x8840))+((r11*x8841))+(((-1.0)*r12*x8838)));
evalcond[2]=((((-1.0)*sj0))+((x8831*x8835))+(((-1.0)*r02*x8838))+(((-1.0)*x8836*x8840)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8832*x8837))+(((-1.0)*r21*sj5*x8838))+(((-1.0)*r22*x8840)));
evalcond[4]=((((-1.0)*cj0*x8839))+((cj0*x8834))+(((-1.0)*x8835*x8838))+((x8832*x8836))+(((-1.0)*r02*x8840)));
evalcond[5]=(((x8832*x8833))+(((-1.0)*sj0*x8839))+((sj0*x8834))+(((-1.0)*r11*sj5*x8838))+(((-1.0)*r12*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8842=((1.0)*cj5);
CheckValue<IkReal> x8843 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8843.valid){
continue;
}
CheckValue<IkReal> x8844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8842)))),-1);
if(!x8844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8843.value)+(((1.5707963267949)*(x8844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8845=IKsin(j4);
IkReal x8846=IKcos(j4);
IkReal x8847=(cj5*r10);
IkReal x8848=(sj1*sj2);
IkReal x8849=(r01*sj5);
IkReal x8850=(cj5*r00);
IkReal x8851=(cj5*r20);
IkReal x8852=((1.0)*x8846);
IkReal x8853=((1.0)*cj1*cj2);
IkReal x8854=((1.0)*x8845);
IkReal x8855=(sj5*x8845);
evalcond[0]=((((-1.0)*x8851*x8854))+(((-1.0)*r22*x8852))+((r21*x8855)));
evalcond[1]=(cj0+(((-1.0)*x8847*x8854))+(((-1.0)*r12*x8852))+((r11*x8855)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8850*x8854))+((x8845*x8849))+(((-1.0)*r02*x8852)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8854))+((cj1*sj2))+((x8846*x8851))+(((-1.0)*r21*sj5*x8852)));
evalcond[4]=(((cj0*x8848))+(((-1.0)*x8849*x8852))+((x8846*x8850))+(((-1.0)*cj0*x8853))+(((-1.0)*r02*x8854)));
evalcond[5]=(((x8846*x8847))+(((-1.0)*r12*x8854))+(((-1.0)*r11*sj5*x8852))+((sj0*x8848))+(((-1.0)*sj0*x8853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8856=cj1*cj1;
IkReal x8857=cj2*cj2;
IkReal x8858=(r10*sj5);
IkReal x8859=(cj1*px);
IkReal x8860=((98000.0)*cj2);
IkReal x8861=(r00*sj5);
IkReal x8862=(cj5*r11);
IkReal x8863=(cj5*r01);
IkReal x8864=((10625.0)*cj1);
IkReal x8865=(sj1*sj2);
IkReal x8866=(cj1*py);
IkReal x8867=((9800.0)*x8865);
IkReal x8868=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8869=IKPowWithIntegerCheck(IKsign(((42905.0)+(((76832.0)*x8856*x8857))+(((6740.25)*x8856))+(((-83300.0)*cj1*x8865))+(((83300.0)*cj2*x8856))+(((-38416.0)*x8857))+(((-76832.0)*cj1*cj2*x8865)))),-1);
if(!x8869.valid){
continue;
}
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(((((-98000.0)*py*x8865))+((x8860*x8866))+((x8862*x8868))+((x8862*x8864))+((x8858*x8868))+((x8858*x8864))+(((-3350.0)*x8863))+(((-3350.0)*x8861))+(((-33500.0)*px))+(((106250.0)*x8866))+(((-1.0)*x8858*x8867))+(((-1.0)*x8862*x8867)))),IkReal(((((-1.0)*x8863*x8867))+(((3350.0)*x8858))+(((3350.0)*x8862))+((x8859*x8860))+(((33500.0)*py))+((x8861*x8864))+((x8861*x8868))+((x8863*x8868))+((x8863*x8864))+(((106250.0)*x8859))+(((-98000.0)*px*x8865))+(((-1.0)*x8861*x8867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8869.value)))+(x8870.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8871=IKcos(j0);
IkReal x8872=IKsin(j0);
IkReal x8873=((0.1)*sj5);
IkReal x8874=((0.425)*cj1);
IkReal x8875=((0.1)*cj5);
IkReal x8876=((0.392)*cj1*cj2);
IkReal x8877=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*r01*x8875))+(((-1.0)*x8871*x8877))+(((-1.0)*px))+((x8871*x8874))+((x8871*x8876))+(((-0.134)*x8872))+(((-1.0)*r00*x8873)));
evalcond[1]=((((-1.0)*x8872*x8877))+((x8872*x8874))+((x8872*x8876))+(((-1.0)*py))+(((0.134)*x8871))+(((-1.0)*r10*x8873))+(((-1.0)*r11*x8875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8878=((1.0)*cj5);
IkReal x8879=((((-1.0)*r01*x8878))+(((-1.0)*r00*sj5)));
j4eval[0]=x8879;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8878)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8880=((1.0)*cj5);
IkReal x8881=((((-1.0)*r11*x8880))+(((-1.0)*r10*sj5)));
j4eval[0]=x8881;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x8880))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8882=((1.0)*sj0);
IkReal x8883=((1.0)*cj0);
IkReal x8884=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8884;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x8883))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8882)))))+(IKabs(((((-1.0)*r12*x8882))+(((-1.0)*r02*x8883))))));
j4eval[2]=IKsign(x8884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8885=((-1.0)*r20);
IkReal x8887 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8887)==0){
continue;
}
IkReal x8886=pow(x8887,-0.5);
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8885),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8888.value));
IkReal gconst1=(r21*x8886);
IkReal gconst2=(x8885*x8886);
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8889.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8890=((-1.0)*r20);
IkReal x8891=x8886;
CheckValue<IkReal> x8893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8890),IKFAST_ATAN2_MAGTHRESH);
if(!x8893.valid){
continue;
}
IkReal x8892=((-1.0)*(x8893.value));
sj5=gconst1;
cj5=gconst2;
j5=x8892;
IkReal gconst0=x8892;
IkReal gconst1=(r21*x8891);
IkReal gconst2=(x8890*x8891);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8894=((-1.0)*r20);
IkReal x8895=x8886;
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8894),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
IkReal x8896=((-1.0)*(x8897.value));
sj5=gconst1;
cj5=gconst2;
j5=x8896;
IkReal gconst0=x8896;
IkReal gconst1=(r21*x8895);
IkReal gconst2=(x8894*x8895);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8898=((-1.0)*r20);
IkReal x8899=x8886;
CheckValue<IkReal> x8901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8898),IKFAST_ATAN2_MAGTHRESH);
if(!x8901.valid){
continue;
}
IkReal x8900=((-1.0)*(x8901.value));
sj5=gconst1;
cj5=gconst2;
j5=x8900;
IkReal gconst0=x8900;
IkReal gconst1=(r21*x8899);
IkReal gconst2=(x8898*x8899);
IkReal x8902=r22*r22;
CheckValue<IkReal> x8906=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8902))),-1);
if(!x8906.valid){
continue;
}
IkReal x8903=x8906.value;
IkReal x8904=(sj3*x8903);
IkReal x8905=(((sj3*x8902))+((x8904*(r20*r20*r20*r20)))+(((2.0)*x8904*(r20*r20)*(r21*r21)))+((x8904*(r21*r21*r21*r21))));
j4eval[0]=x8905;
j4eval[1]=IKsign(x8905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8907=((-1.0)*r20);
IkReal x8908=x8886;
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8907),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
IkReal x8909=((-1.0)*(x8910.value));
sj5=gconst1;
cj5=gconst2;
j5=x8909;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8909;
IkReal gconst1=(r21*x8908);
IkReal gconst2=(x8907*x8908);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8911=((-1.0)*r20);
IkReal x8912=x8886;
CheckValue<IkReal> x8914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8911),IKFAST_ATAN2_MAGTHRESH);
if(!x8914.valid){
continue;
}
IkReal x8913=((-1.0)*(x8914.value));
sj5=gconst1;
cj5=gconst2;
j5=x8913;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8913;
IkReal gconst1=(r21*x8912);
IkReal gconst2=(x8911*x8912);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8915=((-1.0)*r20);
IkReal x8916=x8886;
CheckValue<IkReal> x8918 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8915),IKFAST_ATAN2_MAGTHRESH);
if(!x8918.valid){
continue;
}
IkReal x8917=((-1.0)*(x8918.value));
sj5=gconst1;
cj5=gconst2;
j5=x8917;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8917;
IkReal gconst1=(r21*x8916);
IkReal gconst2=(x8915*x8916);
IkReal x8919=((1.0)*(r22*r22));
CheckValue<IkReal> x8923=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8919))),-1);
if(!x8923.valid){
continue;
}
IkReal x8920=x8923.value;
IkReal x8921=((1.0)*x8920);
IkReal x8922=((((-1.0)*x8919))+(((-1.0)*x8921*(r20*r20*r20*r20)))+(((-2.0)*x8920*(r20*r20)*(r21*r21)))+(((-1.0)*x8921*(r21*r21*r21*r21))));
j4eval[0]=x8922;
j4eval[1]=IKsign(x8922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8924=((-1.0)*r20);
IkReal x8925=x8886;
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8924),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
IkReal x8926=((-1.0)*(x8927.value));
sj5=gconst1;
cj5=gconst2;
j5=x8926;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8926;
IkReal gconst1=(r21*x8925);
IkReal gconst2=(x8924*x8925);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8928=((-1.0)*r20);
IkReal x8929=x8886;
CheckValue<IkReal> x8931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8928),IKFAST_ATAN2_MAGTHRESH);
if(!x8931.valid){
continue;
}
IkReal x8930=((-1.0)*(x8931.value));
sj5=gconst1;
cj5=gconst2;
j5=x8930;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8930;
IkReal gconst1=(r21*x8929);
IkReal gconst2=(x8928*x8929);
IkReal x8932=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8936=IKPowWithIntegerCheck(x8932,-1);
if(!x8936.valid){
continue;
}
IkReal x8933=x8936.value;
IkReal x8934=((1.0)*x8933);
IkReal x8935=((((-1.0)*x8934*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8933))+(((-1.0)*x8934*(r11*r11)*(r21*r21))));
j4eval[0]=x8935;
j4eval[1]=r12;
j4eval[2]=x8932;
j4eval[3]=IKsign(x8935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8937=((-1.0)*r20);
IkReal x8938=x8886;
CheckValue<IkReal> x8940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8937),IKFAST_ATAN2_MAGTHRESH);
if(!x8940.valid){
continue;
}
IkReal x8939=((-1.0)*(x8940.value));
sj5=gconst1;
cj5=gconst2;
j5=x8939;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8939;
IkReal gconst1=(r21*x8938);
IkReal gconst2=(x8937*x8938);
IkReal x8941=r22*r22;
IkReal x8942=(cj1*r12*sj2);
IkReal x8943=(cj2*r12*sj1);
CheckValue<IkReal> x8947=IKPowWithIntegerCheck(((-1.0)+x8941),-1);
if(!x8947.valid){
continue;
}
IkReal x8944=x8947.value;
if((((1.0)+(((-1.0)*x8941)))) < -0.00001)
continue;
IkReal x8945=IKsqrt(((1.0)+(((-1.0)*x8941))));
IkReal x8946=(r22*x8944*x8945);
j4eval[0]=((IKabs((((x8942*x8946))+((x8943*x8946)))))+(IKabs(((((-1.0)*x8943))+(((-1.0)*x8942))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8948=(cj1*sj2);
IkReal x8949=(cj2*sj1);
IkReal x8950=((1.0)*r12);
IkReal x8951=(gconst1*r11);
IkReal x8952=((1.0)*gconst2*r10);
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((((-1.0)*x8949*x8952))+(((-1.0)*x8948*x8952))+((x8949*x8951))+((x8948*x8951)))),IkReal(((((-1.0)*x8949*x8950))+(((-1.0)*x8948*x8950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
CheckValue<IkReal> x8954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8953.value)+(((1.5707963267949)*(x8954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8955=IKcos(j4);
IkReal x8956=IKsin(j4);
IkReal x8957=((1.0)*x8955);
IkReal x8958=(gconst1*x8955);
IkReal x8959=(gconst1*x8956);
IkReal x8960=((1.0)*gconst2*x8956);
evalcond[0]=((((-1.0)*gconst2*r10*x8957))+((r12*x8956))+((r11*x8958)));
evalcond[1]=((((-1.0)*r22*x8957))+(((-1.0)*r20*x8960))+((r21*x8959)));
evalcond[2]=((((-1.0)*r00*x8960))+((r01*x8959))+(((-1.0)*r02*x8957)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8960))+(((-1.0)*r12*x8957))+((r11*x8959)));
evalcond[4]=(((r22*x8956))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8957))+((r21*x8958)));
evalcond[5]=(((r02*x8956))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8958))+(((-1.0)*gconst2*r00*x8957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8961=(gconst2*r10);
IkReal x8962=(gconst1*r11);
CheckValue<IkReal> x8963 = IKatan2WithCheck(IkReal((x8962+(((-1.0)*x8961)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8963.valid){
continue;
}
CheckValue<IkReal> x8964=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8962*x8962)))+(((-1.0)*(x8961*x8961)))+(((-1.0)*(r12*r12)))+(((2.0)*x8961*x8962)))),-1);
if(!x8964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8963.value)+(((1.5707963267949)*(x8964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8965=IKcos(j4);
IkReal x8966=IKsin(j4);
IkReal x8967=((1.0)*x8965);
IkReal x8968=(gconst1*x8965);
IkReal x8969=(gconst1*x8966);
IkReal x8970=((1.0)*gconst2*x8966);
evalcond[0]=(((r11*x8968))+(((-1.0)*gconst2*r10*x8967))+((r12*x8966)));
evalcond[1]=((((-1.0)*r22*x8967))+(((-1.0)*r20*x8970))+((r21*x8969)));
evalcond[2]=(((r01*x8969))+(((-1.0)*r02*x8967))+(((-1.0)*r00*x8970)));
evalcond[3]=((1.0)+((r11*x8969))+(((-1.0)*r10*x8970))+(((-1.0)*r12*x8967)));
evalcond[4]=(((cj2*sj1))+((r22*x8966))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8967))+((r21*x8968)));
evalcond[5]=(((r02*x8966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8968))+(((-1.0)*gconst2*r00*x8967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8971=((1.0)*gconst2);
CheckValue<IkReal> x8972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8971)))),-1);
if(!x8972.valid){
continue;
}
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8972.value)))+(x8973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8974=IKcos(j4);
IkReal x8975=IKsin(j4);
IkReal x8976=((1.0)*x8974);
IkReal x8977=(gconst1*x8974);
IkReal x8978=(gconst1*x8975);
IkReal x8979=((1.0)*gconst2*x8975);
evalcond[0]=(((r11*x8977))+((r12*x8975))+(((-1.0)*gconst2*r10*x8976)));
evalcond[1]=(((r21*x8978))+(((-1.0)*r22*x8976))+(((-1.0)*r20*x8979)));
evalcond[2]=(((r01*x8978))+(((-1.0)*r02*x8976))+(((-1.0)*r00*x8979)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8979))+((r11*x8978))+(((-1.0)*r12*x8976)));
evalcond[4]=(((r21*x8977))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8976))+((cj1*sj2))+((r22*x8975)));
evalcond[5]=(((r01*x8977))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8976))+((r02*x8975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8980=((-1.0)*r20);
IkReal x8981=x8886;
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8980),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
IkReal x8982=((-1.0)*(x8983.value));
sj5=gconst1;
cj5=gconst2;
j5=x8982;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8982;
IkReal gconst1=(r21*x8981);
IkReal gconst2=(x8980*x8981);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8984=((-1.0)*r20);
IkReal x8985=x8886;
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8984),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
IkReal x8986=((-1.0)*(x8987.value));
sj5=gconst1;
cj5=gconst2;
j5=x8986;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8986;
IkReal gconst1=(r21*x8985);
IkReal gconst2=(x8984*x8985);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8988=((-1.0)*r20);
IkReal x8989=x8886;
CheckValue<IkReal> x8991 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8988),IKFAST_ATAN2_MAGTHRESH);
if(!x8991.valid){
continue;
}
IkReal x8990=((-1.0)*(x8991.value));
sj5=gconst1;
cj5=gconst2;
j5=x8990;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8990;
IkReal gconst1=(r21*x8989);
IkReal gconst2=(x8988*x8989);
IkReal x8992=r22*r22;
IkReal x8993=(cj1*r12*sj2);
IkReal x8994=(cj2*r12*sj1);
CheckValue<IkReal> x8998=IKPowWithIntegerCheck(((-1.0)+x8992),-1);
if(!x8998.valid){
continue;
}
IkReal x8995=x8998.value;
if((((1.0)+(((-1.0)*x8992)))) < -0.00001)
continue;
IkReal x8996=IKsqrt(((1.0)+(((-1.0)*x8992))));
IkReal x8997=(r22*x8995*x8996);
j4eval[0]=((IKabs(((((-1.0)*x8993))+(((-1.0)*x8994)))))+(IKabs((((x8994*x8997))+((x8993*x8997))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8999=(cj1*sj2);
IkReal x9000=(cj2*sj1);
IkReal x9001=((1.0)*r12);
IkReal x9002=(gconst1*r11);
IkReal x9003=((1.0)*gconst2*r10);
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(((((-1.0)*x8999*x9003))+((x9000*x9002))+(((-1.0)*x9000*x9003))+((x8999*x9002)))),IkReal(((((-1.0)*x8999*x9001))+(((-1.0)*x9000*x9001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9004.value)+(((1.5707963267949)*(x9005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9006=IKcos(j4);
IkReal x9007=IKsin(j4);
IkReal x9008=((1.0)*x9006);
IkReal x9009=(gconst1*x9006);
IkReal x9010=(gconst1*x9007);
IkReal x9011=((1.0)*gconst2*x9007);
evalcond[0]=((((-1.0)*gconst2*r10*x9008))+((r11*x9009))+((r12*x9007)));
evalcond[1]=((((-1.0)*r22*x9008))+(((-1.0)*r20*x9011))+((r21*x9010)));
evalcond[2]=((((-1.0)*r02*x9008))+(((-1.0)*r00*x9011))+((r01*x9010)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9011))+(((-1.0)*r12*x9008))+((r11*x9010)));
evalcond[4]=(((cj2*sj1))+((r21*x9009))+((r22*x9007))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9008)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9007))+(((-1.0)*gconst2*r00*x9008))+((cj1*cj2))+((r01*x9009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9012=(gconst1*r11);
IkReal x9013=(gconst2*r10);
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(((((-1.0)*x9013))+x9012)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
CheckValue<IkReal> x9015=IKPowWithIntegerCheck(IKsign(((x9013*x9013)+(r12*r12)+(((-2.0)*x9012*x9013))+(x9012*x9012))),-1);
if(!x9015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9014.value)+(((1.5707963267949)*(x9015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9016=IKcos(j4);
IkReal x9017=IKsin(j4);
IkReal x9018=((1.0)*x9016);
IkReal x9019=(gconst1*x9016);
IkReal x9020=(gconst1*x9017);
IkReal x9021=((1.0)*gconst2*x9017);
evalcond[0]=(((r12*x9017))+(((-1.0)*gconst2*r10*x9018))+((r11*x9019)));
evalcond[1]=((((-1.0)*r22*x9018))+((r21*x9020))+(((-1.0)*r20*x9021)));
evalcond[2]=(((r01*x9020))+(((-1.0)*r02*x9018))+(((-1.0)*r00*x9021)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9018))+((r11*x9020))+(((-1.0)*r10*x9021)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9018))+((cj1*sj2))+((r22*x9017))+((r21*x9019)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9017))+((cj1*cj2))+((r01*x9019))+(((-1.0)*gconst2*r00*x9018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
CheckValue<IkReal> x9023=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9022.value)+(((1.5707963267949)*(x9023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9024=IKcos(j4);
IkReal x9025=IKsin(j4);
IkReal x9026=((1.0)*x9024);
IkReal x9027=(gconst1*x9024);
IkReal x9028=(gconst1*x9025);
IkReal x9029=((1.0)*gconst2*x9025);
evalcond[0]=((((-1.0)*gconst2*r10*x9026))+((r11*x9027))+((r12*x9025)));
evalcond[1]=(((r21*x9028))+(((-1.0)*r20*x9029))+(((-1.0)*r22*x9026)));
evalcond[2]=(((r01*x9028))+(((-1.0)*r02*x9026))+(((-1.0)*r00*x9029)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9026))+((r11*x9028))+(((-1.0)*r10*x9029)));
evalcond[4]=((((-1.0)*gconst2*r20*x9026))+((cj2*sj1))+((cj1*sj2))+((r21*x9027))+((r22*x9025)));
evalcond[5]=((((-1.0)*gconst2*r00*x9026))+((r01*x9027))+(((-1.0)*sj1*sj2))+((r02*x9025))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9030=((-1.0)*r20);
IkReal x9031=x8886;
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9030),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
IkReal x9032=((-1.0)*(x9033.value));
sj5=gconst1;
cj5=gconst2;
j5=x9032;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9032;
IkReal gconst1=(r21*x9031);
IkReal gconst2=(x9030*x9031);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9034=((-1.0)*r20);
IkReal x9035=x8886;
CheckValue<IkReal> x9037 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9034),IKFAST_ATAN2_MAGTHRESH);
if(!x9037.valid){
continue;
}
IkReal x9036=((-1.0)*(x9037.value));
sj5=gconst1;
cj5=gconst2;
j5=x9036;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9036;
IkReal gconst1=(r21*x9035);
IkReal gconst2=(x9034*x9035);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9038=((-1.0)*r20);
IkReal x9039=x8886;
CheckValue<IkReal> x9041 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9038),IKFAST_ATAN2_MAGTHRESH);
if(!x9041.valid){
continue;
}
IkReal x9040=((-1.0)*(x9041.value));
sj5=gconst1;
cj5=gconst2;
j5=x9040;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9040;
IkReal gconst1=(r21*x9039);
IkReal gconst2=(x9038*x9039);
IkReal x9042=r22*r22;
IkReal x9043=((1.0)*r02);
IkReal x9044=(cj1*sj2);
IkReal x9045=(cj2*sj1);
CheckValue<IkReal> x9049=IKPowWithIntegerCheck(((-1.0)+x9042),-1);
if(!x9049.valid){
continue;
}
IkReal x9046=x9049.value;
if((((1.0)+(((-1.0)*x9042)))) < -0.00001)
continue;
IkReal x9047=IKsqrt(((1.0)+(((-1.0)*x9042))));
IkReal x9048=(r02*r22*x9046*x9047);
j4eval[0]=((IKabs(((((-1.0)*x9043*x9044))+(((-1.0)*x9043*x9045)))))+(IKabs((((x9044*x9048))+((x9045*x9048))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9050=(cj1*sj2);
IkReal x9051=(gconst1*r01);
IkReal x9052=((1.0)*r02);
IkReal x9053=(cj2*sj1);
IkReal x9054=((1.0)*gconst2*r00);
CheckValue<IkReal> x9055 = IKatan2WithCheck(IkReal(((((-1.0)*x9053*x9054))+((x9051*x9053))+((x9050*x9051))+(((-1.0)*x9050*x9054)))),IkReal(((((-1.0)*x9050*x9052))+(((-1.0)*x9052*x9053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9055.valid){
continue;
}
CheckValue<IkReal> x9056=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9055.value)+(((1.5707963267949)*(x9056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9057=IKcos(j4);
IkReal x9058=IKsin(j4);
IkReal x9059=((1.0)*x9057);
IkReal x9060=(gconst1*x9057);
IkReal x9061=(gconst1*x9058);
IkReal x9062=((1.0)*gconst2*x9058);
evalcond[0]=(((r01*x9060))+(((-1.0)*gconst2*r00*x9059))+((r02*x9058)));
evalcond[1]=((((-1.0)*r20*x9062))+(((-1.0)*r22*x9059))+((r21*x9061)));
evalcond[2]=(((r11*x9061))+(((-1.0)*r10*x9062))+(((-1.0)*r12*x9059)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9059))+((r01*x9061))+(((-1.0)*r00*x9062)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9060))+((r22*x9058))+(((-1.0)*gconst2*r20*x9059)));
evalcond[5]=(((r11*x9060))+(((-1.0)*gconst2*r10*x9059))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9063=(gconst1*r01);
IkReal x9064=(gconst2*r00);
CheckValue<IkReal> x9065=IKPowWithIntegerCheck(IKsign(((x9064*x9064)+(((-2.0)*x9063*x9064))+(r02*r02)+(x9063*x9063))),-1);
if(!x9065.valid){
continue;
}
CheckValue<IkReal> x9066 = IKatan2WithCheck(IkReal((x9063+(((-1.0)*x9064)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9065.value)))+(x9066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9067=IKcos(j4);
IkReal x9068=IKsin(j4);
IkReal x9069=((1.0)*x9067);
IkReal x9070=(gconst1*x9067);
IkReal x9071=(gconst1*x9068);
IkReal x9072=((1.0)*gconst2*x9068);
evalcond[0]=((((-1.0)*gconst2*r00*x9069))+((r02*x9068))+((r01*x9070)));
evalcond[1]=(((r21*x9071))+(((-1.0)*r20*x9072))+(((-1.0)*r22*x9069)));
evalcond[2]=(((r11*x9071))+(((-1.0)*r10*x9072))+(((-1.0)*r12*x9069)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9072))+((r01*x9071))+(((-1.0)*r02*x9069)));
evalcond[4]=(((cj2*sj1))+((r22*x9068))+((r21*x9070))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9069)));
evalcond[5]=(((r12*x9068))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9070))+(((-1.0)*gconst2*r10*x9069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9073=((1.0)*gconst2);
CheckValue<IkReal> x9074 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9074.valid){
continue;
}
CheckValue<IkReal> x9075=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9073)))),-1);
if(!x9075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9074.value)+(((1.5707963267949)*(x9075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9076=IKcos(j4);
IkReal x9077=IKsin(j4);
IkReal x9078=((1.0)*x9076);
IkReal x9079=(gconst1*x9076);
IkReal x9080=(gconst1*x9077);
IkReal x9081=((1.0)*gconst2*x9077);
evalcond[0]=((((-1.0)*gconst2*r00*x9078))+((r01*x9079))+((r02*x9077)));
evalcond[1]=((((-1.0)*r22*x9078))+((r21*x9080))+(((-1.0)*r20*x9081)));
evalcond[2]=(((r11*x9080))+(((-1.0)*r12*x9078))+(((-1.0)*r10*x9081)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9078))+(((-1.0)*r00*x9081))+((r01*x9080)));
evalcond[4]=(((cj2*sj1))+((r21*x9079))+((cj1*sj2))+((r22*x9077))+(((-1.0)*gconst2*r20*x9078)));
evalcond[5]=((((-1.0)*gconst2*r10*x9078))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9079))+((r12*x9077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9082=((-1.0)*r20);
IkReal x9083=x8886;
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9082),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
IkReal x9084=((-1.0)*(x9085.value));
sj5=gconst1;
cj5=gconst2;
j5=x9084;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9084;
IkReal gconst1=(r21*x9083);
IkReal gconst2=(x9082*x9083);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9086=((-1.0)*r20);
IkReal x9087=x8886;
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9086),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
IkReal x9088=((-1.0)*(x9089.value));
sj5=gconst1;
cj5=gconst2;
j5=x9088;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9088;
IkReal gconst1=(r21*x9087);
IkReal gconst2=(x9086*x9087);
IkReal x9090=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9094=IKPowWithIntegerCheck(x9090,-1);
if(!x9094.valid){
continue;
}
IkReal x9091=x9094.value;
IkReal x9092=((1.0)*x9091);
IkReal x9093=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9091))+(((-1.0)*x9092*(r00*r00)*(r20*r20)))+(((-1.0)*x9092*(r01*r01)*(r21*r21))));
j4eval[0]=x9093;
j4eval[1]=IKsign(x9093);
j4eval[2]=r02;
j4eval[3]=x9090;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9095=((-1.0)*r20);
IkReal x9096=x8886;
CheckValue<IkReal> x9098 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9095),IKFAST_ATAN2_MAGTHRESH);
if(!x9098.valid){
continue;
}
IkReal x9097=((-1.0)*(x9098.value));
sj5=gconst1;
cj5=gconst2;
j5=x9097;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9097;
IkReal gconst1=(r21*x9096);
IkReal gconst2=(x9095*x9096);
IkReal x9099=r22*r22;
IkReal x9100=((1.0)*r02);
IkReal x9101=(cj1*sj2);
IkReal x9102=(cj2*sj1);
CheckValue<IkReal> x9106=IKPowWithIntegerCheck(((-1.0)+x9099),-1);
if(!x9106.valid){
continue;
}
IkReal x9103=x9106.value;
if((((1.0)+(((-1.0)*x9099)))) < -0.00001)
continue;
IkReal x9104=IKsqrt(((1.0)+(((-1.0)*x9099))));
IkReal x9105=(r02*r22*x9103*x9104);
j4eval[0]=((IKabs((((x9101*x9105))+((x9102*x9105)))))+(IKabs(((((-1.0)*x9100*x9101))+(((-1.0)*x9100*x9102))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9107=(cj1*sj2);
IkReal x9108=(gconst1*r01);
IkReal x9109=((1.0)*r02);
IkReal x9110=(cj2*sj1);
IkReal x9111=((1.0)*gconst2*r00);
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(((((-1.0)*x9110*x9111))+(((-1.0)*x9107*x9111))+((x9107*x9108))+((x9108*x9110)))),IkReal(((((-1.0)*x9109*x9110))+(((-1.0)*x9107*x9109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
CheckValue<IkReal> x9113=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9112.value)+(((1.5707963267949)*(x9113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9114=IKcos(j4);
IkReal x9115=IKsin(j4);
IkReal x9116=((1.0)*x9114);
IkReal x9117=(gconst1*x9114);
IkReal x9118=(gconst1*x9115);
IkReal x9119=((1.0)*gconst2*x9115);
evalcond[0]=((((-1.0)*gconst2*r00*x9116))+((r01*x9117))+((r02*x9115)));
evalcond[1]=(((r21*x9118))+(((-1.0)*r22*x9116))+(((-1.0)*r20*x9119)));
evalcond[2]=((((-1.0)*r10*x9119))+((r11*x9118))+(((-1.0)*r12*x9116)));
evalcond[3]=((1.0)+((r01*x9118))+(((-1.0)*r02*x9116))+(((-1.0)*r00*x9119)));
evalcond[4]=(((r21*x9117))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9116))+((r22*x9115)));
evalcond[5]=(((r12*x9115))+(((-1.0)*sj1*sj2))+((r11*x9117))+(((-1.0)*gconst2*r10*x9116))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9120=(gconst1*r01);
IkReal x9121=(gconst2*r00);
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal((x9120+(((-1.0)*x9121)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9121*x9121)))+(((-1.0)*(x9120*x9120)))+(((2.0)*x9120*x9121)))),-1);
if(!x9123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9122.value)+(((1.5707963267949)*(x9123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9124=IKcos(j4);
IkReal x9125=IKsin(j4);
IkReal x9126=((1.0)*x9124);
IkReal x9127=(gconst1*x9124);
IkReal x9128=(gconst1*x9125);
IkReal x9129=((1.0)*gconst2*x9125);
evalcond[0]=((((-1.0)*gconst2*r00*x9126))+((r02*x9125))+((r01*x9127)));
evalcond[1]=((((-1.0)*r20*x9129))+(((-1.0)*r22*x9126))+((r21*x9128)));
evalcond[2]=((((-1.0)*r12*x9126))+(((-1.0)*r10*x9129))+((r11*x9128)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9126))+((r01*x9128))+(((-1.0)*r00*x9129)));
evalcond[4]=(((r22*x9125))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9126))+((cj1*sj2))+((r21*x9127)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9126))+((cj1*cj2))+((r11*x9127))+((r12*x9125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9130 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9130.valid){
continue;
}
CheckValue<IkReal> x9131=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9130.value)+(((1.5707963267949)*(x9131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9132=IKcos(j4);
IkReal x9133=IKsin(j4);
IkReal x9134=((1.0)*x9132);
IkReal x9135=(gconst1*x9132);
IkReal x9136=(gconst1*x9133);
IkReal x9137=((1.0)*gconst2*x9133);
evalcond[0]=(((r02*x9133))+(((-1.0)*gconst2*r00*x9134))+((r01*x9135)));
evalcond[1]=((((-1.0)*r22*x9134))+(((-1.0)*r20*x9137))+((r21*x9136)));
evalcond[2]=((((-1.0)*r12*x9134))+(((-1.0)*r10*x9137))+((r11*x9136)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9134))+(((-1.0)*r00*x9137))+((r01*x9136)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9133))+((r21*x9135))+(((-1.0)*gconst2*r20*x9134)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9134))+((r12*x9133))+((r11*x9135))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9138=((-1.0)*r20);
IkReal x9139=((-1.0)*px);
CheckValue<IkReal> x9141 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9138),IKFAST_ATAN2_MAGTHRESH);
if(!x9141.valid){
continue;
}
IkReal x9140=((-1.0)*(x9141.value));
sj5=gconst1;
cj5=gconst2;
j5=x9140;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9139);
rxp1_1=(px*r21);
rxp1_2=(r11*x9139);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9140;
IkReal gconst1=r21;
IkReal gconst2=x9138;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9142=((-1.0)*r20);
IkReal x9143=((-1.0)*px);
CheckValue<IkReal> x9145 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9142),IKFAST_ATAN2_MAGTHRESH);
if(!x9145.valid){
continue;
}
IkReal x9144=((-1.0)*(x9145.value));
sj5=gconst1;
cj5=gconst2;
j5=x9144;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9143);
rxp1_1=(px*r21);
rxp1_2=(r11*x9143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9144;
IkReal gconst1=r21;
IkReal gconst2=x9142;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9146=((-1.0)*r20);
IkReal x9147=((-1.0)*px);
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9146),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
IkReal x9148=((-1.0)*(x9149.value));
sj5=gconst1;
cj5=gconst2;
j5=x9148;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9147);
rxp1_1=(px*r21);
rxp1_2=(r11*x9147);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9148;
IkReal gconst1=r21;
IkReal gconst2=x9146;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9152=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9152.valid){
continue;
}
IkReal x9150=x9152.value;
IkReal x9151=(sj0*x9150);
cj4array[0]=(((cj1*cj2*x9151))+(((-1.0)*sj1*sj2*x9151)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9153=IKsin(j4);
IkReal x9154=IKcos(j4);
IkReal x9155=((1.0)*gconst2);
IkReal x9156=(gconst1*r21);
evalcond[0]=(r02*x9153);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9154)));
evalcond[2]=((((-1.0)*r20*x9153*x9155))+((x9153*x9156)));
evalcond[3]=((((-1.0)*r10*x9153*x9155))+((gconst1*r11*x9153)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r20*x9154*x9155))+((cj1*sj2))+((x9154*x9156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9159=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9159.valid){
continue;
}
IkReal x9157=x9159.value;
IkReal x9158=((1.0)*x9157);
cj4array[0]=((((-1.0)*cj1*sj2*x9158))+(((-1.0)*cj2*sj1*x9158)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9160=IKsin(j4);
IkReal x9161=IKcos(j4);
IkReal x9162=((1.0)*sj0);
IkReal x9163=(gconst1*x9160);
IkReal x9164=((1.0)*x9161);
IkReal x9165=((1.0)*gconst2*x9160);
evalcond[0]=(r02*x9160);
evalcond[1]=((((-1.0)*r02*x9164))+(((-1.0)*x9162)));
evalcond[2]=(((r21*x9163))+(((-1.0)*r20*x9165)));
evalcond[3]=((((-1.0)*r10*x9165))+((r11*x9163)));
evalcond[4]=((((-1.0)*cj1*cj2*x9162))+(((-1.0)*gconst2*r10*x9164))+((gconst1*r11*x9161))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9166=IKPowWithIntegerCheck(r02,-1);
if(!x9166.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9166.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9167=IKsin(j4);
IkReal x9168=IKcos(j4);
IkReal x9169=(gconst1*r21);
IkReal x9170=(gconst1*r11);
IkReal x9171=((1.0)*gconst2*r10);
IkReal x9172=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9167);
evalcond[1]=((((-1.0)*x9167*x9172))+((x9167*x9169)));
evalcond[2]=(((x9167*x9170))+(((-1.0)*x9167*x9171)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9168*x9172))+((cj1*sj2))+((x9168*x9169)));
evalcond[4]=((((-1.0)*x9168*x9171))+(((-1.0)*cj1*cj2*sj0))+((x9168*x9170))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9173=(cj2*sj1);
IkReal x9174=(cj1*sj2);
IkReal x9175=(gconst1*r21);
IkReal x9176=((1.0)*gconst2*r20);
CheckValue<IkReal> x9177 = IKatan2WithCheck(IkReal((((r22*x9174))+((r22*x9173)))),IkReal(((((-1.0)*x9173*x9176))+((x9174*x9175))+((x9173*x9175))+(((-1.0)*x9174*x9176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9177.valid){
continue;
}
CheckValue<IkReal> x9178=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9176))+(((-1.0)*(r22*r22)))+(((2.0)*gconst2*r20*x9175))+(((-1.0)*(x9175*x9175))))),-1);
if(!x9178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9177.value)+(((1.5707963267949)*(x9178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9179=IKsin(j4);
IkReal x9180=IKcos(j4);
IkReal x9181=(sj1*sj2);
IkReal x9182=(gconst2*r10);
IkReal x9183=(gconst2*r00);
IkReal x9184=(gconst2*r20);
IkReal x9185=((1.0)*x9180);
IkReal x9186=(gconst1*x9180);
IkReal x9187=((1.0)*cj1*cj2);
IkReal x9188=(gconst1*x9179);
IkReal x9189=((1.0)*x9179);
evalcond[0]=((((-1.0)*x9184*x9189))+(((-1.0)*r22*x9185))+((r21*x9188)));
evalcond[1]=((((-1.0)*r12*x9185))+((r11*x9188))+cj0+(((-1.0)*x9182*x9189)));
evalcond[2]=((((-1.0)*x9183*x9189))+(((-1.0)*sj0))+(((-1.0)*r02*x9185))+((r01*x9188)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9184*x9185))+((cj1*sj2))+((r21*x9186))+((r22*x9179)));
evalcond[4]=((((-1.0)*x9183*x9185))+((r02*x9179))+(((-1.0)*cj0*x9187))+((cj0*x9181))+((r01*x9186)));
evalcond[5]=(((r11*x9186))+(((-1.0)*x9182*x9185))+((sj0*x9181))+((r12*x9179))+(((-1.0)*sj0*x9187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9190=((1.0)*gconst2);
CheckValue<IkReal> x9191=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9190)))),-1);
if(!x9191.valid){
continue;
}
CheckValue<IkReal> x9192 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9190))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9191.value)))+(x9192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9193=IKsin(j4);
IkReal x9194=IKcos(j4);
IkReal x9195=(sj1*sj2);
IkReal x9196=(gconst2*r10);
IkReal x9197=(gconst2*r00);
IkReal x9198=(gconst2*r20);
IkReal x9199=((1.0)*x9194);
IkReal x9200=(gconst1*x9194);
IkReal x9201=((1.0)*cj1*cj2);
IkReal x9202=(gconst1*x9193);
IkReal x9203=((1.0)*x9193);
evalcond[0]=((((-1.0)*r22*x9199))+(((-1.0)*x9198*x9203))+((r21*x9202)));
evalcond[1]=(cj0+((r11*x9202))+(((-1.0)*r12*x9199))+(((-1.0)*x9196*x9203)));
evalcond[2]=((((-1.0)*x9197*x9203))+(((-1.0)*sj0))+((r01*x9202))+(((-1.0)*r02*x9199)));
evalcond[3]=(((cj2*sj1))+((r22*x9193))+((cj1*sj2))+((r21*x9200))+(((-1.0)*x9198*x9199)));
evalcond[4]=(((r01*x9200))+(((-1.0)*cj0*x9201))+(((-1.0)*x9197*x9199))+((r02*x9193))+((cj0*x9195)));
evalcond[5]=(((sj0*x9195))+((r11*x9200))+(((-1.0)*x9196*x9199))+((r12*x9193))+(((-1.0)*sj0*x9201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9204=((1.0)*gconst2);
CheckValue<IkReal> x9205=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9204)))),-1);
if(!x9205.valid){
continue;
}
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9205.value)))+(x9206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9207=IKsin(j4);
IkReal x9208=IKcos(j4);
IkReal x9209=(sj1*sj2);
IkReal x9210=(gconst2*r10);
IkReal x9211=(gconst2*r00);
IkReal x9212=(gconst2*r20);
IkReal x9213=((1.0)*x9208);
IkReal x9214=(gconst1*x9208);
IkReal x9215=((1.0)*cj1*cj2);
IkReal x9216=(gconst1*x9207);
IkReal x9217=((1.0)*x9207);
evalcond[0]=((((-1.0)*x9212*x9217))+((r21*x9216))+(((-1.0)*r22*x9213)));
evalcond[1]=(cj0+(((-1.0)*x9210*x9217))+((r11*x9216))+(((-1.0)*r12*x9213)));
evalcond[2]=((((-1.0)*r02*x9213))+(((-1.0)*x9211*x9217))+(((-1.0)*sj0))+((r01*x9216)));
evalcond[3]=((((-1.0)*x9212*x9213))+((cj2*sj1))+((r21*x9214))+((r22*x9207))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x9211*x9213))+(((-1.0)*cj0*x9215))+((r02*x9207))+((cj0*x9209))+((r01*x9214)));
evalcond[5]=((((-1.0)*x9210*x9213))+((r11*x9214))+((r12*x9207))+(((-1.0)*sj0*x9215))+((sj0*x9209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9218=((-1.0)*r20);
IkReal x9219=x8886;
CheckValue<IkReal> x9221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9218),IKFAST_ATAN2_MAGTHRESH);
if(!x9221.valid){
continue;
}
IkReal x9220=((-1.0)*(x9221.value));
sj5=gconst1;
cj5=gconst2;
j5=x9220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9220;
IkReal gconst1=(r21*x9219);
IkReal gconst2=(x9218*x9219);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9222=((-1.0)*r20);
IkReal x9223=x8886;
CheckValue<IkReal> x9225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9222),IKFAST_ATAN2_MAGTHRESH);
if(!x9225.valid){
continue;
}
IkReal x9224=((-1.0)*(x9225.value));
sj5=gconst1;
cj5=gconst2;
j5=x9224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9224;
IkReal gconst1=(r21*x9223);
IkReal gconst2=(x9222*x9223);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9226=((-1.0)*r20);
IkReal x9227=x8886;
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9226),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
IkReal x9228=((-1.0)*(x9229.value));
sj5=gconst1;
cj5=gconst2;
j5=x9228;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9228;
IkReal gconst1=(r21*x9227);
IkReal gconst2=(x9226*x9227);
IkReal x9230=r22*r22;
CheckValue<IkReal> x9233=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9230))),-1);
if(!x9233.valid){
continue;
}
IkReal x9231=x9233.value;
IkReal x9232=(((x9231*(r20*r20*r20*r20)))+x9230+(((2.0)*x9231*(r20*r20)*(r21*r21)))+((x9231*(r21*r21*r21*r21))));
j4eval[0]=x9232;
j4eval[1]=IKsign(x9232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9234=((-1.0)*r20);
IkReal x9235=x8886;
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9234),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
IkReal x9236=((-1.0)*(x9237.value));
sj5=gconst1;
cj5=gconst2;
j5=x9236;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9236;
IkReal gconst1=(r21*x9235);
IkReal gconst2=(x9234*x9235);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9238=((-1.0)*r20);
IkReal x9239=x8886;
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9238),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
IkReal x9240=((-1.0)*(x9241.value));
sj5=gconst1;
cj5=gconst2;
j5=x9240;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9240;
IkReal gconst1=(r21*x9239);
IkReal gconst2=(x9238*x9239);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9242=((-1.0)*r20);
IkReal x9243=x8886;
CheckValue<IkReal> x9245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9242),IKFAST_ATAN2_MAGTHRESH);
if(!x9245.valid){
continue;
}
IkReal x9244=((-1.0)*(x9245.value));
sj5=gconst1;
cj5=gconst2;
j5=x9244;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9244;
IkReal gconst1=(r21*x9243);
IkReal gconst2=(x9242*x9243);
IkReal x9246=r22*r22;
IkReal x9247=(cj1*r12*sj2);
IkReal x9248=(cj2*r12*sj1);
CheckValue<IkReal> x9252=IKPowWithIntegerCheck(((-1.0)+x9246),-1);
if(!x9252.valid){
continue;
}
IkReal x9249=x9252.value;
if((((1.0)+(((-1.0)*x9246)))) < -0.00001)
continue;
IkReal x9250=IKsqrt(((1.0)+(((-1.0)*x9246))));
IkReal x9251=((1.0)*r22*x9249*x9250);
j4eval[0]=((IKabs((x9248+x9247)))+(IKabs(((((-1.0)*x9247*x9251))+(((-1.0)*x9248*x9251))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9253=((1.0)*gconst1);
IkReal x9254=(cj2*sj1);
IkReal x9255=(gconst2*r10);
IkReal x9256=(cj1*sj2);
CheckValue<IkReal> x9257 = IKatan2WithCheck(IkReal((((x9254*x9255))+((x9255*x9256))+(((-1.0)*r11*x9253*x9254))+(((-1.0)*r11*x9253*x9256)))),IkReal((((r12*x9254))+((r12*x9256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9257.valid){
continue;
}
CheckValue<IkReal> x9258=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9253))+(((-1.0)*gconst2*r01)))),-1);
if(!x9258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9257.value)+(((1.5707963267949)*(x9258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9259=IKsin(j4);
IkReal x9260=IKcos(j4);
IkReal x9261=((1.0)*x9260);
IkReal x9262=(gconst2*x9260);
IkReal x9263=(gconst1*x9259);
IkReal x9264=((1.0)*x9259);
evalcond[0]=((((-1.0)*gconst2*r20*x9264))+(((-1.0)*r22*x9261))+((r21*x9263)));
evalcond[1]=((((-1.0)*gconst2*r00*x9264))+((r01*x9263))+(((-1.0)*r02*x9261)));
evalcond[2]=((((-1.0)*gconst1*r11*x9261))+((r10*x9262))+(((-1.0)*r12*x9264)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9264))+(((-1.0)*r12*x9261))+((r11*x9263)));
evalcond[4]=((((-1.0)*gconst1*r21*x9261))+((cj2*sj1))+(((-1.0)*r22*x9264))+((cj1*sj2))+((r20*x9262)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9261))+((r00*x9262))+(((-1.0)*r02*x9264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9265=(gconst1*r11);
IkReal x9266=(gconst2*r10);
CheckValue<IkReal> x9267 = IKatan2WithCheck(IkReal((x9266+(((-1.0)*x9265)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9267.valid){
continue;
}
CheckValue<IkReal> x9268=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9265*x9265)+(x9266*x9266)+(((-2.0)*x9265*x9266)))),-1);
if(!x9268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9267.value)+(((1.5707963267949)*(x9268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9269=IKsin(j4);
IkReal x9270=IKcos(j4);
IkReal x9271=((1.0)*x9270);
IkReal x9272=(gconst2*x9270);
IkReal x9273=(gconst1*x9269);
IkReal x9274=((1.0)*x9269);
evalcond[0]=((((-1.0)*gconst2*r20*x9274))+(((-1.0)*r22*x9271))+((r21*x9273)));
evalcond[1]=((((-1.0)*gconst2*r00*x9274))+((r01*x9273))+(((-1.0)*r02*x9271)));
evalcond[2]=((((-1.0)*gconst1*r11*x9271))+((r10*x9272))+(((-1.0)*r12*x9274)));
evalcond[3]=((1.0)+((r11*x9273))+(((-1.0)*r12*x9271))+(((-1.0)*gconst2*r10*x9274)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9271))+(((-1.0)*r22*x9274))+((cj1*sj2))+((r20*x9272)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9271))+((r00*x9272))+(((-1.0)*r02*x9274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9275=((1.0)*gconst2);
CheckValue<IkReal> x9276=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9275)))),-1);
if(!x9276.valid){
continue;
}
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9275))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9276.value)))+(x9277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9278=IKsin(j4);
IkReal x9279=IKcos(j4);
IkReal x9280=((1.0)*x9279);
IkReal x9281=(gconst2*x9279);
IkReal x9282=(gconst1*x9278);
IkReal x9283=((1.0)*x9278);
evalcond[0]=((((-1.0)*gconst2*r20*x9283))+(((-1.0)*r22*x9280))+((r21*x9282)));
evalcond[1]=((((-1.0)*gconst2*r00*x9283))+((r01*x9282))+(((-1.0)*r02*x9280)));
evalcond[2]=((((-1.0)*r12*x9283))+(((-1.0)*gconst1*r11*x9280))+((r10*x9281)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9280))+((r11*x9282))+(((-1.0)*gconst2*r10*x9283)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9280))+((cj1*sj2))+(((-1.0)*r22*x9283))+((r20*x9281)));
evalcond[5]=((((-1.0)*gconst1*r01*x9280))+((r00*x9281))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9284=((-1.0)*r20);
IkReal x9285=x8886;
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9284),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
IkReal x9286=((-1.0)*(x9287.value));
sj5=gconst1;
cj5=gconst2;
j5=x9286;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9286;
IkReal gconst1=(r21*x9285);
IkReal gconst2=(x9284*x9285);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9288=((-1.0)*r20);
IkReal x9289=x8886;
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9288),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
IkReal x9290=((-1.0)*(x9291.value));
sj5=gconst1;
cj5=gconst2;
j5=x9290;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9290;
IkReal gconst1=(r21*x9289);
IkReal gconst2=(x9288*x9289);
IkReal x9292=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9296=IKPowWithIntegerCheck(x9292,-1);
if(!x9296.valid){
continue;
}
IkReal x9293=x9296.value;
IkReal x9294=((1.0)*x9293);
IkReal x9295=((((-1.0)*x9294*(r10*r10)*(r20*r20)))+(((-1.0)*x9294*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9293)));
j4eval[0]=x9295;
j4eval[1]=r12;
j4eval[2]=x9292;
j4eval[3]=IKsign(x9295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9297=((-1.0)*r20);
IkReal x9298=x8886;
CheckValue<IkReal> x9300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9297),IKFAST_ATAN2_MAGTHRESH);
if(!x9300.valid){
continue;
}
IkReal x9299=((-1.0)*(x9300.value));
sj5=gconst1;
cj5=gconst2;
j5=x9299;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9299;
IkReal gconst1=(r21*x9298);
IkReal gconst2=(x9297*x9298);
IkReal x9301=r22*r22;
IkReal x9302=(cj1*r12*sj2);
IkReal x9303=(cj2*r12*sj1);
CheckValue<IkReal> x9307=IKPowWithIntegerCheck(((-1.0)+x9301),-1);
if(!x9307.valid){
continue;
}
IkReal x9304=x9307.value;
if((((1.0)+(((-1.0)*x9301)))) < -0.00001)
continue;
IkReal x9305=IKsqrt(((1.0)+(((-1.0)*x9301))));
IkReal x9306=((1.0)*r22*x9304*x9305);
j4eval[0]=((IKabs(((((-1.0)*x9302*x9306))+(((-1.0)*x9303*x9306)))))+(IKabs((x9302+x9303))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9308=((1.0)*gconst1);
IkReal x9309=(cj2*sj1);
IkReal x9310=(gconst2*r10);
IkReal x9311=(cj1*sj2);
CheckValue<IkReal> x9312 = IKatan2WithCheck(IkReal((((x9309*x9310))+(((-1.0)*r11*x9308*x9311))+(((-1.0)*r11*x9308*x9309))+((x9310*x9311)))),IkReal((((r12*x9309))+((r12*x9311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9312.valid){
continue;
}
CheckValue<IkReal> x9313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9308))+(((-1.0)*gconst2*r01)))),-1);
if(!x9313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9312.value)+(((1.5707963267949)*(x9313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9314=IKsin(j4);
IkReal x9315=IKcos(j4);
IkReal x9316=((1.0)*x9315);
IkReal x9317=(gconst2*x9315);
IkReal x9318=(gconst1*x9314);
IkReal x9319=((1.0)*x9314);
evalcond[0]=(((r21*x9318))+(((-1.0)*r22*x9316))+(((-1.0)*gconst2*r20*x9319)));
evalcond[1]=((((-1.0)*gconst2*r00*x9319))+((r01*x9318))+(((-1.0)*r02*x9316)));
evalcond[2]=((((-1.0)*gconst1*r11*x9316))+((r10*x9317))+(((-1.0)*r12*x9319)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9319))+((r11*x9318))+(((-1.0)*r12*x9316)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9316))+((cj1*sj2))+((r20*x9317))+(((-1.0)*r22*x9319)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9316))+(((-1.0)*r02*x9319))+((r00*x9317))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9320=(gconst1*r11);
IkReal x9321=(gconst2*r10);
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(((((-1.0)*x9320))+x9321)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
CheckValue<IkReal> x9323=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x9320*x9320)))+(((2.0)*x9320*x9321))+(((-1.0)*(x9321*x9321))))),-1);
if(!x9323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9322.value)+(((1.5707963267949)*(x9323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9324=IKsin(j4);
IkReal x9325=IKcos(j4);
IkReal x9326=((1.0)*x9325);
IkReal x9327=(gconst2*x9325);
IkReal x9328=(gconst1*x9324);
IkReal x9329=((1.0)*x9324);
evalcond[0]=((((-1.0)*r22*x9326))+(((-1.0)*gconst2*r20*x9329))+((r21*x9328)));
evalcond[1]=((((-1.0)*r02*x9326))+((r01*x9328))+(((-1.0)*gconst2*r00*x9329)));
evalcond[2]=((((-1.0)*r12*x9329))+((r10*x9327))+(((-1.0)*gconst1*r11*x9326)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9326))+(((-1.0)*gconst2*r10*x9329))+((r11*x9328)));
evalcond[4]=(((cj2*sj1))+((r20*x9327))+(((-1.0)*r22*x9329))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9326)));
evalcond[5]=((((-1.0)*gconst1*r01*x9326))+(((-1.0)*r02*x9329))+((r00*x9327))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9330 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9330.valid){
continue;
}
CheckValue<IkReal> x9331=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9330.value)+(((1.5707963267949)*(x9331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9332=IKsin(j4);
IkReal x9333=IKcos(j4);
IkReal x9334=((1.0)*x9333);
IkReal x9335=(gconst2*x9333);
IkReal x9336=(gconst1*x9332);
IkReal x9337=((1.0)*x9332);
evalcond[0]=((((-1.0)*r22*x9334))+(((-1.0)*gconst2*r20*x9337))+((r21*x9336)));
evalcond[1]=((((-1.0)*r02*x9334))+((r01*x9336))+(((-1.0)*gconst2*r00*x9337)));
evalcond[2]=((((-1.0)*r12*x9337))+((r10*x9335))+(((-1.0)*gconst1*r11*x9334)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9337))+(((-1.0)*r12*x9334))+((r11*x9336)));
evalcond[4]=(((cj2*sj1))+((r20*x9335))+(((-1.0)*r22*x9337))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9334)));
evalcond[5]=((((-1.0)*r02*x9337))+((r00*x9335))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9338=((-1.0)*r20);
IkReal x9339=x8886;
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9338),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
IkReal x9340=((-1.0)*(x9341.value));
sj5=gconst1;
cj5=gconst2;
j5=x9340;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9340;
IkReal gconst1=(r21*x9339);
IkReal gconst2=(x9338*x9339);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9342=((-1.0)*r20);
IkReal x9343=x8886;
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9342),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
IkReal x9344=((-1.0)*(x9345.value));
sj5=gconst1;
cj5=gconst2;
j5=x9344;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9344;
IkReal gconst1=(r21*x9343);
IkReal gconst2=(x9342*x9343);
IkReal x9346=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9350=IKPowWithIntegerCheck(x9346,-1);
if(!x9350.valid){
continue;
}
IkReal x9347=x9350.value;
IkReal x9348=((1.0)*x9347);
IkReal x9349=((((-1.0)*x9348*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9347))+(((-1.0)*x9348*(r01*r01)*(r21*r21))));
j4eval[0]=x9349;
j4eval[1]=IKsign(x9349);
j4eval[2]=r02;
j4eval[3]=x9346;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9351=((-1.0)*r20);
IkReal x9352=x8886;
CheckValue<IkReal> x9354 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9351),IKFAST_ATAN2_MAGTHRESH);
if(!x9354.valid){
continue;
}
IkReal x9353=((-1.0)*(x9354.value));
sj5=gconst1;
cj5=gconst2;
j5=x9353;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9353;
IkReal gconst1=(r21*x9352);
IkReal gconst2=(x9351*x9352);
IkReal x9355=r22*r22;
IkReal x9356=(cj1*r02*sj2);
IkReal x9357=(cj2*r02*sj1);
CheckValue<IkReal> x9361=IKPowWithIntegerCheck(((-1.0)+x9355),-1);
if(!x9361.valid){
continue;
}
IkReal x9358=x9361.value;
if((((1.0)+(((-1.0)*x9355)))) < -0.00001)
continue;
IkReal x9359=IKsqrt(((1.0)+(((-1.0)*x9355))));
IkReal x9360=((1.0)*r22*x9358*x9359);
j4eval[0]=((IKabs(((((-1.0)*x9356*x9360))+(((-1.0)*x9357*x9360)))))+(IKabs((x9357+x9356))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9362=(cj2*sj1);
IkReal x9363=(cj1*sj2);
IkReal x9364=(gconst2*r00);
IkReal x9365=((1.0)*gconst1*r01);
CheckValue<IkReal> x9366 = IKatan2WithCheck(IkReal(((((-1.0)*x9362*x9365))+((x9363*x9364))+((x9362*x9364))+(((-1.0)*x9363*x9365)))),IkReal((((r02*x9362))+((r02*x9363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9366.valid){
continue;
}
CheckValue<IkReal> x9367=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9366.value)+(((1.5707963267949)*(x9367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9368=IKsin(j4);
IkReal x9369=IKcos(j4);
IkReal x9370=(gconst1*r11);
IkReal x9371=(gconst1*r21);
IkReal x9372=(gconst1*r01);
IkReal x9373=((1.0)*x9369);
IkReal x9374=(gconst2*x9369);
IkReal x9375=((1.0)*x9368);
evalcond[0]=(((x9368*x9371))+(((-1.0)*r22*x9373))+(((-1.0)*gconst2*r20*x9375)));
evalcond[1]=((((-1.0)*gconst2*r10*x9375))+((x9368*x9370))+(((-1.0)*r12*x9373)));
evalcond[2]=((((-1.0)*x9372*x9373))+(((-1.0)*r02*x9375))+((r00*x9374)));
evalcond[3]=((-1.0)+((x9368*x9372))+(((-1.0)*r02*x9373))+(((-1.0)*gconst2*r00*x9375)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9371*x9373))+(((-1.0)*r22*x9375))+((r20*x9374)));
evalcond[5]=((((-1.0)*x9370*x9373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9375))+((r10*x9374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9376=(gconst2*r00);
IkReal x9377=(gconst1*r01);
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal((x9376+(((-1.0)*x9377)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
CheckValue<IkReal> x9379=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9376*x9377))+(((-1.0)*(x9376*x9376)))+(((-1.0)*(x9377*x9377))))),-1);
if(!x9379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9378.value)+(((1.5707963267949)*(x9379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9380=IKsin(j4);
IkReal x9381=IKcos(j4);
IkReal x9382=(gconst1*r11);
IkReal x9383=(gconst1*r21);
IkReal x9384=(gconst1*r01);
IkReal x9385=((1.0)*x9381);
IkReal x9386=(gconst2*x9381);
IkReal x9387=((1.0)*x9380);
evalcond[0]=(((x9380*x9383))+(((-1.0)*gconst2*r20*x9387))+(((-1.0)*r22*x9385)));
evalcond[1]=(((x9380*x9382))+(((-1.0)*r12*x9385))+(((-1.0)*gconst2*r10*x9387)));
evalcond[2]=((((-1.0)*x9384*x9385))+(((-1.0)*r02*x9387))+((r00*x9386)));
evalcond[3]=((-1.0)+((x9380*x9384))+(((-1.0)*r02*x9385))+(((-1.0)*gconst2*r00*x9387)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9387))+(((-1.0)*x9383*x9385))+((r20*x9386)));
evalcond[5]=(((r10*x9386))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9387))+(((-1.0)*x9382*x9385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9388=((1.0)*gconst2);
CheckValue<IkReal> x9389 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9388))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9389.valid){
continue;
}
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9388)))),-1);
if(!x9390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9389.value)+(((1.5707963267949)*(x9390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9391=IKsin(j4);
IkReal x9392=IKcos(j4);
IkReal x9393=(gconst1*r11);
IkReal x9394=(gconst1*r21);
IkReal x9395=(gconst1*r01);
IkReal x9396=((1.0)*x9392);
IkReal x9397=(gconst2*x9392);
IkReal x9398=((1.0)*x9391);
evalcond[0]=(((x9391*x9394))+(((-1.0)*gconst2*r20*x9398))+(((-1.0)*r22*x9396)));
evalcond[1]=((((-1.0)*r12*x9396))+((x9391*x9393))+(((-1.0)*gconst2*r10*x9398)));
evalcond[2]=((((-1.0)*r02*x9398))+((r00*x9397))+(((-1.0)*x9395*x9396)));
evalcond[3]=((-1.0)+((x9391*x9395))+(((-1.0)*gconst2*r00*x9398))+(((-1.0)*r02*x9396)));
evalcond[4]=(((cj2*sj1))+((r20*x9397))+((cj1*sj2))+(((-1.0)*r22*x9398))+(((-1.0)*x9394*x9396)));
evalcond[5]=((((-1.0)*r12*x9398))+((r10*x9397))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9393*x9396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9399=((-1.0)*r20);
IkReal x9400=x8886;
CheckValue<IkReal> x9402 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9399),IKFAST_ATAN2_MAGTHRESH);
if(!x9402.valid){
continue;
}
IkReal x9401=((-1.0)*(x9402.value));
sj5=gconst1;
cj5=gconst2;
j5=x9401;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9401;
IkReal gconst1=(r21*x9400);
IkReal gconst2=(x9399*x9400);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9403=((-1.0)*r20);
IkReal x9404=x8886;
CheckValue<IkReal> x9406 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9403),IKFAST_ATAN2_MAGTHRESH);
if(!x9406.valid){
continue;
}
IkReal x9405=((-1.0)*(x9406.value));
sj5=gconst1;
cj5=gconst2;
j5=x9405;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9405;
IkReal gconst1=(r21*x9404);
IkReal gconst2=(x9403*x9404);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9407=((-1.0)*r20);
IkReal x9408=x8886;
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9407),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
IkReal x9409=((-1.0)*(x9410.value));
sj5=gconst1;
cj5=gconst2;
j5=x9409;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9409;
IkReal gconst1=(r21*x9408);
IkReal gconst2=(x9407*x9408);
IkReal x9411=r22*r22;
IkReal x9412=(cj1*r02*sj2);
IkReal x9413=(cj2*r02*sj1);
CheckValue<IkReal> x9417=IKPowWithIntegerCheck(((-1.0)+x9411),-1);
if(!x9417.valid){
continue;
}
IkReal x9414=x9417.value;
if((((1.0)+(((-1.0)*x9411)))) < -0.00001)
continue;
IkReal x9415=IKsqrt(((1.0)+(((-1.0)*x9411))));
IkReal x9416=((1.0)*r22*x9414*x9415);
j4eval[0]=((IKabs(((((-1.0)*x9412*x9416))+(((-1.0)*x9413*x9416)))))+(IKabs((x9412+x9413))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9418=(cj2*sj1);
IkReal x9419=(cj1*sj2);
IkReal x9420=(gconst2*r00);
IkReal x9421=((1.0)*gconst1*r01);
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal((((x9419*x9420))+((x9418*x9420))+(((-1.0)*x9419*x9421))+(((-1.0)*x9418*x9421)))),IkReal((((r02*x9418))+((r02*x9419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9422.value)+(((1.5707963267949)*(x9423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9424=IKsin(j4);
IkReal x9425=IKcos(j4);
IkReal x9426=(gconst1*r11);
IkReal x9427=(gconst1*r21);
IkReal x9428=(gconst1*r01);
IkReal x9429=((1.0)*x9425);
IkReal x9430=(gconst2*x9425);
IkReal x9431=((1.0)*x9424);
evalcond[0]=(((x9424*x9427))+(((-1.0)*r22*x9429))+(((-1.0)*gconst2*r20*x9431)));
evalcond[1]=((((-1.0)*gconst2*r10*x9431))+((x9424*x9426))+(((-1.0)*r12*x9429)));
evalcond[2]=((((-1.0)*x9428*x9429))+(((-1.0)*r02*x9431))+((r00*x9430)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9431))+((x9424*x9428))+(((-1.0)*r02*x9429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9430))+(((-1.0)*r22*x9431))+(((-1.0)*x9427*x9429)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9426*x9429))+(((-1.0)*r12*x9431))+((cj1*cj2))+((r10*x9430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9432=(gconst1*r01);
IkReal x9433=(gconst2*r00);
CheckValue<IkReal> x9434=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9432*x9433))+(x9432*x9432)+(x9433*x9433)+(r02*r02))),-1);
if(!x9434.valid){
continue;
}
CheckValue<IkReal> x9435 = IKatan2WithCheck(IkReal(((((-1.0)*x9432))+x9433)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9434.value)))+(x9435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9436=IKsin(j4);
IkReal x9437=IKcos(j4);
IkReal x9438=(gconst1*r11);
IkReal x9439=(gconst1*r21);
IkReal x9440=(gconst1*r01);
IkReal x9441=((1.0)*x9437);
IkReal x9442=(gconst2*x9437);
IkReal x9443=((1.0)*x9436);
evalcond[0]=(((x9436*x9439))+(((-1.0)*gconst2*r20*x9443))+(((-1.0)*r22*x9441)));
evalcond[1]=(((x9436*x9438))+(((-1.0)*gconst2*r10*x9443))+(((-1.0)*r12*x9441)));
evalcond[2]=(((r00*x9442))+(((-1.0)*x9440*x9441))+(((-1.0)*r02*x9443)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9443))+((x9436*x9440))+(((-1.0)*r02*x9441)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9439*x9441))+((cj1*sj2))+(((-1.0)*r22*x9443))+((r20*x9442)));
evalcond[5]=(((r10*x9442))+(((-1.0)*sj1*sj2))+(((-1.0)*x9438*x9441))+((cj1*cj2))+(((-1.0)*r12*x9443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9444 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9444.valid){
continue;
}
CheckValue<IkReal> x9445=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9444.value)+(((1.5707963267949)*(x9445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9446=IKsin(j4);
IkReal x9447=IKcos(j4);
IkReal x9448=(gconst1*r11);
IkReal x9449=(gconst1*r21);
IkReal x9450=(gconst1*r01);
IkReal x9451=((1.0)*x9447);
IkReal x9452=(gconst2*x9447);
IkReal x9453=((1.0)*x9446);
evalcond[0]=(((x9446*x9449))+(((-1.0)*gconst2*r20*x9453))+(((-1.0)*r22*x9451)));
evalcond[1]=(((x9446*x9448))+(((-1.0)*gconst2*r10*x9453))+(((-1.0)*r12*x9451)));
evalcond[2]=((((-1.0)*x9450*x9451))+((r00*x9452))+(((-1.0)*r02*x9453)));
evalcond[3]=((1.0)+((x9446*x9450))+(((-1.0)*gconst2*r00*x9453))+(((-1.0)*r02*x9451)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9453))+((r20*x9452))+(((-1.0)*x9449*x9451)));
evalcond[5]=(((r10*x9452))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9453))+(((-1.0)*x9448*x9451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9454=((-1.0)*r20);
IkReal x9455=((-1.0)*px);
CheckValue<IkReal> x9457 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9454),IKFAST_ATAN2_MAGTHRESH);
if(!x9457.valid){
continue;
}
IkReal x9456=((-1.0)*(x9457.value));
sj5=gconst1;
cj5=gconst2;
j5=x9456;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9455);
rxp1_1=(px*r21);
rxp1_2=(r11*x9455);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9456;
IkReal gconst1=r21;
IkReal gconst2=x9454;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9458=((-1.0)*r20);
IkReal x9459=((-1.0)*px);
CheckValue<IkReal> x9461 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9458),IKFAST_ATAN2_MAGTHRESH);
if(!x9461.valid){
continue;
}
IkReal x9460=((-1.0)*(x9461.value));
sj5=gconst1;
cj5=gconst2;
j5=x9460;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9459);
rxp1_1=(px*r21);
rxp1_2=(r11*x9459);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9460;
IkReal gconst1=r21;
IkReal gconst2=x9458;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9462=((-1.0)*r20);
IkReal x9463=((-1.0)*px);
CheckValue<IkReal> x9465 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9462),IKFAST_ATAN2_MAGTHRESH);
if(!x9465.valid){
continue;
}
IkReal x9464=((-1.0)*(x9465.value));
sj5=gconst1;
cj5=gconst2;
j5=x9464;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9463);
rxp1_1=(px*r21);
rxp1_2=(r11*x9463);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9464;
IkReal gconst1=r21;
IkReal gconst2=x9462;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9468=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9468.valid){
continue;
}
IkReal x9466=x9468.value;
IkReal x9467=(sj0*x9466);
cj4array[0]=(((cj1*cj2*x9467))+(((-1.0)*sj1*sj2*x9467)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9469=IKsin(j4);
IkReal x9470=IKcos(j4);
IkReal x9471=(gconst1*x9469);
IkReal x9472=((1.0)*x9470);
IkReal x9473=((1.0)*gconst2*x9469);
evalcond[0]=((-1.0)*r02*x9469);
evalcond[1]=((((-1.0)*r02*x9472))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9471))+(((-1.0)*r20*x9473)));
evalcond[3]=((((-1.0)*r10*x9473))+((r11*x9471)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9470))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9476=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9476.valid){
continue;
}
IkReal x9474=x9476.value;
IkReal x9475=((1.0)*x9474);
cj4array[0]=((((-1.0)*cj2*sj1*x9475))+(((-1.0)*cj1*sj2*x9475)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9477=IKsin(j4);
IkReal x9478=IKcos(j4);
IkReal x9479=(gconst2*r10);
IkReal x9480=((1.0)*sj0);
IkReal x9481=(gconst1*r11);
IkReal x9482=((1.0)*x9477);
IkReal x9483=((1.0)*x9478);
evalcond[0]=((-1.0)*r02*x9477);
evalcond[1]=((((-1.0)*r02*x9483))+(((-1.0)*x9480)));
evalcond[2]=(((gconst1*r21*x9477))+(((-1.0)*gconst2*r20*x9482)));
evalcond[3]=(((x9477*x9481))+(((-1.0)*x9479*x9482)));
evalcond[4]=(((x9478*x9479))+(((-1.0)*x9481*x9483))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9484=IKPowWithIntegerCheck(r02,-1);
if(!x9484.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9484.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9485=IKsin(j4);
IkReal x9486=IKcos(j4);
IkReal x9487=(gconst2*r10);
IkReal x9488=(gconst1*r11);
IkReal x9489=(gconst1*r21);
IkReal x9490=(gconst2*r20);
IkReal x9491=((1.0)*x9485);
IkReal x9492=((1.0)*x9486);
evalcond[0]=((-1.0)*r02*x9485);
evalcond[1]=(((x9485*x9489))+(((-1.0)*x9490*x9491)));
evalcond[2]=(((x9485*x9488))+(((-1.0)*x9487*x9491)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9489*x9492))+((x9486*x9490)));
evalcond[4]=(((x9486*x9487))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9488*x9492))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9493=(cj2*sj1);
IkReal x9494=(cj1*sj2);
IkReal x9495=(gconst1*r21);
IkReal x9496=((1.0)*gconst2*r20);
CheckValue<IkReal> x9497=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst2*gconst2)*(r20*r20)))+(x9495*x9495)+(((-2.0)*gconst2*r20*x9495)))),-1);
if(!x9497.valid){
continue;
}
CheckValue<IkReal> x9498 = IKatan2WithCheck(IkReal((((r22*x9493))+((r22*x9494)))),IkReal(((((-1.0)*x9493*x9496))+((x9493*x9495))+(((-1.0)*x9494*x9496))+((x9494*x9495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9497.value)))+(x9498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9499=IKsin(j4);
IkReal x9500=IKcos(j4);
IkReal x9501=(gconst1*r11);
IkReal x9502=(sj1*sj2);
IkReal x9503=(gconst1*r21);
IkReal x9504=(gconst1*r01);
IkReal x9505=((1.0)*x9500);
IkReal x9506=(gconst2*x9500);
IkReal x9507=((1.0)*cj1*cj2);
IkReal x9508=((1.0)*x9499);
evalcond[0]=((((-1.0)*r22*x9505))+(((-1.0)*gconst2*r20*x9508))+((x9499*x9503)));
evalcond[1]=(cj0+(((-1.0)*r12*x9505))+(((-1.0)*gconst2*r10*x9508))+((x9499*x9501)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9508))+(((-1.0)*r02*x9505))+((x9499*x9504)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9508))+((r20*x9506))+(((-1.0)*x9503*x9505)));
evalcond[4]=((((-1.0)*x9504*x9505))+((cj0*x9502))+(((-1.0)*cj0*x9507))+(((-1.0)*r02*x9508))+((r00*x9506)));
evalcond[5]=(((r10*x9506))+(((-1.0)*r12*x9508))+(((-1.0)*sj0*x9507))+((sj0*x9502))+(((-1.0)*x9501*x9505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9509=((1.0)*gconst2);
CheckValue<IkReal> x9510 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9509))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9510.valid){
continue;
}
CheckValue<IkReal> x9511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9509))+(((-1.0)*gconst1*r10)))),-1);
if(!x9511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9510.value)+(((1.5707963267949)*(x9511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9512=IKsin(j4);
IkReal x9513=IKcos(j4);
IkReal x9514=(gconst1*r11);
IkReal x9515=(sj1*sj2);
IkReal x9516=(gconst1*r21);
IkReal x9517=(gconst1*r01);
IkReal x9518=((1.0)*x9513);
IkReal x9519=(gconst2*x9513);
IkReal x9520=((1.0)*cj1*cj2);
IkReal x9521=((1.0)*x9512);
evalcond[0]=(((x9512*x9516))+(((-1.0)*r22*x9518))+(((-1.0)*gconst2*r20*x9521)));
evalcond[1]=((((-1.0)*gconst2*r10*x9521))+cj0+((x9512*x9514))+(((-1.0)*r12*x9518)));
evalcond[2]=((((-1.0)*r02*x9518))+(((-1.0)*sj0))+((x9512*x9517))+(((-1.0)*gconst2*r00*x9521)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9516*x9518))+((cj1*sj2))+(((-1.0)*r22*x9521))+((r20*x9519)));
evalcond[4]=((((-1.0)*x9517*x9518))+(((-1.0)*cj0*x9520))+((r00*x9519))+((cj0*x9515))+(((-1.0)*r02*x9521)));
evalcond[5]=((((-1.0)*x9514*x9518))+(((-1.0)*r12*x9521))+((sj0*x9515))+(((-1.0)*sj0*x9520))+((r10*x9519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9522=((1.0)*gconst2);
CheckValue<IkReal> x9523 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9522))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9523.valid){
continue;
}
CheckValue<IkReal> x9524=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9522))+(((-1.0)*gconst1*r00)))),-1);
if(!x9524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9523.value)+(((1.5707963267949)*(x9524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9525=IKsin(j4);
IkReal x9526=IKcos(j4);
IkReal x9527=(gconst1*r11);
IkReal x9528=(sj1*sj2);
IkReal x9529=(gconst1*r21);
IkReal x9530=(gconst1*r01);
IkReal x9531=((1.0)*x9526);
IkReal x9532=(gconst2*x9526);
IkReal x9533=((1.0)*cj1*cj2);
IkReal x9534=((1.0)*x9525);
evalcond[0]=((((-1.0)*r22*x9531))+((x9525*x9529))+(((-1.0)*gconst2*r20*x9534)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9534))+((x9525*x9527))+(((-1.0)*r12*x9531)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9534))+(((-1.0)*r02*x9531))+((x9525*x9530)));
evalcond[3]=(((cj2*sj1))+((r20*x9532))+(((-1.0)*r22*x9534))+((cj1*sj2))+(((-1.0)*x9529*x9531)));
evalcond[4]=((((-1.0)*cj0*x9533))+((cj0*x9528))+(((-1.0)*r02*x9534))+(((-1.0)*x9530*x9531))+((r00*x9532)));
evalcond[5]=(((sj0*x9528))+((r10*x9532))+(((-1.0)*x9527*x9531))+(((-1.0)*sj0*x9533))+(((-1.0)*r12*x9534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9535=((-1.0)*r20);
IkReal x9536=x8886;
CheckValue<IkReal> x9538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9535),IKFAST_ATAN2_MAGTHRESH);
if(!x9538.valid){
continue;
}
IkReal x9537=((-1.0)*(x9538.value));
sj5=gconst1;
cj5=gconst2;
j5=x9537;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9537;
IkReal gconst1=(r21*x9536);
IkReal gconst2=(x9535*x9536);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9539=((-1.0)*r20);
IkReal x9540=x8886;
CheckValue<IkReal> x9542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9539),IKFAST_ATAN2_MAGTHRESH);
if(!x9542.valid){
continue;
}
IkReal x9541=((-1.0)*(x9542.value));
sj5=gconst1;
cj5=gconst2;
j5=x9541;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9541;
IkReal gconst1=(r21*x9540);
IkReal gconst2=(x9539*x9540);
CheckValue<IkReal> x9550=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9550.valid){
continue;
}
IkReal x9543=x9550.value;
IkReal x9544=(sj3*x9543);
IkReal x9545=(r11*x9544);
IkReal x9546=(r00*x9544);
IkReal x9547=(r01*x9544);
IkReal x9548=(r10*x9544);
IkReal x9549=(r20*r21*x9544);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9545))+((r10*r20*r21*x9547))+((r10*x9546*(r20*r20)))+((r01*x9545*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9551=gconst2*gconst2;
IkReal x9552=gconst1*gconst1;
IkReal x9553=((1.0)*cj3);
IkReal x9554=((1.0)*sj3);
IkReal x9555=(r11*sj3);
IkReal x9556=(r10*sj3);
IkReal x9557=(gconst1*gconst2*r00);
IkReal x9558=(gconst1*gconst2*r01);
IkReal x9559=(r00*x9551);
IkReal x9560=(r01*x9552);
CheckValue<IkReal> x9561 = IKatan2WithCheck(IkReal((((gconst1*r02*x9556))+((gconst2*r02*x9555)))),IkReal(((((-1.0)*r10*x9554*x9557))+((x9555*x9558))+(((-1.0)*r11*x9554*x9559))+((x9556*x9560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9561.valid){
continue;
}
CheckValue<IkReal> x9562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9553*x9560))+(((-1.0)*r10*x9553*x9559))+(((-1.0)*r02*r12*x9553))+((cj3*r11*x9557))+((cj3*r10*x9558)))),-1);
if(!x9562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9561.value)+(((1.5707963267949)*(x9562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9563=IKsin(j4);
IkReal x9564=IKcos(j4);
IkReal x9565=(sj1*sj2);
IkReal x9566=(gconst1*sj3);
IkReal x9567=(cj3*gconst1);
IkReal x9568=(cj3*gconst2);
IkReal x9569=((1.0)*cj2);
IkReal x9570=(cj1*sj2);
IkReal x9571=(gconst2*sj3);
IkReal x9572=(cj1*x9569);
IkReal x9573=((1.0)*x9564);
IkReal x9574=((1.0)*x9563);
IkReal x9575=(gconst1*x9563);
IkReal x9576=(cj3*x9563);
IkReal x9577=(x9564*x9571);
evalcond[0]=((((-1.0)*gconst2*r20*x9574))+((r21*x9575))+(((-1.0)*r22*x9573)));
evalcond[1]=((((-1.0)*r02*x9573))+((r01*x9575))+(((-1.0)*gconst2*r00*x9574)));
evalcond[2]=((1.0)+((r11*x9575))+(((-1.0)*r12*x9573))+(((-1.0)*gconst2*r10*x9574)));
evalcond[3]=((((-1.0)*r10*x9568*x9573))+((r11*x9564*x9567))+((r11*x9571))+((r12*x9576))+((r10*x9566)));
evalcond[4]=((((-1.0)*r11*x9566*x9573))+((r11*x9568))+((r10*x9567))+(((-1.0)*r12*sj3*x9574))+((r10*x9577)));
evalcond[5]=(((cj2*sj1))+((r21*x9571))+((r22*x9576))+x9570+(((-1.0)*r20*x9568*x9573))+((r21*x9564*x9567))+((r20*x9566)));
evalcond[6]=(((r01*x9564*x9567))+((r00*x9566))+(((-1.0)*x9572))+(((-1.0)*r00*x9568*x9573))+((r01*x9571))+x9565+((r02*x9576)));
evalcond[7]=(((r21*x9568))+(((-1.0)*x9572))+(((-1.0)*r22*sj3*x9574))+x9565+(((-1.0)*r21*x9566*x9573))+((r20*x9577))+((r20*x9567)));
evalcond[8]=((((-1.0)*r02*sj3*x9574))+((r01*x9568))+((r00*x9567))+(((-1.0)*x9570))+((r00*x9577))+(((-1.0)*r01*x9566*x9573))+(((-1.0)*sj1*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9578=gconst2*gconst2;
IkReal x9579=gconst1*gconst1;
IkReal x9580=(gconst2*r11);
IkReal x9581=(cj3*r02);
IkReal x9582=(gconst1*r01);
IkReal x9583=(cj3*r10);
IkReal x9584=(r10*sj3);
IkReal x9585=((1.0)*gconst1*r00);
IkReal x9586=(r01*x9579);
IkReal x9587=(r00*x9578);
CheckValue<IkReal> x9588 = IKatan2WithCheck(IkReal((((x9580*x9581))+((gconst1*r10*x9581)))),IkReal((((x9583*x9586))+(((-1.0)*gconst2*x9583*x9585))+(((-1.0)*cj3*r11*x9587))+((cj3*x9580*x9582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9588.valid){
continue;
}
CheckValue<IkReal> x9589=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9582*x9584))+((x9584*x9587))+(((-1.0)*sj3*x9580*x9585))+((r11*sj3*x9586)))),-1);
if(!x9589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9588.value)+(((1.5707963267949)*(x9589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9590=IKsin(j4);
IkReal x9591=IKcos(j4);
IkReal x9592=(sj1*sj2);
IkReal x9593=(gconst1*sj3);
IkReal x9594=(cj3*gconst1);
IkReal x9595=(cj3*gconst2);
IkReal x9596=((1.0)*cj2);
IkReal x9597=(cj1*sj2);
IkReal x9598=(gconst2*sj3);
IkReal x9599=(cj1*x9596);
IkReal x9600=((1.0)*x9591);
IkReal x9601=((1.0)*x9590);
IkReal x9602=(gconst1*x9590);
IkReal x9603=(cj3*x9590);
IkReal x9604=(x9591*x9598);
evalcond[0]=((((-1.0)*r22*x9600))+((r21*x9602))+(((-1.0)*gconst2*r20*x9601)));
evalcond[1]=(((r01*x9602))+(((-1.0)*r02*x9600))+(((-1.0)*gconst2*r00*x9601)));
evalcond[2]=((1.0)+((r11*x9602))+(((-1.0)*r12*x9600))+(((-1.0)*gconst2*r10*x9601)));
evalcond[3]=(((r11*x9598))+(((-1.0)*r10*x9595*x9600))+((r12*x9603))+((r10*x9593))+((r11*x9591*x9594)));
evalcond[4]=(((r11*x9595))+(((-1.0)*r11*x9593*x9600))+((r10*x9604))+(((-1.0)*r12*sj3*x9601))+((r10*x9594)));
evalcond[5]=(((r20*x9593))+((cj2*sj1))+(((-1.0)*r20*x9595*x9600))+x9597+((r21*x9598))+((r21*x9591*x9594))+((r22*x9603)));
evalcond[6]=((((-1.0)*r00*x9595*x9600))+((r01*x9598))+((r00*x9593))+((r01*x9591*x9594))+(((-1.0)*x9599))+x9592+((r02*x9603)));
evalcond[7]=(((r20*x9594))+(((-1.0)*r21*x9593*x9600))+((r20*x9604))+(((-1.0)*x9599))+x9592+((r21*x9595))+(((-1.0)*r22*sj3*x9601)));
evalcond[8]=((((-1.0)*sj1*x9596))+(((-1.0)*r02*sj3*x9601))+((r01*x9595))+(((-1.0)*r01*x9593*x9600))+((r00*x9604))+((r00*x9594))+(((-1.0)*x9597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9605=((1.0)*gconst2);
CheckValue<IkReal> x9606 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9605))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9606.valid){
continue;
}
CheckValue<IkReal> x9607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9605))+(((-1.0)*gconst1*r00)))),-1);
if(!x9607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9606.value)+(((1.5707963267949)*(x9607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9608=IKsin(j4);
IkReal x9609=IKcos(j4);
IkReal x9610=(sj1*sj2);
IkReal x9611=(gconst1*sj3);
IkReal x9612=(cj3*gconst1);
IkReal x9613=(cj3*gconst2);
IkReal x9614=((1.0)*cj2);
IkReal x9615=(cj1*sj2);
IkReal x9616=(gconst2*sj3);
IkReal x9617=(cj1*x9614);
IkReal x9618=((1.0)*x9609);
IkReal x9619=((1.0)*x9608);
IkReal x9620=(gconst1*x9608);
IkReal x9621=(cj3*x9608);
IkReal x9622=(x9609*x9616);
evalcond[0]=((((-1.0)*r22*x9618))+((r21*x9620))+(((-1.0)*gconst2*r20*x9619)));
evalcond[1]=(((r01*x9620))+(((-1.0)*r02*x9618))+(((-1.0)*gconst2*r00*x9619)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9619))+(((-1.0)*r12*x9618))+((r11*x9620)));
evalcond[3]=(((r11*x9609*x9612))+((r10*x9611))+((r12*x9621))+((r11*x9616))+(((-1.0)*r10*x9613*x9618)));
evalcond[4]=(((r10*x9622))+((r10*x9612))+(((-1.0)*r12*sj3*x9619))+((r11*x9613))+(((-1.0)*r11*x9611*x9618)));
evalcond[5]=(((cj2*sj1))+((r20*x9611))+((r21*x9609*x9612))+((r21*x9616))+((r22*x9621))+x9615+(((-1.0)*r20*x9613*x9618)));
evalcond[6]=((((-1.0)*r00*x9613*x9618))+((r00*x9611))+((r01*x9616))+((r02*x9621))+x9610+((r01*x9609*x9612))+(((-1.0)*x9617)));
evalcond[7]=(((r20*x9612))+((r20*x9622))+((r21*x9613))+(((-1.0)*r22*sj3*x9619))+x9610+(((-1.0)*x9617))+(((-1.0)*r21*x9611*x9618)));
evalcond[8]=((((-1.0)*r01*x9611*x9618))+((r00*x9622))+((r00*x9612))+((r01*x9613))+(((-1.0)*x9615))+(((-1.0)*r02*sj3*x9619))+(((-1.0)*sj1*x9614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9623=((-1.0)*r20);
IkReal x9624=x8886;
CheckValue<IkReal> x9626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9623),IKFAST_ATAN2_MAGTHRESH);
if(!x9626.valid){
continue;
}
IkReal x9625=((-1.0)*(x9626.value));
sj5=gconst1;
cj5=gconst2;
j5=x9625;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9625;
IkReal gconst1=(r21*x9624);
IkReal gconst2=(x9623*x9624);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9627=((-1.0)*r20);
IkReal x9628=x8886;
CheckValue<IkReal> x9630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9627),IKFAST_ATAN2_MAGTHRESH);
if(!x9630.valid){
continue;
}
IkReal x9629=((-1.0)*(x9630.value));
sj5=gconst1;
cj5=gconst2;
j5=x9629;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9629;
IkReal gconst1=(r21*x9628);
IkReal gconst2=(x9627*x9628);
CheckValue<IkReal> x9638=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9638.valid){
continue;
}
IkReal x9631=x9638.value;
IkReal x9632=(sj3*x9631);
IkReal x9633=(r11*x9632);
IkReal x9634=(r00*x9632);
IkReal x9635=(r01*x9632);
IkReal x9636=(r10*x9632);
IkReal x9637=(r20*r21*x9632);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9634*(r20*r20)))+((r00*r20*r21*x9633))+((r10*r20*r21*x9635))+((r01*x9633*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9639=gconst2*gconst2;
IkReal x9640=gconst1*gconst1;
IkReal x9641=((1.0)*cj3);
IkReal x9642=((1.0)*sj3);
IkReal x9643=(r11*sj3);
IkReal x9644=(r10*sj3);
IkReal x9645=(gconst1*gconst2*r00);
IkReal x9646=(gconst1*gconst2*r01);
IkReal x9647=(r00*x9639);
IkReal x9648=(r01*x9640);
CheckValue<IkReal> x9649=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9646))+(((-1.0)*r11*x9641*x9648))+(((-1.0)*r02*r12*x9641))+(((-1.0)*r10*x9641*x9647))+((cj3*r11*x9645)))),-1);
if(!x9649.valid){
continue;
}
CheckValue<IkReal> x9650 = IKatan2WithCheck(IkReal((((gconst1*r02*x9644))+((gconst2*r02*x9643)))),IkReal((((x9643*x9646))+((x9644*x9648))+(((-1.0)*r11*x9642*x9647))+(((-1.0)*r10*x9642*x9645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9649.value)))+(x9650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9651=IKsin(j4);
IkReal x9652=IKcos(j4);
IkReal x9653=(cj2*sj1);
IkReal x9654=(cj1*sj2);
IkReal x9655=(gconst1*sj3);
IkReal x9656=(cj3*gconst1);
IkReal x9657=(sj1*sj2);
IkReal x9658=(cj3*gconst2);
IkReal x9659=(cj1*cj2);
IkReal x9660=(gconst2*sj3);
IkReal x9661=((1.0)*x9652);
IkReal x9662=((1.0)*x9651);
IkReal x9663=(gconst1*x9651);
IkReal x9664=(cj3*x9651);
IkReal x9665=(x9653+x9654);
IkReal x9666=(x9652*x9660);
evalcond[0]=((((-1.0)*gconst2*r20*x9662))+((r21*x9663))+(((-1.0)*r22*x9661)));
evalcond[1]=(((r01*x9663))+(((-1.0)*gconst2*r00*x9662))+(((-1.0)*r02*x9661)));
evalcond[2]=((-1.0)+((r11*x9663))+(((-1.0)*r12*x9661))+(((-1.0)*gconst2*r10*x9662)));
evalcond[3]=(((r11*x9660))+((r12*x9664))+((r10*x9655))+(((-1.0)*r10*x9658*x9661))+((r11*x9652*x9656)));
evalcond[4]=(((r11*x9658))+(((-1.0)*r11*x9655*x9661))+((r10*x9666))+((r10*x9656))+(((-1.0)*r12*sj3*x9662)));
evalcond[5]=((((-1.0)*r20*x9658*x9661))+((r21*x9660))+((r20*x9655))+x9665+((r22*x9664))+((r21*x9652*x9656)));
evalcond[6]=((((-1.0)*r00*x9658*x9661))+((r00*x9655))+x9659+((r01*x9660))+((r01*x9652*x9656))+(((-1.0)*x9657))+((r02*x9664)));
evalcond[7]=((((-1.0)*r02*sj3*x9662))+((r00*x9666))+((r01*x9658))+((r00*x9656))+x9665+(((-1.0)*r01*x9655*x9661)));
evalcond[8]=(((r21*x9658))+((r20*x9656))+((r20*x9666))+x9657+(((-1.0)*r21*x9655*x9661))+(((-1.0)*x9659))+(((-1.0)*r22*sj3*x9662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9667=gconst2*gconst2;
IkReal x9668=gconst1*gconst1;
IkReal x9669=(gconst2*r11);
IkReal x9670=(cj3*r02);
IkReal x9671=(gconst1*r01);
IkReal x9672=(cj3*r10);
IkReal x9673=(r10*sj3);
IkReal x9674=((1.0)*gconst1*r00);
IkReal x9675=(r01*x9668);
IkReal x9676=(r00*x9667);
CheckValue<IkReal> x9677=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9673*x9676))+((r11*sj3*x9675))+(((-1.0)*gconst2*x9671*x9673))+(((-1.0)*sj3*x9669*x9674)))),-1);
if(!x9677.valid){
continue;
}
CheckValue<IkReal> x9678 = IKatan2WithCheck(IkReal((((gconst1*r10*x9670))+((x9669*x9670)))),IkReal(((((-1.0)*cj3*r11*x9676))+((cj3*x9669*x9671))+((x9672*x9675))+(((-1.0)*gconst2*x9672*x9674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9677.value)))+(x9678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9679=IKsin(j4);
IkReal x9680=IKcos(j4);
IkReal x9681=(cj2*sj1);
IkReal x9682=(cj1*sj2);
IkReal x9683=(gconst1*sj3);
IkReal x9684=(cj3*gconst1);
IkReal x9685=(sj1*sj2);
IkReal x9686=(cj3*gconst2);
IkReal x9687=(cj1*cj2);
IkReal x9688=(gconst2*sj3);
IkReal x9689=((1.0)*x9680);
IkReal x9690=((1.0)*x9679);
IkReal x9691=(gconst1*x9679);
IkReal x9692=(cj3*x9679);
IkReal x9693=(x9681+x9682);
IkReal x9694=(x9680*x9688);
evalcond[0]=((((-1.0)*r22*x9689))+((r21*x9691))+(((-1.0)*gconst2*r20*x9690)));
evalcond[1]=((((-1.0)*gconst2*r00*x9690))+(((-1.0)*r02*x9689))+((r01*x9691)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9690))+(((-1.0)*r12*x9689))+((r11*x9691)));
evalcond[3]=((((-1.0)*r10*x9686*x9689))+((r11*x9680*x9684))+((r12*x9692))+((r11*x9688))+((r10*x9683)));
evalcond[4]=((((-1.0)*r11*x9683*x9689))+((r10*x9694))+((r11*x9686))+(((-1.0)*r12*sj3*x9690))+((r10*x9684)));
evalcond[5]=(((r21*x9680*x9684))+((r22*x9692))+((r21*x9688))+x9693+(((-1.0)*r20*x9686*x9689))+((r20*x9683)));
evalcond[6]=(((r01*x9680*x9684))+(((-1.0)*x9685))+((r02*x9692))+x9687+((r01*x9688))+(((-1.0)*r00*x9686*x9689))+((r00*x9683)));
evalcond[7]=((((-1.0)*r01*x9683*x9689))+(((-1.0)*r02*sj3*x9690))+x9693+((r01*x9686))+((r00*x9694))+((r00*x9684)));
evalcond[8]=((((-1.0)*x9687))+(((-1.0)*r21*x9683*x9689))+(((-1.0)*r22*sj3*x9690))+((r21*x9686))+x9685+((r20*x9684))+((r20*x9694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9695 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9695.valid){
continue;
}
CheckValue<IkReal> x9696=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9695.value)+(((1.5707963267949)*(x9696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9697=IKsin(j4);
IkReal x9698=IKcos(j4);
IkReal x9699=(cj2*sj1);
IkReal x9700=(cj1*sj2);
IkReal x9701=(gconst1*sj3);
IkReal x9702=(cj3*gconst1);
IkReal x9703=(sj1*sj2);
IkReal x9704=(cj3*gconst2);
IkReal x9705=(cj1*cj2);
IkReal x9706=(gconst2*sj3);
IkReal x9707=((1.0)*x9698);
IkReal x9708=((1.0)*x9697);
IkReal x9709=(gconst1*x9697);
IkReal x9710=(cj3*x9697);
IkReal x9711=(x9700+x9699);
IkReal x9712=(x9698*x9706);
evalcond[0]=((((-1.0)*r22*x9707))+((r21*x9709))+(((-1.0)*gconst2*r20*x9708)));
evalcond[1]=((((-1.0)*r02*x9707))+((r01*x9709))+(((-1.0)*gconst2*r00*x9708)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9708))+((r11*x9709))+(((-1.0)*r12*x9707)));
evalcond[3]=(((r10*x9701))+((r12*x9710))+((r11*x9698*x9702))+((r11*x9706))+(((-1.0)*r10*x9704*x9707)));
evalcond[4]=((((-1.0)*r11*x9701*x9707))+((r10*x9702))+(((-1.0)*r12*sj3*x9708))+((r11*x9704))+((r10*x9712)));
evalcond[5]=(((r22*x9710))+((r20*x9701))+((r21*x9706))+x9711+((r21*x9698*x9702))+(((-1.0)*r20*x9704*x9707)));
evalcond[6]=((((-1.0)*x9703))+((r02*x9710))+((r01*x9706))+((r00*x9701))+x9705+(((-1.0)*r00*x9704*x9707))+((r01*x9698*x9702)));
evalcond[7]=(((r01*x9704))+((r00*x9702))+x9711+(((-1.0)*r02*sj3*x9708))+((r00*x9712))+(((-1.0)*r01*x9701*x9707)));
evalcond[8]=((((-1.0)*x9705))+(((-1.0)*r21*x9701*x9707))+((r20*x9702))+((r21*x9704))+x9703+(((-1.0)*r22*sj3*x9708))+((r20*x9712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9713=((-1.0)*r20);
IkReal x9714=x8886;
CheckValue<IkReal> x9716 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9713),IKFAST_ATAN2_MAGTHRESH);
if(!x9716.valid){
continue;
}
IkReal x9715=((-1.0)*(x9716.value));
sj5=gconst1;
cj5=gconst2;
j5=x9715;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9715;
IkReal gconst1=(r21*x9714);
IkReal gconst2=(x9713*x9714);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9717=((-1.0)*r20);
IkReal x9718=x8886;
CheckValue<IkReal> x9720 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9717),IKFAST_ATAN2_MAGTHRESH);
if(!x9720.valid){
continue;
}
IkReal x9719=((-1.0)*(x9720.value));
sj5=gconst1;
cj5=gconst2;
j5=x9719;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9719;
IkReal gconst1=(r21*x9718);
IkReal gconst2=(x9717*x9718);
CheckValue<IkReal> x9728=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9728.valid){
continue;
}
IkReal x9721=x9728.value;
IkReal x9722=(sj3*x9721);
IkReal x9723=(r11*x9722);
IkReal x9724=(r00*x9722);
IkReal x9725=(r01*x9722);
IkReal x9726=(r10*x9722);
IkReal x9727=(r20*r21*x9722);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9723*(r21*r21)))+((r10*x9724*(r20*r20)))+((r10*r20*r21*x9725))+((r00*r20*r21*x9723))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9729=gconst1*gconst1;
IkReal x9730=gconst2*gconst2;
IkReal x9731=((1.0)*cj3);
IkReal x9732=(gconst2*r10);
IkReal x9733=(r01*sj3);
IkReal x9734=(gconst1*r00*sj3);
IkReal x9735=(gconst1*gconst2*r11);
IkReal x9736=(r10*x9730);
IkReal x9737=(r11*x9729);
CheckValue<IkReal> x9738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9731))+(((-1.0)*r01*x9731*x9737))+((cj3*gconst1*r01*x9732))+((cj3*r00*x9735))+(((-1.0)*r00*x9731*x9736)))),-1);
if(!x9738.valid){
continue;
}
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal((((gconst2*r12*x9733))+((r12*x9734)))),IkReal((((r00*sj3*x9737))+(((-1.0)*x9732*x9734))+(((-1.0)*x9733*x9736))+((x9733*x9735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9738.value)))+(x9739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9740=IKsin(j4);
IkReal x9741=IKcos(j4);
IkReal x9742=(sj1*sj2);
IkReal x9743=(gconst1*sj3);
IkReal x9744=(cj3*gconst1);
IkReal x9745=(cj3*gconst2);
IkReal x9746=((1.0)*cj2);
IkReal x9747=(cj1*sj2);
IkReal x9748=(gconst2*sj3);
IkReal x9749=(cj1*x9746);
IkReal x9750=((1.0)*x9741);
IkReal x9751=((1.0)*x9740);
IkReal x9752=(gconst1*x9740);
IkReal x9753=(cj3*x9740);
IkReal x9754=(x9741*x9748);
evalcond[0]=(((r21*x9752))+(((-1.0)*r22*x9750))+(((-1.0)*gconst2*r20*x9751)));
evalcond[1]=(((r11*x9752))+(((-1.0)*gconst2*r10*x9751))+(((-1.0)*r12*x9750)));
evalcond[2]=((-1.0)+((r01*x9752))+(((-1.0)*r02*x9750))+(((-1.0)*gconst2*r00*x9751)));
evalcond[3]=((((-1.0)*r00*x9745*x9750))+((r01*x9741*x9744))+((r02*x9753))+((r01*x9748))+((r00*x9743)));
evalcond[4]=(((r00*x9754))+(((-1.0)*r01*x9743*x9750))+((r01*x9745))+((r00*x9744))+(((-1.0)*r02*sj3*x9751)));
evalcond[5]=(((cj2*sj1))+((r21*x9741*x9744))+((r21*x9748))+(((-1.0)*r20*x9745*x9750))+((r22*x9753))+x9747+((r20*x9743)));
evalcond[6]=(((r11*x9748))+(((-1.0)*r10*x9745*x9750))+((r10*x9743))+x9742+((r11*x9741*x9744))+(((-1.0)*x9749))+((r12*x9753)));
evalcond[7]=(((r21*x9745))+x9742+(((-1.0)*r21*x9743*x9750))+((r20*x9744))+(((-1.0)*r22*sj3*x9751))+(((-1.0)*x9749))+((r20*x9754)));
evalcond[8]=(((r10*x9754))+((r11*x9745))+((r10*x9744))+(((-1.0)*r12*sj3*x9751))+(((-1.0)*x9747))+(((-1.0)*sj1*x9746))+(((-1.0)*r11*x9743*x9750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9755=gconst2*gconst2;
IkReal x9756=gconst1*gconst1;
IkReal x9757=(gconst1*r00);
IkReal x9758=(r11*sj3);
IkReal x9759=((1.0)*gconst2);
IkReal x9760=(cj3*r12);
IkReal x9761=(cj3*r11);
IkReal x9762=(gconst2*r01);
IkReal x9763=(cj3*r10);
IkReal x9764=(r10*sj3);
CheckValue<IkReal> x9765 = IKatan2WithCheck(IkReal((((x9757*x9760))+((x9760*x9762)))),IkReal((((gconst1*x9761*x9762))+(((-1.0)*x9757*x9759*x9763))+((r00*x9756*x9761))+(((-1.0)*r01*x9755*x9763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9765.valid){
continue;
}
CheckValue<IkReal> x9766=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9757*x9758*x9759))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9759*x9764))+((r00*x9755*x9764))+((r01*x9756*x9758)))),-1);
if(!x9766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9765.value)+(((1.5707963267949)*(x9766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9767=IKsin(j4);
IkReal x9768=IKcos(j4);
IkReal x9769=(sj1*sj2);
IkReal x9770=(gconst1*sj3);
IkReal x9771=(cj3*gconst1);
IkReal x9772=(cj3*gconst2);
IkReal x9773=((1.0)*cj2);
IkReal x9774=(cj1*sj2);
IkReal x9775=(gconst2*sj3);
IkReal x9776=(cj1*x9773);
IkReal x9777=((1.0)*x9768);
IkReal x9778=((1.0)*x9767);
IkReal x9779=(gconst1*x9767);
IkReal x9780=(cj3*x9767);
IkReal x9781=(x9768*x9775);
evalcond[0]=((((-1.0)*r22*x9777))+(((-1.0)*gconst2*r20*x9778))+((r21*x9779)));
evalcond[1]=((((-1.0)*gconst2*r10*x9778))+(((-1.0)*r12*x9777))+((r11*x9779)));
evalcond[2]=((-1.0)+((r01*x9779))+(((-1.0)*gconst2*r00*x9778))+(((-1.0)*r02*x9777)));
evalcond[3]=(((r01*x9768*x9771))+((r01*x9775))+(((-1.0)*r00*x9772*x9777))+((r00*x9770))+((r02*x9780)));
evalcond[4]=(((r00*x9781))+(((-1.0)*r01*x9770*x9777))+((r01*x9772))+((r00*x9771))+(((-1.0)*r02*sj3*x9778)));
evalcond[5]=(((cj2*sj1))+((r21*x9768*x9771))+((r22*x9780))+(((-1.0)*r20*x9772*x9777))+x9774+((r21*x9775))+((r20*x9770)));
evalcond[6]=(((r11*x9768*x9771))+((r10*x9770))+x9769+(((-1.0)*r10*x9772*x9777))+((r12*x9780))+(((-1.0)*x9776))+((r11*x9775)));
evalcond[7]=(x9769+(((-1.0)*r21*x9770*x9777))+((r21*x9772))+((r20*x9771))+((r20*x9781))+(((-1.0)*x9776))+(((-1.0)*r22*sj3*x9778)));
evalcond[8]=((((-1.0)*r11*x9770*x9777))+((r10*x9771))+(((-1.0)*x9774))+((r10*x9781))+(((-1.0)*r12*sj3*x9778))+(((-1.0)*sj1*x9773))+((r11*x9772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9782=((1.0)*gconst2);
CheckValue<IkReal> x9783 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9782))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9783.valid){
continue;
}
CheckValue<IkReal> x9784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9782))+(((-1.0)*gconst1*r10)))),-1);
if(!x9784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9783.value)+(((1.5707963267949)*(x9784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9785=IKsin(j4);
IkReal x9786=IKcos(j4);
IkReal x9787=(sj1*sj2);
IkReal x9788=(gconst1*sj3);
IkReal x9789=(cj3*gconst1);
IkReal x9790=(cj3*gconst2);
IkReal x9791=((1.0)*cj2);
IkReal x9792=(cj1*sj2);
IkReal x9793=(gconst2*sj3);
IkReal x9794=(cj1*x9791);
IkReal x9795=((1.0)*x9786);
IkReal x9796=((1.0)*x9785);
IkReal x9797=(gconst1*x9785);
IkReal x9798=(cj3*x9785);
IkReal x9799=(x9786*x9793);
evalcond[0]=(((r21*x9797))+(((-1.0)*gconst2*r20*x9796))+(((-1.0)*r22*x9795)));
evalcond[1]=(((r11*x9797))+(((-1.0)*gconst2*r10*x9796))+(((-1.0)*r12*x9795)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9795))+(((-1.0)*gconst2*r00*x9796))+((r01*x9797)));
evalcond[3]=(((r00*x9788))+((r02*x9798))+((r01*x9793))+((r01*x9786*x9789))+(((-1.0)*r00*x9790*x9795)));
evalcond[4]=(((r00*x9789))+(((-1.0)*r02*sj3*x9796))+((r00*x9799))+((r01*x9790))+(((-1.0)*r01*x9788*x9795)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9790*x9795))+x9792+((r21*x9786*x9789))+((r21*x9793))+((r20*x9788))+((r22*x9798)));
evalcond[6]=(((r11*x9793))+((r12*x9798))+(((-1.0)*x9794))+(((-1.0)*r10*x9790*x9795))+x9787+((r10*x9788))+((r11*x9786*x9789)));
evalcond[7]=(((r20*x9799))+(((-1.0)*x9794))+x9787+((r21*x9790))+((r20*x9789))+(((-1.0)*r21*x9788*x9795))+(((-1.0)*r22*sj3*x9796)));
evalcond[8]=((((-1.0)*sj1*x9791))+((r11*x9790))+((r10*x9799))+(((-1.0)*r12*sj3*x9796))+(((-1.0)*x9792))+(((-1.0)*r11*x9788*x9795))+((r10*x9789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9800=((-1.0)*r20);
IkReal x9801=x8886;
CheckValue<IkReal> x9803 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9800),IKFAST_ATAN2_MAGTHRESH);
if(!x9803.valid){
continue;
}
IkReal x9802=((-1.0)*(x9803.value));
sj5=gconst1;
cj5=gconst2;
j5=x9802;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9802;
IkReal gconst1=(r21*x9801);
IkReal gconst2=(x9800*x9801);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9804=((-1.0)*r20);
IkReal x9805=x8886;
CheckValue<IkReal> x9807 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9804),IKFAST_ATAN2_MAGTHRESH);
if(!x9807.valid){
continue;
}
IkReal x9806=((-1.0)*(x9807.value));
sj5=gconst1;
cj5=gconst2;
j5=x9806;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9806;
IkReal gconst1=(r21*x9805);
IkReal gconst2=(x9804*x9805);
CheckValue<IkReal> x9815=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9815.valid){
continue;
}
IkReal x9808=x9815.value;
IkReal x9809=(sj3*x9808);
IkReal x9810=(r11*x9809);
IkReal x9811=(r00*x9809);
IkReal x9812=(r01*x9809);
IkReal x9813=(r10*x9809);
IkReal x9814=(r20*r21*x9809);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9812))+((r00*r20*r21*x9810))+((r10*x9811*(r20*r20)))+((r01*x9810*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9816=gconst1*gconst1;
IkReal x9817=gconst2*gconst2;
IkReal x9818=((1.0)*cj3);
IkReal x9819=(gconst2*r10);
IkReal x9820=(r01*sj3);
IkReal x9821=(gconst1*r00*sj3);
IkReal x9822=(gconst1*gconst2*r11);
IkReal x9823=(r10*x9817);
IkReal x9824=(r11*x9816);
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal((((gconst2*r12*x9820))+((r12*x9821)))),IkReal((((r00*sj3*x9824))+(((-1.0)*x9819*x9821))+(((-1.0)*x9820*x9823))+((x9820*x9822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
CheckValue<IkReal> x9826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9818))+((cj3*gconst1*r01*x9819))+((cj3*r00*x9822))+(((-1.0)*r00*x9818*x9823))+(((-1.0)*r01*x9818*x9824)))),-1);
if(!x9826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9825.value)+(((1.5707963267949)*(x9826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9827=IKsin(j4);
IkReal x9828=IKcos(j4);
IkReal x9829=(cj2*sj1);
IkReal x9830=(cj1*sj2);
IkReal x9831=(gconst1*sj3);
IkReal x9832=(cj3*gconst1);
IkReal x9833=(sj1*sj2);
IkReal x9834=(cj3*gconst2);
IkReal x9835=(cj1*cj2);
IkReal x9836=(gconst2*sj3);
IkReal x9837=((1.0)*x9828);
IkReal x9838=((1.0)*x9827);
IkReal x9839=(gconst1*x9827);
IkReal x9840=(cj3*x9827);
IkReal x9841=(x9829+x9830);
IkReal x9842=(x9828*x9836);
evalcond[0]=(((r21*x9839))+(((-1.0)*r22*x9837))+(((-1.0)*gconst2*r20*x9838)));
evalcond[1]=(((r11*x9839))+(((-1.0)*gconst2*r10*x9838))+(((-1.0)*r12*x9837)));
evalcond[2]=((1.0)+((r01*x9839))+(((-1.0)*r02*x9837))+(((-1.0)*gconst2*r00*x9838)));
evalcond[3]=(((r00*x9831))+((r02*x9840))+((r01*x9836))+(((-1.0)*r00*x9834*x9837))+((r01*x9828*x9832)));
evalcond[4]=((((-1.0)*r02*sj3*x9838))+((r00*x9832))+((r01*x9834))+(((-1.0)*r01*x9831*x9837))+((r00*x9842)));
evalcond[5]=(((r21*x9836))+((r21*x9828*x9832))+((r20*x9831))+(((-1.0)*r20*x9834*x9837))+x9841+((r22*x9840)));
evalcond[6]=(((r11*x9828*x9832))+((r11*x9836))+((r10*x9831))+(((-1.0)*x9833))+((r12*x9840))+x9835+(((-1.0)*r10*x9834*x9837)));
evalcond[7]=(((r11*x9834))+((r10*x9842))+((r10*x9832))+(((-1.0)*r11*x9831*x9837))+(((-1.0)*r12*sj3*x9838))+x9841);
evalcond[8]=((((-1.0)*x9835))+((r21*x9834))+((r20*x9842))+(((-1.0)*r22*sj3*x9838))+(((-1.0)*r21*x9831*x9837))+((r20*x9832))+x9833);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9843=gconst2*gconst2;
IkReal x9844=gconst1*gconst1;
IkReal x9845=(gconst1*r00);
IkReal x9846=(r11*sj3);
IkReal x9847=((1.0)*gconst2);
IkReal x9848=(cj3*r12);
IkReal x9849=(cj3*r11);
IkReal x9850=(gconst2*r01);
IkReal x9851=(cj3*r10);
IkReal x9852=(r10*sj3);
CheckValue<IkReal> x9853=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9845*x9846*x9847))+((r01*x9844*x9846))+(((-1.0)*gconst1*r01*x9847*x9852))+((r00*x9843*x9852)))),-1);
if(!x9853.valid){
continue;
}
CheckValue<IkReal> x9854 = IKatan2WithCheck(IkReal((((x9845*x9848))+((x9848*x9850)))),IkReal(((((-1.0)*x9845*x9847*x9851))+((r00*x9844*x9849))+((gconst1*x9849*x9850))+(((-1.0)*r01*x9843*x9851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9853.value)))+(x9854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9855=IKsin(j4);
IkReal x9856=IKcos(j4);
IkReal x9857=(cj2*sj1);
IkReal x9858=(cj1*sj2);
IkReal x9859=(gconst1*sj3);
IkReal x9860=(cj3*gconst1);
IkReal x9861=(sj1*sj2);
IkReal x9862=(cj3*gconst2);
IkReal x9863=(cj1*cj2);
IkReal x9864=(gconst2*sj3);
IkReal x9865=((1.0)*x9856);
IkReal x9866=((1.0)*x9855);
IkReal x9867=(gconst1*x9855);
IkReal x9868=(cj3*x9855);
IkReal x9869=(x9857+x9858);
IkReal x9870=(x9856*x9864);
evalcond[0]=((((-1.0)*r22*x9865))+((r21*x9867))+(((-1.0)*gconst2*r20*x9866)));
evalcond[1]=((((-1.0)*r12*x9865))+((r11*x9867))+(((-1.0)*gconst2*r10*x9866)));
evalcond[2]=((1.0)+((r01*x9867))+(((-1.0)*gconst2*r00*x9866))+(((-1.0)*r02*x9865)));
evalcond[3]=(((r01*x9864))+((r02*x9868))+((r00*x9859))+((r01*x9856*x9860))+(((-1.0)*r00*x9862*x9865)));
evalcond[4]=((((-1.0)*r01*x9859*x9865))+((r00*x9860))+((r01*x9862))+((r00*x9870))+(((-1.0)*r02*sj3*x9866)));
evalcond[5]=((((-1.0)*r20*x9862*x9865))+((r22*x9868))+((r21*x9856*x9860))+((r20*x9859))+((r21*x9864))+x9869);
evalcond[6]=(((r10*x9859))+((r11*x9856*x9860))+((r11*x9864))+(((-1.0)*x9861))+((r12*x9868))+(((-1.0)*r10*x9862*x9865))+x9863);
evalcond[7]=(((r10*x9870))+((r11*x9862))+(((-1.0)*r11*x9859*x9865))+((r10*x9860))+(((-1.0)*r12*sj3*x9866))+x9869);
evalcond[8]=(((r20*x9870))+(((-1.0)*r21*x9859*x9865))+(((-1.0)*x9863))+((r21*x9862))+((r20*x9860))+x9861+(((-1.0)*r22*sj3*x9866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9871 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9871.valid){
continue;
}
CheckValue<IkReal> x9872=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9871.value)+(((1.5707963267949)*(x9872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9873=IKsin(j4);
IkReal x9874=IKcos(j4);
IkReal x9875=(cj2*sj1);
IkReal x9876=(cj1*sj2);
IkReal x9877=(gconst1*sj3);
IkReal x9878=(cj3*gconst1);
IkReal x9879=(sj1*sj2);
IkReal x9880=(cj3*gconst2);
IkReal x9881=(cj1*cj2);
IkReal x9882=(gconst2*sj3);
IkReal x9883=((1.0)*x9874);
IkReal x9884=((1.0)*x9873);
IkReal x9885=(gconst1*x9873);
IkReal x9886=(cj3*x9873);
IkReal x9887=(x9876+x9875);
IkReal x9888=(x9874*x9882);
evalcond[0]=((((-1.0)*r22*x9883))+((r21*x9885))+(((-1.0)*gconst2*r20*x9884)));
evalcond[1]=(((r11*x9885))+(((-1.0)*gconst2*r10*x9884))+(((-1.0)*r12*x9883)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9884))+((r01*x9885))+(((-1.0)*r02*x9883)));
evalcond[3]=(((r01*x9882))+((r01*x9874*x9878))+(((-1.0)*r00*x9880*x9883))+((r00*x9877))+((r02*x9886)));
evalcond[4]=((((-1.0)*r01*x9877*x9883))+((r01*x9880))+((r00*x9888))+(((-1.0)*r02*sj3*x9884))+((r00*x9878)));
evalcond[5]=(((r21*x9882))+((r20*x9877))+(((-1.0)*r20*x9880*x9883))+((r22*x9886))+x9887+((r21*x9874*x9878)));
evalcond[6]=(((r12*x9886))+(((-1.0)*x9879))+((r10*x9877))+((r11*x9882))+((r11*x9874*x9878))+x9881+(((-1.0)*r10*x9880*x9883)));
evalcond[7]=(((r10*x9878))+((r11*x9880))+(((-1.0)*r12*sj3*x9884))+(((-1.0)*r11*x9877*x9883))+((r10*x9888))+x9887);
evalcond[8]=((((-1.0)*r22*sj3*x9884))+((r20*x9888))+((r21*x9880))+((r20*x9878))+(((-1.0)*r21*x9877*x9883))+(((-1.0)*x9881))+x9879);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9889=((-1.0)*r20);
IkReal x9890=((-1.0)*px);
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9889),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
IkReal x9891=((-1.0)*(x9892.value));
sj5=gconst1;
cj5=gconst2;
j5=x9891;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9890);
rxp1_1=(px*r21);
rxp1_2=(r11*x9890);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9891;
IkReal gconst1=r21;
IkReal gconst2=x9889;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9893=((-1.0)*r20);
IkReal x9894=((-1.0)*px);
CheckValue<IkReal> x9896 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9893),IKFAST_ATAN2_MAGTHRESH);
if(!x9896.valid){
continue;
}
IkReal x9895=((-1.0)*(x9896.value));
sj5=gconst1;
cj5=gconst2;
j5=x9895;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9894);
rxp1_1=(px*r21);
rxp1_2=(r11*x9894);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9895;
IkReal gconst1=r21;
IkReal gconst2=x9893;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9897=((-1.0)*r20);
IkReal x9898=((-1.0)*px);
CheckValue<IkReal> x9900 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9897),IKFAST_ATAN2_MAGTHRESH);
if(!x9900.valid){
continue;
}
IkReal x9899=((-1.0)*(x9900.value));
sj5=gconst1;
cj5=gconst2;
j5=x9899;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9898);
rxp1_1=(px*r21);
rxp1_2=(r11*x9898);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9899;
IkReal gconst1=r21;
IkReal gconst2=x9897;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9901=((-1.0)*r20);
IkReal x9902=((-1.0)*px);
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9901),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
IkReal x9903=((-1.0)*(x9904.value));
sj5=gconst1;
cj5=gconst2;
j5=x9903;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9902);
rxp1_1=(px*r21);
rxp1_2=(r11*x9902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9903;
IkReal gconst1=r21;
IkReal gconst2=x9901;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9905=((-1.0)*r20);
IkReal x9906=((-1.0)*px);
CheckValue<IkReal> x9908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9905),IKFAST_ATAN2_MAGTHRESH);
if(!x9908.valid){
continue;
}
IkReal x9907=((-1.0)*(x9908.value));
sj5=gconst1;
cj5=gconst2;
j5=x9907;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9906);
rxp1_1=(px*r21);
rxp1_2=(r11*x9906);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9907;
IkReal gconst1=r21;
IkReal gconst2=x9905;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9909=((-1.0)*r20);
IkReal x9910=((-1.0)*px);
CheckValue<IkReal> x9912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9909),IKFAST_ATAN2_MAGTHRESH);
if(!x9912.valid){
continue;
}
IkReal x9911=((-1.0)*(x9912.value));
sj5=gconst1;
cj5=gconst2;
j5=x9911;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9910);
rxp1_1=(px*r21);
rxp1_2=(r11*x9910);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9911;
IkReal gconst1=r21;
IkReal gconst2=x9909;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9915=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9915.valid){
continue;
}
IkReal x9913=x9915.value;
IkReal x9914=(sj0*x9913);
cj4array[0]=(((cj1*sj2*x9914))+((cj2*sj1*x9914)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9916=IKsin(j4);
IkReal x9917=IKcos(j4);
IkReal x9918=(gconst1*x9916);
IkReal x9919=((1.0)*x9917);
IkReal x9920=((1.0)*gconst2*x9916);
evalcond[0]=((-1.0)*r02*x9916);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9919)));
evalcond[2]=((((-1.0)*r20*x9920))+((r21*x9918)));
evalcond[3]=(((r11*x9918))+(((-1.0)*r10*x9920)));
evalcond[4]=((((-1.0)*gconst1*r21*x9919))+((gconst2*r20*x9917))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9922=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9922.valid){
continue;
}
IkReal x9921=x9922.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9921))+((cj1*cj2*x9921)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9923=IKsin(j4);
IkReal x9924=IKcos(j4);
IkReal x9925=(gconst2*r10);
IkReal x9926=((1.0)*sj0);
IkReal x9927=((1.0)*x9923);
IkReal x9928=(gconst1*x9923);
IkReal x9929=((1.0)*x9924);
evalcond[0]=((-1.0)*r02*x9923);
evalcond[1]=((((-1.0)*r02*x9929))+(((-1.0)*x9926)));
evalcond[2]=((((-1.0)*gconst2*r20*x9927))+((r21*x9928)));
evalcond[3]=((((-1.0)*x9925*x9927))+((r11*x9928)));
evalcond[4]=(((x9924*x9925))+(((-1.0)*cj2*sj1*x9926))+(((-1.0)*cj1*sj2*x9926))+(((-1.0)*gconst1*r11*x9929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9930=IKPowWithIntegerCheck(r02,-1);
if(!x9930.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9930.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9931=IKsin(j4);
IkReal x9932=IKcos(j4);
IkReal x9933=(gconst2*r10);
IkReal x9934=((1.0)*sj0);
IkReal x9935=(gconst1*r11);
IkReal x9936=(gconst1*r21);
IkReal x9937=(gconst2*r20);
IkReal x9938=((1.0)*x9931);
IkReal x9939=((1.0)*x9932);
evalcond[0]=((-1.0)*r02*x9931);
evalcond[1]=((((-1.0)*x9937*x9938))+((x9931*x9936)));
evalcond[2]=((((-1.0)*x9933*x9938))+((x9931*x9935)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9936*x9939))+((x9932*x9937)));
evalcond[4]=((((-1.0)*cj2*sj1*x9934))+(((-1.0)*cj1*sj2*x9934))+(((-1.0)*x9935*x9939))+((x9932*x9933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9940=((-1.0)*r20);
IkReal x9941=((-1.0)*px);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9940),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9942=((-1.0)*(x9943.value));
sj5=gconst1;
cj5=gconst2;
j5=x9942;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9941);
rxp1_1=(px*r21);
rxp1_2=(r11*x9941);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9942;
IkReal gconst1=r21;
IkReal gconst2=x9940;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9944=((-1.0)*r20);
IkReal x9945=((-1.0)*px);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9944),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9946=((-1.0)*(x9947.value));
sj5=gconst1;
cj5=gconst2;
j5=x9946;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9945);
rxp1_1=(px*r21);
rxp1_2=(r11*x9945);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9946;
IkReal gconst1=r21;
IkReal gconst2=x9944;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9948=((-1.0)*r20);
IkReal x9949=((-1.0)*px);
CheckValue<IkReal> x9951 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9948),IKFAST_ATAN2_MAGTHRESH);
if(!x9951.valid){
continue;
}
IkReal x9950=((-1.0)*(x9951.value));
sj5=gconst1;
cj5=gconst2;
j5=x9950;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9949);
rxp1_1=(px*r21);
rxp1_2=(r11*x9949);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9950;
IkReal gconst1=r21;
IkReal gconst2=x9948;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9954=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9954.valid){
continue;
}
IkReal x9952=x9954.value;
IkReal x9953=(sj0*x9952);
cj4array[0]=(((cj1*sj2*x9953))+((cj2*sj1*x9953)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9955=IKsin(j4);
IkReal x9956=IKcos(j4);
IkReal x9957=((1.0)*gconst2);
IkReal x9958=(gconst1*r21);
evalcond[0]=(r02*x9955);
evalcond[1]=((((-1.0)*r02*x9956))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9955*x9957))+((x9955*x9958)));
evalcond[3]=((((-1.0)*r10*x9955*x9957))+((gconst1*r11*x9955)));
evalcond[4]=((((-1.0)*r20*x9956*x9957))+(((-1.0)*cj1*cj2))+((x9956*x9958))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9960=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9960.valid){
continue;
}
IkReal x9959=x9960.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9959))+((cj1*cj2*x9959)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9961=IKsin(j4);
IkReal x9962=IKcos(j4);
IkReal x9963=((1.0)*sj0);
IkReal x9964=(gconst1*x9961);
IkReal x9965=((1.0)*x9962);
IkReal x9966=((1.0)*gconst2*x9961);
evalcond[0]=(r02*x9961);
evalcond[1]=((((-1.0)*x9963))+(((-1.0)*r02*x9965)));
evalcond[2]=(((r21*x9964))+(((-1.0)*r20*x9966)));
evalcond[3]=((((-1.0)*r10*x9966))+((r11*x9964)));
evalcond[4]=((((-1.0)*cj2*sj1*x9963))+(((-1.0)*cj1*sj2*x9963))+((gconst1*r11*x9962))+(((-1.0)*gconst2*r10*x9965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9967=IKPowWithIntegerCheck(r02,-1);
if(!x9967.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9967.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9968=IKsin(j4);
IkReal x9969=IKcos(j4);
IkReal x9970=(gconst1*r21);
IkReal x9971=((1.0)*sj0);
IkReal x9972=(gconst1*r11);
IkReal x9973=((1.0)*gconst2*r10);
IkReal x9974=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9968);
evalcond[1]=((((-1.0)*x9968*x9974))+((x9968*x9970)));
evalcond[2]=((((-1.0)*x9968*x9973))+((x9968*x9972)));
evalcond[3]=(((x9969*x9970))+(((-1.0)*x9969*x9974))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x9969*x9972))+(((-1.0)*x9969*x9973))+(((-1.0)*cj2*sj1*x9971))+(((-1.0)*cj1*sj2*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9976=IKPowWithIntegerCheck(r02,-1);
if(!x9976.valid){
continue;
}
IkReal x9975=x9976.value;
CheckValue<IkReal> x9977=IKPowWithIntegerCheck(cj3,-1);
if(!x9977.valid){
continue;
}
if( IKabs((x9975*(x9977.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9975)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9975*(x9977.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9975))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9975*(x9977.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9975));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9978=IKsin(j4);
IkReal x9979=IKcos(j4);
IkReal x9980=(gconst2*r10);
IkReal x9981=(gconst1*r11);
IkReal x9982=(sj1*sj2);
IkReal x9983=(gconst2*r20);
IkReal x9984=(cj2*sj1);
IkReal x9985=((1.0)*sj0);
IkReal x9986=(gconst1*r20);
IkReal x9987=(gconst2*r11);
IkReal x9988=(gconst1*r21);
IkReal x9989=((1.0)*cj0);
IkReal x9990=(gconst1*r10);
IkReal x9991=(cj1*sj2);
IkReal x9992=(gconst2*r21);
IkReal x9993=(sj3*x9979);
IkReal x9994=((1.0)*cj1*cj2);
IkReal x9995=(cj3*x9979);
IkReal x9996=(r02*x9978);
IkReal x9997=((1.0)*x9978);
evalcond[0]=((((-1.0)*r02*x9979))+(((-1.0)*x9985)));
evalcond[1]=(((x9978*x9988))+(((-1.0)*x9983*x9997)));
evalcond[2]=(cj0+(((-1.0)*x9980*x9997))+((x9978*x9981)));
evalcond[3]=(((cj3*x9996))+((cj0*x9982))+(((-1.0)*cj1*cj2*x9989)));
evalcond[4]=((((-1.0)*x9984*x9989))+(((-1.0)*sj3*x9996))+(((-1.0)*x9989*x9991)));
evalcond[5]=((((-1.0)*x9983*x9995))+((sj3*x9986))+((sj3*x9992))+((x9988*x9995))+x9984+x9991);
evalcond[6]=(((cj3*x9986))+((cj3*x9992))+((x9983*x9993))+x9982+(((-1.0)*x9988*x9993))+(((-1.0)*x9994)));
evalcond[7]=(((sj0*x9982))+((sj3*x9987))+((sj3*x9990))+((x9981*x9995))+(((-1.0)*x9980*x9995))+(((-1.0)*cj1*cj2*x9985)));
evalcond[8]=(((cj3*x9987))+((cj3*x9990))+(((-1.0)*x9984*x9985))+(((-1.0)*x9981*x9993))+((x9980*x9993))+(((-1.0)*x9985*x9991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9998=((1.0)*sj3);
IkReal x9999=((1.0)*gconst2);
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(((((-1.0)*r10*x9999))+((gconst1*r11))),-1);
if(!x10000.valid){
continue;
}
CheckValue<IkReal> x10001=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9999))),-1);
if(!x10001.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10000.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10001.value)*(((((-1.0)*gconst1*r20*x9998))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9998)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10000.value)))+IKsqr(((x10001.value)*(((((-1.0)*gconst1*r20*x9998))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9998))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10000.value)), ((x10001.value)*(((((-1.0)*gconst1*r20*x9998))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9998))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10002=IKsin(j4);
IkReal x10003=IKcos(j4);
IkReal x10004=(gconst2*r10);
IkReal x10005=(gconst1*r11);
IkReal x10006=(sj1*sj2);
IkReal x10007=(gconst2*r20);
IkReal x10008=(cj2*sj1);
IkReal x10009=((1.0)*sj0);
IkReal x10010=(gconst1*r20);
IkReal x10011=(gconst2*r11);
IkReal x10012=(gconst1*r21);
IkReal x10013=((1.0)*cj0);
IkReal x10014=(gconst1*r10);
IkReal x10015=(cj1*sj2);
IkReal x10016=(gconst2*r21);
IkReal x10017=(sj3*x10003);
IkReal x10018=((1.0)*cj1*cj2);
IkReal x10019=(cj3*x10003);
IkReal x10020=(r02*x10002);
IkReal x10021=((1.0)*x10002);
evalcond[0]=((((-1.0)*r02*x10003))+(((-1.0)*x10009)));
evalcond[1]=((((-1.0)*x10007*x10021))+((x10002*x10012)));
evalcond[2]=(cj0+(((-1.0)*x10004*x10021))+((x10002*x10005)));
evalcond[3]=(((cj0*x10006))+(((-1.0)*cj1*cj2*x10013))+((cj3*x10020)));
evalcond[4]=((((-1.0)*x10013*x10015))+(((-1.0)*sj3*x10020))+(((-1.0)*x10008*x10013)));
evalcond[5]=(((x10012*x10019))+(((-1.0)*x10007*x10019))+x10015+x10008+((sj3*x10016))+((sj3*x10010)));
evalcond[6]=(((x10007*x10017))+((cj3*x10010))+((cj3*x10016))+(((-1.0)*x10012*x10017))+x10006+(((-1.0)*x10018)));
evalcond[7]=((((-1.0)*x10004*x10019))+(((-1.0)*cj1*cj2*x10009))+((x10005*x10019))+((sj3*x10011))+((sj3*x10014))+((sj0*x10006)));
evalcond[8]=((((-1.0)*x10008*x10009))+(((-1.0)*x10009*x10015))+((x10004*x10017))+((cj3*x10011))+((cj3*x10014))+(((-1.0)*x10005*x10017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10022=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10022.valid){
continue;
}
CheckValue<IkReal> x10023=IKPowWithIntegerCheck(r02,-1);
if(!x10023.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10022.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10023.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10022.value)))+IKsqr(((-1.0)*sj0*(x10023.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10022.value)), ((-1.0)*sj0*(x10023.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10024=IKsin(j4);
IkReal x10025=IKcos(j4);
IkReal x10026=(gconst2*r10);
IkReal x10027=(gconst1*r11);
IkReal x10028=(sj1*sj2);
IkReal x10029=(gconst2*r20);
IkReal x10030=(cj2*sj1);
IkReal x10031=((1.0)*sj0);
IkReal x10032=(gconst1*r20);
IkReal x10033=(gconst2*r11);
IkReal x10034=(gconst1*r21);
IkReal x10035=((1.0)*cj0);
IkReal x10036=(gconst1*r10);
IkReal x10037=(cj1*sj2);
IkReal x10038=(gconst2*r21);
IkReal x10039=(sj3*x10025);
IkReal x10040=((1.0)*cj1*cj2);
IkReal x10041=(cj3*x10025);
IkReal x10042=(r02*x10024);
IkReal x10043=((1.0)*x10024);
evalcond[0]=((((-1.0)*r02*x10025))+(((-1.0)*x10031)));
evalcond[1]=(((x10024*x10034))+(((-1.0)*x10029*x10043)));
evalcond[2]=(((x10024*x10027))+cj0+(((-1.0)*x10026*x10043)));
evalcond[3]=(((cj0*x10028))+(((-1.0)*cj1*cj2*x10035))+((cj3*x10042)));
evalcond[4]=((((-1.0)*sj3*x10042))+(((-1.0)*x10035*x10037))+(((-1.0)*x10030*x10035)));
evalcond[5]=((((-1.0)*x10029*x10041))+((sj3*x10038))+((sj3*x10032))+x10037+x10030+((x10034*x10041)));
evalcond[6]=(((x10029*x10039))+(((-1.0)*x10034*x10039))+x10028+((cj3*x10038))+((cj3*x10032))+(((-1.0)*x10040)));
evalcond[7]=(((sj0*x10028))+(((-1.0)*x10026*x10041))+((sj3*x10036))+((sj3*x10033))+((x10027*x10041))+(((-1.0)*cj1*cj2*x10031)));
evalcond[8]=((((-1.0)*x10027*x10039))+((x10026*x10039))+(((-1.0)*x10031*x10037))+(((-1.0)*x10030*x10031))+((cj3*x10036))+((cj3*x10033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10044=gconst1*gconst1;
IkReal x10045=r21*r21;
IkReal x10046=gconst2*gconst2;
IkReal x10047=r20*r20;
IkReal x10048=(gconst2*r20);
IkReal x10049=(cj1*cj2);
IkReal x10050=(sj1*sj2);
IkReal x10051=(gconst1*r21);
IkReal x10052=(cj3*gconst2);
IkReal x10053=(cj3*r20);
CheckValue<IkReal> x10054=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10046*x10047))+((sj3*x10044*x10045))+(((-2.0)*sj3*x10048*x10051)))),-1);
if(!x10054.valid){
continue;
}
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal((((r21*r22*x10052))+((gconst1*r22*x10053))+(((-1.0)*r22*x10049))+((r22*x10050)))),IkReal((((r21*x10044*x10053))+((x10048*x10049))+(((-1.0)*x10049*x10051))+(((-1.0)*gconst1*x10047*x10052))+((gconst1*x10045*x10052))+(((-1.0)*r21*x10046*x10053))+((x10050*x10051))+(((-1.0)*x10048*x10050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10054.value)))+(x10055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10056=IKsin(j4);
IkReal x10057=IKcos(j4);
IkReal x10058=(cj3*gconst1);
IkReal x10059=(gconst1*r01);
IkReal x10060=(gconst1*r11);
IkReal x10061=(sj1*sj2);
IkReal x10062=(cj3*gconst2);
IkReal x10063=(gconst1*sj3);
IkReal x10064=(gconst2*sj3);
IkReal x10065=((1.0)*sj0);
IkReal x10066=(cj1*sj2);
IkReal x10067=((1.0)*x10057);
IkReal x10068=((1.0)*x10056);
IkReal x10069=((1.0)*cj1*cj2);
IkReal x10070=(cj3*x10056);
IkReal x10071=((1.0)*cj2*sj1);
IkReal x10072=(x10057*x10064);
evalcond[0]=(((gconst1*r21*x10056))+(((-1.0)*r22*x10067))+(((-1.0)*gconst2*r20*x10068)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10068))+(((-1.0)*r12*x10067))+((x10056*x10060)));
evalcond[2]=((((-1.0)*x10065))+(((-1.0)*gconst2*r00*x10068))+(((-1.0)*r02*x10067))+((x10056*x10059)));
evalcond[3]=(((cj2*sj1))+((r20*x10063))+((r21*x10057*x10058))+x10066+((r22*x10070))+((r21*x10064))+(((-1.0)*r20*x10062*x10067)));
evalcond[4]=((((-1.0)*r22*sj3*x10068))+(((-1.0)*r21*x10063*x10067))+((r20*x10058))+((r20*x10072))+(((-1.0)*x10069))+x10061+((r21*x10062)));
evalcond[5]=((((-1.0)*cj0*x10069))+((r00*x10063))+((r01*x10064))+((r02*x10070))+((r01*x10057*x10058))+((cj0*x10061))+(((-1.0)*r00*x10062*x10067)));
evalcond[6]=(((r10*x10063))+((r11*x10057*x10058))+((r12*x10070))+(((-1.0)*r10*x10062*x10067))+(((-1.0)*cj1*cj2*x10065))+((sj0*x10061))+((r11*x10064)));
evalcond[7]=((((-1.0)*cj0*x10071))+((r00*x10072))+((r00*x10058))+((r01*x10062))+(((-1.0)*cj0*x10066))+(((-1.0)*r02*sj3*x10068))+(((-1.0)*sj3*x10059*x10067)));
evalcond[8]=(((r10*x10072))+((r10*x10058))+(((-1.0)*r12*sj3*x10068))+(((-1.0)*sj3*x10060*x10067))+(((-1.0)*cj2*sj1*x10065))+((r11*x10062))+(((-1.0)*x10065*x10066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10073=((1.0)*gconst2);
CheckValue<IkReal> x10074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10073)))),-1);
if(!x10074.valid){
continue;
}
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10073))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10074.value)))+(x10075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10076=IKsin(j4);
IkReal x10077=IKcos(j4);
IkReal x10078=(cj3*gconst1);
IkReal x10079=(gconst1*r01);
IkReal x10080=(gconst1*r11);
IkReal x10081=(sj1*sj2);
IkReal x10082=(cj3*gconst2);
IkReal x10083=(gconst1*sj3);
IkReal x10084=(gconst2*sj3);
IkReal x10085=((1.0)*sj0);
IkReal x10086=(cj1*sj2);
IkReal x10087=((1.0)*x10077);
IkReal x10088=((1.0)*x10076);
IkReal x10089=((1.0)*cj1*cj2);
IkReal x10090=(cj3*x10076);
IkReal x10091=((1.0)*cj2*sj1);
IkReal x10092=(x10077*x10084);
evalcond[0]=((((-1.0)*gconst2*r20*x10088))+((gconst1*r21*x10076))+(((-1.0)*r22*x10087)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10088))+(((-1.0)*r12*x10087))+((x10076*x10080)));
evalcond[2]=(((x10076*x10079))+(((-1.0)*x10085))+(((-1.0)*r02*x10087))+(((-1.0)*gconst2*r00*x10088)));
evalcond[3]=(((cj2*sj1))+((r21*x10077*x10078))+((r20*x10083))+x10086+((r22*x10090))+((r21*x10084))+(((-1.0)*r20*x10082*x10087)));
evalcond[4]=((((-1.0)*r21*x10083*x10087))+((r20*x10078))+(((-1.0)*x10089))+x10081+((r21*x10082))+((r20*x10092))+(((-1.0)*r22*sj3*x10088)));
evalcond[5]=(((r00*x10083))+((r01*x10084))+((r02*x10090))+((r01*x10077*x10078))+((cj0*x10081))+(((-1.0)*r00*x10082*x10087))+(((-1.0)*cj0*x10089)));
evalcond[6]=(((r11*x10077*x10078))+(((-1.0)*cj1*cj2*x10085))+((r12*x10090))+((sj0*x10081))+(((-1.0)*r10*x10082*x10087))+((r10*x10083))+((r11*x10084)));
evalcond[7]=(((r01*x10082))+((r00*x10078))+(((-1.0)*cj0*x10086))+(((-1.0)*sj3*x10079*x10087))+(((-1.0)*r02*sj3*x10088))+(((-1.0)*cj0*x10091))+((r00*x10092)));
evalcond[8]=(((r10*x10078))+(((-1.0)*r12*sj3*x10088))+(((-1.0)*sj3*x10080*x10087))+(((-1.0)*x10085*x10086))+(((-1.0)*cj2*sj1*x10085))+((r10*x10092))+((r11*x10082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10093=((1.0)*gconst2);
CheckValue<IkReal> x10094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10093))+(((-1.0)*gconst1*r00)))),-1);
if(!x10094.valid){
continue;
}
CheckValue<IkReal> x10095 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10094.value)))+(x10095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10096=IKsin(j4);
IkReal x10097=IKcos(j4);
IkReal x10098=(cj3*gconst1);
IkReal x10099=(gconst1*r01);
IkReal x10100=(gconst1*r11);
IkReal x10101=(sj1*sj2);
IkReal x10102=(cj3*gconst2);
IkReal x10103=(gconst1*sj3);
IkReal x10104=(gconst2*sj3);
IkReal x10105=((1.0)*sj0);
IkReal x10106=(cj1*sj2);
IkReal x10107=((1.0)*x10097);
IkReal x10108=((1.0)*x10096);
IkReal x10109=((1.0)*cj1*cj2);
IkReal x10110=(cj3*x10096);
IkReal x10111=((1.0)*cj2*sj1);
IkReal x10112=(x10097*x10104);
evalcond[0]=((((-1.0)*gconst2*r20*x10108))+(((-1.0)*r22*x10107))+((gconst1*r21*x10096)));
evalcond[1]=((((-1.0)*r12*x10107))+cj0+((x10096*x10100))+(((-1.0)*gconst2*r10*x10108)));
evalcond[2]=((((-1.0)*r02*x10107))+(((-1.0)*gconst2*r00*x10108))+((x10096*x10099))+(((-1.0)*x10105)));
evalcond[3]=((((-1.0)*r20*x10102*x10107))+((r21*x10104))+((cj2*sj1))+((r20*x10103))+((r21*x10097*x10098))+x10106+((r22*x10110)));
evalcond[4]=(((r21*x10102))+((r20*x10112))+(((-1.0)*r21*x10103*x10107))+x10101+(((-1.0)*r22*sj3*x10108))+((r20*x10098))+(((-1.0)*x10109)));
evalcond[5]=((((-1.0)*r00*x10102*x10107))+((cj0*x10101))+((r01*x10104))+((r00*x10103))+(((-1.0)*cj0*x10109))+((r02*x10110))+((r01*x10097*x10098)));
evalcond[6]=((((-1.0)*cj1*cj2*x10105))+(((-1.0)*r10*x10102*x10107))+((r11*x10097*x10098))+((sj0*x10101))+((r11*x10104))+((r12*x10110))+((r10*x10103)));
evalcond[7]=(((r01*x10102))+((r00*x10112))+(((-1.0)*cj0*x10111))+(((-1.0)*cj0*x10106))+(((-1.0)*r02*sj3*x10108))+(((-1.0)*sj3*x10099*x10107))+((r00*x10098)));
evalcond[8]=((((-1.0)*sj3*x10100*x10107))+(((-1.0)*x10105*x10106))+(((-1.0)*r12*sj3*x10108))+(((-1.0)*cj2*sj1*x10105))+((r11*x10102))+((r10*x10098))+((r10*x10112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10113=((-1.0)*r21);
IkReal x10115 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10115)==0){
continue;
}
IkReal x10114=pow(x10115,-0.5);
CheckValue<IkReal> x10116 = IKatan2WithCheck(IkReal(x10113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10116.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10116.value))));
IkReal gconst4=(x10113*x10114);
IkReal gconst5=((1.0)*r20*x10114);
CheckValue<IkReal> x10117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10117.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10117.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10118=((-1.0)*r21);
CheckValue<IkReal> x10121 = IKatan2WithCheck(IkReal(x10118),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10121.valid){
continue;
}
IkReal x10119=((1.0)*(x10121.value));
IkReal x10120=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10119)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10119)));
IkReal gconst4=(x10118*x10120);
IkReal gconst5=((1.0)*r20*x10120);
IkReal x10122=r22*r22;
IkReal x10123=((1.0)*x10122);
CheckValue<IkReal> x10127=IKPowWithIntegerCheck(((-1.0)+x10122),-1);
if(!x10127.valid){
continue;
}
IkReal x10124=x10127.value;
if((((1.0)+(((-1.0)*x10123)))) < -0.00001)
continue;
IkReal x10125=IKsqrt(((1.0)+(((-1.0)*x10123))));
IkReal x10126=(cj0*x10124*x10125);
j4eval[0]=((IKabs(((((-1.0)*x10123*x10126))+x10126)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10128=((-1.0)*r21);
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal(x10128),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
IkReal x10129=((1.0)*(x10131.value));
IkReal x10130=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10129)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10129)));
IkReal gconst4=(x10128*x10130);
IkReal gconst5=((1.0)*r20*x10130);
IkReal x10132=r22*r22;
IkReal x10133=((1.0)*x10132);
CheckValue<IkReal> x10137=IKPowWithIntegerCheck(((-1.0)+x10132),-1);
if(!x10137.valid){
continue;
}
IkReal x10134=x10137.value;
if((((1.0)+(((-1.0)*x10133)))) < -0.00001)
continue;
IkReal x10135=IKsqrt(((1.0)+(((-1.0)*x10133))));
IkReal x10136=(sj0*x10134*x10135);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10136+(((-1.0)*x10133*x10136))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10138=((-1.0)*r21);
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal(x10138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
IkReal x10139=((1.0)*(x10141.value));
IkReal x10140=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10139)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10139)));
IkReal gconst4=(x10138*x10140);
IkReal gconst5=((1.0)*r20*x10140);
IkReal x10142=r22*r22;
IkReal x10143=(r12*sj0);
IkReal x10144=(cj0*r02);
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(((-1.0)+x10142),-1);
if(!x10148.valid){
continue;
}
IkReal x10145=x10148.value;
if((((1.0)+(((-1.0)*x10142)))) < -0.00001)
continue;
IkReal x10146=IKsqrt(((1.0)+(((-1.0)*x10142))));
IkReal x10147=(r22*x10145*x10146);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10143))+(((-1.0)*x10144)))))+(IKabs((((x10143*x10147))+((x10144*x10147))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10149=((-1.0)*r21);
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal(x10149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
IkReal x10150=((1.0)*(x10152.value));
IkReal x10151=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10150)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10150)));
IkReal gconst4=(x10149*x10151);
IkReal gconst5=((1.0)*r20*x10151);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10153=((-1.0)*r21);
CheckValue<IkReal> x10156 = IKatan2WithCheck(IkReal(x10153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10156.valid){
continue;
}
IkReal x10154=((1.0)*(x10156.value));
IkReal x10155=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10154)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10154)));
IkReal gconst4=(x10153*x10155);
IkReal gconst5=((1.0)*r20*x10155);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10157=((-1.0)*r21);
CheckValue<IkReal> x10160 = IKatan2WithCheck(IkReal(x10157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10160.valid){
continue;
}
IkReal x10158=((1.0)*(x10160.value));
IkReal x10159=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10158)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10158)));
IkReal gconst4=(x10157*x10159);
IkReal gconst5=((1.0)*r20*x10159);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10161=((-1.0)*r21);
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(x10161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
IkReal x10162=((1.0)*(x10164.value));
IkReal x10163=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10162)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10162)));
IkReal gconst4=(x10161*x10163);
IkReal gconst5=((1.0)*r20*x10163);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10165=((-1.0)*r21);
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(x10165),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
IkReal x10166=((1.0)*(x10168.value));
IkReal x10167=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10166)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10166)));
IkReal gconst4=(x10165*x10167);
IkReal gconst5=((1.0)*r20*x10167);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10169=((-1.0)*r21);
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(x10169),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
IkReal x10170=((1.0)*(x10172.value));
IkReal x10171=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10170)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10170)));
IkReal gconst4=(x10169*x10171);
IkReal gconst5=((1.0)*r20*x10171);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10173=(gconst5*r10);
IkReal x10174=(gconst4*r11);
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal(((((-1.0)*x10174))+x10173)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10173*x10173)+(((-2.0)*x10173*x10174))+(x10174*x10174))),-1);
if(!x10176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10175.value)+(((1.5707963267949)*(x10176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10177=IKsin(j4);
IkReal x10178=IKcos(j4);
IkReal x10179=(gconst4*r11);
IkReal x10180=((1.0)*cj1);
IkReal x10181=(gconst5*r10);
IkReal x10182=(gconst4*r01);
IkReal x10183=(gconst5*r00);
IkReal x10184=(gconst4*r21);
IkReal x10185=(gconst5*r20);
IkReal x10186=((1.0)*x10178);
IkReal x10187=((1.0)*x10177);
evalcond[0]=(((x10177*x10184))+(((-1.0)*x10185*x10187))+(((-1.0)*r22*x10186)));
evalcond[1]=((((-1.0)*r02*x10186))+(((-1.0)*x10183*x10187))+((x10177*x10182)));
evalcond[2]=((((-1.0)*x10179*x10186))+((x10178*x10181))+(((-1.0)*r12*x10187)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10186))+((x10177*x10179))+(((-1.0)*x10181*x10187)));
evalcond[4]=(((x10178*x10185))+(((-1.0)*cj2*x10180))+((sj1*sj2))+(((-1.0)*x10184*x10186))+(((-1.0)*r22*x10187)));
evalcond[5]=(((x10178*x10183))+(((-1.0)*r02*x10187))+(((-1.0)*cj2*sj1))+(((-1.0)*x10182*x10186))+(((-1.0)*sj2*x10180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10188=((1.0)*gconst5);
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10188))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
CheckValue<IkReal> x10190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10188)))),-1);
if(!x10190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10189.value)+(((1.5707963267949)*(x10190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10191=IKsin(j4);
IkReal x10192=IKcos(j4);
IkReal x10193=(gconst4*r11);
IkReal x10194=((1.0)*cj1);
IkReal x10195=(gconst5*r10);
IkReal x10196=(gconst4*r01);
IkReal x10197=(gconst5*r00);
IkReal x10198=(gconst4*r21);
IkReal x10199=(gconst5*r20);
IkReal x10200=((1.0)*x10192);
IkReal x10201=((1.0)*x10191);
evalcond[0]=((((-1.0)*x10199*x10201))+(((-1.0)*r22*x10200))+((x10191*x10198)));
evalcond[1]=((((-1.0)*r02*x10200))+(((-1.0)*x10197*x10201))+((x10191*x10196)));
evalcond[2]=(((x10192*x10195))+(((-1.0)*x10193*x10200))+(((-1.0)*r12*x10201)));
evalcond[3]=((1.0)+(((-1.0)*x10195*x10201))+((x10191*x10193))+(((-1.0)*r12*x10200)));
evalcond[4]=((((-1.0)*cj2*x10194))+(((-1.0)*r22*x10201))+((sj1*sj2))+((x10192*x10199))+(((-1.0)*x10198*x10200)));
evalcond[5]=((((-1.0)*x10196*x10200))+(((-1.0)*r02*x10201))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10194))+((x10192*x10197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
CheckValue<IkReal> x10203=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10202.value)+(((1.5707963267949)*(x10203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10204=IKsin(j4);
IkReal x10205=IKcos(j4);
IkReal x10206=(gconst4*r11);
IkReal x10207=((1.0)*cj1);
IkReal x10208=(gconst5*r10);
IkReal x10209=(gconst4*r01);
IkReal x10210=(gconst5*r00);
IkReal x10211=(gconst4*r21);
IkReal x10212=(gconst5*r20);
IkReal x10213=((1.0)*x10205);
IkReal x10214=((1.0)*x10204);
evalcond[0]=((((-1.0)*x10212*x10214))+(((-1.0)*r22*x10213))+((x10204*x10211)));
evalcond[1]=((((-1.0)*x10210*x10214))+((x10204*x10209))+(((-1.0)*r02*x10213)));
evalcond[2]=(((x10205*x10208))+(((-1.0)*r12*x10214))+(((-1.0)*x10206*x10213)));
evalcond[3]=((1.0)+((x10204*x10206))+(((-1.0)*r12*x10213))+(((-1.0)*x10208*x10214)));
evalcond[4]=((((-1.0)*x10211*x10213))+(((-1.0)*r22*x10214))+(((-1.0)*cj2*x10207))+((sj1*sj2))+((x10205*x10212)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10205*x10210))+(((-1.0)*sj2*x10207))+(((-1.0)*r02*x10214))+(((-1.0)*x10209*x10213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10215=((-1.0)*r21);
CheckValue<IkReal> x10218 = IKatan2WithCheck(IkReal(x10215),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10218.valid){
continue;
}
IkReal x10216=((1.0)*(x10218.value));
IkReal x10217=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10216)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10216)));
IkReal gconst4=(x10215*x10217);
IkReal gconst5=((1.0)*r20*x10217);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10219=((-1.0)*r21);
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(x10219),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
IkReal x10220=((1.0)*(x10222.value));
IkReal x10221=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10220)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10220)));
IkReal gconst4=(x10219*x10221);
IkReal gconst5=((1.0)*r20*x10221);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10223=((-1.0)*r21);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(x10223),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
IkReal x10224=((1.0)*(x10226.value));
IkReal x10225=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10224)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10224)));
IkReal gconst4=(x10223*x10225);
IkReal gconst5=((1.0)*r20*x10225);
IkReal x10227=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10231=IKPowWithIntegerCheck(x10227,-1);
if(!x10231.valid){
continue;
}
IkReal x10228=x10231.value;
IkReal x10229=((1.0)*x10228);
IkReal x10230=((((-2.0)*r10*r11*r20*r21*x10228))+(((-1.0)*x10229*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10229*(r11*r11)*(r21*r21))));
j4eval[0]=x10230;
j4eval[1]=r12;
j4eval[2]=x10227;
j4eval[3]=IKsign(x10230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10232=(gconst5*r10);
IkReal x10233=(gconst4*r11);
CheckValue<IkReal> x10234 = IKatan2WithCheck(IkReal((x10233+(((-1.0)*x10232)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10234.valid){
continue;
}
CheckValue<IkReal> x10235=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10233*x10233)))+(((2.0)*x10232*x10233))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10232*x10232))))),-1);
if(!x10235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10234.value)+(((1.5707963267949)*(x10235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10236=IKcos(j4);
IkReal x10237=IKsin(j4);
IkReal x10238=(gconst4*r11);
IkReal x10239=(gconst5*r10);
IkReal x10240=((1.0)*cj1);
IkReal x10241=(gconst5*r00);
IkReal x10242=(gconst5*r20);
IkReal x10243=((1.0)*x10236);
IkReal x10244=(gconst4*x10236);
IkReal x10245=((1.0)*x10237);
IkReal x10246=(gconst4*x10237);
evalcond[0]=((((-1.0)*x10239*x10243))+((r12*x10237))+((x10236*x10238)));
evalcond[1]=(((r21*x10246))+(((-1.0)*r22*x10243))+(((-1.0)*x10242*x10245)));
evalcond[2]=((((-1.0)*x10241*x10245))+((r01*x10246))+(((-1.0)*r02*x10243)));
evalcond[3]=((1.0)+((x10237*x10238))+(((-1.0)*r12*x10243))+(((-1.0)*x10239*x10245)));
evalcond[4]=((((-1.0)*cj2*x10240))+((r22*x10237))+((sj1*sj2))+((r21*x10244))+(((-1.0)*x10242*x10243)));
evalcond[5]=((((-1.0)*x10241*x10243))+(((-1.0)*cj2*sj1))+((r02*x10237))+(((-1.0)*sj2*x10240))+((r01*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10247=((1.0)*gconst5);
CheckValue<IkReal> x10248=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10247)))),-1);
if(!x10248.valid){
continue;
}
CheckValue<IkReal> x10249 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10247))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10248.value)))+(x10249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10250=IKcos(j4);
IkReal x10251=IKsin(j4);
IkReal x10252=(gconst4*r11);
IkReal x10253=(gconst5*r10);
IkReal x10254=((1.0)*cj1);
IkReal x10255=(gconst5*r00);
IkReal x10256=(gconst5*r20);
IkReal x10257=((1.0)*x10250);
IkReal x10258=(gconst4*x10250);
IkReal x10259=((1.0)*x10251);
IkReal x10260=(gconst4*x10251);
evalcond[0]=(((r12*x10251))+(((-1.0)*x10253*x10257))+((x10250*x10252)));
evalcond[1]=((((-1.0)*x10256*x10259))+(((-1.0)*r22*x10257))+((r21*x10260)));
evalcond[2]=((((-1.0)*r02*x10257))+(((-1.0)*x10255*x10259))+((r01*x10260)));
evalcond[3]=((1.0)+(((-1.0)*x10253*x10259))+(((-1.0)*r12*x10257))+((x10251*x10252)));
evalcond[4]=(((r22*x10251))+(((-1.0)*cj2*x10254))+(((-1.0)*x10256*x10257))+((sj1*sj2))+((r21*x10258)));
evalcond[5]=((((-1.0)*x10255*x10257))+((r02*x10251))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10254))+((r01*x10258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10261 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10261.valid){
continue;
}
CheckValue<IkReal> x10262=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10261.value)+(((1.5707963267949)*(x10262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10263=IKcos(j4);
IkReal x10264=IKsin(j4);
IkReal x10265=(gconst4*r11);
IkReal x10266=(gconst5*r10);
IkReal x10267=((1.0)*cj1);
IkReal x10268=(gconst5*r00);
IkReal x10269=(gconst5*r20);
IkReal x10270=((1.0)*x10263);
IkReal x10271=(gconst4*x10263);
IkReal x10272=((1.0)*x10264);
IkReal x10273=(gconst4*x10264);
evalcond[0]=(((r12*x10264))+((x10263*x10265))+(((-1.0)*x10266*x10270)));
evalcond[1]=((((-1.0)*x10269*x10272))+(((-1.0)*r22*x10270))+((r21*x10273)));
evalcond[2]=(((r01*x10273))+(((-1.0)*x10268*x10272))+(((-1.0)*r02*x10270)));
evalcond[3]=((1.0)+((x10264*x10265))+(((-1.0)*r12*x10270))+(((-1.0)*x10266*x10272)));
evalcond[4]=(((r22*x10264))+((sj1*sj2))+(((-1.0)*x10269*x10270))+((r21*x10271))+(((-1.0)*cj2*x10267)));
evalcond[5]=(((r02*x10264))+((r01*x10271))+(((-1.0)*cj2*sj1))+(((-1.0)*x10268*x10270))+(((-1.0)*sj2*x10267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10274=((-1.0)*r21);
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal(x10274),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
IkReal x10275=((1.0)*(x10277.value));
IkReal x10276=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10275)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10275)));
IkReal gconst4=(x10274*x10276);
IkReal gconst5=((1.0)*r20*x10276);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10278=((-1.0)*r21);
CheckValue<IkReal> x10281 = IKatan2WithCheck(IkReal(x10278),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10281.valid){
continue;
}
IkReal x10279=((1.0)*(x10281.value));
IkReal x10280=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10279)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10279)));
IkReal gconst4=(x10278*x10280);
IkReal gconst5=((1.0)*r20*x10280);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10282=((-1.0)*r21);
CheckValue<IkReal> x10285 = IKatan2WithCheck(IkReal(x10282),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10285.valid){
continue;
}
IkReal x10283=((1.0)*(x10285.value));
IkReal x10284=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10283)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10283)));
IkReal gconst4=(x10282*x10284);
IkReal gconst5=((1.0)*r20*x10284);
IkReal x10286=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10290=IKPowWithIntegerCheck(x10286,-1);
if(!x10290.valid){
continue;
}
IkReal x10287=x10290.value;
IkReal x10288=((1.0)*x10287);
IkReal x10289=((((-1.0)*x10288*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10287))+(((-1.0)*x10288*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10289;
j4eval[1]=r12;
j4eval[2]=x10286;
j4eval[3]=IKsign(x10289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10291=(gconst5*r10);
IkReal x10292=(gconst4*r11);
CheckValue<IkReal> x10293=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10291*x10291)))+(((2.0)*x10291*x10292))+(((-1.0)*(x10292*x10292)))+(((-1.0)*(r12*r12))))),-1);
if(!x10293.valid){
continue;
}
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(((((-1.0)*x10291))+x10292)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10293.value)))+(x10294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10295=IKcos(j4);
IkReal x10296=IKsin(j4);
IkReal x10297=(gconst4*r11);
IkReal x10298=(gconst5*r10);
IkReal x10299=(gconst5*r00);
IkReal x10300=(gconst5*r20);
IkReal x10301=((1.0)*x10295);
IkReal x10302=(gconst4*x10295);
IkReal x10303=((1.0)*x10296);
IkReal x10304=(gconst4*x10296);
evalcond[0]=(((r12*x10296))+(((-1.0)*x10298*x10301))+((x10295*x10297)));
evalcond[1]=((((-1.0)*r22*x10301))+(((-1.0)*x10300*x10303))+((r21*x10304)));
evalcond[2]=((((-1.0)*r02*x10301))+((r01*x10304))+(((-1.0)*x10299*x10303)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10301))+((x10296*x10297))+(((-1.0)*x10298*x10303)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10300*x10301))+((cj1*sj2))+((r21*x10302))+((r22*x10296)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10302))+((r02*x10296))+(((-1.0)*x10299*x10301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10305=((1.0)*gconst5);
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
CheckValue<IkReal> x10307=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10305)))),-1);
if(!x10307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10306.value)+(((1.5707963267949)*(x10307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10308=IKcos(j4);
IkReal x10309=IKsin(j4);
IkReal x10310=(gconst4*r11);
IkReal x10311=(gconst5*r10);
IkReal x10312=(gconst5*r00);
IkReal x10313=(gconst5*r20);
IkReal x10314=((1.0)*x10308);
IkReal x10315=(gconst4*x10308);
IkReal x10316=((1.0)*x10309);
IkReal x10317=(gconst4*x10309);
evalcond[0]=((((-1.0)*x10311*x10314))+((r12*x10309))+((x10308*x10310)));
evalcond[1]=((((-1.0)*x10313*x10316))+((r21*x10317))+(((-1.0)*r22*x10314)));
evalcond[2]=(((r01*x10317))+(((-1.0)*x10312*x10316))+(((-1.0)*r02*x10314)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10314))+(((-1.0)*x10311*x10316))+((x10309*x10310)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10313*x10314))+((r21*x10315))+((cj1*sj2))+((r22*x10309)));
evalcond[5]=(((r02*x10309))+((r01*x10315))+(((-1.0)*x10312*x10314))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
CheckValue<IkReal> x10319=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10318.value)+(((1.5707963267949)*(x10319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10320=IKcos(j4);
IkReal x10321=IKsin(j4);
IkReal x10322=(gconst4*r11);
IkReal x10323=(gconst5*r10);
IkReal x10324=(gconst5*r00);
IkReal x10325=(gconst5*r20);
IkReal x10326=((1.0)*x10320);
IkReal x10327=(gconst4*x10320);
IkReal x10328=((1.0)*x10321);
IkReal x10329=(gconst4*x10321);
evalcond[0]=(((x10320*x10322))+((r12*x10321))+(((-1.0)*x10323*x10326)));
evalcond[1]=((((-1.0)*r22*x10326))+((r21*x10329))+(((-1.0)*x10325*x10328)));
evalcond[2]=((((-1.0)*r02*x10326))+(((-1.0)*x10324*x10328))+((r01*x10329)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10326))+((x10321*x10322))+(((-1.0)*x10323*x10328)));
evalcond[4]=(((cj2*sj1))+((r22*x10321))+((cj1*sj2))+((r21*x10327))+(((-1.0)*x10325*x10326)));
evalcond[5]=((((-1.0)*x10324*x10326))+((r02*x10321))+(((-1.0)*cj1*cj2))+((r01*x10327))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10330=((-1.0)*r21);
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(x10330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
IkReal x10331=((1.0)*(x10333.value));
IkReal x10332=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10331)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10331)));
IkReal gconst4=(x10330*x10332);
IkReal gconst5=((1.0)*r20*x10332);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10334=((-1.0)*r21);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(x10334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
IkReal x10335=((1.0)*(x10337.value));
IkReal x10336=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10335)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10335)));
IkReal gconst4=(x10334*x10336);
IkReal gconst5=((1.0)*r20*x10336);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10338=((-1.0)*r21);
CheckValue<IkReal> x10341 = IKatan2WithCheck(IkReal(x10338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10341.valid){
continue;
}
IkReal x10339=((1.0)*(x10341.value));
IkReal x10340=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10339)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10339)));
IkReal gconst4=(x10338*x10340);
IkReal gconst5=((1.0)*r20*x10340);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10342=(gconst5*r10);
IkReal x10343=(gconst4*r11);
CheckValue<IkReal> x10344 = IKatan2WithCheck(IkReal((x10342+(((-1.0)*x10343)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10344.valid){
continue;
}
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10342*x10343))+(x10342*x10342)+(x10343*x10343))),-1);
if(!x10345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10344.value)+(((1.5707963267949)*(x10345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10346=IKsin(j4);
IkReal x10347=IKcos(j4);
IkReal x10348=(gconst4*r11);
IkReal x10349=(gconst5*r10);
IkReal x10350=(gconst4*r01);
IkReal x10351=(gconst5*r00);
IkReal x10352=(gconst4*r21);
IkReal x10353=(gconst5*r20);
IkReal x10354=((1.0)*x10347);
IkReal x10355=((1.0)*x10346);
evalcond[0]=((((-1.0)*r22*x10354))+((x10346*x10352))+(((-1.0)*x10353*x10355)));
evalcond[1]=((((-1.0)*x10351*x10355))+((x10346*x10350))+(((-1.0)*r02*x10354)));
evalcond[2]=(((x10347*x10349))+(((-1.0)*x10348*x10354))+(((-1.0)*r12*x10355)));
evalcond[3]=((1.0)+((x10346*x10348))+(((-1.0)*r12*x10354))+(((-1.0)*x10349*x10355)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10355))+(((-1.0)*x10352*x10354))+((x10347*x10353)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10347*x10351))+(((-1.0)*x10350*x10354))+(((-1.0)*r02*x10355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10356=((1.0)*gconst5);
CheckValue<IkReal> x10357 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10357.valid){
continue;
}
CheckValue<IkReal> x10358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10356)))),-1);
if(!x10358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10357.value)+(((1.5707963267949)*(x10358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10359=IKsin(j4);
IkReal x10360=IKcos(j4);
IkReal x10361=(gconst4*r11);
IkReal x10362=(gconst5*r10);
IkReal x10363=(gconst4*r01);
IkReal x10364=(gconst5*r00);
IkReal x10365=(gconst4*r21);
IkReal x10366=(gconst5*r20);
IkReal x10367=((1.0)*x10360);
IkReal x10368=((1.0)*x10359);
evalcond[0]=((((-1.0)*x10366*x10368))+((x10359*x10365))+(((-1.0)*r22*x10367)));
evalcond[1]=((((-1.0)*r02*x10367))+(((-1.0)*x10364*x10368))+((x10359*x10363)));
evalcond[2]=((((-1.0)*x10361*x10367))+(((-1.0)*r12*x10368))+((x10360*x10362)));
evalcond[3]=((1.0)+(((-1.0)*x10362*x10368))+(((-1.0)*r12*x10367))+((x10359*x10361)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10365*x10367))+((x10360*x10366))+(((-1.0)*r22*x10368)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10368))+(((-1.0)*x10363*x10367))+((x10360*x10364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10369 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10369.valid){
continue;
}
CheckValue<IkReal> x10370=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10369.value)+(((1.5707963267949)*(x10370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10371=IKsin(j4);
IkReal x10372=IKcos(j4);
IkReal x10373=(gconst4*r11);
IkReal x10374=(gconst5*r10);
IkReal x10375=(gconst4*r01);
IkReal x10376=(gconst5*r00);
IkReal x10377=(gconst4*r21);
IkReal x10378=(gconst5*r20);
IkReal x10379=((1.0)*x10372);
IkReal x10380=((1.0)*x10371);
evalcond[0]=((((-1.0)*x10378*x10380))+((x10371*x10377))+(((-1.0)*r22*x10379)));
evalcond[1]=((((-1.0)*x10376*x10380))+(((-1.0)*r02*x10379))+((x10371*x10375)));
evalcond[2]=(((x10372*x10374))+(((-1.0)*x10373*x10379))+(((-1.0)*r12*x10380)));
evalcond[3]=((1.0)+(((-1.0)*x10374*x10380))+((x10371*x10373))+(((-1.0)*r12*x10379)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10377*x10379))+((cj1*sj2))+((x10372*x10378))+(((-1.0)*r22*x10380)));
evalcond[5]=((((-1.0)*x10375*x10379))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10380))+((x10372*x10376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10381=gconst4*gconst4;
IkReal x10382=gconst5*gconst5;
IkReal x10383=(r10*r21);
IkReal x10384=((1.0)*cj3);
IkReal x10385=(r11*r21);
IkReal x10386=(r11*r20);
IkReal x10387=(r22*sj3);
IkReal x10388=(gconst4*r10);
IkReal x10389=((1.0)*sj3);
IkReal x10390=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10391 = IKatan2WithCheck(IkReal((((gconst5*r11*x10387))+((x10387*x10388)))),IkReal((((gconst4*gconst5*sj3*x10385))+(((-1.0)*x10382*x10386*x10389))+((sj3*x10381*x10383))+(((-1.0)*gconst5*r20*x10388*x10389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10391.valid){
continue;
}
CheckValue<IkReal> x10392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10384))+((x10383*x10390))+(((-1.0)*r10*r20*x10382*x10384))+((x10386*x10390))+(((-1.0)*x10381*x10384*x10385)))),-1);
if(!x10392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10391.value)+(((1.5707963267949)*(x10392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10393=IKsin(j4);
IkReal x10394=IKcos(j4);
IkReal x10395=(sj1*sj2);
IkReal x10396=(gconst5*sj3);
IkReal x10397=(cj3*gconst5);
IkReal x10398=(gconst4*r11);
IkReal x10399=((1.0)*cj1);
IkReal x10400=(gconst4*r01);
IkReal x10401=(cj2*sj1);
IkReal x10402=(gconst4*r21);
IkReal x10403=(gconst4*sj3);
IkReal x10404=(cj3*gconst4);
IkReal x10405=(cj2*x10399);
IkReal x10406=((1.0)*x10394);
IkReal x10407=((1.0)*x10393);
IkReal x10408=(cj3*x10393);
IkReal x10409=(cj3*x10394);
evalcond[0]=((((-1.0)*gconst5*r20*x10407))+(((-1.0)*r22*x10406))+((x10393*x10402)));
evalcond[1]=(((x10393*x10400))+(((-1.0)*r02*x10406))+(((-1.0)*gconst5*r00*x10407)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10407))+((x10393*x10398))+(((-1.0)*r12*x10406)));
evalcond[3]=((((-1.0)*r10*x10397*x10406))+((r11*x10396))+((x10398*x10409))+((r12*x10408))+((r10*x10403)));
evalcond[4]=(((r11*x10397))+((r10*x10394*x10396))+(((-1.0)*r12*sj3*x10407))+((r10*x10404))+(((-1.0)*sj3*x10398*x10406)));
evalcond[5]=(((r22*x10408))+((r21*x10396))+((cj1*sj2))+((r20*x10403))+x10401+((x10402*x10409))+(((-1.0)*r20*x10397*x10406)));
evalcond[6]=(((r01*x10396))+((x10400*x10409))+((r00*x10403))+((r02*x10408))+(((-1.0)*x10405))+x10395+(((-1.0)*r00*x10397*x10406)));
evalcond[7]=((((-1.0)*r22*sj3*x10407))+((r21*x10397))+(((-1.0)*x10405))+x10395+(((-1.0)*sj3*x10402*x10406))+((r20*x10404))+((r20*x10394*x10396)));
evalcond[8]=(((r01*x10397))+((r00*x10404))+((r00*x10394*x10396))+(((-1.0)*sj2*x10399))+(((-1.0)*sj3*x10400*x10406))+(((-1.0)*x10401))+(((-1.0)*r02*sj3*x10407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10410=((1.0)*gconst5);
CheckValue<IkReal> x10411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10410)))),-1);
if(!x10411.valid){
continue;
}
CheckValue<IkReal> x10412 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10410))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10411.value)))+(x10412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10413=IKsin(j4);
IkReal x10414=IKcos(j4);
IkReal x10415=(sj1*sj2);
IkReal x10416=(gconst5*sj3);
IkReal x10417=(cj3*gconst5);
IkReal x10418=(gconst4*r11);
IkReal x10419=((1.0)*cj1);
IkReal x10420=(gconst4*r01);
IkReal x10421=(cj2*sj1);
IkReal x10422=(gconst4*r21);
IkReal x10423=(gconst4*sj3);
IkReal x10424=(cj3*gconst4);
IkReal x10425=(cj2*x10419);
IkReal x10426=((1.0)*x10414);
IkReal x10427=((1.0)*x10413);
IkReal x10428=(cj3*x10413);
IkReal x10429=(cj3*x10414);
evalcond[0]=(((x10413*x10422))+(((-1.0)*gconst5*r20*x10427))+(((-1.0)*r22*x10426)));
evalcond[1]=((((-1.0)*gconst5*r00*x10427))+((x10413*x10420))+(((-1.0)*r02*x10426)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10427))+((x10413*x10418))+(((-1.0)*r12*x10426)));
evalcond[3]=(((r12*x10428))+((r11*x10416))+((r10*x10423))+((x10418*x10429))+(((-1.0)*r10*x10417*x10426)));
evalcond[4]=(((r10*x10414*x10416))+(((-1.0)*sj3*x10418*x10426))+(((-1.0)*r12*sj3*x10427))+((r11*x10417))+((r10*x10424)));
evalcond[5]=(((r21*x10416))+((cj1*sj2))+((r22*x10428))+((x10422*x10429))+x10421+((r20*x10423))+(((-1.0)*r20*x10417*x10426)));
evalcond[6]=(((r00*x10423))+((x10420*x10429))+((r01*x10416))+(((-1.0)*r00*x10417*x10426))+((r02*x10428))+(((-1.0)*x10425))+x10415);
evalcond[7]=(((r21*x10417))+(((-1.0)*sj3*x10422*x10426))+(((-1.0)*x10425))+x10415+((r20*x10424))+((r20*x10414*x10416))+(((-1.0)*r22*sj3*x10427)));
evalcond[8]=(((r00*x10424))+((r00*x10414*x10416))+((r01*x10417))+(((-1.0)*sj2*x10419))+(((-1.0)*sj3*x10420*x10426))+(((-1.0)*x10421))+(((-1.0)*r02*sj3*x10427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10430 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10430.valid){
continue;
}
CheckValue<IkReal> x10431=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10430.value)+(((1.5707963267949)*(x10431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10432=IKsin(j4);
IkReal x10433=IKcos(j4);
IkReal x10434=(sj1*sj2);
IkReal x10435=(gconst5*sj3);
IkReal x10436=(cj3*gconst5);
IkReal x10437=(gconst4*r11);
IkReal x10438=((1.0)*cj1);
IkReal x10439=(gconst4*r01);
IkReal x10440=(cj2*sj1);
IkReal x10441=(gconst4*r21);
IkReal x10442=(gconst4*sj3);
IkReal x10443=(cj3*gconst4);
IkReal x10444=(cj2*x10438);
IkReal x10445=((1.0)*x10433);
IkReal x10446=((1.0)*x10432);
IkReal x10447=(cj3*x10432);
IkReal x10448=(cj3*x10433);
evalcond[0]=((((-1.0)*gconst5*r20*x10446))+((x10432*x10441))+(((-1.0)*r22*x10445)));
evalcond[1]=((((-1.0)*r02*x10445))+(((-1.0)*gconst5*r00*x10446))+((x10432*x10439)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10445))+((x10432*x10437))+(((-1.0)*gconst5*r10*x10446)));
evalcond[3]=(((x10437*x10448))+(((-1.0)*r10*x10436*x10445))+((r12*x10447))+((r11*x10435))+((r10*x10442)));
evalcond[4]=(((r10*x10433*x10435))+(((-1.0)*sj3*x10437*x10445))+(((-1.0)*r12*sj3*x10446))+((r11*x10436))+((r10*x10443)));
evalcond[5]=(((r22*x10447))+((cj1*sj2))+((r20*x10442))+x10440+((x10441*x10448))+(((-1.0)*r20*x10436*x10445))+((r21*x10435)));
evalcond[6]=(((r01*x10435))+(((-1.0)*x10444))+((r02*x10447))+((r00*x10442))+(((-1.0)*r00*x10436*x10445))+x10434+((x10439*x10448)));
evalcond[7]=((((-1.0)*r22*sj3*x10446))+(((-1.0)*x10444))+((r20*x10443))+x10434+(((-1.0)*sj3*x10441*x10445))+((r20*x10433*x10435))+((r21*x10436)));
evalcond[8]=((((-1.0)*x10440))+((r01*x10436))+(((-1.0)*r02*sj3*x10446))+(((-1.0)*sj2*x10438))+((r00*x10433*x10435))+(((-1.0)*sj3*x10439*x10445))+((r00*x10443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10449=((-1.0)*r21);
CheckValue<IkReal> x10452 = IKatan2WithCheck(IkReal(x10449),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10452.valid){
continue;
}
IkReal x10450=((1.0)*(x10452.value));
IkReal x10451=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10450)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10450)));
IkReal gconst4=(x10449*x10451);
IkReal gconst5=((1.0)*r20*x10451);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10453=((-1.0)*r21);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(x10453),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
IkReal x10454=((1.0)*(x10456.value));
IkReal x10455=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10454)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10454)));
IkReal gconst4=(x10453*x10455);
IkReal gconst5=((1.0)*r20*x10455);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10457=((-1.0)*r21);
CheckValue<IkReal> x10460 = IKatan2WithCheck(IkReal(x10457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10460.valid){
continue;
}
IkReal x10458=((1.0)*(x10460.value));
IkReal x10459=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10458)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10458)));
IkReal gconst4=(x10457*x10459);
IkReal gconst5=((1.0)*r20*x10459);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10461=((-1.0)*r21);
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal(x10461),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
IkReal x10462=((1.0)*(x10464.value));
IkReal x10463=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10462)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10462)));
IkReal gconst4=(x10461*x10463);
IkReal gconst5=((1.0)*r20*x10463);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10465=((-1.0)*r21);
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal(x10465),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
IkReal x10466=((1.0)*(x10468.value));
IkReal x10467=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10466)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10466)));
IkReal gconst4=(x10465*x10467);
IkReal gconst5=((1.0)*r20*x10467);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10469=((-1.0)*r21);
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(x10469),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
IkReal x10470=((1.0)*(x10472.value));
IkReal x10471=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10470)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10470)));
IkReal gconst4=(x10469*x10471);
IkReal gconst5=((1.0)*r20*x10471);
IkReal x10473=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10477=IKPowWithIntegerCheck(x10473,-1);
if(!x10477.valid){
continue;
}
IkReal x10474=x10477.value;
IkReal x10475=((1.0)*x10474);
IkReal x10476=((((-1.0)*x10475*(r11*r11)*(r21*r21)))+(((-1.0)*x10475*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10474)));
j4eval[0]=x10476;
j4eval[1]=r12;
j4eval[2]=x10473;
j4eval[3]=IKsign(x10476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10478=(gconst5*r10);
IkReal x10479=(gconst4*r11);
CheckValue<IkReal> x10480=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10479*x10479)))+(((2.0)*x10478*x10479))+(((-1.0)*(x10478*x10478)))+(((-1.0)*(r12*r12))))),-1);
if(!x10480.valid){
continue;
}
CheckValue<IkReal> x10481 = IKatan2WithCheck(IkReal(((((-1.0)*x10479))+x10478)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10480.value)))+(x10481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10482=IKsin(j4);
IkReal x10483=IKcos(j4);
IkReal x10484=(gconst4*r11);
IkReal x10485=(gconst5*r10);
IkReal x10486=(gconst4*r01);
IkReal x10487=(gconst5*r00);
IkReal x10488=(gconst4*r21);
IkReal x10489=(gconst5*r20);
IkReal x10490=((1.0)*x10483);
IkReal x10491=((1.0)*x10482);
evalcond[0]=((((-1.0)*x10489*x10491))+(((-1.0)*r22*x10490))+((x10482*x10488)));
evalcond[1]=(((x10482*x10486))+(((-1.0)*r02*x10490))+(((-1.0)*x10487*x10491)));
evalcond[2]=((((-1.0)*r12*x10491))+(((-1.0)*x10484*x10490))+((x10483*x10485)));
evalcond[3]=((-1.0)+(((-1.0)*x10485*x10491))+((x10482*x10484))+(((-1.0)*r12*x10490)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10483*x10487))+(((-1.0)*r02*x10491))+(((-1.0)*x10486*x10490)));
evalcond[5]=((((-1.0)*x10488*x10490))+(((-1.0)*r22*x10491))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10483*x10489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10492=((1.0)*gconst5);
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
CheckValue<IkReal> x10494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10492))+(((-1.0)*gconst4*r20)))),-1);
if(!x10494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10493.value)+(((1.5707963267949)*(x10494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10495=IKsin(j4);
IkReal x10496=IKcos(j4);
IkReal x10497=(gconst4*r11);
IkReal x10498=(gconst5*r10);
IkReal x10499=(gconst4*r01);
IkReal x10500=(gconst5*r00);
IkReal x10501=(gconst4*r21);
IkReal x10502=(gconst5*r20);
IkReal x10503=((1.0)*x10496);
IkReal x10504=((1.0)*x10495);
evalcond[0]=((((-1.0)*r22*x10503))+(((-1.0)*x10502*x10504))+((x10495*x10501)));
evalcond[1]=(((x10495*x10499))+(((-1.0)*r02*x10503))+(((-1.0)*x10500*x10504)));
evalcond[2]=((((-1.0)*x10497*x10503))+((x10496*x10498))+(((-1.0)*r12*x10504)));
evalcond[3]=((-1.0)+(((-1.0)*x10498*x10504))+(((-1.0)*r12*x10503))+((x10495*x10497)));
evalcond[4]=(((cj2*sj1))+((x10496*x10500))+((cj1*sj2))+(((-1.0)*r02*x10504))+(((-1.0)*x10499*x10503)));
evalcond[5]=((((-1.0)*x10501*x10503))+(((-1.0)*r22*x10504))+((x10496*x10502))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10505=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10505.valid){
continue;
}
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10505.value)))+(x10506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10507=IKsin(j4);
IkReal x10508=IKcos(j4);
IkReal x10509=(gconst4*r11);
IkReal x10510=(gconst5*r10);
IkReal x10511=(gconst4*r01);
IkReal x10512=(gconst5*r00);
IkReal x10513=(gconst4*r21);
IkReal x10514=(gconst5*r20);
IkReal x10515=((1.0)*x10508);
IkReal x10516=((1.0)*x10507);
evalcond[0]=((((-1.0)*r22*x10515))+((x10507*x10513))+(((-1.0)*x10514*x10516)));
evalcond[1]=((((-1.0)*r02*x10515))+((x10507*x10511))+(((-1.0)*x10512*x10516)));
evalcond[2]=((((-1.0)*x10509*x10515))+(((-1.0)*r12*x10516))+((x10508*x10510)));
evalcond[3]=((-1.0)+(((-1.0)*x10510*x10516))+((x10507*x10509))+(((-1.0)*r12*x10515)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10511*x10515))+(((-1.0)*r02*x10516))+((cj1*sj2))+((x10508*x10512)));
evalcond[5]=((((-1.0)*r22*x10516))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10513*x10515))+((x10508*x10514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10517=((-1.0)*r21);
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal(x10517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
IkReal x10518=((1.0)*(x10520.value));
IkReal x10519=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10518)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10518)));
IkReal gconst4=(x10517*x10519);
IkReal gconst5=((1.0)*r20*x10519);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10521=((-1.0)*r21);
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(x10521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
IkReal x10522=((1.0)*(x10524.value));
IkReal x10523=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10522)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10522)));
IkReal gconst4=(x10521*x10523);
IkReal gconst5=((1.0)*r20*x10523);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10525=((-1.0)*r21);
CheckValue<IkReal> x10528 = IKatan2WithCheck(IkReal(x10525),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10528.valid){
continue;
}
IkReal x10526=((1.0)*(x10528.value));
IkReal x10527=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10526)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10526)));
IkReal gconst4=(x10525*x10527);
IkReal gconst5=((1.0)*r20*x10527);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10529=(gconst5*r10);
IkReal x10530=(gconst4*r11);
CheckValue<IkReal> x10531=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10529*x10530))+(x10530*x10530)+(x10529*x10529))),-1);
if(!x10531.valid){
continue;
}
CheckValue<IkReal> x10532 = IKatan2WithCheck(IkReal(((((-1.0)*x10529))+x10530)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10531.value)))+(x10532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10533=IKcos(j4);
IkReal x10534=IKsin(j4);
IkReal x10535=(gconst4*r11);
IkReal x10536=(gconst5*r10);
IkReal x10537=(gconst5*r00);
IkReal x10538=(gconst5*r20);
IkReal x10539=((1.0)*x10533);
IkReal x10540=(gconst4*x10533);
IkReal x10541=((1.0)*x10534);
IkReal x10542=(gconst4*x10534);
evalcond[0]=(((x10533*x10535))+(((-1.0)*x10536*x10539))+((r12*x10534)));
evalcond[1]=((((-1.0)*r22*x10539))+(((-1.0)*x10538*x10541))+((r21*x10542)));
evalcond[2]=((((-1.0)*r02*x10539))+(((-1.0)*x10537*x10541))+((r01*x10542)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10539))+((x10534*x10535))+(((-1.0)*x10536*x10541)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10537*x10539))+((r02*x10534))+((cj1*sj2))+((r01*x10540)));
evalcond[5]=(((r22*x10534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10538*x10539))+((r21*x10540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10543=((1.0)*gconst5);
CheckValue<IkReal> x10544=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10543)))),-1);
if(!x10544.valid){
continue;
}
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10543))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10544.value)))+(x10545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10546=IKcos(j4);
IkReal x10547=IKsin(j4);
IkReal x10548=(gconst4*r11);
IkReal x10549=(gconst5*r10);
IkReal x10550=(gconst5*r00);
IkReal x10551=(gconst5*r20);
IkReal x10552=((1.0)*x10546);
IkReal x10553=(gconst4*x10546);
IkReal x10554=((1.0)*x10547);
IkReal x10555=(gconst4*x10547);
evalcond[0]=(((r12*x10547))+((x10546*x10548))+(((-1.0)*x10549*x10552)));
evalcond[1]=((((-1.0)*x10551*x10554))+((r21*x10555))+(((-1.0)*r22*x10552)));
evalcond[2]=((((-1.0)*x10550*x10554))+(((-1.0)*r02*x10552))+((r01*x10555)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10552))+((x10547*x10548))+(((-1.0)*x10549*x10554)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10550*x10552))+((r02*x10547))+((r01*x10553)));
evalcond[5]=((((-1.0)*x10551*x10552))+((r22*x10547))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10556=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10556.valid){
continue;
}
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10556.value)))+(x10557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10558=IKcos(j4);
IkReal x10559=IKsin(j4);
IkReal x10560=(gconst4*r11);
IkReal x10561=(gconst5*r10);
IkReal x10562=(gconst5*r00);
IkReal x10563=(gconst5*r20);
IkReal x10564=((1.0)*x10558);
IkReal x10565=(gconst4*x10558);
IkReal x10566=((1.0)*x10559);
IkReal x10567=(gconst4*x10559);
evalcond[0]=((((-1.0)*x10561*x10564))+((x10558*x10560))+((r12*x10559)));
evalcond[1]=((((-1.0)*r22*x10564))+(((-1.0)*x10563*x10566))+((r21*x10567)));
evalcond[2]=(((r01*x10567))+(((-1.0)*x10562*x10566))+(((-1.0)*r02*x10564)));
evalcond[3]=((-1.0)+(((-1.0)*x10561*x10566))+(((-1.0)*r12*x10564))+((x10559*x10560)));
evalcond[4]=(((r01*x10565))+((cj2*sj1))+((r02*x10559))+((cj1*sj2))+(((-1.0)*x10562*x10564)));
evalcond[5]=(((r22*x10559))+(((-1.0)*x10563*x10564))+((r21*x10565))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10568=((-1.0)*r21);
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(x10568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
IkReal x10569=((1.0)*(x10571.value));
IkReal x10570=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10569)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10569)));
IkReal gconst4=(x10568*x10570);
IkReal gconst5=((1.0)*r20*x10570);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10572=((-1.0)*r21);
CheckValue<IkReal> x10575 = IKatan2WithCheck(IkReal(x10572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10575.valid){
continue;
}
IkReal x10573=((1.0)*(x10575.value));
IkReal x10574=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10573)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10573)));
IkReal gconst4=(x10572*x10574);
IkReal gconst5=((1.0)*r20*x10574);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10576=((-1.0)*r21);
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(x10576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
IkReal x10577=((1.0)*(x10579.value));
IkReal x10578=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10577)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10577)));
IkReal gconst4=(x10576*x10578);
IkReal gconst5=((1.0)*r20*x10578);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10580=(gconst5*r10);
IkReal x10581=(gconst4*r11);
CheckValue<IkReal> x10582=IKPowWithIntegerCheck(IKsign(((x10581*x10581)+(r12*r12)+(((-2.0)*x10580*x10581))+(x10580*x10580))),-1);
if(!x10582.valid){
continue;
}
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal((x10581+(((-1.0)*x10580)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10582.value)))+(x10583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10584=IKcos(j4);
IkReal x10585=IKsin(j4);
IkReal x10586=(gconst5*r10);
IkReal x10587=(gconst5*r00);
IkReal x10588=(gconst5*r20);
IkReal x10589=((1.0)*x10584);
IkReal x10590=(gconst4*x10585);
IkReal x10591=(gconst4*x10584);
IkReal x10592=((1.0)*x10585);
evalcond[0]=(((r12*x10585))+((r11*x10591))+(((-1.0)*x10586*x10589)));
evalcond[1]=(((r21*x10590))+(((-1.0)*r22*x10589))+(((-1.0)*x10588*x10592)));
evalcond[2]=((((-1.0)*x10587*x10592))+((r01*x10590))+(((-1.0)*r02*x10589)));
evalcond[3]=((-1.0)+((r11*x10590))+(((-1.0)*r12*x10589))+(((-1.0)*x10586*x10592)));
evalcond[4]=(((r21*x10591))+((cj2*sj1))+((cj1*sj2))+((r22*x10585))+(((-1.0)*x10588*x10589)));
evalcond[5]=((((-1.0)*x10587*x10589))+(((-1.0)*sj1*sj2))+((r01*x10591))+((r02*x10585))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10593=((1.0)*gconst5);
CheckValue<IkReal> x10594 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10594.valid){
continue;
}
CheckValue<IkReal> x10595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10593))+(((-1.0)*gconst4*r20)))),-1);
if(!x10595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10594.value)+(((1.5707963267949)*(x10595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10596=IKcos(j4);
IkReal x10597=IKsin(j4);
IkReal x10598=(gconst5*r10);
IkReal x10599=(gconst5*r00);
IkReal x10600=(gconst5*r20);
IkReal x10601=((1.0)*x10596);
IkReal x10602=(gconst4*x10597);
IkReal x10603=(gconst4*x10596);
IkReal x10604=((1.0)*x10597);
evalcond[0]=((((-1.0)*x10598*x10601))+((r11*x10603))+((r12*x10597)));
evalcond[1]=((((-1.0)*x10600*x10604))+((r21*x10602))+(((-1.0)*r22*x10601)));
evalcond[2]=(((r01*x10602))+(((-1.0)*r02*x10601))+(((-1.0)*x10599*x10604)));
evalcond[3]=((-1.0)+(((-1.0)*x10598*x10604))+((r11*x10602))+(((-1.0)*r12*x10601)));
evalcond[4]=((((-1.0)*x10600*x10601))+((cj2*sj1))+((r21*x10603))+((cj1*sj2))+((r22*x10597)));
evalcond[5]=(((r01*x10603))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x10599*x10601))+((r02*x10597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10605.valid){
continue;
}
CheckValue<IkReal> x10606 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10605.value)))+(x10606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10607=IKcos(j4);
IkReal x10608=IKsin(j4);
IkReal x10609=(gconst5*r10);
IkReal x10610=(gconst5*r00);
IkReal x10611=(gconst5*r20);
IkReal x10612=((1.0)*x10607);
IkReal x10613=(gconst4*x10608);
IkReal x10614=(gconst4*x10607);
IkReal x10615=((1.0)*x10608);
evalcond[0]=((((-1.0)*x10609*x10612))+((r12*x10608))+((r11*x10614)));
evalcond[1]=((((-1.0)*x10611*x10615))+(((-1.0)*r22*x10612))+((r21*x10613)));
evalcond[2]=((((-1.0)*x10610*x10615))+(((-1.0)*r02*x10612))+((r01*x10613)));
evalcond[3]=((-1.0)+(((-1.0)*x10609*x10615))+(((-1.0)*r12*x10612))+((r11*x10613)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10611*x10612))+((cj1*sj2))+((r22*x10608))+((r21*x10614)));
evalcond[5]=((((-1.0)*x10610*x10612))+((r02*x10608))+(((-1.0)*sj1*sj2))+((r01*x10614))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10616=((-1.0)*r21);
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(x10616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
IkReal x10617=((1.0)*(x10619.value));
IkReal x10618=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10617)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10617)));
IkReal gconst4=(x10616*x10618);
IkReal gconst5=((1.0)*r20*x10618);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10620=((-1.0)*r21);
CheckValue<IkReal> x10623 = IKatan2WithCheck(IkReal(x10620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10623.valid){
continue;
}
IkReal x10621=((1.0)*(x10623.value));
IkReal x10622=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10621)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10621)));
IkReal gconst4=(x10620*x10622);
IkReal gconst5=((1.0)*r20*x10622);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10624=((-1.0)*r21);
CheckValue<IkReal> x10627 = IKatan2WithCheck(IkReal(x10624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10627.valid){
continue;
}
IkReal x10625=((1.0)*(x10627.value));
IkReal x10626=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10625)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10625)));
IkReal gconst4=(x10624*x10626);
IkReal gconst5=((1.0)*r20*x10626);
IkReal x10628=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(x10628,-1);
if(!x10632.valid){
continue;
}
IkReal x10629=x10632.value;
IkReal x10630=((1.0)*x10629);
IkReal x10631=((((-1.0)*x10630*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10629))+(((-1.0)*(r12*r12)))+(((-1.0)*x10630*(r11*r11)*(r21*r21))));
j4eval[0]=x10631;
j4eval[1]=r12;
j4eval[2]=x10628;
j4eval[3]=IKsign(x10631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10633=(gconst5*r10);
IkReal x10634=(gconst4*r11);
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(((((-1.0)*x10634))+x10633)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10634*x10634)))+(((-1.0)*(x10633*x10633)))+(((-1.0)*(r12*r12)))+(((2.0)*x10633*x10634)))),-1);
if(!x10636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10635.value)+(((1.5707963267949)*(x10636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10637=IKsin(j4);
IkReal x10638=IKcos(j4);
IkReal x10639=(gconst4*r11);
IkReal x10640=(gconst5*r10);
IkReal x10641=(gconst5*r00);
IkReal x10642=(gconst5*r20);
IkReal x10643=((1.0)*x10638);
IkReal x10644=(gconst4*x10637);
IkReal x10645=((1.0)*x10637);
evalcond[0]=(((r21*x10644))+(((-1.0)*r22*x10643))+(((-1.0)*x10642*x10645)));
evalcond[1]=((((-1.0)*r02*x10643))+(((-1.0)*x10641*x10645))+((r01*x10644)));
evalcond[2]=((((-1.0)*x10639*x10643))+((x10638*x10640))+(((-1.0)*r12*x10645)));
evalcond[3]=((-1.0)+(((-1.0)*x10640*x10645))+(((-1.0)*r12*x10643))+((x10637*x10639)));
evalcond[4]=(((cj2*sj1))+((x10638*x10642))+((cj1*sj2))+(((-1.0)*r22*x10645))+(((-1.0)*gconst4*r21*x10643)));
evalcond[5]=((((-1.0)*r02*x10645))+((x10638*x10641))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10643))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10646=((1.0)*gconst5);
CheckValue<IkReal> x10647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10646))+(((-1.0)*gconst4*r20)))),-1);
if(!x10647.valid){
continue;
}
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10646))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10647.value)))+(x10648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10649=IKsin(j4);
IkReal x10650=IKcos(j4);
IkReal x10651=(gconst4*r11);
IkReal x10652=(gconst5*r10);
IkReal x10653=(gconst5*r00);
IkReal x10654=(gconst5*r20);
IkReal x10655=((1.0)*x10650);
IkReal x10656=(gconst4*x10649);
IkReal x10657=((1.0)*x10649);
evalcond[0]=((((-1.0)*r22*x10655))+(((-1.0)*x10654*x10657))+((r21*x10656)));
evalcond[1]=((((-1.0)*x10653*x10657))+(((-1.0)*r02*x10655))+((r01*x10656)));
evalcond[2]=((((-1.0)*r12*x10657))+((x10650*x10652))+(((-1.0)*x10651*x10655)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10655))+(((-1.0)*x10652*x10657))+((x10649*x10651)));
evalcond[4]=((((-1.0)*gconst4*r21*x10655))+((cj2*sj1))+(((-1.0)*r22*x10657))+((cj1*sj2))+((x10650*x10654)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10650*x10653))+(((-1.0)*r02*x10657))+(((-1.0)*gconst4*r01*x10655))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10658=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10658.valid){
continue;
}
CheckValue<IkReal> x10659 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10658.value)))+(x10659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10660=IKsin(j4);
IkReal x10661=IKcos(j4);
IkReal x10662=(gconst4*r11);
IkReal x10663=(gconst5*r10);
IkReal x10664=(gconst5*r00);
IkReal x10665=(gconst5*r20);
IkReal x10666=((1.0)*x10661);
IkReal x10667=(gconst4*x10660);
IkReal x10668=((1.0)*x10660);
evalcond[0]=((((-1.0)*x10665*x10668))+(((-1.0)*r22*x10666))+((r21*x10667)));
evalcond[1]=((((-1.0)*r02*x10666))+((r01*x10667))+(((-1.0)*x10664*x10668)));
evalcond[2]=(((x10661*x10663))+(((-1.0)*r12*x10668))+(((-1.0)*x10662*x10666)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10666))+((x10660*x10662))+(((-1.0)*x10663*x10668)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10661*x10665))+(((-1.0)*gconst4*r21*x10666))+(((-1.0)*r22*x10668)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10668))+((x10661*x10664))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10669=((-1.0)*r21);
IkReal x10670=((-1.0)*px);
CheckValue<IkReal> x10672 = IKatan2WithCheck(IkReal(x10669),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10672.valid){
continue;
}
IkReal x10671=((1.0)*(x10672.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10671)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10670);
rxp1_1=(px*r21);
rxp1_2=(r11*x10670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10671)));
IkReal gconst4=x10669;
IkReal gconst5=((1.0)*r20);
IkReal x10673=((1.0)*cj3);
IkReal x10674=(r10*r20);
IkReal x10675=(r11*r21);
j4eval[0]=((((-1.0)*x10675))+(((-1.0)*x10674)));
j4eval[1]=((((-1.0)*x10673*x10675))+(((-1.0)*x10673*x10674)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10676=((-1.0)*r21);
IkReal x10677=((-1.0)*px);
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(x10676),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
IkReal x10678=((1.0)*(x10679.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10678)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10677);
rxp1_1=(px*r21);
rxp1_2=(r11*x10677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10678)));
IkReal gconst4=x10676;
IkReal gconst5=((1.0)*r20);
IkReal x10680=((1.0)*r11*r21);
IkReal x10681=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10681))+(((-1.0)*x10680)));
j4eval[1]=(((sj3*x10681))+((sj3*x10680)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10682=((-1.0)*r21);
IkReal x10683=((-1.0)*px);
CheckValue<IkReal> x10685 = IKatan2WithCheck(IkReal(x10682),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10685.valid){
continue;
}
IkReal x10684=((1.0)*(x10685.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10684)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10683);
rxp1_1=(px*r21);
rxp1_2=(r11*x10683);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10684)));
IkReal gconst4=x10682;
IkReal gconst5=((1.0)*r20);
IkReal x10686=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10686))+(((-1.0)*r11*r21*x10686)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10687=((1.0)*r10);
CheckValue<IkReal> x10688=IKPowWithIntegerCheck(cj3,-1);
if(!x10688.valid){
continue;
}
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(r02,-1);
if(!x10689.valid){
continue;
}
CheckValue<IkReal> x10690=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10687))),-1);
if(!x10690.valid){
continue;
}
if( IKabs(((x10688.value)*(x10689.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10690.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10687)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10688.value)*(x10689.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10690.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10687))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10688.value)*(x10689.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10690.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10687))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10691=IKsin(j4);
IkReal x10692=IKcos(j4);
IkReal x10693=(cj2*sj1);
IkReal x10694=(cj1*sj2);
IkReal x10695=(gconst5*sj3);
IkReal x10696=(gconst4*r11);
IkReal x10697=(sj1*sj2);
IkReal x10698=((1.0)*gconst5);
IkReal x10699=(cj1*cj2);
IkReal x10700=(gconst4*r21);
IkReal x10701=(cj3*gconst4);
IkReal x10702=(gconst4*sj3);
IkReal x10703=(cj3*gconst5);
IkReal x10704=(r20*x10692);
IkReal x10705=(r10*x10692);
IkReal x10706=(cj3*x10692);
IkReal x10707=(r02*x10691);
IkReal x10708=(x10693+x10694);
IkReal x10709=((1.0)*sj3*x10692);
evalcond[0]=((-1.0)*r02*x10692);
evalcond[1]=(((x10691*x10700))+(((-1.0)*r20*x10691*x10698)));
evalcond[2]=(((cj3*x10707))+(((-1.0)*x10697))+x10699);
evalcond[3]=(x10708+(((-1.0)*sj3*x10707)));
evalcond[4]=((-1.0)+((x10691*x10696))+(((-1.0)*r10*x10691*x10698)));
evalcond[5]=(((r11*x10695))+((x10696*x10706))+((r10*x10702))+(((-1.0)*cj3*x10698*x10705)));
evalcond[6]=(((x10695*x10705))+((r11*x10703))+(((-1.0)*x10696*x10709))+((r10*x10701)));
evalcond[7]=(((x10700*x10706))+((r21*x10695))+(((-1.0)*cj3*x10698*x10704))+x10708+((r20*x10702)));
evalcond[8]=((((-1.0)*x10699))+((x10695*x10704))+((r21*x10703))+((r20*x10701))+x10697+(((-1.0)*x10700*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10710=((1.0)*gconst5);
IkReal x10711=(gconst4*r11);
CheckValue<IkReal> x10712=IKPowWithIntegerCheck(((((-1.0)*r10*x10710))+x10711),-1);
if(!x10712.valid){
continue;
}
CheckValue<IkReal> x10713=IKPowWithIntegerCheck(((((-1.0)*sj3*x10711))+((gconst5*r10*sj3))),-1);
if(!x10713.valid){
continue;
}
if( IKabs(x10712.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10713.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10710)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10712.value)+IKsqr(((x10713.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10710))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10712.value, ((x10713.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10710))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10714=IKsin(j4);
IkReal x10715=IKcos(j4);
IkReal x10716=(cj2*sj1);
IkReal x10717=(cj1*sj2);
IkReal x10718=(gconst5*sj3);
IkReal x10719=(gconst4*r11);
IkReal x10720=(sj1*sj2);
IkReal x10721=((1.0)*gconst5);
IkReal x10722=(cj1*cj2);
IkReal x10723=(gconst4*r21);
IkReal x10724=(cj3*gconst4);
IkReal x10725=(gconst4*sj3);
IkReal x10726=(cj3*gconst5);
IkReal x10727=(r20*x10715);
IkReal x10728=(r10*x10715);
IkReal x10729=(cj3*x10715);
IkReal x10730=(r02*x10714);
IkReal x10731=(x10716+x10717);
IkReal x10732=((1.0)*sj3*x10715);
evalcond[0]=((-1.0)*r02*x10715);
evalcond[1]=((((-1.0)*r20*x10714*x10721))+((x10714*x10723)));
evalcond[2]=((((-1.0)*x10720))+x10722+((cj3*x10730)));
evalcond[3]=((((-1.0)*sj3*x10730))+x10731);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10714*x10721))+((x10714*x10719)));
evalcond[5]=(((r10*x10725))+((x10719*x10729))+((r11*x10718))+(((-1.0)*cj3*x10721*x10728)));
evalcond[6]=(((r10*x10724))+((x10718*x10728))+(((-1.0)*x10719*x10732))+((r11*x10726)));
evalcond[7]=(((x10723*x10729))+((r21*x10718))+((r20*x10725))+(((-1.0)*cj3*x10721*x10727))+x10731);
evalcond[8]=(((x10718*x10727))+((r21*x10726))+(((-1.0)*x10722))+((r20*x10724))+x10720+(((-1.0)*x10723*x10732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10733=((1.0)*sj3);
IkReal x10734=(gconst4*r11);
IkReal x10735=((1.0)*gconst5*r10);
CheckValue<IkReal> x10736=IKPowWithIntegerCheck(((((-1.0)*x10735))+x10734),-1);
if(!x10736.valid){
continue;
}
CheckValue<IkReal> x10737=IKPowWithIntegerCheck(((((-1.0)*cj3*x10735))+((cj3*x10734))),-1);
if(!x10737.valid){
continue;
}
if( IKabs(x10736.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10737.value)*(((((-1.0)*gconst4*r10*x10733))+(((-1.0)*gconst5*r11*x10733)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10736.value)+IKsqr(((x10737.value)*(((((-1.0)*gconst4*r10*x10733))+(((-1.0)*gconst5*r11*x10733))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10736.value, ((x10737.value)*(((((-1.0)*gconst4*r10*x10733))+(((-1.0)*gconst5*r11*x10733))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10738=IKsin(j4);
IkReal x10739=IKcos(j4);
IkReal x10740=(cj2*sj1);
IkReal x10741=(cj1*sj2);
IkReal x10742=(gconst5*sj3);
IkReal x10743=(gconst4*r11);
IkReal x10744=(sj1*sj2);
IkReal x10745=((1.0)*gconst5);
IkReal x10746=(cj1*cj2);
IkReal x10747=(gconst4*r21);
IkReal x10748=(cj3*gconst4);
IkReal x10749=(gconst4*sj3);
IkReal x10750=(cj3*gconst5);
IkReal x10751=(r20*x10739);
IkReal x10752=(r10*x10739);
IkReal x10753=(cj3*x10739);
IkReal x10754=(r02*x10738);
IkReal x10755=(x10741+x10740);
IkReal x10756=((1.0)*sj3*x10739);
evalcond[0]=((-1.0)*r02*x10739);
evalcond[1]=((((-1.0)*r20*x10738*x10745))+((x10738*x10747)));
evalcond[2]=((((-1.0)*x10744))+((cj3*x10754))+x10746);
evalcond[3]=((((-1.0)*sj3*x10754))+x10755);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10738*x10745))+((x10738*x10743)));
evalcond[5]=(((x10743*x10753))+((r10*x10749))+(((-1.0)*cj3*x10745*x10752))+((r11*x10742)));
evalcond[6]=(((r10*x10748))+((r11*x10750))+(((-1.0)*x10743*x10756))+((x10742*x10752)));
evalcond[7]=(((x10747*x10753))+((r20*x10749))+(((-1.0)*cj3*x10745*x10751))+x10755+((r21*x10742)));
evalcond[8]=((((-1.0)*x10746))+(((-1.0)*x10747*x10756))+((r20*x10748))+x10744+((x10742*x10751))+((r21*x10750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10757=gconst4*gconst4;
IkReal x10758=gconst5*gconst5;
IkReal x10759=(r10*r21);
IkReal x10760=((1.0)*cj3);
IkReal x10761=(r11*r21);
IkReal x10762=(r11*r20);
IkReal x10763=(r22*sj3);
IkReal x10764=(gconst4*r10);
IkReal x10765=((1.0)*sj3);
IkReal x10766=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10767 = IKatan2WithCheck(IkReal((((x10763*x10764))+((gconst5*r11*x10763)))),IkReal((((sj3*x10757*x10759))+((gconst4*gconst5*sj3*x10761))+(((-1.0)*gconst5*r20*x10764*x10765))+(((-1.0)*x10758*x10762*x10765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10767.valid){
continue;
}
CheckValue<IkReal> x10768=IKPowWithIntegerCheck(IKsign((((x10759*x10766))+(((-1.0)*r10*r20*x10758*x10760))+(((-1.0)*r12*r22*x10760))+(((-1.0)*x10757*x10760*x10761))+((x10762*x10766)))),-1);
if(!x10768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10767.value)+(((1.5707963267949)*(x10768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10769=IKsin(j4);
IkReal x10770=IKcos(j4);
IkReal x10771=(cj2*sj1);
IkReal x10772=(cj1*sj2);
IkReal x10773=(gconst5*sj3);
IkReal x10774=(gconst4*r11);
IkReal x10775=(sj1*sj2);
IkReal x10776=(gconst5*r10);
IkReal x10777=(cj1*cj2);
IkReal x10778=(gconst4*r01);
IkReal x10779=(gconst4*r21);
IkReal x10780=(gconst5*r00);
IkReal x10781=(gconst4*sj3);
IkReal x10782=(cj3*gconst5);
IkReal x10783=(cj3*gconst4);
IkReal x10784=((1.0)*x10770);
IkReal x10785=((1.0)*x10769);
IkReal x10786=(cj3*x10769);
IkReal x10787=(cj3*x10770);
IkReal x10788=(x10771+x10772);
evalcond[0]=((((-1.0)*gconst5*r20*x10785))+((x10769*x10779))+(((-1.0)*r22*x10784)));
evalcond[1]=((((-1.0)*x10780*x10785))+((x10769*x10778))+(((-1.0)*r02*x10784)));
evalcond[2]=((-1.0)+(((-1.0)*x10776*x10785))+(((-1.0)*r12*x10784))+((x10769*x10774)));
evalcond[3]=(((r11*x10773))+(((-1.0)*cj3*x10776*x10784))+((x10774*x10787))+((r12*x10786))+((r10*x10781)));
evalcond[4]=((((-1.0)*sj3*x10774*x10784))+((r11*x10782))+((r10*x10770*x10773))+(((-1.0)*r12*sj3*x10785))+((r10*x10783)));
evalcond[5]=(((r22*x10786))+((x10779*x10787))+((r20*x10781))+(((-1.0)*r20*x10782*x10784))+((r21*x10773))+x10788);
evalcond[6]=((((-1.0)*cj3*x10780*x10784))+((x10778*x10787))+(((-1.0)*x10775))+((r02*x10786))+((r01*x10773))+((r00*x10781))+x10777);
evalcond[7]=((((-1.0)*r02*sj3*x10785))+(((-1.0)*sj3*x10778*x10784))+((r01*x10782))+((r00*x10783))+x10788+((r00*x10770*x10773)));
evalcond[8]=((((-1.0)*sj3*x10779*x10784))+((r21*x10782))+(((-1.0)*x10777))+(((-1.0)*r22*sj3*x10785))+((r20*x10783))+((r20*x10770*x10773))+x10775);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10789=((1.0)*gconst5);
CheckValue<IkReal> x10790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10789))+(((-1.0)*gconst4*r20)))),-1);
if(!x10790.valid){
continue;
}
CheckValue<IkReal> x10791 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10789))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10790.value)))+(x10791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10792=IKsin(j4);
IkReal x10793=IKcos(j4);
IkReal x10794=(cj2*sj1);
IkReal x10795=(cj1*sj2);
IkReal x10796=(gconst5*sj3);
IkReal x10797=(gconst4*r11);
IkReal x10798=(sj1*sj2);
IkReal x10799=(gconst5*r10);
IkReal x10800=(cj1*cj2);
IkReal x10801=(gconst4*r01);
IkReal x10802=(gconst4*r21);
IkReal x10803=(gconst5*r00);
IkReal x10804=(gconst4*sj3);
IkReal x10805=(cj3*gconst5);
IkReal x10806=(cj3*gconst4);
IkReal x10807=((1.0)*x10793);
IkReal x10808=((1.0)*x10792);
IkReal x10809=(cj3*x10792);
IkReal x10810=(cj3*x10793);
IkReal x10811=(x10794+x10795);
evalcond[0]=(((x10792*x10802))+(((-1.0)*r22*x10807))+(((-1.0)*gconst5*r20*x10808)));
evalcond[1]=(((x10792*x10801))+(((-1.0)*x10803*x10808))+(((-1.0)*r02*x10807)));
evalcond[2]=((-1.0)+(((-1.0)*x10799*x10808))+((x10792*x10797))+(((-1.0)*r12*x10807)));
evalcond[3]=(((r10*x10804))+((x10797*x10810))+((r12*x10809))+((r11*x10796))+(((-1.0)*cj3*x10799*x10807)));
evalcond[4]=((((-1.0)*sj3*x10797*x10807))+((r10*x10793*x10796))+((r10*x10806))+(((-1.0)*r12*sj3*x10808))+((r11*x10805)));
evalcond[5]=(((r20*x10804))+((r21*x10796))+((r22*x10809))+((x10802*x10810))+(((-1.0)*r20*x10805*x10807))+x10811);
evalcond[6]=(((r00*x10804))+((r02*x10809))+(((-1.0)*x10798))+(((-1.0)*cj3*x10803*x10807))+((r01*x10796))+((x10801*x10810))+x10800);
evalcond[7]=((((-1.0)*r02*sj3*x10808))+(((-1.0)*sj3*x10801*x10807))+((r01*x10805))+((r00*x10806))+((r00*x10793*x10796))+x10811);
evalcond[8]=(((r20*x10806))+((r20*x10793*x10796))+(((-1.0)*sj3*x10802*x10807))+((r21*x10805))+(((-1.0)*x10800))+x10798+(((-1.0)*r22*sj3*x10808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10812=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10812.valid){
continue;
}
CheckValue<IkReal> x10813 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10812.value)))+(x10813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10814=IKsin(j4);
IkReal x10815=IKcos(j4);
IkReal x10816=(cj2*sj1);
IkReal x10817=(cj1*sj2);
IkReal x10818=(gconst5*sj3);
IkReal x10819=(gconst4*r11);
IkReal x10820=(sj1*sj2);
IkReal x10821=(gconst5*r10);
IkReal x10822=(cj1*cj2);
IkReal x10823=(gconst4*r01);
IkReal x10824=(gconst4*r21);
IkReal x10825=(gconst5*r00);
IkReal x10826=(gconst4*sj3);
IkReal x10827=(cj3*gconst5);
IkReal x10828=(cj3*gconst4);
IkReal x10829=((1.0)*x10815);
IkReal x10830=((1.0)*x10814);
IkReal x10831=(cj3*x10814);
IkReal x10832=(cj3*x10815);
IkReal x10833=(x10817+x10816);
evalcond[0]=(((x10814*x10824))+(((-1.0)*gconst5*r20*x10830))+(((-1.0)*r22*x10829)));
evalcond[1]=((((-1.0)*r02*x10829))+((x10814*x10823))+(((-1.0)*x10825*x10830)));
evalcond[2]=((-1.0)+(((-1.0)*x10821*x10830))+((x10814*x10819))+(((-1.0)*r12*x10829)));
evalcond[3]=(((x10819*x10832))+(((-1.0)*cj3*x10821*x10829))+((r10*x10826))+((r12*x10831))+((r11*x10818)));
evalcond[4]=((((-1.0)*sj3*x10819*x10829))+(((-1.0)*r12*sj3*x10830))+((r10*x10815*x10818))+((r10*x10828))+((r11*x10827)));
evalcond[5]=(((r22*x10831))+((x10824*x10832))+(((-1.0)*r20*x10827*x10829))+((r20*x10826))+((r21*x10818))+x10833);
evalcond[6]=(((x10823*x10832))+(((-1.0)*x10820))+((r02*x10831))+(((-1.0)*cj3*x10825*x10829))+((r01*x10818))+((r00*x10826))+x10822);
evalcond[7]=((((-1.0)*sj3*x10823*x10829))+(((-1.0)*r02*sj3*x10830))+((r00*x10815*x10818))+((r00*x10828))+((r01*x10827))+x10833);
evalcond[8]=(((r21*x10827))+(((-1.0)*x10822))+(((-1.0)*r22*sj3*x10830))+((r20*x10828))+(((-1.0)*sj3*x10824*x10829))+((r20*x10815*x10818))+x10820);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10834=((-1.0)*r21);
CheckValue<IkReal> x10837 = IKatan2WithCheck(IkReal(x10834),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10837.valid){
continue;
}
IkReal x10835=((1.0)*(x10837.value));
IkReal x10836=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10835)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10835)));
IkReal gconst4=(x10834*x10836);
IkReal gconst5=((1.0)*r20*x10836);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10838=((-1.0)*r21);
CheckValue<IkReal> x10841 = IKatan2WithCheck(IkReal(x10838),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10841.valid){
continue;
}
IkReal x10839=((1.0)*(x10841.value));
IkReal x10840=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10839)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10839)));
IkReal gconst4=(x10838*x10840);
IkReal gconst5=((1.0)*r20*x10840);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10842=((-1.0)*r21);
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(x10842),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
IkReal x10843=((1.0)*(x10845.value));
IkReal x10844=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10843)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10843)));
IkReal gconst4=(x10842*x10844);
IkReal gconst5=((1.0)*r20*x10844);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10846=((-1.0)*r21);
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(x10846),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
IkReal x10847=((1.0)*(x10849.value));
IkReal x10848=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10847)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10847)));
IkReal gconst4=(x10846*x10848);
IkReal gconst5=((1.0)*r20*x10848);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10850=((-1.0)*r21);
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal(x10850),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
IkReal x10851=((1.0)*(x10853.value));
IkReal x10852=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10851)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10851)));
IkReal gconst4=(x10850*x10852);
IkReal gconst5=((1.0)*r20*x10852);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10854=((-1.0)*r21);
CheckValue<IkReal> x10857 = IKatan2WithCheck(IkReal(x10854),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10857.valid){
continue;
}
IkReal x10855=((1.0)*(x10857.value));
IkReal x10856=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10855)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10855)));
IkReal gconst4=(x10854*x10856);
IkReal gconst5=((1.0)*r20*x10856);
IkReal x10858=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10862=IKPowWithIntegerCheck(x10858,-1);
if(!x10862.valid){
continue;
}
IkReal x10859=x10862.value;
IkReal x10860=((1.0)*x10859);
IkReal x10861=((((-1.0)*x10860*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10859))+(((-1.0)*x10860*(r00*r00)*(r20*r20))));
j4eval[0]=x10861;
j4eval[1]=r02;
j4eval[2]=x10858;
j4eval[3]=IKsign(x10861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10863=(gconst5*r00);
IkReal x10864=(gconst4*r01);
CheckValue<IkReal> x10865=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10863*x10863)))+(((2.0)*x10863*x10864))+(((-1.0)*(x10864*x10864))))),-1);
if(!x10865.valid){
continue;
}
CheckValue<IkReal> x10866 = IKatan2WithCheck(IkReal(((((-1.0)*x10864))+x10863)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10865.value)))+(x10866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10867=IKsin(j4);
IkReal x10868=IKcos(j4);
IkReal x10869=(gconst4*r11);
IkReal x10870=((1.0)*cj1);
IkReal x10871=(gconst5*r10);
IkReal x10872=(gconst4*r01);
IkReal x10873=(gconst5*r00);
IkReal x10874=(gconst4*r21);
IkReal x10875=(gconst5*r20);
IkReal x10876=((1.0)*x10868);
IkReal x10877=((1.0)*x10867);
evalcond[0]=((((-1.0)*r22*x10876))+(((-1.0)*x10875*x10877))+((x10867*x10874)));
evalcond[1]=((((-1.0)*r12*x10876))+((x10867*x10869))+(((-1.0)*x10871*x10877)));
evalcond[2]=((((-1.0)*r02*x10877))+((x10868*x10873))+(((-1.0)*x10872*x10876)));
evalcond[3]=((-1.0)+(((-1.0)*x10873*x10877))+((x10867*x10872))+(((-1.0)*r02*x10876)));
evalcond[4]=((((-1.0)*r22*x10877))+((sj1*sj2))+(((-1.0)*x10874*x10876))+((x10868*x10875))+(((-1.0)*cj2*x10870)));
evalcond[5]=((((-1.0)*r12*x10877))+(((-1.0)*cj2*sj1))+(((-1.0)*x10869*x10876))+((x10868*x10871))+(((-1.0)*sj2*x10870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10878=((1.0)*gconst5);
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10878))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
CheckValue<IkReal> x10880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10878))+(((-1.0)*gconst4*r10)))),-1);
if(!x10880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10879.value)+(((1.5707963267949)*(x10880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10881=IKsin(j4);
IkReal x10882=IKcos(j4);
IkReal x10883=(gconst4*r11);
IkReal x10884=((1.0)*cj1);
IkReal x10885=(gconst5*r10);
IkReal x10886=(gconst4*r01);
IkReal x10887=(gconst5*r00);
IkReal x10888=(gconst4*r21);
IkReal x10889=(gconst5*r20);
IkReal x10890=((1.0)*x10882);
IkReal x10891=((1.0)*x10881);
evalcond[0]=((((-1.0)*x10889*x10891))+((x10881*x10888))+(((-1.0)*r22*x10890)));
evalcond[1]=(((x10881*x10883))+(((-1.0)*x10885*x10891))+(((-1.0)*r12*x10890)));
evalcond[2]=(((x10882*x10887))+(((-1.0)*r02*x10891))+(((-1.0)*x10886*x10890)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10890))+((x10881*x10886))+(((-1.0)*x10887*x10891)));
evalcond[4]=(((x10882*x10889))+(((-1.0)*x10888*x10890))+((sj1*sj2))+(((-1.0)*cj2*x10884))+(((-1.0)*r22*x10891)));
evalcond[5]=(((x10882*x10885))+(((-1.0)*sj2*x10884))+(((-1.0)*cj2*sj1))+(((-1.0)*x10883*x10890))+(((-1.0)*r12*x10891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10892 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10892.valid){
continue;
}
CheckValue<IkReal> x10893=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10892.value)+(((1.5707963267949)*(x10893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10894=IKsin(j4);
IkReal x10895=IKcos(j4);
IkReal x10896=(gconst4*r11);
IkReal x10897=((1.0)*cj1);
IkReal x10898=(gconst5*r10);
IkReal x10899=(gconst4*r01);
IkReal x10900=(gconst5*r00);
IkReal x10901=(gconst4*r21);
IkReal x10902=(gconst5*r20);
IkReal x10903=((1.0)*x10895);
IkReal x10904=((1.0)*x10894);
evalcond[0]=((((-1.0)*r22*x10903))+(((-1.0)*x10902*x10904))+((x10894*x10901)));
evalcond[1]=(((x10894*x10896))+(((-1.0)*r12*x10903))+(((-1.0)*x10898*x10904)));
evalcond[2]=(((x10895*x10900))+(((-1.0)*x10899*x10903))+(((-1.0)*r02*x10904)));
evalcond[3]=((-1.0)+(((-1.0)*x10900*x10904))+((x10894*x10899))+(((-1.0)*r02*x10903)));
evalcond[4]=(((x10895*x10902))+(((-1.0)*x10901*x10903))+((sj1*sj2))+(((-1.0)*r22*x10904))+(((-1.0)*cj2*x10897)));
evalcond[5]=((((-1.0)*sj2*x10897))+(((-1.0)*cj2*sj1))+((x10895*x10898))+(((-1.0)*r12*x10904))+(((-1.0)*x10896*x10903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10905=((-1.0)*r21);
CheckValue<IkReal> x10908 = IKatan2WithCheck(IkReal(x10905),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10908.valid){
continue;
}
IkReal x10906=((1.0)*(x10908.value));
IkReal x10907=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10906)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10906)));
IkReal gconst4=(x10905*x10907);
IkReal gconst5=((1.0)*r20*x10907);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10909=((-1.0)*r21);
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(x10909),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
IkReal x10910=((1.0)*(x10912.value));
IkReal x10911=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10910)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10910)));
IkReal gconst4=(x10909*x10911);
IkReal gconst5=((1.0)*r20*x10911);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10913=((-1.0)*r21);
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal(x10913),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
IkReal x10914=((1.0)*(x10916.value));
IkReal x10915=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10914)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10914)));
IkReal gconst4=(x10913*x10915);
IkReal gconst5=((1.0)*r20*x10915);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10917=(gconst4*r01);
IkReal x10918=(gconst5*r00);
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal((x10917+(((-1.0)*x10918)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign(((x10918*x10918)+(x10917*x10917)+(r02*r02)+(((-2.0)*x10917*x10918)))),-1);
if(!x10920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10919.value)+(((1.5707963267949)*(x10920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10921=IKcos(j4);
IkReal x10922=IKsin(j4);
IkReal x10923=(gconst4*r11);
IkReal x10924=(gconst5*r10);
IkReal x10925=((1.0)*cj1);
IkReal x10926=(gconst5*r00);
IkReal x10927=(gconst5*r20);
IkReal x10928=((1.0)*x10921);
IkReal x10929=(gconst4*x10921);
IkReal x10930=((1.0)*x10922);
IkReal x10931=(gconst4*x10922);
evalcond[0]=(((r02*x10922))+((r01*x10929))+(((-1.0)*x10926*x10928)));
evalcond[1]=((((-1.0)*r22*x10928))+(((-1.0)*x10927*x10930))+((r21*x10931)));
evalcond[2]=((((-1.0)*r12*x10928))+(((-1.0)*x10924*x10930))+((x10922*x10923)));
evalcond[3]=((-1.0)+(((-1.0)*x10926*x10930))+(((-1.0)*r02*x10928))+((r01*x10931)));
evalcond[4]=((((-1.0)*x10927*x10928))+((sj1*sj2))+((r21*x10929))+((r22*x10922))+(((-1.0)*cj2*x10925)));
evalcond[5]=((((-1.0)*sj2*x10925))+(((-1.0)*cj2*sj1))+(((-1.0)*x10924*x10928))+((x10921*x10923))+((r12*x10922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10932=((1.0)*gconst5);
CheckValue<IkReal> x10933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10932))+(((-1.0)*gconst4*r10)))),-1);
if(!x10933.valid){
continue;
}
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10932))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10933.value)))+(x10934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10935=IKcos(j4);
IkReal x10936=IKsin(j4);
IkReal x10937=(gconst4*r11);
IkReal x10938=(gconst5*r10);
IkReal x10939=((1.0)*cj1);
IkReal x10940=(gconst5*r00);
IkReal x10941=(gconst5*r20);
IkReal x10942=((1.0)*x10935);
IkReal x10943=(gconst4*x10935);
IkReal x10944=((1.0)*x10936);
IkReal x10945=(gconst4*x10936);
evalcond[0]=(((r02*x10936))+((r01*x10943))+(((-1.0)*x10940*x10942)));
evalcond[1]=(((r21*x10945))+(((-1.0)*x10941*x10944))+(((-1.0)*r22*x10942)));
evalcond[2]=((((-1.0)*r12*x10942))+(((-1.0)*x10938*x10944))+((x10936*x10937)));
evalcond[3]=((-1.0)+((r01*x10945))+(((-1.0)*r02*x10942))+(((-1.0)*x10940*x10944)));
evalcond[4]=(((r21*x10943))+(((-1.0)*x10941*x10942))+((sj1*sj2))+((r22*x10936))+(((-1.0)*cj2*x10939)));
evalcond[5]=(((x10935*x10937))+(((-1.0)*cj2*sj1))+(((-1.0)*x10938*x10942))+((r12*x10936))+(((-1.0)*sj2*x10939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
CheckValue<IkReal> x10947=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10946.value)+(((1.5707963267949)*(x10947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10948=IKcos(j4);
IkReal x10949=IKsin(j4);
IkReal x10950=(gconst4*r11);
IkReal x10951=(gconst5*r10);
IkReal x10952=((1.0)*cj1);
IkReal x10953=(gconst5*r00);
IkReal x10954=(gconst5*r20);
IkReal x10955=((1.0)*x10948);
IkReal x10956=(gconst4*x10948);
IkReal x10957=((1.0)*x10949);
IkReal x10958=(gconst4*x10949);
evalcond[0]=(((r01*x10956))+((r02*x10949))+(((-1.0)*x10953*x10955)));
evalcond[1]=((((-1.0)*r22*x10955))+((r21*x10958))+(((-1.0)*x10954*x10957)));
evalcond[2]=(((x10949*x10950))+(((-1.0)*x10951*x10957))+(((-1.0)*r12*x10955)));
evalcond[3]=((-1.0)+((r01*x10958))+(((-1.0)*x10953*x10957))+(((-1.0)*r02*x10955)));
evalcond[4]=((((-1.0)*cj2*x10952))+((sj1*sj2))+((r21*x10956))+((r22*x10949))+(((-1.0)*x10954*x10955)));
evalcond[5]=(((r12*x10949))+(((-1.0)*cj2*sj1))+(((-1.0)*x10951*x10955))+(((-1.0)*sj2*x10952))+((x10948*x10950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10959=((-1.0)*r21);
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(x10959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
IkReal x10960=((1.0)*(x10962.value));
IkReal x10961=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10960)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10960)));
IkReal gconst4=(x10959*x10961);
IkReal gconst5=((1.0)*r20*x10961);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10963=((-1.0)*r21);
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(x10963),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
IkReal x10964=((1.0)*(x10966.value));
IkReal x10965=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10964)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10964)));
IkReal gconst4=(x10963*x10965);
IkReal gconst5=((1.0)*r20*x10965);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10967=((-1.0)*r21);
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal(x10967),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
IkReal x10968=((1.0)*(x10970.value));
IkReal x10969=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10968)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10968)));
IkReal gconst4=(x10967*x10969);
IkReal gconst5=((1.0)*r20*x10969);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10971=(gconst4*r01);
IkReal x10972=(gconst5*r00);
CheckValue<IkReal> x10973=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10971*x10972))+(x10972*x10972)+(x10971*x10971)+(r02*r02))),-1);
if(!x10973.valid){
continue;
}
CheckValue<IkReal> x10974 = IKatan2WithCheck(IkReal(((((-1.0)*x10972))+x10971)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10973.value)))+(x10974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10975=IKcos(j4);
IkReal x10976=IKsin(j4);
IkReal x10977=(gconst4*r11);
IkReal x10978=(gconst5*r10);
IkReal x10979=(gconst5*r00);
IkReal x10980=(gconst5*r20);
IkReal x10981=((1.0)*x10975);
IkReal x10982=(gconst4*x10975);
IkReal x10983=((1.0)*x10976);
IkReal x10984=(gconst4*x10976);
evalcond[0]=(((r02*x10976))+((r01*x10982))+(((-1.0)*x10979*x10981)));
evalcond[1]=(((r21*x10984))+(((-1.0)*r22*x10981))+(((-1.0)*x10980*x10983)));
evalcond[2]=(((x10976*x10977))+(((-1.0)*r12*x10981))+(((-1.0)*x10978*x10983)));
evalcond[3]=((-1.0)+((r01*x10984))+(((-1.0)*r02*x10981))+(((-1.0)*x10979*x10983)));
evalcond[4]=(((cj2*sj1))+((r21*x10982))+((cj1*sj2))+((r22*x10976))+(((-1.0)*x10980*x10981)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10978*x10981))+((x10975*x10977))+((r12*x10976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10985=((1.0)*gconst5);
CheckValue<IkReal> x10986 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10985))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10986.valid){
continue;
}
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10985))+(((-1.0)*gconst4*r10)))),-1);
if(!x10987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10986.value)+(((1.5707963267949)*(x10987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10988=IKcos(j4);
IkReal x10989=IKsin(j4);
IkReal x10990=(gconst4*r11);
IkReal x10991=(gconst5*r10);
IkReal x10992=(gconst5*r00);
IkReal x10993=(gconst5*r20);
IkReal x10994=((1.0)*x10988);
IkReal x10995=(gconst4*x10988);
IkReal x10996=((1.0)*x10989);
IkReal x10997=(gconst4*x10989);
evalcond[0]=((((-1.0)*x10992*x10994))+((r01*x10995))+((r02*x10989)));
evalcond[1]=(((r21*x10997))+(((-1.0)*x10993*x10996))+(((-1.0)*r22*x10994)));
evalcond[2]=((((-1.0)*x10991*x10996))+(((-1.0)*r12*x10994))+((x10989*x10990)));
evalcond[3]=((-1.0)+(((-1.0)*x10992*x10996))+((r01*x10997))+(((-1.0)*r02*x10994)));
evalcond[4]=(((r22*x10989))+((cj2*sj1))+((r21*x10995))+(((-1.0)*x10993*x10994))+((cj1*sj2)));
evalcond[5]=(((r12*x10989))+(((-1.0)*x10991*x10994))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10988*x10990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
CheckValue<IkReal> x10999=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10998.value)+(((1.5707963267949)*(x10999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11000=IKcos(j4);
IkReal x11001=IKsin(j4);
IkReal x11002=(gconst4*r11);
IkReal x11003=(gconst5*r10);
IkReal x11004=(gconst5*r00);
IkReal x11005=(gconst5*r20);
IkReal x11006=((1.0)*x11000);
IkReal x11007=(gconst4*x11000);
IkReal x11008=((1.0)*x11001);
IkReal x11009=(gconst4*x11001);
evalcond[0]=(((r02*x11001))+(((-1.0)*x11004*x11006))+((r01*x11007)));
evalcond[1]=((((-1.0)*r22*x11006))+(((-1.0)*x11005*x11008))+((r21*x11009)));
evalcond[2]=(((x11001*x11002))+(((-1.0)*x11003*x11008))+(((-1.0)*r12*x11006)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11006))+(((-1.0)*x11004*x11008))+((r01*x11009)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11005*x11006))+((r21*x11007))+((r22*x11001)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11000*x11002))+((r12*x11001))+(((-1.0)*x11003*x11006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11010=((-1.0)*r21);
CheckValue<IkReal> x11013 = IKatan2WithCheck(IkReal(x11010),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11013.valid){
continue;
}
IkReal x11011=((1.0)*(x11013.value));
IkReal x11012=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11011)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11011)));
IkReal gconst4=(x11010*x11012);
IkReal gconst5=((1.0)*r20*x11012);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11014=((-1.0)*r21);
CheckValue<IkReal> x11017 = IKatan2WithCheck(IkReal(x11014),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11017.valid){
continue;
}
IkReal x11015=((1.0)*(x11017.value));
IkReal x11016=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11015)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11015)));
IkReal gconst4=(x11014*x11016);
IkReal gconst5=((1.0)*r20*x11016);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11018=((-1.0)*r21);
CheckValue<IkReal> x11021 = IKatan2WithCheck(IkReal(x11018),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11021.valid){
continue;
}
IkReal x11019=((1.0)*(x11021.value));
IkReal x11020=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11019)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11019)));
IkReal gconst4=(x11018*x11020);
IkReal gconst5=((1.0)*r20*x11020);
IkReal x11022=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11026=IKPowWithIntegerCheck(x11022,-1);
if(!x11026.valid){
continue;
}
IkReal x11023=x11026.value;
IkReal x11024=((1.0)*x11023);
IkReal x11025=((((-1.0)*x11024*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11024*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11023)));
j4eval[0]=x11025;
j4eval[1]=r02;
j4eval[2]=x11022;
j4eval[3]=IKsign(x11025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11027=(gconst5*r00);
IkReal x11028=(gconst4*r01);
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11027*x11027)))+(((-1.0)*(r02*r02)))+(((2.0)*x11027*x11028))+(((-1.0)*(x11028*x11028))))),-1);
if(!x11029.valid){
continue;
}
CheckValue<IkReal> x11030 = IKatan2WithCheck(IkReal(((((-1.0)*x11028))+x11027)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11029.value)))+(x11030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11031=IKsin(j4);
IkReal x11032=IKcos(j4);
IkReal x11033=(gconst4*r11);
IkReal x11034=(gconst5*r10);
IkReal x11035=(gconst4*r01);
IkReal x11036=(gconst5*r00);
IkReal x11037=(gconst4*r21);
IkReal x11038=(gconst5*r20);
IkReal x11039=((1.0)*x11032);
IkReal x11040=((1.0)*x11031);
evalcond[0]=((((-1.0)*r22*x11039))+((x11031*x11037))+(((-1.0)*x11038*x11040)));
evalcond[1]=((((-1.0)*x11034*x11040))+(((-1.0)*r12*x11039))+((x11031*x11033)));
evalcond[2]=((((-1.0)*x11035*x11039))+(((-1.0)*r02*x11040))+((x11032*x11036)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11039))+(((-1.0)*x11036*x11040))+((x11031*x11035)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11040))+((cj1*sj2))+(((-1.0)*x11037*x11039))+((x11032*x11038)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11040))+(((-1.0)*x11033*x11039))+((x11032*x11034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11041=((1.0)*gconst5);
CheckValue<IkReal> x11042 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11041))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11042.valid){
continue;
}
CheckValue<IkReal> x11043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11041))+(((-1.0)*gconst4*r10)))),-1);
if(!x11043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11042.value)+(((1.5707963267949)*(x11043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11044=IKsin(j4);
IkReal x11045=IKcos(j4);
IkReal x11046=(gconst4*r11);
IkReal x11047=(gconst5*r10);
IkReal x11048=(gconst4*r01);
IkReal x11049=(gconst5*r00);
IkReal x11050=(gconst4*r21);
IkReal x11051=(gconst5*r20);
IkReal x11052=((1.0)*x11045);
IkReal x11053=((1.0)*x11044);
evalcond[0]=((((-1.0)*r22*x11052))+((x11044*x11050))+(((-1.0)*x11051*x11053)));
evalcond[1]=(((x11044*x11046))+(((-1.0)*r12*x11052))+(((-1.0)*x11047*x11053)));
evalcond[2]=(((x11045*x11049))+(((-1.0)*r02*x11053))+(((-1.0)*x11048*x11052)));
evalcond[3]=((-1.0)+((x11044*x11048))+(((-1.0)*x11049*x11053))+(((-1.0)*r02*x11052)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11053))+((cj1*sj2))+((x11045*x11051))+(((-1.0)*x11050*x11052)));
evalcond[5]=((((-1.0)*r12*x11053))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11046*x11052))+((x11045*x11047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11054 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11054.valid){
continue;
}
CheckValue<IkReal> x11055=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11054.value)+(((1.5707963267949)*(x11055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11056=IKsin(j4);
IkReal x11057=IKcos(j4);
IkReal x11058=(gconst4*r11);
IkReal x11059=(gconst5*r10);
IkReal x11060=(gconst4*r01);
IkReal x11061=(gconst5*r00);
IkReal x11062=(gconst4*r21);
IkReal x11063=(gconst5*r20);
IkReal x11064=((1.0)*x11057);
IkReal x11065=((1.0)*x11056);
evalcond[0]=((((-1.0)*r22*x11064))+((x11056*x11062))+(((-1.0)*x11063*x11065)));
evalcond[1]=(((x11056*x11058))+(((-1.0)*r12*x11064))+(((-1.0)*x11059*x11065)));
evalcond[2]=((((-1.0)*r02*x11065))+(((-1.0)*x11060*x11064))+((x11057*x11061)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11064))+(((-1.0)*x11061*x11065))+((x11056*x11060)));
evalcond[4]=((((-1.0)*r22*x11065))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11062*x11064))+((x11057*x11063)));
evalcond[5]=((((-1.0)*x11058*x11064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11065))+((x11057*x11059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11066=gconst4*gconst4;
IkReal x11067=gconst5*gconst5;
IkReal x11068=(r01*r20);
IkReal x11069=(gconst4*sj3);
IkReal x11070=(r01*r21);
IkReal x11071=((1.0)*cj3);
IkReal x11072=(r00*r21);
IkReal x11073=(r00*r20);
IkReal x11074=(cj3*gconst4*gconst5);
IkReal x11075=((1.0)*x11067);
CheckValue<IkReal> x11076=IKPowWithIntegerCheck(IKsign((((x11072*x11074))+(((-1.0)*x11067*x11071*x11073))+(((-1.0)*x11066*x11070*x11071))+(((-1.0)*r02*r22*x11071))+((x11068*x11074)))),-1);
if(!x11076.valid){
continue;
}
CheckValue<IkReal> x11077 = IKatan2WithCheck(IkReal((((r00*r22*x11069))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11068*x11075))+(((-1.0)*gconst5*x11069*x11073))+((sj3*x11066*x11072))+((gconst5*x11069*x11070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11076.value)))+(x11077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11078=IKsin(j4);
IkReal x11079=IKcos(j4);
IkReal x11080=(sj1*sj2);
IkReal x11081=(gconst5*sj3);
IkReal x11082=(gconst4*r11);
IkReal x11083=(gconst5*r10);
IkReal x11084=((1.0)*cj1);
IkReal x11085=(gconst4*r01);
IkReal x11086=(cj2*sj1);
IkReal x11087=(gconst5*r00);
IkReal x11088=(gconst4*sj3);
IkReal x11089=(cj3*gconst5);
IkReal x11090=(cj3*gconst4);
IkReal x11091=(gconst4*r21);
IkReal x11092=(cj2*x11084);
IkReal x11093=((1.0)*x11079);
IkReal x11094=((1.0)*x11078);
IkReal x11095=(cj3*x11078);
IkReal x11096=(cj3*x11079);
evalcond[0]=(((x11078*x11091))+(((-1.0)*r22*x11093))+(((-1.0)*gconst5*r20*x11094)));
evalcond[1]=((((-1.0)*r12*x11093))+(((-1.0)*x11083*x11094))+((x11078*x11082)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11093))+((x11078*x11085))+(((-1.0)*x11087*x11094)));
evalcond[3]=(((r02*x11095))+((r01*x11081))+((r00*x11088))+((x11085*x11096))+(((-1.0)*cj3*x11087*x11093)));
evalcond[4]=((((-1.0)*r02*sj3*x11094))+((r01*x11089))+((r00*x11090))+((r00*x11079*x11081))+(((-1.0)*sj3*x11085*x11093)));
evalcond[5]=(((r21*x11081))+((cj1*sj2))+x11086+((r21*x11079*x11090))+((r22*x11095))+((r20*x11088))+(((-1.0)*r20*x11089*x11093)));
evalcond[6]=((((-1.0)*x11092))+((r12*x11095))+x11080+((x11082*x11096))+((r10*x11088))+((r11*x11081))+(((-1.0)*cj3*x11083*x11093)));
evalcond[7]=(((r21*x11089))+(((-1.0)*x11092))+((r20*x11090))+x11080+((r20*x11079*x11081))+(((-1.0)*r22*sj3*x11094))+(((-1.0)*r21*x11088*x11093)));
evalcond[8]=((((-1.0)*sj2*x11084))+(((-1.0)*x11086))+(((-1.0)*r12*sj3*x11094))+((r10*x11079*x11081))+((r11*x11089))+((r10*x11090))+(((-1.0)*sj3*x11082*x11093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11097=((1.0)*gconst5);
CheckValue<IkReal> x11098 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11097))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11098.valid){
continue;
}
CheckValue<IkReal> x11099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11097))+(((-1.0)*gconst4*r10)))),-1);
if(!x11099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11098.value)+(((1.5707963267949)*(x11099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11100=IKsin(j4);
IkReal x11101=IKcos(j4);
IkReal x11102=(sj1*sj2);
IkReal x11103=(gconst5*sj3);
IkReal x11104=(gconst4*r11);
IkReal x11105=(gconst5*r10);
IkReal x11106=((1.0)*cj1);
IkReal x11107=(gconst4*r01);
IkReal x11108=(cj2*sj1);
IkReal x11109=(gconst5*r00);
IkReal x11110=(gconst4*sj3);
IkReal x11111=(cj3*gconst5);
IkReal x11112=(cj3*gconst4);
IkReal x11113=(gconst4*r21);
IkReal x11114=(cj2*x11106);
IkReal x11115=((1.0)*x11101);
IkReal x11116=((1.0)*x11100);
IkReal x11117=(cj3*x11100);
IkReal x11118=(cj3*x11101);
evalcond[0]=((((-1.0)*gconst5*r20*x11116))+((x11100*x11113))+(((-1.0)*r22*x11115)));
evalcond[1]=((((-1.0)*x11105*x11116))+((x11100*x11104))+(((-1.0)*r12*x11115)));
evalcond[2]=((-1.0)+((x11100*x11107))+(((-1.0)*r02*x11115))+(((-1.0)*x11109*x11116)));
evalcond[3]=((((-1.0)*cj3*x11109*x11115))+((r02*x11117))+((x11107*x11118))+((r00*x11110))+((r01*x11103)));
evalcond[4]=((((-1.0)*r02*sj3*x11116))+(((-1.0)*sj3*x11107*x11115))+((r00*x11101*x11103))+((r00*x11112))+((r01*x11111)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x11111*x11115))+((r21*x11101*x11112))+x11108+((r21*x11103))+((r20*x11110))+((r22*x11117)));
evalcond[6]=(((x11104*x11118))+((r10*x11110))+x11102+((r11*x11103))+(((-1.0)*x11114))+(((-1.0)*cj3*x11105*x11115))+((r12*x11117)));
evalcond[7]=((((-1.0)*r21*x11110*x11115))+((r20*x11101*x11103))+x11102+((r21*x11111))+(((-1.0)*r22*sj3*x11116))+((r20*x11112))+(((-1.0)*x11114)));
evalcond[8]=((((-1.0)*x11108))+(((-1.0)*r12*sj3*x11116))+((r10*x11112))+(((-1.0)*sj3*x11104*x11115))+((r10*x11101*x11103))+(((-1.0)*sj2*x11106))+((r11*x11111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11119 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11119.valid){
continue;
}
CheckValue<IkReal> x11120=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11119.value)+(((1.5707963267949)*(x11120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11121=IKsin(j4);
IkReal x11122=IKcos(j4);
IkReal x11123=(sj1*sj2);
IkReal x11124=(gconst5*sj3);
IkReal x11125=(gconst4*r11);
IkReal x11126=(gconst5*r10);
IkReal x11127=((1.0)*cj1);
IkReal x11128=(gconst4*r01);
IkReal x11129=(cj2*sj1);
IkReal x11130=(gconst5*r00);
IkReal x11131=(gconst4*sj3);
IkReal x11132=(cj3*gconst5);
IkReal x11133=(cj3*gconst4);
IkReal x11134=(gconst4*r21);
IkReal x11135=(cj2*x11127);
IkReal x11136=((1.0)*x11122);
IkReal x11137=((1.0)*x11121);
IkReal x11138=(cj3*x11121);
IkReal x11139=(cj3*x11122);
evalcond[0]=(((x11121*x11134))+(((-1.0)*r22*x11136))+(((-1.0)*gconst5*r20*x11137)));
evalcond[1]=(((x11121*x11125))+(((-1.0)*x11126*x11137))+(((-1.0)*r12*x11136)));
evalcond[2]=((-1.0)+((x11121*x11128))+(((-1.0)*r02*x11136))+(((-1.0)*x11130*x11137)));
evalcond[3]=(((r02*x11138))+(((-1.0)*cj3*x11130*x11136))+((x11128*x11139))+((r01*x11124))+((r00*x11131)));
evalcond[4]=((((-1.0)*r02*sj3*x11137))+((r00*x11122*x11124))+(((-1.0)*sj3*x11128*x11136))+((r01*x11132))+((r00*x11133)));
evalcond[5]=(((r22*x11138))+(((-1.0)*r20*x11132*x11136))+((r21*x11122*x11133))+((r21*x11124))+((cj1*sj2))+x11129+((r20*x11131)));
evalcond[6]=(x11123+((r10*x11131))+((r11*x11124))+((x11125*x11139))+(((-1.0)*cj3*x11126*x11136))+(((-1.0)*x11135))+((r12*x11138)));
evalcond[7]=(((r20*x11122*x11124))+(((-1.0)*r21*x11131*x11136))+((r21*x11132))+x11123+(((-1.0)*r22*sj3*x11137))+((r20*x11133))+(((-1.0)*x11135)));
evalcond[8]=((((-1.0)*x11129))+(((-1.0)*r12*sj3*x11137))+((r10*x11133))+((r10*x11122*x11124))+((r11*x11132))+(((-1.0)*sj3*x11125*x11136))+(((-1.0)*sj2*x11127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11140=((-1.0)*r21);
CheckValue<IkReal> x11143 = IKatan2WithCheck(IkReal(x11140),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11143.valid){
continue;
}
IkReal x11141=((1.0)*(x11143.value));
IkReal x11142=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11141)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11141)));
IkReal gconst4=(x11140*x11142);
IkReal gconst5=((1.0)*r20*x11142);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11144=((-1.0)*r21);
CheckValue<IkReal> x11147 = IKatan2WithCheck(IkReal(x11144),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11147.valid){
continue;
}
IkReal x11145=((1.0)*(x11147.value));
IkReal x11146=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11145)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11145)));
IkReal gconst4=(x11144*x11146);
IkReal gconst5=((1.0)*r20*x11146);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11148=((-1.0)*r21);
CheckValue<IkReal> x11151 = IKatan2WithCheck(IkReal(x11148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11151.valid){
continue;
}
IkReal x11149=((1.0)*(x11151.value));
IkReal x11150=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11149)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11149)));
IkReal gconst4=(x11148*x11150);
IkReal gconst5=((1.0)*r20*x11150);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11152=((-1.0)*r21);
CheckValue<IkReal> x11155 = IKatan2WithCheck(IkReal(x11152),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11155.valid){
continue;
}
IkReal x11153=((1.0)*(x11155.value));
IkReal x11154=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11153)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11153)));
IkReal gconst4=(x11152*x11154);
IkReal gconst5=((1.0)*r20*x11154);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11156=((-1.0)*r21);
CheckValue<IkReal> x11159 = IKatan2WithCheck(IkReal(x11156),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11159.valid){
continue;
}
IkReal x11157=((1.0)*(x11159.value));
IkReal x11158=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11157)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11157)));
IkReal gconst4=(x11156*x11158);
IkReal gconst5=((1.0)*r20*x11158);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11160=((-1.0)*r21);
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(x11160),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
IkReal x11161=((1.0)*(x11163.value));
IkReal x11162=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11161)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11161)));
IkReal gconst4=(x11160*x11162);
IkReal gconst5=((1.0)*r20*x11162);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11164=(gconst5*r00);
IkReal x11165=(gconst4*r01);
CheckValue<IkReal> x11166=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11164*x11165))+(x11165*x11165)+(r02*r02)+(x11164*x11164))),-1);
if(!x11166.valid){
continue;
}
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal((x11164+(((-1.0)*x11165)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11166.value)))+(x11167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11168=IKsin(j4);
IkReal x11169=IKcos(j4);
IkReal x11170=(gconst4*r11);
IkReal x11171=(gconst5*r10);
IkReal x11172=(gconst4*r01);
IkReal x11173=(gconst5*r00);
IkReal x11174=(gconst4*r21);
IkReal x11175=(gconst5*r20);
IkReal x11176=((1.0)*x11169);
IkReal x11177=((1.0)*x11168);
evalcond[0]=((((-1.0)*x11175*x11177))+((x11168*x11174))+(((-1.0)*r22*x11176)));
evalcond[1]=(((x11168*x11170))+(((-1.0)*r12*x11176))+(((-1.0)*x11171*x11177)));
evalcond[2]=(((x11169*x11173))+(((-1.0)*x11172*x11176))+(((-1.0)*r02*x11177)));
evalcond[3]=((1.0)+((x11168*x11172))+(((-1.0)*x11173*x11177))+(((-1.0)*r02*x11176)));
evalcond[4]=(((cj2*sj1))+((x11169*x11171))+((cj1*sj2))+(((-1.0)*r12*x11177))+(((-1.0)*x11170*x11176)));
evalcond[5]=((((-1.0)*x11174*x11176))+((x11169*x11175))+(((-1.0)*r22*x11177))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11178=((1.0)*gconst5);
CheckValue<IkReal> x11179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11178))+(((-1.0)*gconst4*r20)))),-1);
if(!x11179.valid){
continue;
}
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11178))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11179.value)))+(x11180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11181=IKsin(j4);
IkReal x11182=IKcos(j4);
IkReal x11183=(gconst4*r11);
IkReal x11184=(gconst5*r10);
IkReal x11185=(gconst4*r01);
IkReal x11186=(gconst5*r00);
IkReal x11187=(gconst4*r21);
IkReal x11188=(gconst5*r20);
IkReal x11189=((1.0)*x11182);
IkReal x11190=((1.0)*x11181);
evalcond[0]=((((-1.0)*r22*x11189))+((x11181*x11187))+(((-1.0)*x11188*x11190)));
evalcond[1]=((((-1.0)*r12*x11189))+(((-1.0)*x11184*x11190))+((x11181*x11183)));
evalcond[2]=((((-1.0)*r02*x11190))+(((-1.0)*x11185*x11189))+((x11182*x11186)));
evalcond[3]=((1.0)+(((-1.0)*x11186*x11190))+(((-1.0)*r02*x11189))+((x11181*x11185)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11183*x11189))+(((-1.0)*r12*x11190))+((cj1*sj2))+((x11182*x11184)));
evalcond[5]=((((-1.0)*r22*x11190))+((x11182*x11188))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11187*x11189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11191=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11191.valid){
continue;
}
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11191.value)))+(x11192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11193=IKsin(j4);
IkReal x11194=IKcos(j4);
IkReal x11195=(gconst4*r11);
IkReal x11196=(gconst5*r10);
IkReal x11197=(gconst4*r01);
IkReal x11198=(gconst5*r00);
IkReal x11199=(gconst4*r21);
IkReal x11200=(gconst5*r20);
IkReal x11201=((1.0)*x11194);
IkReal x11202=((1.0)*x11193);
evalcond[0]=((((-1.0)*r22*x11201))+((x11193*x11199))+(((-1.0)*x11200*x11202)));
evalcond[1]=((((-1.0)*x11196*x11202))+(((-1.0)*r12*x11201))+((x11193*x11195)));
evalcond[2]=((((-1.0)*x11197*x11201))+((x11194*x11198))+(((-1.0)*r02*x11202)));
evalcond[3]=((1.0)+((x11193*x11197))+(((-1.0)*x11198*x11202))+(((-1.0)*r02*x11201)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11195*x11201))+((cj1*sj2))+((x11194*x11196))+(((-1.0)*r12*x11202)));
evalcond[5]=((((-1.0)*r22*x11202))+(((-1.0)*x11199*x11201))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11194*x11200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11203=((-1.0)*r21);
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(x11203),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
IkReal x11204=((1.0)*(x11206.value));
IkReal x11205=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11204)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst4=(x11203*x11205);
IkReal gconst5=((1.0)*r20*x11205);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11207=((-1.0)*r21);
CheckValue<IkReal> x11210 = IKatan2WithCheck(IkReal(x11207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11210.valid){
continue;
}
IkReal x11208=((1.0)*(x11210.value));
IkReal x11209=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11208)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11208)));
IkReal gconst4=(x11207*x11209);
IkReal gconst5=((1.0)*r20*x11209);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11211=((-1.0)*r21);
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(x11211),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
IkReal x11212=((1.0)*(x11214.value));
IkReal x11213=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11212)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11212)));
IkReal gconst4=(x11211*x11213);
IkReal gconst5=((1.0)*r20*x11213);
IkReal x11215=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11219=IKPowWithIntegerCheck(x11215,-1);
if(!x11219.valid){
continue;
}
IkReal x11216=x11219.value;
IkReal x11217=((1.0)*x11216);
IkReal x11218=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11216))+(((-1.0)*x11217*(r01*r01)*(r21*r21)))+(((-1.0)*x11217*(r00*r00)*(r20*r20))));
j4eval[0]=x11218;
j4eval[1]=IKsign(x11218);
j4eval[2]=r02;
j4eval[3]=x11215;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11220=(gconst4*r01);
IkReal x11221=(gconst5*r00);
CheckValue<IkReal> x11222 = IKatan2WithCheck(IkReal((x11220+(((-1.0)*x11221)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11222.valid){
continue;
}
CheckValue<IkReal> x11223=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11221*x11221)))+(((-1.0)*(r02*r02)))+(((2.0)*x11220*x11221))+(((-1.0)*(x11220*x11220))))),-1);
if(!x11223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11222.value)+(((1.5707963267949)*(x11223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11224=IKcos(j4);
IkReal x11225=IKsin(j4);
IkReal x11226=(gconst4*r11);
IkReal x11227=(gconst5*r10);
IkReal x11228=(gconst5*r00);
IkReal x11229=(gconst5*r20);
IkReal x11230=((1.0)*x11224);
IkReal x11231=(gconst4*x11224);
IkReal x11232=((1.0)*x11225);
IkReal x11233=(gconst4*x11225);
evalcond[0]=((((-1.0)*x11228*x11230))+((r02*x11225))+((r01*x11231)));
evalcond[1]=((((-1.0)*x11229*x11232))+((r21*x11233))+(((-1.0)*r22*x11230)));
evalcond[2]=((((-1.0)*r12*x11230))+(((-1.0)*x11227*x11232))+((x11225*x11226)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11230))+(((-1.0)*x11228*x11232))+((r01*x11233)));
evalcond[4]=(((cj2*sj1))+((x11224*x11226))+((r12*x11225))+((cj1*sj2))+(((-1.0)*x11227*x11230)));
evalcond[5]=(((r22*x11225))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11229*x11230))+((r21*x11231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11234=((1.0)*gconst5);
CheckValue<IkReal> x11235 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11235.valid){
continue;
}
CheckValue<IkReal> x11236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11234))+(((-1.0)*gconst4*r20)))),-1);
if(!x11236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11235.value)+(((1.5707963267949)*(x11236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11237=IKcos(j4);
IkReal x11238=IKsin(j4);
IkReal x11239=(gconst4*r11);
IkReal x11240=(gconst5*r10);
IkReal x11241=(gconst5*r00);
IkReal x11242=(gconst5*r20);
IkReal x11243=((1.0)*x11237);
IkReal x11244=(gconst4*x11237);
IkReal x11245=((1.0)*x11238);
IkReal x11246=(gconst4*x11238);
evalcond[0]=(((r02*x11238))+(((-1.0)*x11241*x11243))+((r01*x11244)));
evalcond[1]=((((-1.0)*x11242*x11245))+((r21*x11246))+(((-1.0)*r22*x11243)));
evalcond[2]=(((x11238*x11239))+(((-1.0)*x11240*x11245))+(((-1.0)*r12*x11243)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11243))+(((-1.0)*x11241*x11245))+((r01*x11246)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11237*x11239))+((r12*x11238))+(((-1.0)*x11240*x11243)));
evalcond[5]=(((r22*x11238))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11242*x11243))+((r21*x11244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11247=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11247.valid){
continue;
}
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11247.value)))+(x11248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11249=IKcos(j4);
IkReal x11250=IKsin(j4);
IkReal x11251=(gconst4*r11);
IkReal x11252=(gconst5*r10);
IkReal x11253=(gconst5*r00);
IkReal x11254=(gconst5*r20);
IkReal x11255=((1.0)*x11249);
IkReal x11256=(gconst4*x11249);
IkReal x11257=((1.0)*x11250);
IkReal x11258=(gconst4*x11250);
evalcond[0]=(((r02*x11250))+(((-1.0)*x11253*x11255))+((r01*x11256)));
evalcond[1]=(((r21*x11258))+(((-1.0)*r22*x11255))+(((-1.0)*x11254*x11257)));
evalcond[2]=(((x11250*x11251))+(((-1.0)*x11252*x11257))+(((-1.0)*r12*x11255)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11255))+(((-1.0)*x11253*x11257))+((r01*x11258)));
evalcond[4]=(((cj2*sj1))+((x11249*x11251))+((cj1*sj2))+((r12*x11250))+(((-1.0)*x11252*x11255)));
evalcond[5]=(((r22*x11250))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11256))+(((-1.0)*x11254*x11255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11259=((-1.0)*r21);
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(x11259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
IkReal x11260=((1.0)*(x11262.value));
IkReal x11261=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11260)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11260)));
IkReal gconst4=(x11259*x11261);
IkReal gconst5=((1.0)*r20*x11261);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11263=((-1.0)*r21);
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal(x11263),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
IkReal x11264=((1.0)*(x11266.value));
IkReal x11265=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11264)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11264)));
IkReal gconst4=(x11263*x11265);
IkReal gconst5=((1.0)*r20*x11265);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11267=((-1.0)*r21);
CheckValue<IkReal> x11270 = IKatan2WithCheck(IkReal(x11267),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11270.valid){
continue;
}
IkReal x11268=((1.0)*(x11270.value));
IkReal x11269=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11268)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11268)));
IkReal gconst4=(x11267*x11269);
IkReal gconst5=((1.0)*r20*x11269);
IkReal x11271=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11275=IKPowWithIntegerCheck(x11271,-1);
if(!x11275.valid){
continue;
}
IkReal x11272=x11275.value;
IkReal x11273=((1.0)*x11272);
IkReal x11274=((((-1.0)*(r02*r02)))+(((-1.0)*x11273*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11272))+(((-1.0)*x11273*(r00*r00)*(r20*r20))));
j4eval[0]=x11274;
j4eval[1]=IKsign(x11274);
j4eval[2]=r02;
j4eval[3]=x11271;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11276=(gconst4*r01);
IkReal x11277=(gconst5*r00);
CheckValue<IkReal> x11278 = IKatan2WithCheck(IkReal((x11276+(((-1.0)*x11277)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11278.valid){
continue;
}
CheckValue<IkReal> x11279=IKPowWithIntegerCheck(IKsign(((((2.0)*x11276*x11277))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11277*x11277)))+(((-1.0)*(x11276*x11276))))),-1);
if(!x11279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11278.value)+(((1.5707963267949)*(x11279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11280=IKcos(j4);
IkReal x11281=IKsin(j4);
IkReal x11282=(gconst5*r10);
IkReal x11283=(gconst5*r00);
IkReal x11284=(gconst5*r20);
IkReal x11285=((1.0)*x11280);
IkReal x11286=(gconst4*x11281);
IkReal x11287=(gconst4*x11280);
IkReal x11288=((1.0)*x11281);
evalcond[0]=(((r02*x11281))+(((-1.0)*x11283*x11285))+((r01*x11287)));
evalcond[1]=((((-1.0)*x11284*x11288))+(((-1.0)*r22*x11285))+((r21*x11286)));
evalcond[2]=((((-1.0)*r12*x11285))+(((-1.0)*x11282*x11288))+((r11*x11286)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11285))+(((-1.0)*x11283*x11288))+((r01*x11286)));
evalcond[4]=(((cj2*sj1))+((r22*x11281))+(((-1.0)*x11284*x11285))+((cj1*sj2))+((r21*x11287)));
evalcond[5]=((((-1.0)*x11282*x11285))+(((-1.0)*sj1*sj2))+((r12*x11281))+((cj1*cj2))+((r11*x11287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11289=((1.0)*gconst5);
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11289))+(((-1.0)*gconst4*r20)))),-1);
if(!x11290.valid){
continue;
}
CheckValue<IkReal> x11291 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11289))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11290.value)))+(x11291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11292=IKcos(j4);
IkReal x11293=IKsin(j4);
IkReal x11294=(gconst5*r10);
IkReal x11295=(gconst5*r00);
IkReal x11296=(gconst5*r20);
IkReal x11297=((1.0)*x11292);
IkReal x11298=(gconst4*x11293);
IkReal x11299=(gconst4*x11292);
IkReal x11300=((1.0)*x11293);
evalcond[0]=(((r01*x11299))+((r02*x11293))+(((-1.0)*x11295*x11297)));
evalcond[1]=((((-1.0)*r22*x11297))+(((-1.0)*x11296*x11300))+((r21*x11298)));
evalcond[2]=(((r11*x11298))+(((-1.0)*x11294*x11300))+(((-1.0)*r12*x11297)));
evalcond[3]=((1.0)+((r01*x11298))+(((-1.0)*r02*x11297))+(((-1.0)*x11295*x11300)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11299))+(((-1.0)*x11296*x11297))+((r22*x11293)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11294*x11297))+((r11*x11299))+((cj1*cj2))+((r12*x11293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11301=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11301.valid){
continue;
}
CheckValue<IkReal> x11302 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11301.value)))+(x11302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11303=IKcos(j4);
IkReal x11304=IKsin(j4);
IkReal x11305=(gconst5*r10);
IkReal x11306=(gconst5*r00);
IkReal x11307=(gconst5*r20);
IkReal x11308=((1.0)*x11303);
IkReal x11309=(gconst4*x11304);
IkReal x11310=(gconst4*x11303);
IkReal x11311=((1.0)*x11304);
evalcond[0]=(((r02*x11304))+(((-1.0)*x11306*x11308))+((r01*x11310)));
evalcond[1]=((((-1.0)*x11307*x11311))+(((-1.0)*r22*x11308))+((r21*x11309)));
evalcond[2]=((((-1.0)*x11305*x11311))+((r11*x11309))+(((-1.0)*r12*x11308)));
evalcond[3]=((1.0)+(((-1.0)*x11306*x11311))+((r01*x11309))+(((-1.0)*r02*x11308)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11307*x11308))+((r21*x11310))+((r22*x11304)));
evalcond[5]=(((r11*x11310))+(((-1.0)*x11305*x11308))+(((-1.0)*sj1*sj2))+((r12*x11304))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11312=((-1.0)*r21);
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal(x11312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
IkReal x11313=((1.0)*(x11315.value));
IkReal x11314=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11313)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11313)));
IkReal gconst4=(x11312*x11314);
IkReal gconst5=((1.0)*r20*x11314);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11316=((-1.0)*r21);
CheckValue<IkReal> x11319 = IKatan2WithCheck(IkReal(x11316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11319.valid){
continue;
}
IkReal x11317=((1.0)*(x11319.value));
IkReal x11318=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11317)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11317)));
IkReal gconst4=(x11316*x11318);
IkReal gconst5=((1.0)*r20*x11318);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11320=((-1.0)*r21);
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal(x11320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
IkReal x11321=((1.0)*(x11323.value));
IkReal x11322=x10114;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11321)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11321)));
IkReal gconst4=(x11320*x11322);
IkReal gconst5=((1.0)*r20*x11322);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11324=(gconst5*r00);
IkReal x11325=(gconst4*r01);
CheckValue<IkReal> x11326=IKPowWithIntegerCheck(IKsign(((x11324*x11324)+(((-2.0)*x11324*x11325))+(x11325*x11325)+(r02*r02))),-1);
if(!x11326.valid){
continue;
}
CheckValue<IkReal> x11327 = IKatan2WithCheck(IkReal((x11324+(((-1.0)*x11325)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11326.value)))+(x11327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11328=IKsin(j4);
IkReal x11329=IKcos(j4);
IkReal x11330=(gconst4*r11);
IkReal x11331=(gconst5*r10);
IkReal x11332=(gconst5*r00);
IkReal x11333=(gconst5*r20);
IkReal x11334=((1.0)*x11329);
IkReal x11335=(gconst4*x11328);
IkReal x11336=((1.0)*x11328);
evalcond[0]=((((-1.0)*x11333*x11336))+(((-1.0)*r22*x11334))+((r21*x11335)));
evalcond[1]=((((-1.0)*r12*x11334))+((x11328*x11330))+(((-1.0)*x11331*x11336)));
evalcond[2]=(((x11329*x11332))+(((-1.0)*gconst4*r01*x11334))+(((-1.0)*r02*x11336)));
evalcond[3]=((1.0)+(((-1.0)*x11332*x11336))+((r01*x11335))+(((-1.0)*r02*x11334)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11336))+((x11329*x11333))+(((-1.0)*gconst4*r21*x11334)));
evalcond[5]=((((-1.0)*r12*x11336))+(((-1.0)*sj1*sj2))+((x11329*x11331))+(((-1.0)*x11330*x11334))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11337=((1.0)*gconst5);
CheckValue<IkReal> x11338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11337))+(((-1.0)*gconst4*r20)))),-1);
if(!x11338.valid){
continue;
}
CheckValue<IkReal> x11339 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11338.value)))+(x11339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11340=IKsin(j4);
IkReal x11341=IKcos(j4);
IkReal x11342=(gconst4*r11);
IkReal x11343=(gconst5*r10);
IkReal x11344=(gconst5*r00);
IkReal x11345=(gconst5*r20);
IkReal x11346=((1.0)*x11341);
IkReal x11347=(gconst4*x11340);
IkReal x11348=((1.0)*x11340);
evalcond[0]=((((-1.0)*r22*x11346))+(((-1.0)*x11345*x11348))+((r21*x11347)));
evalcond[1]=((((-1.0)*x11343*x11348))+((x11340*x11342))+(((-1.0)*r12*x11346)));
evalcond[2]=(((x11341*x11344))+(((-1.0)*gconst4*r01*x11346))+(((-1.0)*r02*x11348)));
evalcond[3]=((1.0)+(((-1.0)*x11344*x11348))+((r01*x11347))+(((-1.0)*r02*x11346)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11341*x11345))+(((-1.0)*r22*x11348))+(((-1.0)*gconst4*r21*x11346)));
evalcond[5]=((((-1.0)*x11342*x11346))+(((-1.0)*sj1*sj2))+((x11341*x11343))+((cj1*cj2))+(((-1.0)*r12*x11348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11349.valid){
continue;
}
CheckValue<IkReal> x11350 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11349.value)))+(x11350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11351=IKsin(j4);
IkReal x11352=IKcos(j4);
IkReal x11353=(gconst4*r11);
IkReal x11354=(gconst5*r10);
IkReal x11355=(gconst5*r00);
IkReal x11356=(gconst5*r20);
IkReal x11357=((1.0)*x11352);
IkReal x11358=(gconst4*x11351);
IkReal x11359=((1.0)*x11351);
evalcond[0]=((((-1.0)*r22*x11357))+((r21*x11358))+(((-1.0)*x11356*x11359)));
evalcond[1]=((((-1.0)*r12*x11357))+((x11351*x11353))+(((-1.0)*x11354*x11359)));
evalcond[2]=(((x11352*x11355))+(((-1.0)*gconst4*r01*x11357))+(((-1.0)*r02*x11359)));
evalcond[3]=((1.0)+((r01*x11358))+(((-1.0)*r02*x11357))+(((-1.0)*x11355*x11359)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11357))+((x11352*x11356))+(((-1.0)*r22*x11359)));
evalcond[5]=((((-1.0)*x11353*x11357))+(((-1.0)*r12*x11359))+(((-1.0)*sj1*sj2))+((x11352*x11354))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11360=((-1.0)*r21);
IkReal x11361=((-1.0)*r20);
CheckValue<IkReal> x11363 = IKatan2WithCheck(IkReal(x11360),IkReal(x11361),IKFAST_ATAN2_MAGTHRESH);
if(!x11363.valid){
continue;
}
IkReal x11362=((1.0)*(x11363.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11362)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11361);
rxp0_2=(py*r00);
rxp1_0=(py*x11360);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11362)));
IkReal gconst4=x11360;
IkReal gconst5=((1.0)*r20);
IkReal x11364=((1.0)*r01*r21);
IkReal x11365=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11365))+(((-1.0)*x11364)));
j4eval[1]=((((-1.0)*cj3*x11364))+(((-1.0)*cj3*x11365)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11366=((-1.0)*r21);
IkReal x11367=((-1.0)*r20);
CheckValue<IkReal> x11369 = IKatan2WithCheck(IkReal(x11366),IkReal(x11367),IKFAST_ATAN2_MAGTHRESH);
if(!x11369.valid){
continue;
}
IkReal x11368=((1.0)*(x11369.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11368)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11367);
rxp0_2=(py*r00);
rxp1_0=(py*x11366);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11368)));
IkReal gconst4=x11366;
IkReal gconst5=((1.0)*r20);
IkReal x11370=((1.0)*r01*r21);
IkReal x11371=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11370))+(((-1.0)*x11371)));
j4eval[1]=(((sj3*x11371))+((sj3*x11370)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11372=((-1.0)*r21);
IkReal x11373=((-1.0)*r20);
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(x11372),IkReal(x11373),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
IkReal x11374=((1.0)*(x11375.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11374)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11373);
rxp0_2=(py*r00);
rxp1_0=(py*x11372);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11374)));
IkReal gconst4=x11372;
IkReal gconst5=((1.0)*r20);
IkReal x11376=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11376))+(((-1.0)*r01*r21*x11376)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11377=((1.0)*gconst5);
CheckValue<IkReal> x11378=IKPowWithIntegerCheck(cj3,-1);
if(!x11378.valid){
continue;
}
CheckValue<IkReal> x11379=IKPowWithIntegerCheck(r12,-1);
if(!x11379.valid){
continue;
}
CheckValue<IkReal> x11380=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11377))),-1);
if(!x11380.valid){
continue;
}
if( IKabs(((x11378.value)*(x11379.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11380.value)*(((((-1.0)*r01*sj3*x11377))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11378.value)*(x11379.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11380.value)*(((((-1.0)*r01*sj3*x11377))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11378.value)*(x11379.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11380.value)*(((((-1.0)*r01*sj3*x11377))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11381=IKsin(j4);
IkReal x11382=IKcos(j4);
IkReal x11383=(cj2*sj1);
IkReal x11384=(cj1*sj2);
IkReal x11385=(sj1*sj2);
IkReal x11386=(gconst5*sj3);
IkReal x11387=(gconst5*r00);
IkReal x11388=(cj3*gconst5);
IkReal x11389=(gconst4*sj3);
IkReal x11390=(cj3*gconst4);
IkReal x11391=(cj1*cj2);
IkReal x11392=((1.0)*x11381);
IkReal x11393=(gconst4*x11381);
IkReal x11394=((1.0)*x11382);
IkReal x11395=(x11383+x11384);
IkReal x11396=(x11382*x11386);
IkReal x11397=(x11382*x11390);
evalcond[0]=((-1.0)*r12*x11382);
evalcond[1]=((((-1.0)*gconst5*r20*x11392))+((r21*x11393)));
evalcond[2]=(((cj3*r12*x11381))+x11391+(((-1.0)*x11385)));
evalcond[3]=((((-1.0)*r12*sj3*x11392))+x11395);
evalcond[4]=((1.0)+((r01*x11393))+(((-1.0)*x11387*x11392)));
evalcond[5]=(((r01*x11397))+((r01*x11386))+((r00*x11389))+(((-1.0)*cj3*x11387*x11394)));
evalcond[6]=((((-1.0)*r01*x11389*x11394))+((r00*x11396))+((r00*x11390))+((r01*x11388)));
evalcond[7]=(((r20*x11389))+x11395+((r21*x11386))+((r21*x11397))+(((-1.0)*r20*x11388*x11394)));
evalcond[8]=(((r20*x11396))+((r20*x11390))+x11385+(((-1.0)*x11391))+(((-1.0)*r21*x11389*x11394))+((r21*x11388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11398=((1.0)*gconst4);
IkReal x11399=(gconst5*r00);
CheckValue<IkReal> x11400=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11399))),-1);
if(!x11400.valid){
continue;
}
CheckValue<IkReal> x11401=IKPowWithIntegerCheck((((sj3*x11399))+(((-1.0)*r01*sj3*x11398))),-1);
if(!x11401.valid){
continue;
}
if( IKabs(((-1.0)*(x11400.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11401.value)*(((((-1.0)*cj3*r00*x11398))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11400.value)))+IKsqr(((x11401.value)*(((((-1.0)*cj3*r00*x11398))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11400.value)), ((x11401.value)*(((((-1.0)*cj3*r00*x11398))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11402=IKsin(j4);
IkReal x11403=IKcos(j4);
IkReal x11404=(cj2*sj1);
IkReal x11405=(cj1*sj2);
IkReal x11406=(sj1*sj2);
IkReal x11407=(gconst5*sj3);
IkReal x11408=(gconst5*r00);
IkReal x11409=(cj3*gconst5);
IkReal x11410=(gconst4*sj3);
IkReal x11411=(cj3*gconst4);
IkReal x11412=(cj1*cj2);
IkReal x11413=((1.0)*x11402);
IkReal x11414=(gconst4*x11402);
IkReal x11415=((1.0)*x11403);
IkReal x11416=(x11405+x11404);
IkReal x11417=(x11403*x11407);
IkReal x11418=(x11403*x11411);
evalcond[0]=((-1.0)*r12*x11403);
evalcond[1]=((((-1.0)*gconst5*r20*x11413))+((r21*x11414)));
evalcond[2]=(x11412+((cj3*r12*x11402))+(((-1.0)*x11406)));
evalcond[3]=(x11416+(((-1.0)*r12*sj3*x11413)));
evalcond[4]=((1.0)+((r01*x11414))+(((-1.0)*x11408*x11413)));
evalcond[5]=(((r01*x11418))+(((-1.0)*cj3*x11408*x11415))+((r00*x11410))+((r01*x11407)));
evalcond[6]=((((-1.0)*r01*x11410*x11415))+((r00*x11411))+((r00*x11417))+((r01*x11409)));
evalcond[7]=(((r21*x11407))+x11416+((r21*x11418))+(((-1.0)*r20*x11409*x11415))+((r20*x11410)));
evalcond[8]=(((r21*x11409))+x11406+(((-1.0)*r21*x11410*x11415))+(((-1.0)*x11412))+((r20*x11411))+((r20*x11417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11419=((1.0)*gconst5);
IkReal x11420=(gconst4*r01);
CheckValue<IkReal> x11421=IKPowWithIntegerCheck((x11420+(((-1.0)*r00*x11419))),-1);
if(!x11421.valid){
continue;
}
CheckValue<IkReal> x11422=IKPowWithIntegerCheck((((cj3*x11420))+(((-1.0)*cj3*r00*x11419))),-1);
if(!x11422.valid){
continue;
}
if( IKabs(((-1.0)*(x11421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11422.value)*(((((-1.0)*r01*sj3*x11419))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11421.value)))+IKsqr(((x11422.value)*(((((-1.0)*r01*sj3*x11419))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11421.value)), ((x11422.value)*(((((-1.0)*r01*sj3*x11419))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11423=IKsin(j4);
IkReal x11424=IKcos(j4);
IkReal x11425=(cj2*sj1);
IkReal x11426=(cj1*sj2);
IkReal x11427=(sj1*sj2);
IkReal x11428=(gconst5*sj3);
IkReal x11429=(gconst5*r00);
IkReal x11430=(cj3*gconst5);
IkReal x11431=(gconst4*sj3);
IkReal x11432=(cj3*gconst4);
IkReal x11433=(cj1*cj2);
IkReal x11434=((1.0)*x11423);
IkReal x11435=(gconst4*x11423);
IkReal x11436=((1.0)*x11424);
IkReal x11437=(x11426+x11425);
IkReal x11438=(x11424*x11428);
IkReal x11439=(x11424*x11432);
evalcond[0]=((-1.0)*r12*x11424);
evalcond[1]=(((r21*x11435))+(((-1.0)*gconst5*r20*x11434)));
evalcond[2]=(x11433+((cj3*r12*x11423))+(((-1.0)*x11427)));
evalcond[3]=(x11437+(((-1.0)*r12*sj3*x11434)));
evalcond[4]=((1.0)+(((-1.0)*x11429*x11434))+((r01*x11435)));
evalcond[5]=((((-1.0)*cj3*x11429*x11436))+((r01*x11439))+((r01*x11428))+((r00*x11431)));
evalcond[6]=(((r01*x11430))+((r00*x11432))+((r00*x11438))+(((-1.0)*r01*x11431*x11436)));
evalcond[7]=(((r20*x11431))+x11437+(((-1.0)*r20*x11430*x11436))+((r21*x11428))+((r21*x11439)));
evalcond[8]=((((-1.0)*r21*x11431*x11436))+((r20*x11432))+((r20*x11438))+x11427+((r21*x11430))+(((-1.0)*x11433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11440=gconst4*gconst4;
IkReal x11441=gconst5*gconst5;
IkReal x11442=(r01*r20);
IkReal x11443=(gconst4*sj3);
IkReal x11444=(r01*r21);
IkReal x11445=((1.0)*cj3);
IkReal x11446=(r00*r21);
IkReal x11447=(r00*r20);
IkReal x11448=(cj3*gconst4*gconst5);
IkReal x11449=((1.0)*x11441);
CheckValue<IkReal> x11450 = IKatan2WithCheck(IkReal((((r00*r22*x11443))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11443*x11447))+(((-1.0)*sj3*x11442*x11449))+((gconst5*x11443*x11444))+((sj3*x11440*x11446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11450.valid){
continue;
}
CheckValue<IkReal> x11451=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11440*x11444*x11445))+(((-1.0)*r02*r22*x11445))+((x11442*x11448))+((x11446*x11448))+(((-1.0)*x11441*x11445*x11447)))),-1);
if(!x11451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11450.value)+(((1.5707963267949)*(x11451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11452=IKsin(j4);
IkReal x11453=IKcos(j4);
IkReal x11454=(cj2*sj1);
IkReal x11455=(cj1*sj2);
IkReal x11456=(gconst5*sj3);
IkReal x11457=(gconst4*r11);
IkReal x11458=(sj1*sj2);
IkReal x11459=(gconst5*r10);
IkReal x11460=(cj1*cj2);
IkReal x11461=(gconst4*r01);
IkReal x11462=(gconst5*r00);
IkReal x11463=(gconst4*sj3);
IkReal x11464=(cj3*gconst5);
IkReal x11465=(cj3*gconst4);
IkReal x11466=(gconst4*r21);
IkReal x11467=((1.0)*x11453);
IkReal x11468=((1.0)*x11452);
IkReal x11469=(cj3*x11452);
IkReal x11470=(cj3*x11453);
IkReal x11471=(x11454+x11455);
evalcond[0]=((((-1.0)*gconst5*r20*x11468))+(((-1.0)*r22*x11467))+((x11452*x11466)));
evalcond[1]=((((-1.0)*r12*x11467))+((x11452*x11457))+(((-1.0)*x11459*x11468)));
evalcond[2]=((1.0)+(((-1.0)*x11462*x11468))+(((-1.0)*r02*x11467))+((x11452*x11461)));
evalcond[3]=((((-1.0)*cj3*x11462*x11467))+((r01*x11456))+((x11461*x11470))+((r02*x11469))+((r00*x11463)));
evalcond[4]=(((r01*x11464))+((r00*x11453*x11456))+(((-1.0)*r02*sj3*x11468))+(((-1.0)*sj3*x11461*x11467))+((r00*x11465)));
evalcond[5]=(((r21*x11453*x11465))+x11471+((r22*x11469))+((r21*x11456))+((r20*x11463))+(((-1.0)*r20*x11464*x11467)));
evalcond[6]=(((x11457*x11470))+((r12*x11469))+x11460+((r10*x11463))+(((-1.0)*x11458))+(((-1.0)*cj3*x11459*x11467))+((r11*x11456)));
evalcond[7]=(x11471+((r11*x11464))+((r10*x11465))+(((-1.0)*r12*sj3*x11468))+((r10*x11453*x11456))+(((-1.0)*sj3*x11457*x11467)));
evalcond[8]=(x11458+((r20*x11453*x11456))+(((-1.0)*r21*x11463*x11467))+(((-1.0)*r22*sj3*x11468))+((r20*x11465))+((r21*x11464))+(((-1.0)*x11460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11472=((1.0)*gconst5);
CheckValue<IkReal> x11473 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11473.valid){
continue;
}
CheckValue<IkReal> x11474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11472))+(((-1.0)*gconst4*r20)))),-1);
if(!x11474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11473.value)+(((1.5707963267949)*(x11474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11475=IKsin(j4);
IkReal x11476=IKcos(j4);
IkReal x11477=(cj2*sj1);
IkReal x11478=(cj1*sj2);
IkReal x11479=(gconst5*sj3);
IkReal x11480=(gconst4*r11);
IkReal x11481=(sj1*sj2);
IkReal x11482=(gconst5*r10);
IkReal x11483=(cj1*cj2);
IkReal x11484=(gconst4*r01);
IkReal x11485=(gconst5*r00);
IkReal x11486=(gconst4*sj3);
IkReal x11487=(cj3*gconst5);
IkReal x11488=(cj3*gconst4);
IkReal x11489=(gconst4*r21);
IkReal x11490=((1.0)*x11476);
IkReal x11491=((1.0)*x11475);
IkReal x11492=(cj3*x11475);
IkReal x11493=(cj3*x11476);
IkReal x11494=(x11477+x11478);
evalcond[0]=((((-1.0)*gconst5*r20*x11491))+(((-1.0)*r22*x11490))+((x11475*x11489)));
evalcond[1]=((((-1.0)*x11482*x11491))+(((-1.0)*r12*x11490))+((x11475*x11480)));
evalcond[2]=((1.0)+(((-1.0)*x11485*x11491))+(((-1.0)*r02*x11490))+((x11475*x11484)));
evalcond[3]=((((-1.0)*cj3*x11485*x11490))+((r02*x11492))+((r00*x11486))+((x11484*x11493))+((r01*x11479)));
evalcond[4]=(((r00*x11488))+((r01*x11487))+(((-1.0)*r02*sj3*x11491))+(((-1.0)*sj3*x11484*x11490))+((r00*x11476*x11479)));
evalcond[5]=(((r22*x11492))+((r20*x11486))+x11494+((r21*x11479))+((r21*x11476*x11488))+(((-1.0)*r20*x11487*x11490)));
evalcond[6]=((((-1.0)*cj3*x11482*x11490))+x11483+((x11480*x11493))+((r11*x11479))+(((-1.0)*x11481))+((r12*x11492))+((r10*x11486)));
evalcond[7]=(x11494+(((-1.0)*sj3*x11480*x11490))+((r10*x11476*x11479))+((r11*x11487))+(((-1.0)*r12*sj3*x11491))+((r10*x11488)));
evalcond[8]=(((r20*x11488))+x11481+(((-1.0)*r22*sj3*x11491))+(((-1.0)*x11483))+(((-1.0)*r21*x11486*x11490))+((r20*x11476*x11479))+((r21*x11487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11495=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11495.valid){
continue;
}
CheckValue<IkReal> x11496 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11495.value)))+(x11496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11497=IKsin(j4);
IkReal x11498=IKcos(j4);
IkReal x11499=(cj2*sj1);
IkReal x11500=(cj1*sj2);
IkReal x11501=(gconst5*sj3);
IkReal x11502=(gconst4*r11);
IkReal x11503=(sj1*sj2);
IkReal x11504=(gconst5*r10);
IkReal x11505=(cj1*cj2);
IkReal x11506=(gconst4*r01);
IkReal x11507=(gconst5*r00);
IkReal x11508=(gconst4*sj3);
IkReal x11509=(cj3*gconst5);
IkReal x11510=(cj3*gconst4);
IkReal x11511=(gconst4*r21);
IkReal x11512=((1.0)*x11498);
IkReal x11513=((1.0)*x11497);
IkReal x11514=(cj3*x11497);
IkReal x11515=(cj3*x11498);
IkReal x11516=(x11499+x11500);
evalcond[0]=((((-1.0)*r22*x11512))+((x11497*x11511))+(((-1.0)*gconst5*r20*x11513)));
evalcond[1]=(((x11497*x11502))+(((-1.0)*r12*x11512))+(((-1.0)*x11504*x11513)));
evalcond[2]=((1.0)+(((-1.0)*x11507*x11513))+((x11497*x11506))+(((-1.0)*r02*x11512)));
evalcond[3]=(((r00*x11508))+((r01*x11501))+((r02*x11514))+((x11506*x11515))+(((-1.0)*cj3*x11507*x11512)));
evalcond[4]=((((-1.0)*sj3*x11506*x11512))+((r01*x11509))+(((-1.0)*r02*sj3*x11513))+((r00*x11498*x11501))+((r00*x11510)));
evalcond[5]=(x11516+((r21*x11501))+((r22*x11514))+((r21*x11498*x11510))+((r20*x11508))+(((-1.0)*r20*x11509*x11512)));
evalcond[6]=((((-1.0)*cj3*x11504*x11512))+x11505+((r11*x11501))+((r10*x11508))+(((-1.0)*x11503))+((r12*x11514))+((x11502*x11515)));
evalcond[7]=(x11516+((r10*x11498*x11501))+((r11*x11509))+(((-1.0)*r12*sj3*x11513))+(((-1.0)*sj3*x11502*x11512))+((r10*x11510)));
evalcond[8]=(x11503+((r20*x11510))+(((-1.0)*r21*x11508*x11512))+((r20*x11498*x11501))+((r21*x11509))+(((-1.0)*r22*sj3*x11513))+(((-1.0)*x11505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11517=((-1.0)*r21);
IkReal x11518=((-1.0)*px);
CheckValue<IkReal> x11520 = IKatan2WithCheck(IkReal(x11517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11520.valid){
continue;
}
IkReal x11519=((1.0)*(x11520.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11519)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11518);
rxp1_1=(px*r21);
rxp1_2=(r11*x11518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11519)));
IkReal gconst4=x11517;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11521=((-1.0)*r21);
IkReal x11522=((-1.0)*px);
CheckValue<IkReal> x11524 = IKatan2WithCheck(IkReal(x11521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11524.valid){
continue;
}
IkReal x11523=((1.0)*(x11524.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11523)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11522);
rxp1_1=(px*r21);
rxp1_2=(r11*x11522);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11523)));
IkReal gconst4=x11521;
IkReal gconst5=((1.0)*r20);
IkReal x11525=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11525))+(((-1.0)*x11525*(r21*r21)))+((x11525*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11526=((-1.0)*r21);
IkReal x11527=((-1.0)*px);
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(x11526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
IkReal x11528=((1.0)*(x11529.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11528)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11527);
rxp1_1=(px*r21);
rxp1_2=(r11*x11527);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11528)));
IkReal gconst4=x11526;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11530=((-1.0)*r21);
IkReal x11531=((-1.0)*px);
CheckValue<IkReal> x11533 = IKatan2WithCheck(IkReal(x11530),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11533.valid){
continue;
}
IkReal x11532=((1.0)*(x11533.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11532)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11531);
rxp1_1=(px*r21);
rxp1_2=(r11*x11531);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11532)));
IkReal gconst4=x11530;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11534=((-1.0)*r21);
IkReal x11535=((-1.0)*px);
CheckValue<IkReal> x11537 = IKatan2WithCheck(IkReal(x11534),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11537.valid){
continue;
}
IkReal x11536=((1.0)*(x11537.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11536)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11535);
rxp1_1=(px*r21);
rxp1_2=(r11*x11535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11536)));
IkReal gconst4=x11534;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11538=((-1.0)*r21);
IkReal x11539=((-1.0)*px);
CheckValue<IkReal> x11541 = IKatan2WithCheck(IkReal(x11538),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11541.valid){
continue;
}
IkReal x11540=((1.0)*(x11541.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11540)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11539);
rxp1_1=(px*r21);
rxp1_2=(r11*x11539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11540)));
IkReal gconst4=x11538;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11544=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11544.valid){
continue;
}
IkReal x11542=x11544.value;
IkReal x11543=(sj0*x11542);
cj4array[0]=(((cj1*sj2*x11543))+((cj2*sj1*x11543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11545=IKsin(j4);
IkReal x11546=IKcos(j4);
IkReal x11547=(gconst5*r20);
IkReal x11548=(gconst4*x11545);
IkReal x11549=((1.0)*x11546);
IkReal x11550=((1.0)*x11545);
evalcond[0]=((-1.0)*r02*x11545);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11549)));
evalcond[2]=((((-1.0)*x11547*x11550))+((r21*x11548)));
evalcond[3]=((((-1.0)*gconst5*r10*x11550))+((r11*x11548)));
evalcond[4]=((((-1.0)*gconst4*r21*x11549))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11546*x11547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11552=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11552.valid){
continue;
}
IkReal x11551=x11552.value;
cj4array[0]=(((cj1*cj2*x11551))+(((-1.0)*sj1*sj2*x11551)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11553=IKsin(j4);
IkReal x11554=IKcos(j4);
IkReal x11555=(gconst5*r10);
IkReal x11556=((1.0)*sj0);
IkReal x11557=(gconst4*x11553);
IkReal x11558=((1.0)*x11554);
IkReal x11559=((1.0)*x11553);
evalcond[0]=((-1.0)*r02*x11553);
evalcond[1]=((((-1.0)*x11556))+(((-1.0)*r02*x11558)));
evalcond[2]=(((r21*x11557))+(((-1.0)*gconst5*r20*x11559)));
evalcond[3]=((((-1.0)*x11555*x11559))+((r11*x11557)));
evalcond[4]=((((-1.0)*cj1*sj2*x11556))+(((-1.0)*gconst4*r11*x11558))+((x11554*x11555))+(((-1.0)*cj2*sj1*x11556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11560=IKPowWithIntegerCheck(r02,-1);
if(!x11560.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11560.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11561=IKsin(j4);
IkReal x11562=IKcos(j4);
IkReal x11563=((1.0)*sj0);
IkReal x11564=(gconst5*x11562);
IkReal x11565=(gconst4*x11561);
IkReal x11566=((1.0)*gconst4*x11562);
IkReal x11567=((1.0)*gconst5*x11561);
evalcond[0]=((-1.0)*r02*x11561);
evalcond[1]=((((-1.0)*r20*x11567))+((r21*x11565)));
evalcond[2]=(((r11*x11565))+(((-1.0)*r10*x11567)));
evalcond[3]=(((r20*x11564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11566)));
evalcond[4]=(((r10*x11564))+(((-1.0)*cj2*sj1*x11563))+(((-1.0)*cj1*sj2*x11563))+(((-1.0)*r11*x11566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11568=((-1.0)*r21);
IkReal x11569=((-1.0)*px);
CheckValue<IkReal> x11571 = IKatan2WithCheck(IkReal(x11568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11571.valid){
continue;
}
IkReal x11570=((1.0)*(x11571.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11570)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11569);
rxp1_1=(px*r21);
rxp1_2=(r11*x11569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst4=x11568;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11572=((-1.0)*r21);
IkReal x11573=((-1.0)*px);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal(x11572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
IkReal x11574=((1.0)*(x11575.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11574)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11573);
rxp1_1=(px*r21);
rxp1_2=(r11*x11573);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11574)));
IkReal gconst4=x11572;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11576=((-1.0)*r21);
IkReal x11577=((-1.0)*px);
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal(x11576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
IkReal x11578=((1.0)*(x11579.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11578)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11577);
rxp1_1=(px*r21);
rxp1_2=(r11*x11577);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11578)));
IkReal gconst4=x11576;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11582=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11582.valid){
continue;
}
IkReal x11580=x11582.value;
IkReal x11581=(sj0*x11580);
cj4array[0]=(((cj2*sj1*x11581))+((cj1*sj2*x11581)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11583=IKsin(j4);
IkReal x11584=IKcos(j4);
IkReal x11585=(gconst5*r20);
IkReal x11586=(gconst4*x11583);
IkReal x11587=((1.0)*x11584);
IkReal x11588=((1.0)*x11583);
evalcond[0]=(r02*x11583);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11587)));
evalcond[2]=((((-1.0)*x11585*x11588))+((r21*x11586)));
evalcond[3]=((((-1.0)*gconst5*r10*x11588))+((r11*x11586)));
evalcond[4]=((((-1.0)*x11585*x11587))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11590=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11590.valid){
continue;
}
IkReal x11589=x11590.value;
cj4array[0]=(((cj1*cj2*x11589))+(((-1.0)*sj1*sj2*x11589)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11591=IKsin(j4);
IkReal x11592=IKcos(j4);
IkReal x11593=(gconst4*r11);
IkReal x11594=((1.0)*sj0);
IkReal x11595=(gconst5*r10);
IkReal x11596=((1.0)*x11592);
IkReal x11597=((1.0)*x11591);
evalcond[0]=(r02*x11591);
evalcond[1]=((((-1.0)*x11594))+(((-1.0)*r02*x11596)));
evalcond[2]=(((gconst4*r21*x11591))+(((-1.0)*gconst5*r20*x11597)));
evalcond[3]=((((-1.0)*x11595*x11597))+((x11591*x11593)));
evalcond[4]=(((x11592*x11593))+(((-1.0)*cj2*sj1*x11594))+(((-1.0)*x11595*x11596))+(((-1.0)*cj1*sj2*x11594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11598=IKPowWithIntegerCheck(r02,-1);
if(!x11598.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11598.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11599=IKsin(j4);
IkReal x11600=IKcos(j4);
IkReal x11601=(gconst4*r11);
IkReal x11602=((1.0)*cj1);
IkReal x11603=(gconst4*r21);
IkReal x11604=((1.0)*gconst5*x11600);
IkReal x11605=((1.0)*gconst5*x11599);
evalcond[0]=(r02*x11599);
evalcond[1]=((((-1.0)*r20*x11605))+((x11599*x11603)));
evalcond[2]=((((-1.0)*r10*x11605))+((x11599*x11601)));
evalcond[3]=((((-1.0)*r20*x11604))+((sj1*sj2))+((x11600*x11603))+(((-1.0)*cj2*x11602)));
evalcond[4]=((((-1.0)*sj0*sj2*x11602))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11604))+((x11600*x11601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11607=IKPowWithIntegerCheck(r02,-1);
if(!x11607.valid){
continue;
}
IkReal x11606=x11607.value;
CheckValue<IkReal> x11608=IKPowWithIntegerCheck(cj3,-1);
if(!x11608.valid){
continue;
}
if( IKabs((x11606*(x11608.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11606)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11606*(x11608.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11606))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11606*(x11608.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11606));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11609=IKsin(j4);
IkReal x11610=IKcos(j4);
IkReal x11611=(gconst5*sj3);
IkReal x11612=(gconst4*r11);
IkReal x11613=(sj1*sj2);
IkReal x11614=((1.0)*gconst5);
IkReal x11615=(cj2*sj1);
IkReal x11616=((1.0)*sj0);
IkReal x11617=((1.0)*cj0);
IkReal x11618=(gconst4*r21);
IkReal x11619=(cj1*sj2);
IkReal x11620=(cj3*gconst4);
IkReal x11621=(gconst4*sj3);
IkReal x11622=(cj3*gconst5);
IkReal x11623=(r20*x11610);
IkReal x11624=((1.0)*cj1*cj2);
IkReal x11625=(r10*x11610);
IkReal x11626=(cj3*x11610);
IkReal x11627=(r02*x11609);
IkReal x11628=((1.0)*sj3*x11610);
evalcond[0]=((((-1.0)*x11616))+(((-1.0)*r02*x11610)));
evalcond[1]=(((x11609*x11618))+(((-1.0)*r20*x11609*x11614)));
evalcond[2]=(cj0+((x11609*x11612))+(((-1.0)*r10*x11609*x11614)));
evalcond[3]=((((-1.0)*cj1*cj2*x11617))+((cj3*x11627))+((cj0*x11613)));
evalcond[4]=((((-1.0)*sj3*x11627))+(((-1.0)*x11617*x11619))+(((-1.0)*x11615*x11617)));
evalcond[5]=(x11615+x11619+(((-1.0)*cj3*x11614*x11623))+((r21*x11611))+((x11618*x11626))+((r20*x11621)));
evalcond[6]=(x11613+((x11611*x11623))+(((-1.0)*x11624))+((r21*x11622))+(((-1.0)*x11618*x11628))+((r20*x11620)));
evalcond[7]=((((-1.0)*cj1*cj2*x11616))+((x11612*x11626))+((r11*x11611))+(((-1.0)*cj3*x11614*x11625))+((sj0*x11613))+((r10*x11621)));
evalcond[8]=(((x11611*x11625))+((r11*x11622))+(((-1.0)*x11616*x11619))+(((-1.0)*x11612*x11628))+((r10*x11620))+(((-1.0)*x11615*x11616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11629=((1.0)*gconst5);
CheckValue<IkReal> x11630=IKPowWithIntegerCheck(((((-1.0)*r10*x11629))+((gconst4*r11))),-1);
if(!x11630.valid){
continue;
}
CheckValue<IkReal> x11631=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11629))+((cj3*gconst4*r21))),-1);
if(!x11631.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11630.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11631.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11629)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11630.value)))+IKsqr(((x11631.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11629))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11630.value)), ((x11631.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11629))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11632=IKsin(j4);
IkReal x11633=IKcos(j4);
IkReal x11634=(gconst5*sj3);
IkReal x11635=(gconst4*r11);
IkReal x11636=(sj1*sj2);
IkReal x11637=((1.0)*gconst5);
IkReal x11638=(cj2*sj1);
IkReal x11639=((1.0)*sj0);
IkReal x11640=((1.0)*cj0);
IkReal x11641=(gconst4*r21);
IkReal x11642=(cj1*sj2);
IkReal x11643=(cj3*gconst4);
IkReal x11644=(gconst4*sj3);
IkReal x11645=(cj3*gconst5);
IkReal x11646=(r20*x11633);
IkReal x11647=((1.0)*cj1*cj2);
IkReal x11648=(r10*x11633);
IkReal x11649=(cj3*x11633);
IkReal x11650=(r02*x11632);
IkReal x11651=((1.0)*sj3*x11633);
evalcond[0]=((((-1.0)*x11639))+(((-1.0)*r02*x11633)));
evalcond[1]=((((-1.0)*r20*x11632*x11637))+((x11632*x11641)));
evalcond[2]=(cj0+(((-1.0)*r10*x11632*x11637))+((x11632*x11635)));
evalcond[3]=((((-1.0)*cj1*cj2*x11640))+((cj3*x11650))+((cj0*x11636)));
evalcond[4]=((((-1.0)*x11640*x11642))+(((-1.0)*sj3*x11650))+(((-1.0)*x11638*x11640)));
evalcond[5]=(x11638+x11642+((x11641*x11649))+((r21*x11634))+((r20*x11644))+(((-1.0)*cj3*x11637*x11646)));
evalcond[6]=(((x11634*x11646))+x11636+(((-1.0)*x11641*x11651))+((r21*x11645))+((r20*x11643))+(((-1.0)*x11647)));
evalcond[7]=(((x11635*x11649))+((r11*x11634))+((r10*x11644))+(((-1.0)*cj1*cj2*x11639))+((sj0*x11636))+(((-1.0)*cj3*x11637*x11648)));
evalcond[8]=(((x11634*x11648))+((r11*x11645))+(((-1.0)*x11639*x11642))+((r10*x11643))+(((-1.0)*x11638*x11639))+(((-1.0)*x11635*x11651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11652=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11652.valid){
continue;
}
CheckValue<IkReal> x11653=IKPowWithIntegerCheck(r02,-1);
if(!x11653.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11652.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11653.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11652.value)))+IKsqr(((-1.0)*sj0*(x11653.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11652.value)), ((-1.0)*sj0*(x11653.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11654=IKsin(j4);
IkReal x11655=IKcos(j4);
IkReal x11656=(gconst5*sj3);
IkReal x11657=(gconst4*r11);
IkReal x11658=(sj1*sj2);
IkReal x11659=((1.0)*gconst5);
IkReal x11660=(cj2*sj1);
IkReal x11661=((1.0)*sj0);
IkReal x11662=((1.0)*cj0);
IkReal x11663=(gconst4*r21);
IkReal x11664=(cj1*sj2);
IkReal x11665=(cj3*gconst4);
IkReal x11666=(gconst4*sj3);
IkReal x11667=(cj3*gconst5);
IkReal x11668=(r20*x11655);
IkReal x11669=((1.0)*cj1*cj2);
IkReal x11670=(r10*x11655);
IkReal x11671=(cj3*x11655);
IkReal x11672=(r02*x11654);
IkReal x11673=((1.0)*sj3*x11655);
evalcond[0]=((((-1.0)*x11661))+(((-1.0)*r02*x11655)));
evalcond[1]=(((x11654*x11663))+(((-1.0)*r20*x11654*x11659)));
evalcond[2]=(cj0+((x11654*x11657))+(((-1.0)*r10*x11654*x11659)));
evalcond[3]=(((cj0*x11658))+((cj3*x11672))+(((-1.0)*cj1*cj2*x11662)));
evalcond[4]=((((-1.0)*sj3*x11672))+(((-1.0)*x11662*x11664))+(((-1.0)*x11660*x11662)));
evalcond[5]=(x11664+x11660+((r20*x11666))+((r21*x11656))+(((-1.0)*cj3*x11659*x11668))+((x11663*x11671)));
evalcond[6]=(((r21*x11667))+x11658+((r20*x11665))+(((-1.0)*x11663*x11673))+(((-1.0)*x11669))+((x11656*x11668)));
evalcond[7]=(((r11*x11656))+((sj0*x11658))+(((-1.0)*cj1*cj2*x11661))+((r10*x11666))+(((-1.0)*cj3*x11659*x11670))+((x11657*x11671)));
evalcond[8]=((((-1.0)*x11657*x11673))+((r11*x11667))+((r10*x11665))+((x11656*x11670))+(((-1.0)*x11660*x11661))+(((-1.0)*x11661*x11664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11674=((1.0)*sj0);
IkReal x11675=((1.0)*gconst4);
CheckValue<IkReal> x11676 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11674)))),IkReal(((((-1.0)*cj0*r01*x11675))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11674))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11676.valid){
continue;
}
CheckValue<IkReal> x11677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11675))+(((-1.0)*gconst5*r21)))),-1);
if(!x11677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11676.value)+(((1.5707963267949)*(x11677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11678=IKsin(j4);
IkReal x11679=IKcos(j4);
IkReal x11680=(gconst5*sj3);
IkReal x11681=(cj3*gconst5);
IkReal x11682=(gconst4*r11);
IkReal x11683=(sj1*sj2);
IkReal x11684=(cj2*sj1);
IkReal x11685=((1.0)*sj0);
IkReal x11686=(gconst4*r01);
IkReal x11687=(gconst4*r21);
IkReal x11688=((1.0)*cj0);
IkReal x11689=(cj1*sj2);
IkReal x11690=(gconst4*sj3);
IkReal x11691=(cj3*gconst4);
IkReal x11692=((1.0)*x11679);
IkReal x11693=((1.0)*cj1*cj2);
IkReal x11694=(cj3*x11678);
IkReal x11695=(cj3*x11679);
IkReal x11696=((1.0)*gconst5*x11678);
IkReal x11697=((1.0)*sj3*x11678);
evalcond[0]=((((-1.0)*r22*x11692))+(((-1.0)*r20*x11696))+((x11678*x11687)));
evalcond[1]=(cj0+((x11678*x11682))+(((-1.0)*r12*x11692))+(((-1.0)*r10*x11696)));
evalcond[2]=((((-1.0)*x11685))+(((-1.0)*r02*x11692))+((x11678*x11686))+(((-1.0)*r00*x11696)));
evalcond[3]=(x11689+x11684+(((-1.0)*r20*x11681*x11692))+((x11687*x11695))+((r20*x11690))+((r21*x11680))+((r22*x11694)));
evalcond[4]=(((r20*x11679*x11680))+(((-1.0)*r22*x11697))+x11683+(((-1.0)*sj3*x11687*x11692))+((r20*x11691))+((r21*x11681))+(((-1.0)*x11693)));
evalcond[5]=((((-1.0)*r00*x11681*x11692))+((r00*x11690))+((x11686*x11695))+((cj0*x11683))+(((-1.0)*cj1*cj2*x11688))+((r02*x11694))+((r01*x11680)));
evalcond[6]=(((sj0*x11683))+((r11*x11680))+((r12*x11694))+((x11682*x11695))+(((-1.0)*r10*x11681*x11692))+((r10*x11690))+(((-1.0)*cj1*cj2*x11685)));
evalcond[7]=((((-1.0)*x11688*x11689))+(((-1.0)*x11684*x11688))+((r00*x11691))+(((-1.0)*r02*x11697))+((r00*x11679*x11680))+(((-1.0)*sj3*x11686*x11692))+((r01*x11681)));
evalcond[8]=((((-1.0)*x11684*x11685))+((r11*x11681))+((r10*x11679*x11680))+(((-1.0)*x11685*x11689))+(((-1.0)*sj3*x11682*x11692))+((r10*x11691))+(((-1.0)*r12*x11697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11698=((1.0)*gconst5);
CheckValue<IkReal> x11699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11698))+(((-1.0)*gconst4*r10)))),-1);
if(!x11699.valid){
continue;
}
CheckValue<IkReal> x11700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11698))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11699.value)))+(x11700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11701=IKsin(j4);
IkReal x11702=IKcos(j4);
IkReal x11703=(gconst5*sj3);
IkReal x11704=(cj3*gconst5);
IkReal x11705=(gconst4*r11);
IkReal x11706=(sj1*sj2);
IkReal x11707=(cj2*sj1);
IkReal x11708=((1.0)*sj0);
IkReal x11709=(gconst4*r01);
IkReal x11710=(gconst4*r21);
IkReal x11711=((1.0)*cj0);
IkReal x11712=(cj1*sj2);
IkReal x11713=(gconst4*sj3);
IkReal x11714=(cj3*gconst4);
IkReal x11715=((1.0)*x11702);
IkReal x11716=((1.0)*cj1*cj2);
IkReal x11717=(cj3*x11701);
IkReal x11718=(cj3*x11702);
IkReal x11719=((1.0)*gconst5*x11701);
IkReal x11720=((1.0)*sj3*x11701);
evalcond[0]=((((-1.0)*r20*x11719))+(((-1.0)*r22*x11715))+((x11701*x11710)));
evalcond[1]=(cj0+(((-1.0)*r10*x11719))+(((-1.0)*r12*x11715))+((x11701*x11705)));
evalcond[2]=((((-1.0)*r00*x11719))+(((-1.0)*x11708))+((x11701*x11709))+(((-1.0)*r02*x11715)));
evalcond[3]=(x11712+x11707+((r21*x11703))+((r20*x11713))+(((-1.0)*r20*x11704*x11715))+((r22*x11717))+((x11710*x11718)));
evalcond[4]=(x11706+(((-1.0)*x11716))+(((-1.0)*sj3*x11710*x11715))+((r21*x11704))+((r20*x11714))+(((-1.0)*r22*x11720))+((r20*x11702*x11703)));
evalcond[5]=(((r00*x11713))+((r01*x11703))+((r02*x11717))+((cj0*x11706))+(((-1.0)*cj1*cj2*x11711))+(((-1.0)*r00*x11704*x11715))+((x11709*x11718)));
evalcond[6]=(((x11705*x11718))+(((-1.0)*r10*x11704*x11715))+((r10*x11713))+((sj0*x11706))+(((-1.0)*cj1*cj2*x11708))+((r11*x11703))+((r12*x11717)));
evalcond[7]=((((-1.0)*x11707*x11711))+((r00*x11714))+((r01*x11704))+((r00*x11702*x11703))+(((-1.0)*x11711*x11712))+(((-1.0)*sj3*x11709*x11715))+(((-1.0)*r02*x11720)));
evalcond[8]=(((r10*x11702*x11703))+(((-1.0)*x11707*x11708))+(((-1.0)*x11708*x11712))+(((-1.0)*r12*x11720))+(((-1.0)*sj3*x11705*x11715))+((r10*x11714))+((r11*x11704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11721=((1.0)*gconst5);
CheckValue<IkReal> x11722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11721)))),-1);
if(!x11722.valid){
continue;
}
CheckValue<IkReal> x11723 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11721))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11722.value)))+(x11723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11724=IKsin(j4);
IkReal x11725=IKcos(j4);
IkReal x11726=(gconst5*sj3);
IkReal x11727=(cj3*gconst5);
IkReal x11728=(gconst4*r11);
IkReal x11729=(sj1*sj2);
IkReal x11730=(cj2*sj1);
IkReal x11731=((1.0)*sj0);
IkReal x11732=(gconst4*r01);
IkReal x11733=(gconst4*r21);
IkReal x11734=((1.0)*cj0);
IkReal x11735=(cj1*sj2);
IkReal x11736=(gconst4*sj3);
IkReal x11737=(cj3*gconst4);
IkReal x11738=((1.0)*x11725);
IkReal x11739=((1.0)*cj1*cj2);
IkReal x11740=(cj3*x11724);
IkReal x11741=(cj3*x11725);
IkReal x11742=((1.0)*gconst5*x11724);
IkReal x11743=((1.0)*sj3*x11724);
evalcond[0]=((((-1.0)*r20*x11742))+(((-1.0)*r22*x11738))+((x11724*x11733)));
evalcond[1]=(cj0+(((-1.0)*r10*x11742))+((x11724*x11728))+(((-1.0)*r12*x11738)));
evalcond[2]=((((-1.0)*r00*x11742))+(((-1.0)*x11731))+(((-1.0)*r02*x11738))+((x11724*x11732)));
evalcond[3]=(x11735+x11730+((x11733*x11741))+(((-1.0)*r20*x11727*x11738))+((r20*x11736))+((r22*x11740))+((r21*x11726)));
evalcond[4]=(x11729+(((-1.0)*x11739))+((r20*x11737))+(((-1.0)*r22*x11743))+((r20*x11725*x11726))+((r21*x11727))+(((-1.0)*sj3*x11733*x11738)));
evalcond[5]=(((r00*x11736))+((r01*x11726))+(((-1.0)*cj1*cj2*x11734))+((cj0*x11729))+(((-1.0)*r00*x11727*x11738))+((r02*x11740))+((x11732*x11741)));
evalcond[6]=(((x11728*x11741))+((sj0*x11729))+(((-1.0)*cj1*cj2*x11731))+((r10*x11736))+((r11*x11726))+(((-1.0)*r10*x11727*x11738))+((r12*x11740)));
evalcond[7]=((((-1.0)*x11734*x11735))+((r00*x11737))+((r01*x11727))+((r00*x11725*x11726))+(((-1.0)*sj3*x11732*x11738))+(((-1.0)*x11730*x11734))+(((-1.0)*r02*x11743)));
evalcond[8]=(((r10*x11725*x11726))+(((-1.0)*x11730*x11731))+(((-1.0)*r12*x11743))+(((-1.0)*sj3*x11728*x11738))+((r10*x11737))+(((-1.0)*x11731*x11735))+((r11*x11727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11744=((-1.0)*r10);
IkReal x11746 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11746)==0){
continue;
}
IkReal x11745=pow(x11746,-0.5);
CheckValue<IkReal> x11747 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11744),IKFAST_ATAN2_MAGTHRESH);
if(!x11747.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11747.value));
IkReal gconst7=(r11*x11745);
IkReal gconst8=(x11744*x11745);
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11748.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11749=((-1.0)*r10);
IkReal x11750=x11745;
CheckValue<IkReal> x11752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11749),IKFAST_ATAN2_MAGTHRESH);
if(!x11752.valid){
continue;
}
IkReal x11751=((-1.0)*(x11752.value));
sj5=gconst7;
cj5=gconst8;
j5=x11751;
IkReal gconst6=x11751;
IkReal gconst7=(r11*x11750);
IkReal gconst8=(x11749*x11750);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11753=((1.0)*sj0);
IkReal x11754=((1.0)*gconst7);
CheckValue<IkReal> x11755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11754)))),-1);
if(!x11755.valid){
continue;
}
CheckValue<IkReal> x11756 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11753))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst7*r11*x11753))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11754))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11755.value)))+(x11756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11757=IKsin(j4);
IkReal x11758=IKcos(j4);
IkReal x11759=(gconst7*sj3);
IkReal x11760=(cj3*gconst8);
IkReal x11761=(cj3*gconst7);
IkReal x11762=(sj1*sj2);
IkReal x11763=(cj2*sj1);
IkReal x11764=((1.0)*sj0);
IkReal x11765=((1.0)*cj0);
IkReal x11766=(gconst8*sj3);
IkReal x11767=(cj1*sj2);
IkReal x11768=((1.0)*x11758);
IkReal x11769=((1.0)*x11757);
IkReal x11770=((1.0)*cj1*cj2);
IkReal x11771=(cj3*x11757);
IkReal x11772=(gconst7*x11757);
IkReal x11773=(x11758*x11766);
evalcond[0]=((((-1.0)*r22*x11768))+(((-1.0)*gconst8*r20*x11769))+((r21*x11772)));
evalcond[1]=((((-1.0)*r12*x11768))+(((-1.0)*gconst8*r10*x11769))+cj0+((r11*x11772)));
evalcond[2]=((((-1.0)*gconst8*r00*x11769))+(((-1.0)*r02*x11768))+((r01*x11772))+(((-1.0)*x11764)));
evalcond[3]=(x11763+x11767+(((-1.0)*r20*x11760*x11768))+((r21*x11758*x11761))+((r22*x11771))+((r21*x11766))+((r20*x11759)));
evalcond[4]=((((-1.0)*r22*sj3*x11769))+x11762+((r20*x11761))+((r20*x11773))+(((-1.0)*x11770))+((r21*x11760))+(((-1.0)*r21*x11759*x11768)));
evalcond[5]=(((cj0*x11762))+(((-1.0)*cj1*cj2*x11765))+((r01*x11758*x11761))+((r02*x11771))+(((-1.0)*r00*x11760*x11768))+((r01*x11766))+((r00*x11759)));
evalcond[6]=(((r11*x11758*x11761))+(((-1.0)*cj1*cj2*x11764))+((r11*x11766))+((r12*x11771))+((r10*x11759))+(((-1.0)*r10*x11760*x11768))+((sj0*x11762)));
evalcond[7]=((((-1.0)*x11765*x11767))+(((-1.0)*r02*sj3*x11769))+(((-1.0)*r01*x11759*x11768))+((r00*x11773))+(((-1.0)*x11763*x11765))+((r00*x11761))+((r01*x11760)));
evalcond[8]=(((r11*x11760))+((r10*x11773))+((r10*x11761))+(((-1.0)*r12*sj3*x11769))+(((-1.0)*r11*x11759*x11768))+(((-1.0)*x11764*x11767))+(((-1.0)*x11763*x11764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11774=((1.0)*gconst8);
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
CheckValue<IkReal> x11776=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11774)))),-1);
if(!x11776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11775.value)+(((1.5707963267949)*(x11776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11777=IKsin(j4);
IkReal x11778=IKcos(j4);
IkReal x11779=(gconst7*sj3);
IkReal x11780=(cj3*gconst8);
IkReal x11781=(cj3*gconst7);
IkReal x11782=(sj1*sj2);
IkReal x11783=(cj2*sj1);
IkReal x11784=((1.0)*sj0);
IkReal x11785=((1.0)*cj0);
IkReal x11786=(gconst8*sj3);
IkReal x11787=(cj1*sj2);
IkReal x11788=((1.0)*x11778);
IkReal x11789=((1.0)*x11777);
IkReal x11790=((1.0)*cj1*cj2);
IkReal x11791=(cj3*x11777);
IkReal x11792=(gconst7*x11777);
IkReal x11793=(x11778*x11786);
evalcond[0]=((((-1.0)*gconst8*r20*x11789))+(((-1.0)*r22*x11788))+((r21*x11792)));
evalcond[1]=(cj0+((r11*x11792))+(((-1.0)*r12*x11788))+(((-1.0)*gconst8*r10*x11789)));
evalcond[2]=((((-1.0)*gconst8*r00*x11789))+((r01*x11792))+(((-1.0)*r02*x11788))+(((-1.0)*x11784)));
evalcond[3]=(((r21*x11786))+x11787+x11783+((r20*x11779))+(((-1.0)*r20*x11780*x11788))+((r21*x11778*x11781))+((r22*x11791)));
evalcond[4]=(((r21*x11780))+x11782+(((-1.0)*r21*x11779*x11788))+((r20*x11781))+((r20*x11793))+(((-1.0)*r22*sj3*x11789))+(((-1.0)*x11790)));
evalcond[5]=((((-1.0)*r00*x11780*x11788))+((cj0*x11782))+(((-1.0)*cj1*cj2*x11785))+((r02*x11791))+((r00*x11779))+((r01*x11778*x11781))+((r01*x11786)));
evalcond[6]=(((r12*x11791))+((r11*x11786))+((r10*x11779))+(((-1.0)*cj1*cj2*x11784))+((sj0*x11782))+(((-1.0)*r10*x11780*x11788))+((r11*x11778*x11781)));
evalcond[7]=((((-1.0)*x11785*x11787))+(((-1.0)*r02*sj3*x11789))+(((-1.0)*r01*x11779*x11788))+(((-1.0)*x11783*x11785))+((r00*x11793))+((r00*x11781))+((r01*x11780)));
evalcond[8]=(((r11*x11780))+((r10*x11793))+((r10*x11781))+(((-1.0)*x11784*x11787))+(((-1.0)*x11783*x11784))+(((-1.0)*r12*sj3*x11789))+(((-1.0)*r11*x11779*x11788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11794=((-1.0)*r11);
IkReal x11796 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11796)==0){
continue;
}
IkReal x11795=pow(x11796,-0.5);
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(x11794),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11797.value))));
IkReal gconst10=(x11794*x11795);
IkReal gconst11=((1.0)*r10*x11795);
CheckValue<IkReal> x11798 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11798.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11798.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11799=((-1.0)*r11);
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(x11799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal x11800=((1.0)*(x11802.value));
IkReal x11801=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11800)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11800)));
IkReal gconst10=(x11799*x11801);
IkReal gconst11=((1.0)*r10*x11801);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11803=((-1.0)*r11);
CheckValue<IkReal> x11806 = IKatan2WithCheck(IkReal(x11803),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11806.valid){
continue;
}
IkReal x11804=((1.0)*(x11806.value));
IkReal x11805=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11804)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11804)));
IkReal gconst10=(x11803*x11805);
IkReal gconst11=((1.0)*r10*x11805);
IkReal x11807=r12*r12;
IkReal x11808=((1.0)*sj0);
IkReal x11809=(cj0*r02);
IkReal x11810=x11795;
j4eval[0]=((IKabs(((((-1.0)*r12*x11808))+(((-1.0)*x11809)))))+(IKabs((((sj0*x11807*x11810))+(((-1.0)*x11808*x11810))+((r12*x11809*x11810))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11811=((-1.0)*r11);
CheckValue<IkReal> x11814 = IKatan2WithCheck(IkReal(x11811),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11814.valid){
continue;
}
IkReal x11812=((1.0)*(x11814.value));
IkReal x11813=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11812)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11812)));
IkReal gconst10=(x11811*x11813);
IkReal gconst11=((1.0)*r10*x11813);
IkReal x11815=((1.0)*cj3);
CheckValue<IkReal> x11820=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11820.valid){
continue;
}
IkReal x11816=x11820.value;
IkReal x11817=(cj3*x11816);
IkReal x11818=(x11815*x11816);
IkReal x11819=((((-1.0)*x11818*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11817))+(((-1.0)*x11815*(r22*r22)))+(((-1.0)*x11818*(r11*r11)*(r21*r21))));
j4eval[0]=x11819;
j4eval[1]=IKsign(x11819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11821=((-1.0)*r11);
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal(x11821),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
IkReal x11822=((1.0)*(x11824.value));
IkReal x11823=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11822)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11822)));
IkReal gconst10=(x11821*x11823);
IkReal gconst11=((1.0)*r10*x11823);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11825=((-1.0)*r11);
CheckValue<IkReal> x11828 = IKatan2WithCheck(IkReal(x11825),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11828.valid){
continue;
}
IkReal x11826=((1.0)*(x11828.value));
IkReal x11827=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11826)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11826)));
IkReal gconst10=(x11825*x11827);
IkReal gconst11=((1.0)*r10*x11827);
IkReal x11829=r12*r12;
IkReal x11830=((1.0)*sj0);
IkReal x11831=(cj0*r02);
IkReal x11832=x11795;
j4eval[0]=((IKabs(((((-1.0)*r12*x11830))+(((-1.0)*x11831)))))+(IKabs((((r12*x11831*x11832))+(((-1.0)*x11830*x11832))+((sj0*x11829*x11832))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11833=((-1.0)*r11);
CheckValue<IkReal> x11836 = IKatan2WithCheck(IkReal(x11833),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11836.valid){
continue;
}
IkReal x11834=((1.0)*(x11836.value));
IkReal x11835=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11834)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11834)));
IkReal gconst10=(x11833*x11835);
IkReal gconst11=((1.0)*r10*x11835);
IkReal x11837=r12*r12;
IkReal x11838=(cj1*cj2*r22);
IkReal x11839=(r22*sj1*sj2);
CheckValue<IkReal> x11843=IKPowWithIntegerCheck(((-1.0)+x11837),-1);
if(!x11843.valid){
continue;
}
IkReal x11840=x11843.value;
if((((1.0)+(((-1.0)*x11837)))) < -0.00001)
continue;
IkReal x11841=IKsqrt(((1.0)+(((-1.0)*x11837))));
IkReal x11842=(r12*x11840*x11841);
j4eval[0]=((IKabs(((((-1.0)*x11838))+x11839)))+(IKabs((((x11838*x11842))+(((-1.0)*x11839*x11842))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11844=((-1.0)*r11);
CheckValue<IkReal> x11847 = IKatan2WithCheck(IkReal(x11844),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11847.valid){
continue;
}
IkReal x11845=((1.0)*(x11847.value));
IkReal x11846=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11845)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11845)));
IkReal gconst10=(x11844*x11846);
IkReal gconst11=((1.0)*r10*x11846);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11848=((-1.0)*r11);
CheckValue<IkReal> x11851 = IKatan2WithCheck(IkReal(x11848),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11851.valid){
continue;
}
IkReal x11849=((1.0)*(x11851.value));
IkReal x11850=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11849)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11849)));
IkReal gconst10=(x11848*x11850);
IkReal gconst11=((1.0)*r10*x11850);
IkReal x11852=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11856=IKPowWithIntegerCheck(x11852,-1);
if(!x11856.valid){
continue;
}
IkReal x11853=x11856.value;
IkReal x11854=((1.0)*x11853);
IkReal x11855=((((-1.0)*x11854*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11853))+(((-1.0)*x11854*(r01*r01)*(r11*r11))));
j4eval[0]=x11855;
j4eval[1]=IKsign(x11855);
j4eval[2]=r02;
j4eval[3]=x11852;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11857=((-1.0)*r11);
CheckValue<IkReal> x11860 = IKatan2WithCheck(IkReal(x11857),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11860.valid){
continue;
}
IkReal x11858=((1.0)*(x11860.value));
IkReal x11859=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11858)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11858)));
IkReal gconst10=(x11857*x11859);
IkReal gconst11=((1.0)*r10*x11859);
IkReal x11861=r12*r12;
IkReal x11862=(cj1*cj2*r22);
IkReal x11863=(r22*sj1*sj2);
CheckValue<IkReal> x11867=IKPowWithIntegerCheck(((-1.0)+x11861),-1);
if(!x11867.valid){
continue;
}
IkReal x11864=x11867.value;
if((((1.0)+(((-1.0)*x11861)))) < -0.00001)
continue;
IkReal x11865=IKsqrt(((1.0)+(((-1.0)*x11861))));
IkReal x11866=(r12*x11864*x11865);
j4eval[0]=((IKabs(((((-1.0)*x11862))+x11863)))+(IKabs(((((-1.0)*x11863*x11866))+((x11862*x11866))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11868=(gconst10*r21);
IkReal x11869=(gconst11*r20);
IkReal x11870=(sj1*sj2);
IkReal x11871=(cj1*cj2);
CheckValue<IkReal> x11872 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11871))+((r22*x11870)))),IkReal((((x11868*x11870))+((x11869*x11871))+(((-1.0)*x11868*x11871))+(((-1.0)*x11869*x11870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11872.valid){
continue;
}
CheckValue<IkReal> x11873=IKPowWithIntegerCheck(IKsign(((x11868*x11868)+(r22*r22)+(((-2.0)*x11868*x11869))+(x11869*x11869))),-1);
if(!x11873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11872.value)+(((1.5707963267949)*(x11873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11874=IKsin(j4);
IkReal x11875=IKcos(j4);
IkReal x11876=((1.0)*cj2);
IkReal x11877=((1.0)*x11875);
IkReal x11878=(gconst10*x11874);
IkReal x11879=((1.0)*x11874);
IkReal x11880=(gconst11*x11875);
IkReal x11881=(gconst11*x11879);
evalcond[0]=((((-1.0)*r22*x11877))+((r21*x11878))+(((-1.0)*r20*x11881)));
evalcond[1]=(((r11*x11878))+(((-1.0)*r12*x11877))+(((-1.0)*r10*x11881)));
evalcond[2]=(((r00*x11880))+(((-1.0)*gconst10*r01*x11877))+(((-1.0)*r02*x11879)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11881))+((r01*x11878))+(((-1.0)*r02*x11877)));
evalcond[4]=((((-1.0)*r22*x11879))+(((-1.0)*gconst10*r21*x11877))+(((-1.0)*cj1*x11876))+((sj1*sj2))+((r20*x11880)));
evalcond[5]=((((-1.0)*sj1*x11876))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11877))+((r10*x11880))+(((-1.0)*r12*x11879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11882=(gconst11*r00);
IkReal x11883=(gconst10*r01);
CheckValue<IkReal> x11884 = IKatan2WithCheck(IkReal(((((-1.0)*x11883))+x11882)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11884.valid){
continue;
}
CheckValue<IkReal> x11885=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11883*x11883)))+(((2.0)*x11882*x11883))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11882*x11882))))),-1);
if(!x11885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11884.value)+(((1.5707963267949)*(x11885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11886=IKsin(j4);
IkReal x11887=IKcos(j4);
IkReal x11888=((1.0)*cj2);
IkReal x11889=((1.0)*x11887);
IkReal x11890=(gconst10*x11886);
IkReal x11891=((1.0)*x11886);
IkReal x11892=(gconst11*x11887);
IkReal x11893=(gconst11*x11891);
evalcond[0]=((((-1.0)*r20*x11893))+((r21*x11890))+(((-1.0)*r22*x11889)));
evalcond[1]=((((-1.0)*r10*x11893))+(((-1.0)*r12*x11889))+((r11*x11890)));
evalcond[2]=((((-1.0)*gconst10*r01*x11889))+((r00*x11892))+(((-1.0)*r02*x11891)));
evalcond[3]=((-1.0)+((r01*x11890))+(((-1.0)*r00*x11893))+(((-1.0)*r02*x11889)));
evalcond[4]=((((-1.0)*r22*x11891))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11889))+((r20*x11892))+(((-1.0)*cj1*x11888)));
evalcond[5]=((((-1.0)*gconst10*r11*x11889))+(((-1.0)*r12*x11891))+(((-1.0)*cj1*sj2))+((r10*x11892))+(((-1.0)*sj1*x11888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11894 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11894.valid){
continue;
}
CheckValue<IkReal> x11895=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11894.value)+(((1.5707963267949)*(x11895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11896=IKsin(j4);
IkReal x11897=IKcos(j4);
IkReal x11898=((1.0)*cj2);
IkReal x11899=((1.0)*x11897);
IkReal x11900=(gconst10*x11896);
IkReal x11901=((1.0)*x11896);
IkReal x11902=(gconst11*x11897);
IkReal x11903=(gconst11*x11901);
evalcond[0]=((((-1.0)*r22*x11899))+(((-1.0)*r20*x11903))+((r21*x11900)));
evalcond[1]=((((-1.0)*r12*x11899))+(((-1.0)*r10*x11903))+((r11*x11900)));
evalcond[2]=((((-1.0)*r02*x11901))+(((-1.0)*gconst10*r01*x11899))+((r00*x11902)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11903))+((r01*x11900))+(((-1.0)*r02*x11899)));
evalcond[4]=((((-1.0)*cj1*x11898))+(((-1.0)*r22*x11901))+((sj1*sj2))+((r20*x11902))+(((-1.0)*gconst10*r21*x11899)));
evalcond[5]=((((-1.0)*gconst10*r11*x11899))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11901))+((r10*x11902))+(((-1.0)*sj1*x11898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11904=((-1.0)*r11);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(x11904),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
IkReal x11905=((1.0)*(x11907.value));
IkReal x11906=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11905)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11905)));
IkReal gconst10=(x11904*x11906);
IkReal gconst11=((1.0)*r10*x11906);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11908=((-1.0)*r11);
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal(x11908),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
IkReal x11909=((1.0)*(x11911.value));
IkReal x11910=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11909)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11909)));
IkReal gconst10=(x11908*x11910);
IkReal gconst11=((1.0)*r10*x11910);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11912=((-1.0)*r11);
CheckValue<IkReal> x11915 = IKatan2WithCheck(IkReal(x11912),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11915.valid){
continue;
}
IkReal x11913=((1.0)*(x11915.value));
IkReal x11914=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11913)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11913)));
IkReal gconst10=(x11912*x11914);
IkReal gconst11=((1.0)*r10*x11914);
IkReal x11916=r12*r12;
CheckValue<IkReal> x11919=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11916))),-1);
if(!x11919.valid){
continue;
}
IkReal x11917=x11919.value;
IkReal x11918=((1.0)*x11917);
j4eval[0]=IKsign((x11916+(((2.0)*x11917*(r10*r10)*(r11*r11)))+((x11918*(r11*r11*r11*r11)))+((x11918*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11920=(cj2*sj1);
IkReal x11921=(gconst10*r11);
IkReal x11922=(gconst11*r10);
IkReal x11923=(cj1*sj2);
CheckValue<IkReal> x11924=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11922*x11922)+(x11921*x11921)+(((-2.0)*x11921*x11922)))),-1);
if(!x11924.valid){
continue;
}
CheckValue<IkReal> x11925 = IKatan2WithCheck(IkReal((((r12*x11923))+((r12*x11920)))),IkReal(((((-1.0)*x11920*x11922))+((x11921*x11923))+((x11920*x11921))+(((-1.0)*x11922*x11923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11924.value)))+(x11925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11926=IKsin(j4);
IkReal x11927=IKcos(j4);
IkReal x11928=((1.0)*x11927);
IkReal x11929=(gconst10*x11926);
IkReal x11930=((1.0)*x11926);
IkReal x11931=(gconst11*x11927);
IkReal x11932=(gconst11*x11930);
evalcond[0]=(((r21*x11929))+(((-1.0)*r22*x11928))+(((-1.0)*r20*x11932)));
evalcond[1]=((((-1.0)*r10*x11932))+((r11*x11929))+(((-1.0)*r12*x11928)));
evalcond[2]=((((-1.0)*r02*x11930))+((r00*x11931))+(((-1.0)*gconst10*r01*x11928)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11928))+(((-1.0)*r00*x11932))+((r01*x11929)));
evalcond[4]=(((cj2*sj1))+((r10*x11931))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11928))+(((-1.0)*r12*x11930)));
evalcond[5]=(((r20*x11931))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11930))+(((-1.0)*gconst10*r21*x11928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11933=(gconst11*r00);
IkReal x11934=(gconst10*r01);
CheckValue<IkReal> x11935=IKPowWithIntegerCheck(IKsign(((x11934*x11934)+(r02*r02)+(((-2.0)*x11933*x11934))+(x11933*x11933))),-1);
if(!x11935.valid){
continue;
}
CheckValue<IkReal> x11936 = IKatan2WithCheck(IkReal((x11933+(((-1.0)*x11934)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11935.value)))+(x11936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11937=IKsin(j4);
IkReal x11938=IKcos(j4);
IkReal x11939=((1.0)*x11938);
IkReal x11940=(gconst10*x11937);
IkReal x11941=((1.0)*x11937);
IkReal x11942=(gconst11*x11938);
IkReal x11943=(gconst11*x11941);
evalcond[0]=((((-1.0)*r20*x11943))+((r21*x11940))+(((-1.0)*r22*x11939)));
evalcond[1]=(((r11*x11940))+(((-1.0)*r12*x11939))+(((-1.0)*r10*x11943)));
evalcond[2]=((((-1.0)*gconst10*r01*x11939))+(((-1.0)*r02*x11941))+((r00*x11942)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11939))+(((-1.0)*r00*x11943))+((r01*x11940)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11939))+((cj1*sj2))+((r10*x11942))+(((-1.0)*r12*x11941)));
evalcond[5]=(((r20*x11942))+(((-1.0)*r22*x11941))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11944=((1.0)*gconst11);
CheckValue<IkReal> x11945 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11945.valid){
continue;
}
CheckValue<IkReal> x11946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11944))+(((-1.0)*gconst10*r20)))),-1);
if(!x11946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11945.value)+(((1.5707963267949)*(x11946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11947=IKsin(j4);
IkReal x11948=IKcos(j4);
IkReal x11949=((1.0)*x11948);
IkReal x11950=(gconst10*x11947);
IkReal x11951=((1.0)*x11947);
IkReal x11952=(gconst11*x11948);
IkReal x11953=(gconst11*x11951);
evalcond[0]=((((-1.0)*r20*x11953))+((r21*x11950))+(((-1.0)*r22*x11949)));
evalcond[1]=(((r11*x11950))+(((-1.0)*r10*x11953))+(((-1.0)*r12*x11949)));
evalcond[2]=((((-1.0)*r02*x11951))+((r00*x11952))+(((-1.0)*gconst10*r01*x11949)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11949))+(((-1.0)*r00*x11953))+((r01*x11950)));
evalcond[4]=((((-1.0)*r12*x11951))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11949))+((cj1*sj2))+((r10*x11952)));
evalcond[5]=((((-1.0)*gconst10*r21*x11949))+((r20*x11952))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11954=((-1.0)*r11);
IkReal x11955=((-1.0)*r10);
CheckValue<IkReal> x11957 = IKatan2WithCheck(IkReal(x11954),IkReal(x11955),IKFAST_ATAN2_MAGTHRESH);
if(!x11957.valid){
continue;
}
IkReal x11956=((1.0)*(x11957.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11956)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11955);
rxp1_1=(px*r21);
rxp1_2=(px*x11954);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11956)));
IkReal gconst10=x11954;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11958=((-1.0)*r11);
IkReal x11959=((-1.0)*r10);
CheckValue<IkReal> x11961 = IKatan2WithCheck(IkReal(x11958),IkReal(x11959),IKFAST_ATAN2_MAGTHRESH);
if(!x11961.valid){
continue;
}
IkReal x11960=((1.0)*(x11961.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11960)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11959);
rxp1_1=(px*r21);
rxp1_2=(px*x11958);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11960)));
IkReal gconst10=x11958;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11962=((-1.0)*r11);
IkReal x11963=((-1.0)*r10);
CheckValue<IkReal> x11965 = IKatan2WithCheck(IkReal(x11962),IkReal(x11963),IKFAST_ATAN2_MAGTHRESH);
if(!x11965.valid){
continue;
}
IkReal x11964=((1.0)*(x11965.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11964)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11963);
rxp1_1=(px*r21);
rxp1_2=(px*x11962);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11964)));
IkReal gconst10=x11962;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11968=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11968.valid){
continue;
}
IkReal x11966=x11968.value;
IkReal x11967=(sj0*x11966);
cj4array[0]=(((cj1*sj2*x11967))+((cj2*sj1*x11967)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11969=IKsin(j4);
IkReal x11970=IKcos(j4);
IkReal x11971=(gconst10*r21);
IkReal x11972=(gconst11*r20);
IkReal x11973=((1.0)*x11969);
IkReal x11974=((1.0)*x11970);
evalcond[0]=((-1.0)*r02*x11969);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11974)));
evalcond[2]=((((-1.0)*x11972*x11973))+((x11969*x11971)));
evalcond[3]=(((gconst10*r11*x11969))+(((-1.0)*gconst11*r10*x11973)));
evalcond[4]=(((x11970*x11972))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11971*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11976=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11976.valid){
continue;
}
IkReal x11975=x11976.value;
cj4array[0]=(((cj1*cj2*x11975))+(((-1.0)*sj1*sj2*x11975)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11977=IKsin(j4);
IkReal x11978=IKcos(j4);
IkReal x11979=((1.0)*sj0);
IkReal x11980=(gconst10*x11977);
IkReal x11981=((1.0)*x11978);
IkReal x11982=((1.0)*gconst11*x11977);
evalcond[0]=((-1.0)*r02*x11977);
evalcond[1]=((((-1.0)*r02*x11981))+(((-1.0)*x11979)));
evalcond[2]=(((r21*x11980))+(((-1.0)*r20*x11982)));
evalcond[3]=((((-1.0)*r10*x11982))+((r11*x11980)));
evalcond[4]=((((-1.0)*gconst10*r11*x11981))+(((-1.0)*cj2*sj1*x11979))+(((-1.0)*cj1*sj2*x11979))+((gconst11*r10*x11978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11983=IKPowWithIntegerCheck(r02,-1);
if(!x11983.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11983.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11984=IKsin(j4);
IkReal x11985=IKcos(j4);
IkReal x11986=(gconst10*r21);
IkReal x11987=((1.0)*sj0);
IkReal x11988=(gconst10*r11);
IkReal x11989=(gconst11*x11985);
IkReal x11990=((1.0)*x11985);
IkReal x11991=((1.0)*gconst11*x11984);
evalcond[0]=((-1.0)*r02*x11984);
evalcond[1]=(((x11984*x11986))+(((-1.0)*r20*x11991)));
evalcond[2]=(((x11984*x11988))+(((-1.0)*r10*x11991)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11989))+(((-1.0)*x11986*x11990)));
evalcond[4]=(((r10*x11989))+(((-1.0)*x11988*x11990))+(((-1.0)*cj2*sj1*x11987))+(((-1.0)*cj1*sj2*x11987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11992=((1.0)*gconst11);
CheckValue<IkReal> x11993 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11992))+((gconst10*r11*sj0))+(((-1.0)*cj0*r00*x11992))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11993.valid){
continue;
}
CheckValue<IkReal> x11994=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11993.value)+(((1.5707963267949)*(x11994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11995=IKsin(j4);
IkReal x11996=IKcos(j4);
IkReal x11997=((1.0)*cj2);
IkReal x11998=((1.0)*sj0);
IkReal x11999=(cj1*sj2);
IkReal x12000=(gconst10*x11995);
IkReal x12001=((1.0)*x11996);
IkReal x12002=(gconst11*x11996);
IkReal x12003=((1.0)*x11995);
IkReal x12004=(gconst11*x12003);
evalcond[0]=(((r21*x12000))+(((-1.0)*r20*x12004)));
evalcond[1]=((((-1.0)*r10*x12004))+cj0+(((-1.0)*r12*x12001))+((r11*x12000)));
evalcond[2]=(((r20*x12002))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12001))+(((-1.0)*cj1*x11997)));
evalcond[3]=((((-1.0)*r00*x12004))+((r01*x12000))+(((-1.0)*r02*x12001))+(((-1.0)*x11998)));
evalcond[4]=((((-1.0)*gconst10*r01*x12001))+(((-1.0)*cj0*x11999))+((r00*x12002))+(((-1.0)*r02*x12003))+(((-1.0)*cj0*sj1*x11997)));
evalcond[5]=((((-1.0)*gconst10*r11*x12001))+(((-1.0)*x11998*x11999))+(((-1.0)*r12*x12003))+((r10*x12002))+(((-1.0)*sj0*sj1*x11997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12005=(gconst10*r21);
IkReal x12006=(gconst11*r20);
IkReal x12007=(sj1*sj2);
IkReal x12008=(cj1*cj2);
CheckValue<IkReal> x12009=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x12005*x12006))+(x12006*x12006)+(x12005*x12005))),-1);
if(!x12009.valid){
continue;
}
CheckValue<IkReal> x12010 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12008))+((r22*x12007)))),IkReal(((((-1.0)*x12005*x12008))+((x12005*x12007))+((x12006*x12008))+(((-1.0)*x12006*x12007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12009.value)))+(x12010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12011=IKsin(j4);
IkReal x12012=IKcos(j4);
IkReal x12013=((1.0)*cj2);
IkReal x12014=((1.0)*sj0);
IkReal x12015=(cj1*sj2);
IkReal x12016=((1.0)*x12012);
IkReal x12017=(gconst10*x12011);
IkReal x12018=((1.0)*x12011);
IkReal x12019=(gconst11*x12012);
IkReal x12020=(gconst11*x12018);
evalcond[0]=((((-1.0)*r20*x12020))+((r21*x12017))+(((-1.0)*r22*x12016)));
evalcond[1]=(cj0+((r11*x12017))+(((-1.0)*r12*x12016))+(((-1.0)*r10*x12020)));
evalcond[2]=((((-1.0)*r02*x12016))+(((-1.0)*r00*x12020))+(((-1.0)*x12014))+((r01*x12017)));
evalcond[3]=((((-1.0)*gconst10*r21*x12016))+(((-1.0)*cj1*x12013))+((sj1*sj2))+(((-1.0)*r22*x12018))+((r20*x12019)));
evalcond[4]=((((-1.0)*r02*x12018))+(((-1.0)*cj0*sj1*x12013))+(((-1.0)*cj0*x12015))+((r00*x12019))+(((-1.0)*gconst10*r01*x12016)));
evalcond[5]=((((-1.0)*x12014*x12015))+((r10*x12019))+(((-1.0)*r12*x12018))+(((-1.0)*sj0*sj1*x12013))+(((-1.0)*gconst10*r11*x12016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12021=((1.0)*sj0);
IkReal x12022=((1.0)*gconst10);
CheckValue<IkReal> x12023 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12021)))),IkReal(((((-1.0)*gconst10*r11*x12021))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12023.valid){
continue;
}
CheckValue<IkReal> x12024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12022))+(((-1.0)*gconst11*r21)))),-1);
if(!x12024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12023.value)+(((1.5707963267949)*(x12024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12025=IKsin(j4);
IkReal x12026=IKcos(j4);
IkReal x12027=((1.0)*cj2);
IkReal x12028=((1.0)*sj0);
IkReal x12029=(cj1*sj2);
IkReal x12030=((1.0)*x12026);
IkReal x12031=(gconst10*x12025);
IkReal x12032=((1.0)*x12025);
IkReal x12033=(gconst11*x12026);
IkReal x12034=(gconst11*x12032);
evalcond[0]=((((-1.0)*r20*x12034))+((r21*x12031))+(((-1.0)*r22*x12030)));
evalcond[1]=(cj0+(((-1.0)*r12*x12030))+((r11*x12031))+(((-1.0)*r10*x12034)));
evalcond[2]=((((-1.0)*x12028))+((r01*x12031))+(((-1.0)*r02*x12030))+(((-1.0)*r00*x12034)));
evalcond[3]=((((-1.0)*cj1*x12027))+((r20*x12033))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12030))+(((-1.0)*r22*x12032)));
evalcond[4]=((((-1.0)*gconst10*r01*x12030))+((r00*x12033))+(((-1.0)*r02*x12032))+(((-1.0)*cj0*sj1*x12027))+(((-1.0)*cj0*x12029)));
evalcond[5]=((((-1.0)*x12028*x12029))+(((-1.0)*gconst10*r11*x12030))+(((-1.0)*r12*x12032))+((r10*x12033))+(((-1.0)*sj0*sj1*x12027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12035=((1.0)*gconst11);
CheckValue<IkReal> x12036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12035)))),-1);
if(!x12036.valid){
continue;
}
CheckValue<IkReal> x12037 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12036.value)))+(x12037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12038=IKsin(j4);
IkReal x12039=IKcos(j4);
IkReal x12040=((1.0)*cj2);
IkReal x12041=((1.0)*sj0);
IkReal x12042=(cj1*sj2);
IkReal x12043=((1.0)*x12039);
IkReal x12044=(gconst10*x12038);
IkReal x12045=((1.0)*x12038);
IkReal x12046=(gconst11*x12039);
IkReal x12047=(gconst11*x12045);
evalcond[0]=((((-1.0)*r20*x12047))+((r21*x12044))+(((-1.0)*r22*x12043)));
evalcond[1]=((((-1.0)*r12*x12043))+cj0+((r11*x12044))+(((-1.0)*r10*x12047)));
evalcond[2]=((((-1.0)*r00*x12047))+(((-1.0)*x12041))+((r01*x12044))+(((-1.0)*r02*x12043)));
evalcond[3]=((((-1.0)*cj1*x12040))+((sj1*sj2))+((r20*x12046))+(((-1.0)*gconst10*r21*x12043))+(((-1.0)*r22*x12045)));
evalcond[4]=((((-1.0)*cj0*x12042))+(((-1.0)*gconst10*r01*x12043))+((r00*x12046))+(((-1.0)*r02*x12045))+(((-1.0)*cj0*sj1*x12040)));
evalcond[5]=(((r10*x12046))+(((-1.0)*r12*x12045))+(((-1.0)*sj0*sj1*x12040))+(((-1.0)*gconst10*r11*x12043))+(((-1.0)*x12041*x12042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12048=((-1.0)*r11);
CheckValue<IkReal> x12051 = IKatan2WithCheck(IkReal(x12048),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12051.valid){
continue;
}
IkReal x12049=((1.0)*(x12051.value));
IkReal x12050=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12049)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12049)));
IkReal gconst10=(x12048*x12050);
IkReal gconst11=((1.0)*r10*x12050);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12052=((-1.0)*r11);
CheckValue<IkReal> x12055 = IKatan2WithCheck(IkReal(x12052),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12055.valid){
continue;
}
IkReal x12053=((1.0)*(x12055.value));
IkReal x12054=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12053)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12053)));
IkReal gconst10=(x12052*x12054);
IkReal gconst11=((1.0)*r10*x12054);
IkReal x12056=r12*r12;
IkReal x12057=((1.0)*sj0);
IkReal x12058=(cj0*r02);
IkReal x12059=x11795;
j4eval[0]=((IKabs(((((-1.0)*x12058))+(((-1.0)*r12*x12057)))))+(IKabs((((r12*x12058*x12059))+((sj0*x12056*x12059))+(((-1.0)*x12057*x12059))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12060=((-1.0)*r11);
CheckValue<IkReal> x12063 = IKatan2WithCheck(IkReal(x12060),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12063.valid){
continue;
}
IkReal x12061=((1.0)*(x12063.value));
IkReal x12062=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12061)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12061)));
IkReal gconst10=(x12060*x12062);
IkReal gconst11=((1.0)*r10*x12062);
IkReal x12064=r12*r12;
IkReal x12065=((1.0)+(((-1.0)*x12064)));
IkReal x12066=(r22*sj1*sj2);
IkReal x12067=(cj1*cj2*r22);
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(x12065,-1);
if(!x12074.valid){
continue;
}
IkReal x12068=x12074.value;
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(((-1.0)+x12064),-1);
if(!x12075.valid){
continue;
}
IkReal x12069=x12075.value;
IkReal x12070=((1.0)*x12068);
if((x12065) < -0.00001)
continue;
IkReal x12071=IKsqrt(x12065);
IkReal x12072=(r12*x12069*x12071);
IkReal x12073=((((-1.0)*x12070*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12068))+(((-1.0)*x12070*(r10*r10)*(r20*r20))));
j4eval[0]=x12073;
j4eval[1]=((IKabs(((((-1.0)*x12067))+x12066)))+(IKabs((((x12067*x12072))+(((-1.0)*x12066*x12072))))));
j4eval[2]=IKsign(x12073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12076=((-1.0)*r11);
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal(x12076),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
IkReal x12077=((1.0)*(x12079.value));
IkReal x12078=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12077)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12077)));
IkReal gconst10=(x12076*x12078);
IkReal gconst11=((1.0)*r10*x12078);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12080=((-1.0)*r11);
CheckValue<IkReal> x12083 = IKatan2WithCheck(IkReal(x12080),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12083.valid){
continue;
}
IkReal x12081=((1.0)*(x12083.value));
IkReal x12082=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12081)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12081)));
IkReal gconst10=(x12080*x12082);
IkReal gconst11=((1.0)*r10*x12082);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12084=((-1.0)*r11);
CheckValue<IkReal> x12087 = IKatan2WithCheck(IkReal(x12084),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12087.valid){
continue;
}
IkReal x12085=((1.0)*(x12087.value));
IkReal x12086=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12085)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12085)));
IkReal gconst10=(x12084*x12086);
IkReal gconst11=((1.0)*r10*x12086);
IkReal x12088=(cj1*r02*sj2);
IkReal x12089=(cj2*r02*sj1);
IkReal x12090=x11795;
IkReal x12091=(r12*x12090);
j4eval[0]=((IKabs((((x12089*x12091))+((x12088*x12091)))))+(IKabs((x12088+x12089))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12092=(cj1*sj2);
IkReal x12093=(cj2*sj1);
IkReal x12094=(gconst11*r00);
IkReal x12095=((1.0)*gconst10*r01);
CheckValue<IkReal> x12096=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12096.valid){
continue;
}
CheckValue<IkReal> x12097 = IKatan2WithCheck(IkReal(((((-1.0)*x12093*x12095))+(((-1.0)*x12092*x12095))+((x12093*x12094))+((x12092*x12094)))),IkReal((((r02*x12093))+((r02*x12092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12096.value)))+(x12097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12098=IKcos(j4);
IkReal x12099=IKsin(j4);
IkReal x12100=((1.0)*cj2);
IkReal x12101=((1.0)*x12098);
IkReal x12102=(gconst10*x12098);
IkReal x12103=(gconst10*x12099);
IkReal x12104=((1.0)*gconst11*x12099);
evalcond[0]=(((r01*x12102))+((r02*x12099))+(((-1.0)*gconst11*r00*x12101)));
evalcond[1]=((((-1.0)*r22*x12101))+(((-1.0)*r20*x12104))+((r21*x12103)));
evalcond[2]=((((-1.0)*r12*x12101))+(((-1.0)*r10*x12104))+((r11*x12103)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12104))+((r01*x12103))+(((-1.0)*r02*x12101)));
evalcond[4]=(((r22*x12099))+((sj1*sj2))+(((-1.0)*cj1*x12100))+(((-1.0)*gconst11*r20*x12101))+((r21*x12102)));
evalcond[5]=(((r12*x12099))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12100))+((r11*x12102))+(((-1.0)*gconst11*r10*x12101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12105=(gconst10*r01);
IkReal x12106=(gconst11*r00);
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(IKsign(((x12105*x12105)+(((-2.0)*x12105*x12106))+(x12106*x12106)+(r02*r02))),-1);
if(!x12107.valid){
continue;
}
CheckValue<IkReal> x12108 = IKatan2WithCheck(IkReal((x12105+(((-1.0)*x12106)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12107.value)))+(x12108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12109=IKcos(j4);
IkReal x12110=IKsin(j4);
IkReal x12111=((1.0)*cj2);
IkReal x12112=((1.0)*x12109);
IkReal x12113=(gconst10*x12109);
IkReal x12114=(gconst10*x12110);
IkReal x12115=((1.0)*gconst11*x12110);
evalcond[0]=(((r02*x12110))+((r01*x12113))+(((-1.0)*gconst11*r00*x12112)));
evalcond[1]=((((-1.0)*r22*x12112))+(((-1.0)*r20*x12115))+((r21*x12114)));
evalcond[2]=((((-1.0)*r12*x12112))+(((-1.0)*r10*x12115))+((r11*x12114)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12115))+((r01*x12114))+(((-1.0)*r02*x12112)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x12112))+(((-1.0)*cj1*x12111))+((r21*x12113))+((r22*x12110)));
evalcond[5]=((((-1.0)*gconst11*r10*x12112))+(((-1.0)*sj1*x12111))+(((-1.0)*cj1*sj2))+((r12*x12110))+((r11*x12113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12116 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12116.valid){
continue;
}
CheckValue<IkReal> x12117=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12116.value)+(((1.5707963267949)*(x12117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12118=IKcos(j4);
IkReal x12119=IKsin(j4);
IkReal x12120=((1.0)*cj2);
IkReal x12121=((1.0)*x12118);
IkReal x12122=(gconst10*x12118);
IkReal x12123=(gconst10*x12119);
IkReal x12124=((1.0)*gconst11*x12119);
evalcond[0]=(((r02*x12119))+((r01*x12122))+(((-1.0)*gconst11*r00*x12121)));
evalcond[1]=((((-1.0)*r20*x12124))+((r21*x12123))+(((-1.0)*r22*x12121)));
evalcond[2]=((((-1.0)*r12*x12121))+(((-1.0)*r10*x12124))+((r11*x12123)));
evalcond[3]=((-1.0)+((r01*x12123))+(((-1.0)*r02*x12121))+(((-1.0)*r00*x12124)));
evalcond[4]=(((r21*x12122))+(((-1.0)*cj1*x12120))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12121))+((r22*x12119)));
evalcond[5]=((((-1.0)*sj1*x12120))+(((-1.0)*cj1*sj2))+((r12*x12119))+(((-1.0)*gconst11*r10*x12121))+((r11*x12122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12125=((-1.0)*r11);
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal(x12125),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
IkReal x12126=((1.0)*(x12128.value));
IkReal x12127=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12126)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12126)));
IkReal gconst10=(x12125*x12127);
IkReal gconst11=((1.0)*r10*x12127);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12129=((-1.0)*r11);
CheckValue<IkReal> x12132 = IKatan2WithCheck(IkReal(x12129),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12132.valid){
continue;
}
IkReal x12130=((1.0)*(x12132.value));
IkReal x12131=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12130)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12130)));
IkReal gconst10=(x12129*x12131);
IkReal gconst11=((1.0)*r10*x12131);
IkReal x12133=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12137=IKPowWithIntegerCheck(x12133,-1);
if(!x12137.valid){
continue;
}
IkReal x12134=x12137.value;
IkReal x12135=((1.0)*x12134);
IkReal x12136=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12134))+(((-1.0)*x12135*(r00*r00)*(r10*r10)))+(((-1.0)*x12135*(r01*r01)*(r11*r11))));
j4eval[0]=x12136;
j4eval[1]=r02;
j4eval[2]=x12133;
j4eval[3]=IKsign(x12136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12138=((-1.0)*r11);
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal(x12138),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
IkReal x12139=((1.0)*(x12141.value));
IkReal x12140=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12139)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12139)));
IkReal gconst10=(x12138*x12140);
IkReal gconst11=((1.0)*r10*x12140);
IkReal x12142=r12*r12;
IkReal x12143=((1.0)*r02);
IkReal x12144=(cj1*sj2);
IkReal x12145=(cj2*sj1);
CheckValue<IkReal> x12149=IKPowWithIntegerCheck(((-1.0)+x12142),-1);
if(!x12149.valid){
continue;
}
IkReal x12146=x12149.value;
if((((1.0)+(((-1.0)*x12142)))) < -0.00001)
continue;
IkReal x12147=IKsqrt(((1.0)+(((-1.0)*x12142))));
IkReal x12148=(r12*x12146*x12147);
j4eval[0]=((IKabs(((((-1.0)*x12143*x12144))+(((-1.0)*x12143*x12145)))))+(IKabs(((((-1.0)*x12143*x12144*x12148))+(((-1.0)*x12143*x12145*x12148))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12150=(cj1*sj2);
IkReal x12151=(gconst10*r01);
IkReal x12152=(cj2*sj1);
IkReal x12153=((1.0)*r02);
IkReal x12154=((1.0)*gconst11*r00);
CheckValue<IkReal> x12155=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12155.valid){
continue;
}
CheckValue<IkReal> x12156 = IKatan2WithCheck(IkReal(((((-1.0)*x12152*x12154))+((x12150*x12151))+(((-1.0)*x12150*x12154))+((x12151*x12152)))),IkReal(((((-1.0)*x12152*x12153))+(((-1.0)*x12150*x12153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12155.value)))+(x12156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12157=IKcos(j4);
IkReal x12158=IKsin(j4);
IkReal x12159=((1.0)*x12157);
IkReal x12160=(gconst10*x12157);
IkReal x12161=(gconst10*x12158);
IkReal x12162=((1.0)*gconst11*x12158);
evalcond[0]=(((r02*x12158))+((r01*x12160))+(((-1.0)*gconst11*r00*x12159)));
evalcond[1]=(((r21*x12161))+(((-1.0)*r22*x12159))+(((-1.0)*r20*x12162)));
evalcond[2]=((((-1.0)*r10*x12162))+(((-1.0)*r12*x12159))+((r11*x12161)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12159))+(((-1.0)*r00*x12162))+((r01*x12161)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12159))+((cj1*sj2))+((r12*x12158))+((r11*x12160)));
evalcond[5]=(((r21*x12160))+(((-1.0)*gconst11*r20*x12159))+((r22*x12158))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12163=(gconst10*r01);
IkReal x12164=(gconst11*r00);
CheckValue<IkReal> x12165=IKPowWithIntegerCheck(IKsign(((((2.0)*x12163*x12164))+(((-1.0)*(x12163*x12163)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12164*x12164))))),-1);
if(!x12165.valid){
continue;
}
CheckValue<IkReal> x12166 = IKatan2WithCheck(IkReal(((((-1.0)*x12164))+x12163)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12165.value)))+(x12166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12167=IKcos(j4);
IkReal x12168=IKsin(j4);
IkReal x12169=((1.0)*x12167);
IkReal x12170=(gconst10*x12167);
IkReal x12171=(gconst10*x12168);
IkReal x12172=((1.0)*gconst11*x12168);
evalcond[0]=((((-1.0)*gconst11*r00*x12169))+((r02*x12168))+((r01*x12170)));
evalcond[1]=(((r21*x12171))+(((-1.0)*r22*x12169))+(((-1.0)*r20*x12172)));
evalcond[2]=((((-1.0)*r10*x12172))+((r11*x12171))+(((-1.0)*r12*x12169)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12172))+((r01*x12171))+(((-1.0)*r02*x12169)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12169))+((cj1*sj2))+((r11*x12170))+((r12*x12168)));
evalcond[5]=(((r21*x12170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12169))+((r22*x12168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12173=((1.0)*gconst11);
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
CheckValue<IkReal> x12175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12173)))),-1);
if(!x12175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12174.value)+(((1.5707963267949)*(x12175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12176=IKcos(j4);
IkReal x12177=IKsin(j4);
IkReal x12178=((1.0)*x12176);
IkReal x12179=(gconst10*x12176);
IkReal x12180=(gconst10*x12177);
IkReal x12181=((1.0)*gconst11*x12177);
evalcond[0]=((((-1.0)*gconst11*r00*x12178))+((r01*x12179))+((r02*x12177)));
evalcond[1]=((((-1.0)*r22*x12178))+((r21*x12180))+(((-1.0)*r20*x12181)));
evalcond[2]=(((r11*x12180))+(((-1.0)*r10*x12181))+(((-1.0)*r12*x12178)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12181))+((r01*x12180))+(((-1.0)*r02*x12178)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12178))+((cj1*sj2))+((r11*x12179))+((r12*x12177)));
evalcond[5]=(((r21*x12179))+(((-1.0)*gconst11*r20*x12178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12182=((-1.0)*r11);
IkReal x12183=((-1.0)*r10);
CheckValue<IkReal> x12185 = IKatan2WithCheck(IkReal(x12182),IkReal(x12183),IKFAST_ATAN2_MAGTHRESH);
if(!x12185.valid){
continue;
}
IkReal x12184=((1.0)*(x12185.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12184)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12183);
rxp1_1=(px*r21);
rxp1_2=(px*x12182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12184)));
IkReal gconst10=x12182;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12186=((-1.0)*r11);
IkReal x12187=((-1.0)*r10);
CheckValue<IkReal> x12189 = IKatan2WithCheck(IkReal(x12186),IkReal(x12187),IKFAST_ATAN2_MAGTHRESH);
if(!x12189.valid){
continue;
}
IkReal x12188=((1.0)*(x12189.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12188)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12187);
rxp1_1=(px*r21);
rxp1_2=(px*x12186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12188)));
IkReal gconst10=x12186;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12190=((-1.0)*r11);
IkReal x12191=((-1.0)*r10);
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal(x12190),IkReal(x12191),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
IkReal x12192=((1.0)*(x12193.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12192)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12191);
rxp1_1=(px*r21);
rxp1_2=(px*x12190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12192)));
IkReal gconst10=x12190;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12196=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12196.valid){
continue;
}
IkReal x12194=x12196.value;
IkReal x12195=(sj0*x12194);
cj4array[0]=(((cj2*sj1*x12195))+((cj1*sj2*x12195)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12197=IKsin(j4);
IkReal x12198=IKcos(j4);
IkReal x12199=(gconst10*r21);
IkReal x12200=((1.0)*x12198);
IkReal x12201=((1.0)*gconst11*x12197);
evalcond[0]=(r02*x12197);
evalcond[1]=((((-1.0)*r02*x12200))+(((-1.0)*sj0)));
evalcond[2]=(((x12197*x12199))+(((-1.0)*r20*x12201)));
evalcond[3]=(((gconst10*r11*x12197))+(((-1.0)*r10*x12201)));
evalcond[4]=(((x12198*x12199))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12203=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12203.valid){
continue;
}
IkReal x12202=x12203.value;
cj4array[0]=(((cj1*cj2*x12202))+(((-1.0)*sj1*sj2*x12202)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12204=IKsin(j4);
IkReal x12205=IKcos(j4);
IkReal x12206=((1.0)*sj0);
IkReal x12207=(gconst10*x12204);
IkReal x12208=((1.0)*x12205);
IkReal x12209=((1.0)*gconst11*x12204);
evalcond[0]=(r02*x12204);
evalcond[1]=((((-1.0)*r02*x12208))+(((-1.0)*x12206)));
evalcond[2]=(((r21*x12207))+(((-1.0)*r20*x12209)));
evalcond[3]=((((-1.0)*r10*x12209))+((r11*x12207)));
evalcond[4]=((((-1.0)*gconst11*r10*x12208))+(((-1.0)*cj2*sj1*x12206))+(((-1.0)*cj1*sj2*x12206))+((gconst10*r11*x12205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12210=IKPowWithIntegerCheck(r02,-1);
if(!x12210.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12210.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12211=IKsin(j4);
IkReal x12212=IKcos(j4);
IkReal x12213=(gconst10*r21);
IkReal x12214=((1.0)*cj1);
IkReal x12215=(gconst10*r11);
IkReal x12216=((1.0)*gconst11*x12211);
IkReal x12217=((1.0)*gconst11*x12212);
evalcond[0]=(r02*x12211);
evalcond[1]=(((x12211*x12213))+(((-1.0)*r20*x12216)));
evalcond[2]=(((x12211*x12215))+(((-1.0)*r10*x12216)));
evalcond[3]=(((x12212*x12213))+((sj1*sj2))+(((-1.0)*cj2*x12214))+(((-1.0)*r20*x12217)));
evalcond[4]=(((x12212*x12215))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12214))+(((-1.0)*r10*x12217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12218=((1.0)*gconst11);
CheckValue<IkReal> x12219 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12218))+(((-1.0)*r10*sj0*x12218))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12219.valid){
continue;
}
CheckValue<IkReal> x12220=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12219.value)+(((1.5707963267949)*(x12220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12221=IKsin(j4);
IkReal x12222=IKcos(j4);
IkReal x12223=((1.0)*gconst11);
IkReal x12224=((1.0)*cj2);
IkReal x12225=((1.0)*sj0);
IkReal x12226=(cj1*sj2);
IkReal x12227=(gconst10*x12222);
IkReal x12228=(gconst10*x12221);
IkReal x12229=((1.0)*x12222);
evalcond[0]=(((r21*x12228))+(((-1.0)*r20*x12221*x12223)));
evalcond[1]=((((-1.0)*r10*x12221*x12223))+((r11*x12228))+cj0+(((-1.0)*r12*x12229)));
evalcond[2]=((((-1.0)*cj1*x12224))+((sj1*sj2))+((r21*x12227))+(((-1.0)*r20*x12222*x12223)));
evalcond[3]=((((-1.0)*x12225))+((r01*x12228))+(((-1.0)*r00*x12221*x12223))+(((-1.0)*r02*x12229)));
evalcond[4]=((((-1.0)*r00*x12222*x12223))+((r02*x12221))+((r01*x12227))+(((-1.0)*cj0*sj1*x12224))+(((-1.0)*cj0*x12226)));
evalcond[5]=((((-1.0)*x12225*x12226))+((r11*x12227))+(((-1.0)*sj0*sj1*x12224))+(((-1.0)*r10*x12222*x12223))+((r12*x12221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12230=(gconst10*r21);
IkReal x12231=(gconst11*r20);
IkReal x12232=(sj1*sj2);
IkReal x12233=(cj1*cj2);
CheckValue<IkReal> x12234=IKPowWithIntegerCheck(IKsign(((((2.0)*x12230*x12231))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12230*x12230)))+(((-1.0)*(x12231*x12231))))),-1);
if(!x12234.valid){
continue;
}
CheckValue<IkReal> x12235 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12233))+((r22*x12232)))),IkReal((((x12231*x12233))+((x12230*x12232))+(((-1.0)*x12230*x12233))+(((-1.0)*x12231*x12232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12234.value)))+(x12235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12236=IKsin(j4);
IkReal x12237=IKcos(j4);
IkReal x12238=((1.0)*cj2);
IkReal x12239=((1.0)*sj0);
IkReal x12240=(cj1*sj2);
IkReal x12241=((1.0)*x12237);
IkReal x12242=(gconst10*x12237);
IkReal x12243=(gconst10*x12236);
IkReal x12244=((1.0)*gconst11*x12236);
evalcond[0]=((((-1.0)*r20*x12244))+(((-1.0)*r22*x12241))+((r21*x12243)));
evalcond[1]=((((-1.0)*r12*x12241))+(((-1.0)*r10*x12244))+cj0+((r11*x12243)));
evalcond[2]=((((-1.0)*x12239))+((r01*x12243))+(((-1.0)*r02*x12241))+(((-1.0)*r00*x12244)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x12238))+((r22*x12236))+(((-1.0)*gconst11*r20*x12241))+((r21*x12242)));
evalcond[4]=((((-1.0)*cj0*sj1*x12238))+(((-1.0)*gconst11*r00*x12241))+((r01*x12242))+((r02*x12236))+(((-1.0)*cj0*x12240)));
evalcond[5]=(((r11*x12242))+(((-1.0)*x12239*x12240))+((r12*x12236))+(((-1.0)*gconst11*r10*x12241))+(((-1.0)*sj0*sj1*x12238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12245=((1.0)*sj0);
IkReal x12246=((1.0)*gconst10);
CheckValue<IkReal> x12247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12246))+(((-1.0)*gconst11*r21)))),-1);
if(!x12247.valid){
continue;
}
CheckValue<IkReal> x12248 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12245))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12245))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12246))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12247.value)))+(x12248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12249=IKsin(j4);
IkReal x12250=IKcos(j4);
IkReal x12251=((1.0)*cj2);
IkReal x12252=((1.0)*sj0);
IkReal x12253=(cj1*sj2);
IkReal x12254=((1.0)*x12250);
IkReal x12255=(gconst10*x12250);
IkReal x12256=(gconst10*x12249);
IkReal x12257=((1.0)*gconst11*x12249);
evalcond[0]=((((-1.0)*r20*x12257))+((r21*x12256))+(((-1.0)*r22*x12254)));
evalcond[1]=(cj0+(((-1.0)*r12*x12254))+((r11*x12256))+(((-1.0)*r10*x12257)));
evalcond[2]=(((r01*x12256))+(((-1.0)*r02*x12254))+(((-1.0)*x12252))+(((-1.0)*r00*x12257)));
evalcond[3]=((((-1.0)*gconst11*r20*x12254))+((sj1*sj2))+((r21*x12255))+((r22*x12249))+(((-1.0)*cj1*x12251)));
evalcond[4]=((((-1.0)*gconst11*r00*x12254))+(((-1.0)*cj0*sj1*x12251))+((r01*x12255))+(((-1.0)*cj0*x12253))+((r02*x12249)));
evalcond[5]=(((r11*x12255))+((r12*x12249))+(((-1.0)*gconst11*r10*x12254))+(((-1.0)*x12252*x12253))+(((-1.0)*sj0*sj1*x12251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12258=((1.0)*gconst11);
CheckValue<IkReal> x12259=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12258)))),-1);
if(!x12259.valid){
continue;
}
CheckValue<IkReal> x12260 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12258))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12259.value)))+(x12260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12261=IKsin(j4);
IkReal x12262=IKcos(j4);
IkReal x12263=((1.0)*cj2);
IkReal x12264=((1.0)*sj0);
IkReal x12265=(cj1*sj2);
IkReal x12266=((1.0)*x12262);
IkReal x12267=(gconst10*x12262);
IkReal x12268=(gconst10*x12261);
IkReal x12269=((1.0)*gconst11*x12261);
evalcond[0]=((((-1.0)*r20*x12269))+((r21*x12268))+(((-1.0)*r22*x12266)));
evalcond[1]=((((-1.0)*r12*x12266))+cj0+((r11*x12268))+(((-1.0)*r10*x12269)));
evalcond[2]=(((r01*x12268))+(((-1.0)*r02*x12266))+(((-1.0)*r00*x12269))+(((-1.0)*x12264)));
evalcond[3]=((((-1.0)*gconst11*r20*x12266))+((sj1*sj2))+((r21*x12267))+(((-1.0)*cj1*x12263))+((r22*x12261)));
evalcond[4]=((((-1.0)*gconst11*r00*x12266))+(((-1.0)*cj0*sj1*x12263))+((r01*x12267))+(((-1.0)*cj0*x12265))+((r02*x12261)));
evalcond[5]=(((r12*x12261))+((r11*x12267))+(((-1.0)*x12264*x12265))+(((-1.0)*gconst11*r10*x12266))+(((-1.0)*sj0*sj1*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12270=((-1.0)*r11);
CheckValue<IkReal> x12273 = IKatan2WithCheck(IkReal(x12270),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12273.valid){
continue;
}
IkReal x12271=((1.0)*(x12273.value));
IkReal x12272=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12271)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12271)));
IkReal gconst10=(x12270*x12272);
IkReal gconst11=((1.0)*r10*x12272);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12274=gconst10*gconst10;
IkReal x12275=gconst11*gconst11;
IkReal x12276=(gconst10*r21);
IkReal x12277=(cj3*r00);
IkReal x12278=(r00*sj3);
IkReal x12279=((1.0)*gconst11);
IkReal x12280=(gconst10*r20);
IkReal x12281=(r01*sj3);
IkReal x12282=(cj3*gconst11*r01);
IkReal x12283=(r21*x12274);
IkReal x12284=(r20*x12275);
CheckValue<IkReal> x12285 = IKatan2WithCheck(IkReal((((r22*x12282))+((gconst10*r22*x12277)))),IkReal((((x12276*x12282))+((x12277*x12283))+(((-1.0)*cj3*r01*x12284))+(((-1.0)*x12277*x12279*x12280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12285.valid){
continue;
}
CheckValue<IkReal> x12286=IKPowWithIntegerCheck(IKsign((((x12281*x12283))+((x12278*x12284))+(((-1.0)*x12276*x12278*x12279))+(((-1.0)*x12279*x12280*x12281))+((r02*r22*sj3)))),-1);
if(!x12286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12285.value)+(((1.5707963267949)*(x12286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12287=IKsin(j4);
IkReal x12288=IKcos(j4);
IkReal x12289=(sj1*sj2);
IkReal x12290=(gconst10*sj3);
IkReal x12291=(cj3*gconst10);
IkReal x12292=(gconst11*r20);
IkReal x12293=(gconst11*r21);
IkReal x12294=(gconst11*r00);
IkReal x12295=(cj3*gconst11);
IkReal x12296=(gconst11*r10);
IkReal x12297=((1.0)*cj1);
IkReal x12298=(cj2*sj1);
IkReal x12299=(gconst11*sj3);
IkReal x12300=(cj2*x12297);
IkReal x12301=((1.0)*x12288);
IkReal x12302=((1.0)*x12287);
IkReal x12303=(gconst10*x12287);
IkReal x12304=(cj3*x12287);
IkReal x12305=(sj3*x12288);
evalcond[0]=(((r21*x12303))+(((-1.0)*r22*x12301))+(((-1.0)*x12292*x12302)));
evalcond[1]=((((-1.0)*x12296*x12302))+((r11*x12303))+(((-1.0)*r12*x12301)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12301))+(((-1.0)*x12294*x12302))+((r01*x12303)));
evalcond[3]=(((r01*x12299))+((r00*x12290))+((r01*x12288*x12291))+((r02*x12304))+(((-1.0)*cj3*x12294*x12301)));
evalcond[4]=((((-1.0)*r01*x12290*x12301))+((r01*x12295))+((r00*x12291))+((x12294*x12305))+(((-1.0)*r02*sj3*x12302)));
evalcond[5]=(((r20*x12290))+((cj1*sj2))+x12298+((r21*x12288*x12291))+((sj3*x12293))+((r22*x12304))+(((-1.0)*cj3*x12292*x12301)));
evalcond[6]=(((r10*x12290))+x12289+((r11*x12299))+((r11*x12288*x12291))+((r12*x12304))+(((-1.0)*x12300))+(((-1.0)*r10*x12295*x12301)));
evalcond[7]=((((-1.0)*r22*sj3*x12302))+((r20*x12291))+((cj3*x12293))+x12289+(((-1.0)*r21*x12290*x12301))+((x12292*x12305))+(((-1.0)*x12300)));
evalcond[8]=((((-1.0)*r12*sj3*x12302))+((r10*x12291))+((r11*x12295))+(((-1.0)*sj2*x12297))+(((-1.0)*x12298))+(((-1.0)*r11*x12290*x12301))+((x12296*x12305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12306 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12306.valid){
continue;
}
CheckValue<IkReal> x12307=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12306.value)+(((1.5707963267949)*(x12307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12308=IKsin(j4);
IkReal x12309=IKcos(j4);
IkReal x12310=(sj1*sj2);
IkReal x12311=(gconst10*sj3);
IkReal x12312=(cj3*gconst10);
IkReal x12313=(gconst11*r20);
IkReal x12314=(gconst11*r21);
IkReal x12315=(gconst11*r00);
IkReal x12316=(cj3*gconst11);
IkReal x12317=(gconst11*r10);
IkReal x12318=((1.0)*cj1);
IkReal x12319=(cj2*sj1);
IkReal x12320=(gconst11*sj3);
IkReal x12321=(cj2*x12318);
IkReal x12322=((1.0)*x12309);
IkReal x12323=((1.0)*x12308);
IkReal x12324=(gconst10*x12308);
IkReal x12325=(cj3*x12308);
IkReal x12326=(sj3*x12309);
evalcond[0]=((((-1.0)*r22*x12322))+(((-1.0)*x12313*x12323))+((r21*x12324)));
evalcond[1]=((((-1.0)*r12*x12322))+((r11*x12324))+(((-1.0)*x12317*x12323)));
evalcond[2]=((-1.0)+((r01*x12324))+(((-1.0)*x12315*x12323))+(((-1.0)*r02*x12322)));
evalcond[3]=(((r01*x12309*x12312))+((r01*x12320))+((r00*x12311))+(((-1.0)*cj3*x12315*x12322))+((r02*x12325)));
evalcond[4]=(((x12315*x12326))+(((-1.0)*r01*x12311*x12322))+((r00*x12312))+((r01*x12316))+(((-1.0)*r02*sj3*x12323)));
evalcond[5]=(((sj3*x12314))+((r21*x12309*x12312))+((cj1*sj2))+x12319+((r22*x12325))+((r20*x12311))+(((-1.0)*cj3*x12313*x12322)));
evalcond[6]=(((r10*x12311))+((r11*x12309*x12312))+x12310+(((-1.0)*r10*x12316*x12322))+(((-1.0)*x12321))+((r12*x12325))+((r11*x12320)));
evalcond[7]=(x12310+((x12313*x12326))+(((-1.0)*r21*x12311*x12322))+(((-1.0)*x12321))+(((-1.0)*r22*sj3*x12323))+((r20*x12312))+((cj3*x12314)));
evalcond[8]=((((-1.0)*sj2*x12318))+((r10*x12312))+((r11*x12316))+(((-1.0)*r11*x12311*x12322))+(((-1.0)*x12319))+((x12317*x12326))+(((-1.0)*r12*sj3*x12323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12327=((-1.0)*r11);
CheckValue<IkReal> x12330 = IKatan2WithCheck(IkReal(x12327),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12330.valid){
continue;
}
IkReal x12328=((1.0)*(x12330.value));
IkReal x12329=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12328)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12328)));
IkReal gconst10=(x12327*x12329);
IkReal gconst11=((1.0)*r10*x12329);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12331=gconst10*gconst10;
IkReal x12332=gconst11*gconst11;
IkReal x12333=(gconst10*r21);
IkReal x12334=(cj3*r00);
IkReal x12335=(r00*sj3);
IkReal x12336=((1.0)*gconst11);
IkReal x12337=(gconst10*r20);
IkReal x12338=(r01*sj3);
IkReal x12339=(cj3*gconst11*r01);
IkReal x12340=(r21*x12331);
IkReal x12341=(r20*x12332);
CheckValue<IkReal> x12342 = IKatan2WithCheck(IkReal((((r22*x12339))+((gconst10*r22*x12334)))),IkReal((((x12333*x12339))+(((-1.0)*x12334*x12336*x12337))+(((-1.0)*cj3*r01*x12341))+((x12334*x12340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12342.valid){
continue;
}
CheckValue<IkReal> x12343=IKPowWithIntegerCheck(IKsign((((x12335*x12341))+((x12338*x12340))+(((-1.0)*x12333*x12335*x12336))+((r02*r22*sj3))+(((-1.0)*x12336*x12337*x12338)))),-1);
if(!x12343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12342.value)+(((1.5707963267949)*(x12343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12344=IKsin(j4);
IkReal x12345=IKcos(j4);
IkReal x12346=(cj2*sj1);
IkReal x12347=(cj1*sj2);
IkReal x12348=(gconst10*sj3);
IkReal x12349=(cj3*gconst10);
IkReal x12350=(gconst11*r20);
IkReal x12351=(gconst11*r21);
IkReal x12352=(gconst11*r00);
IkReal x12353=(sj1*sj2);
IkReal x12354=(cj3*gconst11);
IkReal x12355=(gconst11*r10);
IkReal x12356=(cj1*cj2);
IkReal x12357=(gconst11*sj3);
IkReal x12358=((1.0)*x12345);
IkReal x12359=((1.0)*x12344);
IkReal x12360=(gconst10*x12344);
IkReal x12361=(cj3*x12344);
IkReal x12362=(sj3*x12345);
IkReal x12363=(x12347+x12346);
evalcond[0]=(((r21*x12360))+(((-1.0)*x12350*x12359))+(((-1.0)*r22*x12358)));
evalcond[1]=(((r11*x12360))+(((-1.0)*x12355*x12359))+(((-1.0)*r12*x12358)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12358))+(((-1.0)*x12352*x12359))+((r01*x12360)));
evalcond[3]=(((r00*x12348))+((r01*x12357))+((r01*x12345*x12349))+(((-1.0)*cj3*x12352*x12358))+((r02*x12361)));
evalcond[4]=((((-1.0)*r01*x12348*x12358))+((r00*x12349))+((r01*x12354))+((x12352*x12362))+(((-1.0)*r02*sj3*x12359)));
evalcond[5]=(((r20*x12348))+x12363+(((-1.0)*cj3*x12350*x12358))+((sj3*x12351))+((r22*x12361))+((r21*x12345*x12349)));
evalcond[6]=((((-1.0)*x12353))+x12356+(((-1.0)*r10*x12354*x12358))+((r11*x12357))+((r11*x12345*x12349))+((r10*x12348))+((r12*x12361)));
evalcond[7]=((((-1.0)*r11*x12348*x12358))+x12363+((r11*x12354))+((r10*x12349))+(((-1.0)*r12*sj3*x12359))+((x12355*x12362)));
evalcond[8]=((((-1.0)*x12356))+((r20*x12349))+x12353+((cj3*x12351))+((x12350*x12362))+(((-1.0)*r22*sj3*x12359))+(((-1.0)*r21*x12348*x12358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12364=((1.0)*gconst11);
CheckValue<IkReal> x12365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12364))+(((-1.0)*gconst10*r20)))),-1);
if(!x12365.valid){
continue;
}
CheckValue<IkReal> x12366 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12365.value)))+(x12366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12367=IKsin(j4);
IkReal x12368=IKcos(j4);
IkReal x12369=(cj2*sj1);
IkReal x12370=(cj1*sj2);
IkReal x12371=(gconst10*sj3);
IkReal x12372=(cj3*gconst10);
IkReal x12373=(gconst11*r20);
IkReal x12374=(gconst11*r21);
IkReal x12375=(gconst11*r00);
IkReal x12376=(sj1*sj2);
IkReal x12377=(cj3*gconst11);
IkReal x12378=(gconst11*r10);
IkReal x12379=(cj1*cj2);
IkReal x12380=(gconst11*sj3);
IkReal x12381=((1.0)*x12368);
IkReal x12382=((1.0)*x12367);
IkReal x12383=(gconst10*x12367);
IkReal x12384=(cj3*x12367);
IkReal x12385=(sj3*x12368);
IkReal x12386=(x12369+x12370);
evalcond[0]=((((-1.0)*x12373*x12382))+((r21*x12383))+(((-1.0)*r22*x12381)));
evalcond[1]=(((r11*x12383))+(((-1.0)*x12378*x12382))+(((-1.0)*r12*x12381)));
evalcond[2]=((1.0)+(((-1.0)*x12375*x12382))+(((-1.0)*r02*x12381))+((r01*x12383)));
evalcond[3]=(((r01*x12368*x12372))+((r02*x12384))+((r01*x12380))+(((-1.0)*cj3*x12375*x12381))+((r00*x12371)));
evalcond[4]=((((-1.0)*r02*sj3*x12382))+(((-1.0)*r01*x12371*x12381))+((r01*x12377))+((r00*x12372))+((x12375*x12385)));
evalcond[5]=(x12386+((sj3*x12374))+(((-1.0)*cj3*x12373*x12381))+((r21*x12368*x12372))+((r20*x12371))+((r22*x12384)));
evalcond[6]=(((r12*x12384))+((r11*x12380))+((r11*x12368*x12372))+((r10*x12371))+x12379+(((-1.0)*x12376))+(((-1.0)*r10*x12377*x12381)));
evalcond[7]=(((r11*x12377))+(((-1.0)*r11*x12371*x12381))+((r10*x12372))+x12386+(((-1.0)*r12*sj3*x12382))+((x12378*x12385)));
evalcond[8]=(x12376+(((-1.0)*r22*sj3*x12382))+((x12373*x12385))+((cj3*x12374))+(((-1.0)*r21*x12371*x12381))+(((-1.0)*x12379))+((r20*x12372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12387=((-1.0)*r11);
IkReal x12388=((-1.0)*r10);
CheckValue<IkReal> x12390 = IKatan2WithCheck(IkReal(x12387),IkReal(x12388),IKFAST_ATAN2_MAGTHRESH);
if(!x12390.valid){
continue;
}
IkReal x12389=((1.0)*(x12390.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12389)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12388);
rxp1_1=(px*r21);
rxp1_2=(px*x12387);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12389)));
IkReal gconst10=x12387;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12391=((-1.0)*r11);
IkReal x12392=((-1.0)*r10);
CheckValue<IkReal> x12394 = IKatan2WithCheck(IkReal(x12391),IkReal(x12392),IKFAST_ATAN2_MAGTHRESH);
if(!x12394.valid){
continue;
}
IkReal x12393=((1.0)*(x12394.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12393)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12392);
rxp1_1=(px*r21);
rxp1_2=(px*x12391);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12393)));
IkReal gconst10=x12391;
IkReal gconst11=((1.0)*r10);
IkReal x12395=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12395))+(((-1.0)*r11*r21*x12395)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12396=((-1.0)*r11);
IkReal x12397=((-1.0)*r10);
CheckValue<IkReal> x12399 = IKatan2WithCheck(IkReal(x12396),IkReal(x12397),IKFAST_ATAN2_MAGTHRESH);
if(!x12399.valid){
continue;
}
IkReal x12398=((1.0)*(x12399.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12398)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12397);
rxp1_1=(px*r21);
rxp1_2=(px*x12396);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12398)));
IkReal gconst10=x12396;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12401=IKPowWithIntegerCheck(r02,-1);
if(!x12401.valid){
continue;
}
IkReal x12400=x12401.value;
CheckValue<IkReal> x12402=IKPowWithIntegerCheck(cj3,-1);
if(!x12402.valid){
continue;
}
if( IKabs((x12400*(x12402.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12400)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12400*(x12402.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12400))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12400*(x12402.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12400));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12403=IKsin(j4);
IkReal x12404=IKcos(j4);
IkReal x12405=(cj3*r10);
IkReal x12406=((1.0)*gconst11);
IkReal x12407=(sj1*sj2);
IkReal x12408=(gconst11*sj3);
IkReal x12409=(cj3*r11);
IkReal x12410=(cj2*sj1);
IkReal x12411=(gconst10*r20);
IkReal x12412=(gconst10*sj3);
IkReal x12413=((1.0)*cj0);
IkReal x12414=((1.0)*sj0);
IkReal x12415=(cj1*sj2);
IkReal x12416=(cj3*r21);
IkReal x12417=((1.0)*cj1*cj2);
IkReal x12418=(r20*x12404);
IkReal x12419=(gconst10*x12403);
IkReal x12420=(gconst10*x12404);
IkReal x12421=(r02*x12403);
IkReal x12422=((1.0)*x12404);
evalcond[0]=((((-1.0)*x12414))+(((-1.0)*r02*x12422)));
evalcond[1]=(((r21*x12419))+(((-1.0)*r20*x12403*x12406)));
evalcond[2]=(cj0+((r11*x12419))+(((-1.0)*r10*x12403*x12406)));
evalcond[3]=((((-1.0)*cj1*cj2*x12413))+((cj3*x12421))+((cj0*x12407)));
evalcond[4]=((((-1.0)*x12410*x12413))+(((-1.0)*sj3*x12421))+(((-1.0)*x12413*x12415)));
evalcond[5]=((((-1.0)*cj3*x12406*x12418))+((sj3*x12411))+((r21*x12408))+((x12416*x12420))+x12410+x12415);
evalcond[6]=(((cj3*x12411))+((gconst11*x12416))+((x12408*x12418))+(((-1.0)*x12417))+(((-1.0)*r21*x12412*x12422))+x12407);
evalcond[7]=(((r10*x12412))+(((-1.0)*cj1*cj2*x12414))+((sj0*x12407))+(((-1.0)*x12404*x12405*x12406))+((r11*x12408))+((x12409*x12420)));
evalcond[8]=((((-1.0)*r11*x12412*x12422))+(((-1.0)*x12410*x12414))+((gconst10*x12405))+((gconst11*x12409))+((r10*x12404*x12408))+(((-1.0)*x12414*x12415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12423=((1.0)*r20);
IkReal x12424=((1.0)*gconst11);
CheckValue<IkReal> x12425=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12424))),-1);
if(!x12425.valid){
continue;
}
CheckValue<IkReal> x12426=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12423))+((cj3*gconst10*r21))),-1);
if(!x12426.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12425.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12426.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12424))+(((-1.0)*gconst10*sj3*x12423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12425.value)))+IKsqr(((x12426.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12424))+(((-1.0)*gconst10*sj3*x12423))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12425.value)), ((x12426.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12424))+(((-1.0)*gconst10*sj3*x12423))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12427=IKsin(j4);
IkReal x12428=IKcos(j4);
IkReal x12429=(cj3*r10);
IkReal x12430=((1.0)*gconst11);
IkReal x12431=(sj1*sj2);
IkReal x12432=(gconst11*sj3);
IkReal x12433=(cj3*r11);
IkReal x12434=(cj2*sj1);
IkReal x12435=(gconst10*r20);
IkReal x12436=(gconst10*sj3);
IkReal x12437=((1.0)*cj0);
IkReal x12438=((1.0)*sj0);
IkReal x12439=(cj1*sj2);
IkReal x12440=(cj3*r21);
IkReal x12441=((1.0)*cj1*cj2);
IkReal x12442=(r20*x12428);
IkReal x12443=(gconst10*x12427);
IkReal x12444=(gconst10*x12428);
IkReal x12445=(r02*x12427);
IkReal x12446=((1.0)*x12428);
evalcond[0]=((((-1.0)*r02*x12446))+(((-1.0)*x12438)));
evalcond[1]=(((r21*x12443))+(((-1.0)*r20*x12427*x12430)));
evalcond[2]=(cj0+(((-1.0)*r10*x12427*x12430))+((r11*x12443)));
evalcond[3]=(((cj0*x12431))+((cj3*x12445))+(((-1.0)*cj1*cj2*x12437)));
evalcond[4]=((((-1.0)*x12434*x12437))+(((-1.0)*sj3*x12445))+(((-1.0)*x12437*x12439)));
evalcond[5]=(((x12440*x12444))+((r21*x12432))+(((-1.0)*cj3*x12430*x12442))+x12434+x12439+((sj3*x12435)));
evalcond[6]=((((-1.0)*x12441))+(((-1.0)*r21*x12436*x12446))+((cj3*x12435))+x12431+((gconst11*x12440))+((x12432*x12442)));
evalcond[7]=(((sj0*x12431))+((x12433*x12444))+((r10*x12436))+(((-1.0)*cj1*cj2*x12438))+((r11*x12432))+(((-1.0)*x12428*x12429*x12430)));
evalcond[8]=(((r10*x12428*x12432))+((gconst10*x12429))+(((-1.0)*r11*x12436*x12446))+(((-1.0)*x12434*x12438))+((gconst11*x12433))+(((-1.0)*x12438*x12439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12447=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12447.valid){
continue;
}
CheckValue<IkReal> x12448=IKPowWithIntegerCheck(r02,-1);
if(!x12448.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12447.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12448.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12447.value)))+IKsqr(((-1.0)*sj0*(x12448.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12447.value)), ((-1.0)*sj0*(x12448.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12449=IKsin(j4);
IkReal x12450=IKcos(j4);
IkReal x12451=(cj3*r10);
IkReal x12452=((1.0)*gconst11);
IkReal x12453=(sj1*sj2);
IkReal x12454=(gconst11*sj3);
IkReal x12455=(cj3*r11);
IkReal x12456=(cj2*sj1);
IkReal x12457=(gconst10*r20);
IkReal x12458=(gconst10*sj3);
IkReal x12459=((1.0)*cj0);
IkReal x12460=((1.0)*sj0);
IkReal x12461=(cj1*sj2);
IkReal x12462=(cj3*r21);
IkReal x12463=((1.0)*cj1*cj2);
IkReal x12464=(r20*x12450);
IkReal x12465=(gconst10*x12449);
IkReal x12466=(gconst10*x12450);
IkReal x12467=(r02*x12449);
IkReal x12468=((1.0)*x12450);
evalcond[0]=((((-1.0)*r02*x12468))+(((-1.0)*x12460)));
evalcond[1]=((((-1.0)*r20*x12449*x12452))+((r21*x12465)));
evalcond[2]=(cj0+((r11*x12465))+(((-1.0)*r10*x12449*x12452)));
evalcond[3]=(((cj3*x12467))+((cj0*x12453))+(((-1.0)*cj1*cj2*x12459)));
evalcond[4]=((((-1.0)*sj3*x12467))+(((-1.0)*x12459*x12461))+(((-1.0)*x12456*x12459)));
evalcond[5]=(((x12462*x12466))+((sj3*x12457))+(((-1.0)*cj3*x12452*x12464))+x12461+x12456+((r21*x12454)));
evalcond[6]=(((gconst11*x12462))+((x12454*x12464))+((cj3*x12457))+(((-1.0)*x12463))+(((-1.0)*r21*x12458*x12468))+x12453);
evalcond[7]=(((r11*x12454))+((x12455*x12466))+(((-1.0)*x12450*x12451*x12452))+((sj0*x12453))+(((-1.0)*cj1*cj2*x12460))+((r10*x12458)));
evalcond[8]=((((-1.0)*r11*x12458*x12468))+(((-1.0)*x12460*x12461))+((r10*x12450*x12454))+(((-1.0)*x12456*x12460))+((gconst10*x12451))+((gconst11*x12455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12469=((-1.0)*r11);
CheckValue<IkReal> x12472 = IKatan2WithCheck(IkReal(x12469),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12472.valid){
continue;
}
IkReal x12470=((1.0)*(x12472.value));
IkReal x12471=x11795;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12470)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12470)));
IkReal gconst10=(x12469*x12471);
IkReal gconst11=((1.0)*r10*x12471);
IkReal x12473=r12*r12;
IkReal x12474=((1.0)*sj0);
IkReal x12475=(cj0*r02);
IkReal x12476=x11795;
j4eval[0]=((IKabs((((r12*x12475*x12476))+((sj0*x12473*x12476))+(((-1.0)*x12474*x12476)))))+(IKabs(((((-1.0)*x12475))+(((-1.0)*r12*x12474))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12477=((1.0)*r12);
IkReal x12478=(sj1*sj2);
IkReal x12479=((1.0)*r21);
IkReal x12480=(cj3*gconst11);
IkReal x12481=(r11*sj3);
IkReal x12482=(gconst11*r20);
IkReal x12483=((1.0)*sj3);
IkReal x12484=(cj1*cj2);
IkReal x12485=(gconst10*r21*sj3);
IkReal x12486=(cj3*gconst10*r20);
CheckValue<IkReal> x12487=IKPowWithIntegerCheck((((gconst10*x12481*x12482))+(((-1.0)*gconst11*r10*x12482*x12483))+(((-1.0)*x12479*x12481*(gconst10*gconst10)))+((gconst11*r10*x12485))),-1);
if(!x12487.valid){
continue;
}
CheckValue<IkReal> x12488=IKPowWithIntegerCheck((((sj3*x12482))+(((-1.0)*gconst10*sj3*x12479))),-1);
if(!x12488.valid){
continue;
}
if( IKabs(((x12487.value)*(((((-1.0)*cj0*x12482*x12483))+((cj0*x12485))+(((-1.0)*r21*x12477*x12480))+((r12*x12484))+(((-1.0)*x12477*x12486))+(((-1.0)*x12477*x12478)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12488.value)*(((((-1.0)*x12479*x12480))+(((-1.0)*x12478))+(((-1.0)*x12486))+x12484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12487.value)*(((((-1.0)*cj0*x12482*x12483))+((cj0*x12485))+(((-1.0)*r21*x12477*x12480))+((r12*x12484))+(((-1.0)*x12477*x12486))+(((-1.0)*x12477*x12478))))))+IKsqr(((x12488.value)*(((((-1.0)*x12479*x12480))+(((-1.0)*x12478))+(((-1.0)*x12486))+x12484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12487.value)*(((((-1.0)*cj0*x12482*x12483))+((cj0*x12485))+(((-1.0)*r21*x12477*x12480))+((r12*x12484))+(((-1.0)*x12477*x12486))+(((-1.0)*x12477*x12478))))), ((x12488.value)*(((((-1.0)*x12479*x12480))+(((-1.0)*x12478))+(((-1.0)*x12486))+x12484))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12489=IKsin(j4);
IkReal x12490=IKcos(j4);
IkReal x12491=(cj3*r10);
IkReal x12492=(gconst11*r20);
IkReal x12493=(gconst11*sj3);
IkReal x12494=(sj1*sj2);
IkReal x12495=(cj3*r11);
IkReal x12496=(r10*sj3);
IkReal x12497=(gconst10*r01);
IkReal x12498=(gconst10*sj3);
IkReal x12499=(cj2*sj1);
IkReal x12500=((1.0)*sj0);
IkReal x12501=(cj1*sj2);
IkReal x12502=(gconst10*r21);
IkReal x12503=(cj3*gconst10);
IkReal x12504=(cj3*gconst11);
IkReal x12505=((1.0)*cj0);
IkReal x12506=((1.0)*x12489);
IkReal x12507=((1.0)*cj1*cj2);
IkReal x12508=(gconst11*x12490);
IkReal x12509=(sj3*x12490);
IkReal x12510=(gconst10*x12489);
IkReal x12511=((1.0)*x12490);
IkReal x12512=(cj3*x12490);
IkReal x12513=(cj3*x12489);
evalcond[0]=((((-1.0)*x12492*x12506))+((x12489*x12502)));
evalcond[1]=((((-1.0)*r12*x12511))+cj0+(((-1.0)*gconst11*r10*x12506))+((r11*x12510)));
evalcond[2]=((((-1.0)*gconst11*r00*x12506))+(((-1.0)*x12500))+(((-1.0)*r02*x12511))+((x12489*x12497)));
evalcond[3]=(((x12502*x12512))+((r20*x12498))+((r21*x12493))+(((-1.0)*cj3*x12492*x12511))+x12501+x12499);
evalcond[4]=(((x12492*x12509))+(((-1.0)*x12507))+((r20*x12503))+((r21*x12504))+x12494+(((-1.0)*r21*x12498*x12511)));
evalcond[5]=(((r00*x12498))+((r01*x12493))+(((-1.0)*r00*x12504*x12511))+(((-1.0)*cj1*cj2*x12505))+((cj0*x12494))+((r02*x12513))+((x12497*x12512)));
evalcond[6]=((((-1.0)*x12491*x12508))+((r12*x12513))+((sj0*x12494))+(((-1.0)*cj1*cj2*x12500))+((gconst10*x12496))+((gconst10*x12490*x12495))+((r11*x12493)));
evalcond[7]=((((-1.0)*x12497*x12509))+(((-1.0)*r02*sj3*x12506))+((r01*x12504))+((r00*x12503))+((r00*x12490*x12493))+(((-1.0)*x12501*x12505))+(((-1.0)*x12499*x12505)));
evalcond[8]=(((r10*x12490*x12493))+((gconst11*x12495))+(((-1.0)*r12*sj3*x12506))+((gconst10*x12491))+(((-1.0)*x12500*x12501))+(((-1.0)*r11*x12498*x12511))+(((-1.0)*x12499*x12500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12514=((1.0)*sj0);
IkReal x12515=((1.0)*gconst10);
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12515)))),-1);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12514))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12515))+(((-1.0)*gconst10*r11*x12514))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12516.value)))+(x12517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12518=IKsin(j4);
IkReal x12519=IKcos(j4);
IkReal x12520=(cj3*r10);
IkReal x12521=(gconst11*r20);
IkReal x12522=(gconst11*sj3);
IkReal x12523=(sj1*sj2);
IkReal x12524=(cj3*r11);
IkReal x12525=(r10*sj3);
IkReal x12526=(gconst10*r01);
IkReal x12527=(gconst10*sj3);
IkReal x12528=(cj2*sj1);
IkReal x12529=((1.0)*sj0);
IkReal x12530=(cj1*sj2);
IkReal x12531=(gconst10*r21);
IkReal x12532=(cj3*gconst10);
IkReal x12533=(cj3*gconst11);
IkReal x12534=((1.0)*cj0);
IkReal x12535=((1.0)*x12518);
IkReal x12536=((1.0)*cj1*cj2);
IkReal x12537=(gconst11*x12519);
IkReal x12538=(sj3*x12519);
IkReal x12539=(gconst10*x12518);
IkReal x12540=((1.0)*x12519);
IkReal x12541=(cj3*x12519);
IkReal x12542=(cj3*x12518);
evalcond[0]=((((-1.0)*x12521*x12535))+((x12518*x12531)));
evalcond[1]=(((r11*x12539))+cj0+(((-1.0)*gconst11*r10*x12535))+(((-1.0)*r12*x12540)));
evalcond[2]=((((-1.0)*x12529))+(((-1.0)*gconst11*r00*x12535))+((x12518*x12526))+(((-1.0)*r02*x12540)));
evalcond[3]=(((r21*x12522))+((r20*x12527))+((x12531*x12541))+(((-1.0)*cj3*x12521*x12540))+x12528+x12530);
evalcond[4]=(((r20*x12532))+((r21*x12533))+x12523+(((-1.0)*x12536))+((x12521*x12538))+(((-1.0)*r21*x12527*x12540)));
evalcond[5]=(((cj0*x12523))+((x12526*x12541))+(((-1.0)*cj1*cj2*x12534))+((r02*x12542))+((r01*x12522))+((r00*x12527))+(((-1.0)*r00*x12533*x12540)));
evalcond[6]=(((sj0*x12523))+((r12*x12542))+(((-1.0)*x12520*x12537))+((gconst10*x12525))+((r11*x12522))+((gconst10*x12519*x12524))+(((-1.0)*cj1*cj2*x12529)));
evalcond[7]=(((r00*x12532))+((r00*x12519*x12522))+(((-1.0)*x12528*x12534))+(((-1.0)*x12530*x12534))+(((-1.0)*x12526*x12538))+(((-1.0)*r02*sj3*x12535))+((r01*x12533)));
evalcond[8]=((((-1.0)*x12528*x12529))+((gconst11*x12524))+((gconst10*x12520))+(((-1.0)*r12*sj3*x12535))+(((-1.0)*r11*x12527*x12540))+(((-1.0)*x12529*x12530))+((r10*x12519*x12522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12543=gconst10*gconst10;
IkReal x12544=r21*r21;
IkReal x12545=gconst11*gconst11;
IkReal x12546=r20*r20;
IkReal x12547=((1.0)*cj3);
IkReal x12548=(r20*sj3);
IkReal x12549=(gconst10*gconst11);
IkReal x12550=(cj2*sj1);
IkReal x12551=(gconst10*r21);
IkReal x12552=(cj1*sj2);
IkReal x12553=((1.0)*gconst11*r20);
CheckValue<IkReal> x12554 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12548))+((r22*x12552))+((r22*x12550)))),IkReal((((x12551*x12552))+(((-1.0)*r21*x12545*x12548))+((r21*x12543*x12548))+((x12550*x12551))+(((-1.0)*x12550*x12553))+(((-1.0)*sj3*x12546*x12549))+((sj3*x12544*x12549))+(((-1.0)*x12552*x12553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12554.valid){
continue;
}
CheckValue<IkReal> x12555=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12545*x12546*x12547))+(((2.0)*cj3*r20*r21*x12549))+(((-1.0)*x12547*(r22*r22)))+(((-1.0)*x12543*x12544*x12547)))),-1);
if(!x12555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12554.value)+(((1.5707963267949)*(x12555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12556=IKsin(j4);
IkReal x12557=IKcos(j4);
IkReal x12558=(cj3*r10);
IkReal x12559=(gconst11*r20);
IkReal x12560=(gconst11*sj3);
IkReal x12561=(sj1*sj2);
IkReal x12562=(gconst11*r00);
IkReal x12563=(cj3*r11);
IkReal x12564=(gconst10*sj3);
IkReal x12565=(cj2*sj1);
IkReal x12566=(cj3*r01);
IkReal x12567=((1.0)*sj0);
IkReal x12568=(cj1*sj2);
IkReal x12569=(cj3*r21);
IkReal x12570=(cj3*gconst10);
IkReal x12571=((1.0)*cj0);
IkReal x12572=((1.0)*x12557);
IkReal x12573=((1.0)*x12556);
IkReal x12574=((1.0)*cj1*cj2);
IkReal x12575=(cj3*x12556);
IkReal x12576=(gconst10*x12556);
IkReal x12577=(gconst10*x12557);
evalcond[0]=(((r21*x12576))+(((-1.0)*r22*x12572))+(((-1.0)*x12559*x12573)));
evalcond[1]=((((-1.0)*gconst11*r10*x12573))+cj0+(((-1.0)*r12*x12572))+((r11*x12576)));
evalcond[2]=((((-1.0)*x12562*x12573))+(((-1.0)*r02*x12572))+((r01*x12576))+(((-1.0)*x12567)));
evalcond[3]=((((-1.0)*cj3*x12559*x12572))+((r22*x12575))+((r20*x12564))+((x12569*x12577))+((r21*x12560))+x12568+x12565);
evalcond[4]=(((sj3*x12557*x12559))+((gconst11*x12569))+(((-1.0)*x12574))+(((-1.0)*r22*sj3*x12573))+((r20*x12570))+x12561+(((-1.0)*r21*x12564*x12572)));
evalcond[5]=((((-1.0)*cj3*x12562*x12572))+((x12566*x12577))+((r02*x12575))+((r01*x12560))+((r00*x12564))+(((-1.0)*cj1*cj2*x12571))+((cj0*x12561)));
evalcond[6]=(((r11*x12560))+(((-1.0)*gconst11*x12558*x12572))+((x12563*x12577))+((sj0*x12561))+((r12*x12575))+((r10*x12564))+(((-1.0)*cj1*cj2*x12567)));
evalcond[7]=(((gconst11*x12566))+(((-1.0)*x12565*x12571))+((r00*x12557*x12560))+(((-1.0)*r01*x12564*x12572))+((r00*x12570))+(((-1.0)*r02*sj3*x12573))+(((-1.0)*x12568*x12571)));
evalcond[8]=((((-1.0)*x12567*x12568))+(((-1.0)*x12565*x12567))+((gconst11*x12563))+((gconst10*x12558))+((r10*x12557*x12560))+(((-1.0)*r12*sj3*x12573))+(((-1.0)*r11*x12564*x12572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12578=((1.0)*sj0);
IkReal x12579=((1.0)*gconst10);
CheckValue<IkReal> x12580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12579))+(((-1.0)*gconst11*r21)))),-1);
if(!x12580.valid){
continue;
}
CheckValue<IkReal> x12581 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12578)))),IkReal(((((-1.0)*cj0*r01*x12579))+(((-1.0)*gconst10*r11*x12578))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12580.value)))+(x12581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12582=IKsin(j4);
IkReal x12583=IKcos(j4);
IkReal x12584=(cj3*r10);
IkReal x12585=(gconst11*r20);
IkReal x12586=(gconst11*sj3);
IkReal x12587=(sj1*sj2);
IkReal x12588=(gconst11*r00);
IkReal x12589=(cj3*r11);
IkReal x12590=(gconst10*sj3);
IkReal x12591=(cj2*sj1);
IkReal x12592=(cj3*r01);
IkReal x12593=((1.0)*sj0);
IkReal x12594=(cj1*sj2);
IkReal x12595=(cj3*r21);
IkReal x12596=(cj3*gconst10);
IkReal x12597=((1.0)*cj0);
IkReal x12598=((1.0)*x12583);
IkReal x12599=((1.0)*x12582);
IkReal x12600=((1.0)*cj1*cj2);
IkReal x12601=(cj3*x12582);
IkReal x12602=(gconst10*x12582);
IkReal x12603=(gconst10*x12583);
evalcond[0]=((((-1.0)*r22*x12598))+(((-1.0)*x12585*x12599))+((r21*x12602)));
evalcond[1]=(cj0+((r11*x12602))+(((-1.0)*r12*x12598))+(((-1.0)*gconst11*r10*x12599)));
evalcond[2]=((((-1.0)*x12588*x12599))+((r01*x12602))+(((-1.0)*r02*x12598))+(((-1.0)*x12593)));
evalcond[3]=(((x12595*x12603))+((r21*x12586))+((r22*x12601))+x12594+x12591+(((-1.0)*cj3*x12585*x12598))+((r20*x12590)));
evalcond[4]=(((gconst11*x12595))+(((-1.0)*x12600))+(((-1.0)*r22*sj3*x12599))+(((-1.0)*r21*x12590*x12598))+x12587+((r20*x12596))+((sj3*x12583*x12585)));
evalcond[5]=(((r01*x12586))+((x12592*x12603))+((cj0*x12587))+(((-1.0)*cj3*x12588*x12598))+((r00*x12590))+(((-1.0)*cj1*cj2*x12597))+((r02*x12601)));
evalcond[6]=(((sj0*x12587))+(((-1.0)*gconst11*x12584*x12598))+((r12*x12601))+(((-1.0)*cj1*cj2*x12593))+((r11*x12586))+((x12589*x12603))+((r10*x12590)));
evalcond[7]=((((-1.0)*x12591*x12597))+((r00*x12596))+((gconst11*x12592))+((r00*x12583*x12586))+(((-1.0)*r01*x12590*x12598))+(((-1.0)*r02*sj3*x12599))+(((-1.0)*x12594*x12597)));
evalcond[8]=((((-1.0)*x12591*x12593))+((gconst11*x12589))+((r10*x12583*x12586))+(((-1.0)*r11*x12590*x12598))+((gconst10*x12584))+(((-1.0)*x12593*x12594))+(((-1.0)*r12*sj3*x12599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12604=((1.0)*gconst11);
CheckValue<IkReal> x12605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12604)))),-1);
if(!x12605.valid){
continue;
}
CheckValue<IkReal> x12606 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12605.value)))+(x12606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12607=IKsin(j4);
IkReal x12608=IKcos(j4);
IkReal x12609=(cj3*r10);
IkReal x12610=(gconst11*r20);
IkReal x12611=(gconst11*sj3);
IkReal x12612=(sj1*sj2);
IkReal x12613=(gconst11*r00);
IkReal x12614=(cj3*r11);
IkReal x12615=(gconst10*sj3);
IkReal x12616=(cj2*sj1);
IkReal x12617=(cj3*r01);
IkReal x12618=((1.0)*sj0);
IkReal x12619=(cj1*sj2);
IkReal x12620=(cj3*r21);
IkReal x12621=(cj3*gconst10);
IkReal x12622=((1.0)*cj0);
IkReal x12623=((1.0)*x12608);
IkReal x12624=((1.0)*x12607);
IkReal x12625=((1.0)*cj1*cj2);
IkReal x12626=(cj3*x12607);
IkReal x12627=(gconst10*x12607);
IkReal x12628=(gconst10*x12608);
evalcond[0]=((((-1.0)*r22*x12623))+((r21*x12627))+(((-1.0)*x12610*x12624)));
evalcond[1]=(cj0+(((-1.0)*r12*x12623))+(((-1.0)*gconst11*r10*x12624))+((r11*x12627)));
evalcond[2]=((((-1.0)*r02*x12623))+((r01*x12627))+(((-1.0)*x12613*x12624))+(((-1.0)*x12618)));
evalcond[3]=(((r22*x12626))+(((-1.0)*cj3*x12610*x12623))+((x12620*x12628))+((r21*x12611))+((r20*x12615))+x12619+x12616);
evalcond[4]=((((-1.0)*x12625))+((gconst11*x12620))+x12612+(((-1.0)*r21*x12615*x12623))+((r20*x12621))+((sj3*x12608*x12610))+(((-1.0)*r22*sj3*x12624)));
evalcond[5]=((((-1.0)*cj3*x12613*x12623))+((r02*x12626))+((x12617*x12628))+(((-1.0)*cj1*cj2*x12622))+((r00*x12615))+((r01*x12611))+((cj0*x12612)));
evalcond[6]=(((sj0*x12612))+((x12614*x12628))+(((-1.0)*gconst11*x12609*x12623))+((r11*x12611))+((r12*x12626))+(((-1.0)*cj1*cj2*x12618))+((r10*x12615)));
evalcond[7]=((((-1.0)*r01*x12615*x12623))+((gconst11*x12617))+(((-1.0)*x12616*x12622))+((r00*x12608*x12611))+(((-1.0)*r02*sj3*x12624))+(((-1.0)*x12619*x12622))+((r00*x12621)));
evalcond[8]=(((gconst10*x12609))+((gconst11*x12614))+(((-1.0)*x12616*x12618))+(((-1.0)*r11*x12615*x12623))+(((-1.0)*r12*sj3*x12624))+((r10*x12608*x12611))+(((-1.0)*x12618*x12619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12629=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12629;
j4eval[1]=IKsign(x12629);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12630=((1.0)*cj5);
IkReal x12631=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12630)));
j4eval[0]=x12631;
j4eval[1]=((IKabs(((((-1.0)*r20*x12630))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12632=cj5*cj5;
IkReal x12633=(cj3*r21);
IkReal x12634=(cj5*sj5);
IkReal x12635=((1.0)*cj3);
IkReal x12636=((((-1.0)*r12*r22*x12635))+(((-1.0)*r11*x12633))+((r10*x12633*x12634))+((cj3*r11*r20*x12634))+((r11*x12632*x12633))+(((-1.0)*r10*r20*x12632*x12635)));
j4eval[0]=x12636;
j4eval[1]=IKsign(x12636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12637=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12637;
j4eval[1]=IKsign(x12637);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12638=((1.0)*cj5);
IkReal x12639=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12638)));
j4eval[0]=x12639;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12638))+((r21*sj5))))));
j4eval[2]=IKsign(x12639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12640=cj5*cj5;
IkReal x12641=r11*r11;
IkReal x12642=(r11*sj5);
IkReal x12643=(cj5*r10);
IkReal x12644=((r12*r12)+((x12640*(r10*r10)))+(((-1.0)*x12640*x12641))+x12641+(((-2.0)*x12642*x12643)));
j4eval[0]=x12644;
j4eval[1]=IKsign(x12644);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12642))+x12643))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12645=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12645);
rxp1_1=(px*r21);
rxp1_2=(r11*x12645);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12646=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12646);
rxp1_1=(px*r21);
rxp1_2=(r11*x12646);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12647=((1.0)*sj1);
CheckValue<IkReal> x12648=IKPowWithIntegerCheck(r02,-1);
if(!x12648.valid){
continue;
}
CheckValue<IkReal> x12649=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12649.valid){
continue;
}
if( IKabs(((x12648.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12649.value)*(((((-1.0)*sj2*x12647))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12648.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12647))))))+IKsqr(((x12649.value)*(((((-1.0)*sj2*x12647))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12648.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12647))))), ((x12649.value)*(((((-1.0)*sj2*x12647))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12650=IKsin(j4);
IkReal x12651=IKcos(j4);
IkReal x12652=(cj5*r20);
IkReal x12653=((1.0)*cj2);
IkReal x12654=(cj5*r10);
IkReal x12655=((1.0)*x12650);
IkReal x12656=(sj5*x12650);
IkReal x12657=((1.0)*sj5*x12651);
evalcond[0]=((-1.0)*r02*x12651);
evalcond[1]=((((-1.0)*x12652*x12655))+((r21*x12656)));
evalcond[2]=(((x12651*x12654))+(((-1.0)*r11*x12657)));
evalcond[3]=((1.0)+((r11*x12656))+(((-1.0)*x12654*x12655)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12655))+(((-1.0)*sj1*x12653)));
evalcond[5]=((((-1.0)*cj1*x12653))+((x12651*x12652))+((sj1*sj2))+(((-1.0)*r21*x12657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12658=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12658.valid){
continue;
}
CheckValue<IkReal> x12659=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12659.valid){
continue;
}
if( IKabs(((-1.0)*(x12658.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12659.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12658.value)))+IKsqr(((x12659.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12658.value)), ((x12659.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12660=IKsin(j4);
IkReal x12661=IKcos(j4);
IkReal x12662=(cj5*r20);
IkReal x12663=((1.0)*cj2);
IkReal x12664=(cj5*r10);
IkReal x12665=((1.0)*x12660);
IkReal x12666=(sj5*x12660);
IkReal x12667=((1.0)*sj5*x12661);
evalcond[0]=((-1.0)*r02*x12661);
evalcond[1]=(((r21*x12666))+(((-1.0)*x12662*x12665)));
evalcond[2]=(((x12661*x12664))+(((-1.0)*r11*x12667)));
evalcond[3]=((1.0)+((r11*x12666))+(((-1.0)*x12664*x12665)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12665))+(((-1.0)*sj1*x12663)));
evalcond[5]=((((-1.0)*cj1*x12663))+((sj1*sj2))+((x12661*x12662))+(((-1.0)*r21*x12667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12668=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12668);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12668);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12669=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12669);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12669);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12670=IKPowWithIntegerCheck(r22,-1);
if(!x12670.valid){
continue;
}
CheckValue<IkReal> x12671=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12671.valid){
continue;
}
if( IKabs(((x12670.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12671.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12670.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12671.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12670.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12671.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12672=IKsin(j4);
IkReal x12673=IKcos(j4);
IkReal x12674=((1.0)*cj2);
IkReal x12675=(cj5*x12673);
IkReal x12676=(sj5*x12672);
IkReal x12677=((1.0)*sj5*x12673);
IkReal x12678=((1.0)*cj5*x12672);
evalcond[0]=((-1.0)*r22*x12673);
evalcond[1]=((((-1.0)*r00*x12678))+((r01*x12676)));
evalcond[2]=((((-1.0)*cj1*x12674))+(((-1.0)*r22*x12672))+((sj1*sj2)));
evalcond[3]=(((r10*x12675))+(((-1.0)*r11*x12677)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12678))+((r11*x12676)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12677))+((r00*x12675))+(((-1.0)*sj1*x12674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12679.valid){
continue;
}
CheckValue<IkReal> x12680=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12680.valid){
continue;
}
if( IKabs(((-1.0)*(x12679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12680.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12679.value)))+IKsqr(((x12680.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12679.value)), ((x12680.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12681=IKsin(j4);
IkReal x12682=IKcos(j4);
IkReal x12683=((1.0)*cj2);
IkReal x12684=(cj5*x12682);
IkReal x12685=(sj5*x12681);
IkReal x12686=((1.0)*sj5*x12682);
IkReal x12687=((1.0)*cj5*x12681);
evalcond[0]=((-1.0)*r22*x12682);
evalcond[1]=(((r01*x12685))+(((-1.0)*r00*x12687)));
evalcond[2]=((((-1.0)*cj1*x12683))+((sj1*sj2))+(((-1.0)*r22*x12681)));
evalcond[3]=(((r10*x12684))+(((-1.0)*r11*x12686)));
evalcond[4]=((1.0)+((r11*x12685))+(((-1.0)*r10*x12687)));
evalcond[5]=((((-1.0)*sj1*x12683))+((r00*x12684))+(((-1.0)*r01*x12686))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12688=cj5*cj5;
IkReal x12689=r11*r11;
IkReal x12690=(cj5*r10);
IkReal x12691=(r11*sj5);
CheckValue<IkReal> x12692 = IKatan2WithCheck(IkReal((x12690+(((-1.0)*x12691)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12692.valid){
continue;
}
CheckValue<IkReal> x12693=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12688*(r10*r10)))+(((-1.0)*x12688*x12689))+x12689+(((-2.0)*x12690*x12691)))),-1);
if(!x12693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12692.value)+(((1.5707963267949)*(x12693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12694=IKsin(j4);
IkReal x12695=IKcos(j4);
IkReal x12696=(cj5*r10);
IkReal x12697=(r01*sj5);
IkReal x12698=((1.0)*cj2);
IkReal x12699=(cj5*r00);
IkReal x12700=(cj5*r20);
IkReal x12701=((1.0)*x12695);
IkReal x12702=((1.0)*x12694);
IkReal x12703=(sj5*x12694);
evalcond[0]=(((r21*x12703))+(((-1.0)*r22*x12701))+(((-1.0)*x12700*x12702)));
evalcond[1]=(((x12694*x12697))+(((-1.0)*x12699*x12702))+(((-1.0)*r02*x12701)));
evalcond[2]=(((x12695*x12696))+(((-1.0)*r11*sj5*x12701))+(((-1.0)*r12*x12702)));
evalcond[3]=((1.0)+((r11*x12703))+(((-1.0)*x12696*x12702))+(((-1.0)*r12*x12701)));
evalcond[4]=((((-1.0)*cj1*x12698))+(((-1.0)*r21*sj5*x12701))+((x12695*x12700))+((sj1*sj2))+(((-1.0)*r22*x12702)));
evalcond[5]=(((x12695*x12699))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12698))+(((-1.0)*x12697*x12701))+(((-1.0)*r02*x12702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12704=((1.0)*cj5);
CheckValue<IkReal> x12705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12704))+(((-1.0)*r00*sj5)))),-1);
if(!x12705.valid){
continue;
}
CheckValue<IkReal> x12706 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12705.value)))+(x12706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12707=IKsin(j4);
IkReal x12708=IKcos(j4);
IkReal x12709=(cj5*r10);
IkReal x12710=(r01*sj5);
IkReal x12711=((1.0)*cj2);
IkReal x12712=(cj5*r00);
IkReal x12713=(cj5*r20);
IkReal x12714=((1.0)*x12708);
IkReal x12715=((1.0)*x12707);
IkReal x12716=(sj5*x12707);
evalcond[0]=(((r21*x12716))+(((-1.0)*r22*x12714))+(((-1.0)*x12713*x12715)));
evalcond[1]=((((-1.0)*x12712*x12715))+((x12707*x12710))+(((-1.0)*r02*x12714)));
evalcond[2]=((((-1.0)*r12*x12715))+((x12708*x12709))+(((-1.0)*r11*sj5*x12714)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12714))+((r11*x12716))+(((-1.0)*x12709*x12715)));
evalcond[4]=(((x12708*x12713))+((sj1*sj2))+(((-1.0)*r22*x12715))+(((-1.0)*cj1*x12711))+(((-1.0)*r21*sj5*x12714)));
evalcond[5]=((((-1.0)*x12710*x12714))+((x12708*x12712))+(((-1.0)*sj1*x12711))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12717=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12717.valid){
continue;
}
CheckValue<IkReal> x12718 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12717.value)))+(x12718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12719=IKsin(j4);
IkReal x12720=IKcos(j4);
IkReal x12721=(cj5*r10);
IkReal x12722=(r01*sj5);
IkReal x12723=((1.0)*cj2);
IkReal x12724=(cj5*r00);
IkReal x12725=(cj5*r20);
IkReal x12726=((1.0)*x12720);
IkReal x12727=((1.0)*x12719);
IkReal x12728=(sj5*x12719);
evalcond[0]=(((r21*x12728))+(((-1.0)*r22*x12726))+(((-1.0)*x12725*x12727)));
evalcond[1]=((((-1.0)*r02*x12726))+((x12719*x12722))+(((-1.0)*x12724*x12727)));
evalcond[2]=((((-1.0)*r11*sj5*x12726))+(((-1.0)*r12*x12727))+((x12720*x12721)));
evalcond[3]=((1.0)+((r11*x12728))+(((-1.0)*r12*x12726))+(((-1.0)*x12721*x12727)));
evalcond[4]=((((-1.0)*r22*x12727))+((sj1*sj2))+((x12720*x12725))+(((-1.0)*r21*sj5*x12726))+(((-1.0)*cj1*x12723)));
evalcond[5]=((((-1.0)*r02*x12727))+(((-1.0)*sj1*x12723))+(((-1.0)*cj1*sj2))+(((-1.0)*x12722*x12726))+((x12720*x12724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12729=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12729;
j4eval[1]=IKsign(x12729);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12730=((1.0)*cj5);
IkReal x12731=((((-1.0)*r01*x12730))+(((-1.0)*r00*sj5)));
j4eval[0]=x12731;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12730))))));
j4eval[2]=IKsign(x12731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12732=(sj1*sj2);
IkReal x12733=(cj5*r10);
IkReal x12734=(r11*sj5);
IkReal x12735=(cj1*cj2);
IkReal x12736=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12736;
j4eval[1]=((IKabs((((r12*x12735))+(((-1.0)*r12*x12732)))))+(IKabs(((((-1.0)*x12732*x12733))+((x12732*x12734))+((x12733*x12735))+(((-1.0)*x12734*x12735))))));
j4eval[2]=IKsign(x12736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12737=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12737);
rxp1_1=(px*r21);
rxp1_2=(r11*x12737);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12738=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12738);
rxp1_1=(px*r21);
rxp1_2=(r11*x12738);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12739=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12739))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12739)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12740=((1.0)*cj5);
CheckValue<IkReal> x12741=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12740))),-1);
if(!x12741.valid){
continue;
}
CheckValue<IkReal> x12742=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12740))),-1);
if(!x12742.valid){
continue;
}
if( IKabs(((-1.0)*(x12741.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12741.value)))+IKsqr(((x12742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12741.value)), ((x12742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12743=IKsin(j4);
IkReal x12744=IKcos(j4);
IkReal x12745=((1.0)*cj2);
IkReal x12746=(r21*sj5);
IkReal x12747=(r11*sj5);
IkReal x12748=((1.0)*cj5*x12743);
IkReal x12749=((1.0)*cj5*x12744);
evalcond[0]=((-1.0)*r02*x12744);
evalcond[1]=(((x12743*x12746))+(((-1.0)*r20*x12748)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12745))+((r02*x12743)));
evalcond[3]=(((x12744*x12747))+(((-1.0)*r10*x12749)));
evalcond[4]=((1.0)+((x12743*x12747))+(((-1.0)*r10*x12748)));
evalcond[5]=(((x12744*x12746))+((sj1*sj2))+(((-1.0)*r20*x12749))+(((-1.0)*cj1*x12745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12750=IKPowWithIntegerCheck(r02,-1);
if(!x12750.valid){
continue;
}
CheckValue<IkReal> x12751=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12751.valid){
continue;
}
if( IKabs(((x12750.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12751.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12750.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12751.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12750.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12751.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12752=IKsin(j4);
IkReal x12753=IKcos(j4);
IkReal x12754=((1.0)*cj2);
IkReal x12755=(r21*sj5);
IkReal x12756=(r11*sj5);
IkReal x12757=((1.0)*cj5*x12752);
IkReal x12758=((1.0)*cj5*x12753);
evalcond[0]=((-1.0)*r02*x12753);
evalcond[1]=(((x12752*x12755))+(((-1.0)*r20*x12757)));
evalcond[2]=((((-1.0)*sj1*x12754))+(((-1.0)*cj1*sj2))+((r02*x12752)));
evalcond[3]=(((x12753*x12756))+(((-1.0)*r10*x12758)));
evalcond[4]=((1.0)+((x12752*x12756))+(((-1.0)*r10*x12757)));
evalcond[5]=(((sj1*sj2))+((x12753*x12755))+(((-1.0)*r20*x12758))+(((-1.0)*cj1*x12754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12759=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12759;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12760=((1.0)*cj5);
IkReal x12761=((((-1.0)*r21*x12760))+(((-1.0)*r20*sj5)));
j4eval[0]=x12761;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12760))+((r11*sj5))))));
j4eval[2]=IKsign(x12761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12762=cj5*cj5;
IkReal x12763=(r11*r21);
IkReal x12764=((1.0)*r20);
IkReal x12765=(cj5*sj5);
IkReal x12766=(((x12762*x12763))+(((-1.0)*r10*x12762*x12764))+(((-1.0)*r12*r22))+(((-1.0)*x12763))+((r10*r21*x12765))+((r11*r20*x12765)));
j4eval[0]=x12766;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12764))+((r21*sj5))))));
j4eval[2]=IKsign(x12766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12767=cj5*cj5;
IkReal x12768=(r21*sj5);
IkReal x12769=(r11*r21);
IkReal x12770=((1.0)*r20);
CheckValue<IkReal> x12771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12767*x12769))+((cj5*r10*x12768))+(((-1.0)*x12769))+(((-1.0)*r10*x12767*x12770))+((cj5*r11*r20*sj5)))),-1);
if(!x12771.valid){
continue;
}
CheckValue<IkReal> x12772 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12770))+x12768)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12771.value)))+(x12772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12773=IKcos(j4);
IkReal x12774=IKsin(j4);
IkReal x12775=(cj5*r00);
IkReal x12776=(cj5*r20);
IkReal x12777=(cj5*r10);
IkReal x12778=((1.0)*x12773);
IkReal x12779=((1.0)*x12774);
IkReal x12780=(sj5*x12773);
IkReal x12781=(sj5*x12774);
evalcond[0]=((((-1.0)*x12776*x12778))+((r21*x12780))+((r22*x12774)));
evalcond[1]=((((-1.0)*x12777*x12778))+((r11*x12780))+((r12*x12774)));
evalcond[2]=((((-1.0)*r22*x12778))+(((-1.0)*x12776*x12779))+((r21*x12781)));
evalcond[3]=(((r01*x12781))+(((-1.0)*r02*x12778))+(((-1.0)*x12775*x12779)));
evalcond[4]=((-1.0)+((r01*x12780))+((r02*x12774))+(((-1.0)*x12775*x12778)));
evalcond[5]=((1.0)+(((-1.0)*x12777*x12779))+((r11*x12781))+(((-1.0)*r12*x12778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12782=((1.0)*cj5);
CheckValue<IkReal> x12783 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12782)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12783.valid){
continue;
}
CheckValue<IkReal> x12784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12782))+(((-1.0)*r20*sj5)))),-1);
if(!x12784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12783.value)+(((1.5707963267949)*(x12784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12785=IKcos(j4);
IkReal x12786=IKsin(j4);
IkReal x12787=(cj5*r00);
IkReal x12788=(cj5*r20);
IkReal x12789=(cj5*r10);
IkReal x12790=((1.0)*x12785);
IkReal x12791=((1.0)*x12786);
IkReal x12792=(sj5*x12785);
IkReal x12793=(sj5*x12786);
evalcond[0]=(((r22*x12786))+((r21*x12792))+(((-1.0)*x12788*x12790)));
evalcond[1]=(((r11*x12792))+((r12*x12786))+(((-1.0)*x12789*x12790)));
evalcond[2]=((((-1.0)*r22*x12790))+((r21*x12793))+(((-1.0)*x12788*x12791)));
evalcond[3]=((((-1.0)*r02*x12790))+((r01*x12793))+(((-1.0)*x12787*x12791)));
evalcond[4]=((-1.0)+((r01*x12792))+((r02*x12786))+(((-1.0)*x12787*x12790)));
evalcond[5]=((1.0)+((r11*x12793))+(((-1.0)*r12*x12790))+(((-1.0)*x12789*x12791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12794 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12794.valid){
continue;
}
CheckValue<IkReal> x12795=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12794.value)+(((1.5707963267949)*(x12795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12796=IKcos(j4);
IkReal x12797=IKsin(j4);
IkReal x12798=(cj5*r00);
IkReal x12799=(cj5*r20);
IkReal x12800=(cj5*r10);
IkReal x12801=((1.0)*x12796);
IkReal x12802=((1.0)*x12797);
IkReal x12803=(sj5*x12796);
IkReal x12804=(sj5*x12797);
evalcond[0]=((((-1.0)*x12799*x12801))+((r21*x12803))+((r22*x12797)));
evalcond[1]=((((-1.0)*x12800*x12801))+((r11*x12803))+((r12*x12797)));
evalcond[2]=((((-1.0)*x12799*x12802))+((r21*x12804))+(((-1.0)*r22*x12801)));
evalcond[3]=((((-1.0)*r02*x12801))+((r01*x12804))+(((-1.0)*x12798*x12802)));
evalcond[4]=((-1.0)+((r02*x12797))+((r01*x12803))+(((-1.0)*x12798*x12801)));
evalcond[5]=((1.0)+(((-1.0)*x12800*x12802))+(((-1.0)*r12*x12801))+((r11*x12804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12805=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12805;
j4eval[1]=IKsign(x12805);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12806=((1.0)*cj5);
IkReal x12807=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12806)));
j4eval[0]=x12807;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12806)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12808=cj5*cj5;
IkReal x12809=(r11*r21);
IkReal x12810=((1.0)*r20);
IkReal x12811=(cj5*sj5);
IkReal x12812=((((-1.0)*r10*x12808*x12810))+(((-1.0)*r12*r22))+((r11*r20*x12811))+((x12808*x12809))+(((-1.0)*x12809))+((r10*r21*x12811)));
j4eval[0]=x12812;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12810))+((r21*sj5))))));
j4eval[2]=IKsign(x12812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12813=cj5*cj5;
IkReal x12814=(r21*sj5);
IkReal x12815=(r11*r21);
IkReal x12816=((1.0)*r20);
CheckValue<IkReal> x12817 = IKatan2WithCheck(IkReal((x12814+(((-1.0)*cj5*x12816)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12817.valid){
continue;
}
CheckValue<IkReal> x12818=IKPowWithIntegerCheck(IKsign((((x12813*x12815))+(((-1.0)*r12*r22))+(((-1.0)*x12815))+(((-1.0)*r10*x12813*x12816))+((cj5*r10*x12814))+((cj5*r11*r20*sj5)))),-1);
if(!x12818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12817.value)+(((1.5707963267949)*(x12818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12819=IKcos(j4);
IkReal x12820=IKsin(j4);
IkReal x12821=(cj5*r00);
IkReal x12822=(cj5*r20);
IkReal x12823=(cj5*r10);
IkReal x12824=((1.0)*x12819);
IkReal x12825=((1.0)*x12820);
IkReal x12826=(sj5*x12819);
IkReal x12827=(sj5*x12820);
evalcond[0]=((((-1.0)*x12822*x12824))+((r22*x12820))+((r21*x12826)));
evalcond[1]=(((r12*x12820))+((r11*x12826))+(((-1.0)*x12823*x12824)));
evalcond[2]=((((-1.0)*r22*x12824))+(((-1.0)*x12822*x12825))+((r21*x12827)));
evalcond[3]=((((-1.0)*r02*x12824))+((r01*x12827))+(((-1.0)*x12821*x12825)));
evalcond[4]=((1.0)+((r01*x12826))+((r02*x12820))+(((-1.0)*x12821*x12824)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12824))+((r11*x12827))+(((-1.0)*x12823*x12825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12828=((1.0)*cj5);
CheckValue<IkReal> x12829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12828)))),-1);
if(!x12829.valid){
continue;
}
CheckValue<IkReal> x12830 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12828)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12829.value)))+(x12830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12831=IKcos(j4);
IkReal x12832=IKsin(j4);
IkReal x12833=(cj5*r00);
IkReal x12834=(cj5*r20);
IkReal x12835=(cj5*r10);
IkReal x12836=((1.0)*x12831);
IkReal x12837=((1.0)*x12832);
IkReal x12838=(sj5*x12831);
IkReal x12839=(sj5*x12832);
evalcond[0]=(((r21*x12838))+((r22*x12832))+(((-1.0)*x12834*x12836)));
evalcond[1]=(((r12*x12832))+((r11*x12838))+(((-1.0)*x12835*x12836)));
evalcond[2]=(((r21*x12839))+(((-1.0)*r22*x12836))+(((-1.0)*x12834*x12837)));
evalcond[3]=((((-1.0)*x12833*x12837))+(((-1.0)*r02*x12836))+((r01*x12839)));
evalcond[4]=((1.0)+(((-1.0)*x12833*x12836))+((r02*x12832))+((r01*x12838)));
evalcond[5]=((1.0)+((r11*x12839))+(((-1.0)*x12835*x12837))+(((-1.0)*r12*x12836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12840=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12840.valid){
continue;
}
CheckValue<IkReal> x12841 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12840.value)))+(x12841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12842=IKcos(j4);
IkReal x12843=IKsin(j4);
IkReal x12844=(cj5*r00);
IkReal x12845=(cj5*r20);
IkReal x12846=(cj5*r10);
IkReal x12847=((1.0)*x12842);
IkReal x12848=((1.0)*x12843);
IkReal x12849=(sj5*x12842);
IkReal x12850=(sj5*x12843);
evalcond[0]=(((r22*x12843))+(((-1.0)*x12845*x12847))+((r21*x12849)));
evalcond[1]=(((r11*x12849))+((r12*x12843))+(((-1.0)*x12846*x12847)));
evalcond[2]=((((-1.0)*r22*x12847))+(((-1.0)*x12845*x12848))+((r21*x12850)));
evalcond[3]=((((-1.0)*r02*x12847))+((r01*x12850))+(((-1.0)*x12844*x12848)));
evalcond[4]=((1.0)+((r01*x12849))+(((-1.0)*x12844*x12847))+((r02*x12843)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12847))+((r11*x12850))+(((-1.0)*x12846*x12848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12851=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12851;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12852=((1.0)*cj5);
IkReal x12853=((((-1.0)*r21*x12852))+(((-1.0)*r20*sj5)));
j4eval[0]=x12853;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12852)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12854=cj5*cj5;
IkReal x12855=(r11*r21);
IkReal x12856=((1.0)*r20);
IkReal x12857=(cj5*sj5);
IkReal x12858=((((-1.0)*r10*x12854*x12856))+((r11*r20*x12857))+(((-1.0)*r12*r22))+(((-1.0)*x12855))+((r10*r21*x12857))+((x12854*x12855)));
j4eval[0]=x12858;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12856)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12859=cj5*cj5;
IkReal x12860=(r21*sj5);
IkReal x12861=(r11*r21);
IkReal x12862=((1.0)*r20);
CheckValue<IkReal> x12863 = IKatan2WithCheck(IkReal((x12860+(((-1.0)*cj5*x12862)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12863.valid){
continue;
}
CheckValue<IkReal> x12864=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12861))+(((-1.0)*r12*r22))+((x12859*x12861))+((cj5*r10*x12860))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12859*x12862)))),-1);
if(!x12864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12863.value)+(((1.5707963267949)*(x12864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12865=IKcos(j4);
IkReal x12866=IKsin(j4);
IkReal x12867=(cj5*r00);
IkReal x12868=(cj5*r20);
IkReal x12869=(cj5*r10);
IkReal x12870=((1.0)*x12865);
IkReal x12871=((1.0)*x12866);
IkReal x12872=(sj5*x12865);
IkReal x12873=(sj5*x12866);
evalcond[0]=((((-1.0)*x12868*x12870))+((r21*x12872))+((r22*x12866)));
evalcond[1]=(((r12*x12866))+(((-1.0)*x12869*x12870))+((r11*x12872)));
evalcond[2]=((((-1.0)*r22*x12870))+(((-1.0)*x12868*x12871))+((r21*x12873)));
evalcond[3]=((((-1.0)*x12867*x12871))+((r01*x12873))+(((-1.0)*r02*x12870)));
evalcond[4]=((-1.0)+(((-1.0)*x12867*x12870))+((r01*x12872))+((r02*x12866)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12870))+(((-1.0)*x12869*x12871))+((r11*x12873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12874=((1.0)*cj5);
CheckValue<IkReal> x12875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12874))+(((-1.0)*r20*sj5)))),-1);
if(!x12875.valid){
continue;
}
CheckValue<IkReal> x12876 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12874)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12875.value)))+(x12876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12877=IKcos(j4);
IkReal x12878=IKsin(j4);
IkReal x12879=(cj5*r00);
IkReal x12880=(cj5*r20);
IkReal x12881=(cj5*r10);
IkReal x12882=((1.0)*x12877);
IkReal x12883=((1.0)*x12878);
IkReal x12884=(sj5*x12877);
IkReal x12885=(sj5*x12878);
evalcond[0]=(((r22*x12878))+(((-1.0)*x12880*x12882))+((r21*x12884)));
evalcond[1]=((((-1.0)*x12881*x12882))+((r12*x12878))+((r11*x12884)));
evalcond[2]=((((-1.0)*r22*x12882))+(((-1.0)*x12880*x12883))+((r21*x12885)));
evalcond[3]=((((-1.0)*r02*x12882))+(((-1.0)*x12879*x12883))+((r01*x12885)));
evalcond[4]=((-1.0)+(((-1.0)*x12879*x12882))+((r01*x12884))+((r02*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12882))+(((-1.0)*x12881*x12883))+((r11*x12885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12886 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12886.valid){
continue;
}
CheckValue<IkReal> x12887=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12886.value)+(((1.5707963267949)*(x12887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12888=IKcos(j4);
IkReal x12889=IKsin(j4);
IkReal x12890=(cj5*r00);
IkReal x12891=(cj5*r20);
IkReal x12892=(cj5*r10);
IkReal x12893=((1.0)*x12888);
IkReal x12894=((1.0)*x12889);
IkReal x12895=(sj5*x12888);
IkReal x12896=(sj5*x12889);
evalcond[0]=((((-1.0)*x12891*x12893))+((r21*x12895))+((r22*x12889)));
evalcond[1]=((((-1.0)*x12892*x12893))+((r12*x12889))+((r11*x12895)));
evalcond[2]=((((-1.0)*x12891*x12894))+(((-1.0)*r22*x12893))+((r21*x12896)));
evalcond[3]=(((r01*x12896))+(((-1.0)*x12890*x12894))+(((-1.0)*r02*x12893)));
evalcond[4]=((-1.0)+((r01*x12895))+(((-1.0)*x12890*x12893))+((r02*x12889)));
evalcond[5]=((1.0)+(((-1.0)*x12892*x12894))+((r11*x12896))+(((-1.0)*r12*x12893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12897=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12897;
j4eval[1]=IKsign(x12897);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12898=((1.0)*cj5);
IkReal x12899=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12898)));
j4eval[0]=x12899;
j4eval[1]=((IKabs(((((-1.0)*r20*x12898))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12900=cj5*cj5;
IkReal x12901=(r11*r21);
IkReal x12902=((1.0)*r20);
IkReal x12903=(cj5*sj5);
IkReal x12904=((((-1.0)*r12*r22))+(((-1.0)*x12901))+((r11*r20*x12903))+(((-1.0)*r10*x12900*x12902))+((r10*r21*x12903))+((x12900*x12901)));
j4eval[0]=x12904;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12902))))));
j4eval[2]=IKsign(x12904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12905=cj5*cj5;
IkReal x12906=(r21*sj5);
IkReal x12907=(r11*r21);
IkReal x12908=((1.0)*r20);
CheckValue<IkReal> x12909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12907))+(((-1.0)*r10*x12905*x12908))+((x12905*x12907))+((cj5*r10*x12906))+((cj5*r11*r20*sj5)))),-1);
if(!x12909.valid){
continue;
}
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal((x12906+(((-1.0)*cj5*x12908)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12909.value)))+(x12910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12911=IKcos(j4);
IkReal x12912=IKsin(j4);
IkReal x12913=(cj5*r00);
IkReal x12914=(cj5*r20);
IkReal x12915=(cj5*r10);
IkReal x12916=((1.0)*x12911);
IkReal x12917=((1.0)*x12912);
IkReal x12918=(sj5*x12911);
IkReal x12919=(sj5*x12912);
evalcond[0]=((((-1.0)*x12914*x12916))+((r21*x12918))+((r22*x12912)));
evalcond[1]=((((-1.0)*x12915*x12916))+((r12*x12912))+((r11*x12918)));
evalcond[2]=((((-1.0)*x12914*x12917))+((r21*x12919))+(((-1.0)*r22*x12916)));
evalcond[3]=((((-1.0)*r02*x12916))+(((-1.0)*x12913*x12917))+((r01*x12919)));
evalcond[4]=((1.0)+((r02*x12912))+(((-1.0)*x12913*x12916))+((r01*x12918)));
evalcond[5]=((1.0)+(((-1.0)*x12915*x12917))+(((-1.0)*r12*x12916))+((r11*x12919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12920=((1.0)*cj5);
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12920))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
CheckValue<IkReal> x12922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12920)))),-1);
if(!x12922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12921.value)+(((1.5707963267949)*(x12922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12923=IKcos(j4);
IkReal x12924=IKsin(j4);
IkReal x12925=(cj5*r00);
IkReal x12926=(cj5*r20);
IkReal x12927=(cj5*r10);
IkReal x12928=((1.0)*x12923);
IkReal x12929=((1.0)*x12924);
IkReal x12930=(sj5*x12923);
IkReal x12931=(sj5*x12924);
evalcond[0]=((((-1.0)*x12926*x12928))+((r22*x12924))+((r21*x12930)));
evalcond[1]=(((r11*x12930))+(((-1.0)*x12927*x12928))+((r12*x12924)));
evalcond[2]=((((-1.0)*x12926*x12929))+((r21*x12931))+(((-1.0)*r22*x12928)));
evalcond[3]=((((-1.0)*r02*x12928))+(((-1.0)*x12925*x12929))+((r01*x12931)));
evalcond[4]=((1.0)+(((-1.0)*x12925*x12928))+((r02*x12924))+((r01*x12930)));
evalcond[5]=((1.0)+((r11*x12931))+(((-1.0)*x12927*x12929))+(((-1.0)*r12*x12928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12932=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12932.valid){
continue;
}
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12932.value)))+(x12933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12934=IKcos(j4);
IkReal x12935=IKsin(j4);
IkReal x12936=(cj5*r00);
IkReal x12937=(cj5*r20);
IkReal x12938=(cj5*r10);
IkReal x12939=((1.0)*x12934);
IkReal x12940=((1.0)*x12935);
IkReal x12941=(sj5*x12934);
IkReal x12942=(sj5*x12935);
evalcond[0]=((((-1.0)*x12937*x12939))+((r21*x12941))+((r22*x12935)));
evalcond[1]=(((r12*x12935))+(((-1.0)*x12938*x12939))+((r11*x12941)));
evalcond[2]=((((-1.0)*x12937*x12940))+((r21*x12942))+(((-1.0)*r22*x12939)));
evalcond[3]=((((-1.0)*x12936*x12940))+(((-1.0)*r02*x12939))+((r01*x12942)));
evalcond[4]=((1.0)+(((-1.0)*x12936*x12939))+((r02*x12935))+((r01*x12941)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12939))+((r11*x12942))+(((-1.0)*x12938*x12940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12943=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12943;
j4eval[1]=IKsign(x12943);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12944=((1.0)*cj5);
IkReal x12945=((((-1.0)*r11*x12944))+(((-1.0)*r10*sj5)));
j4eval[0]=x12945;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12944)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12946=cj5*cj5;
IkReal x12947=(r11*r21);
IkReal x12948=((1.0)*r20);
IkReal x12949=(cj5*sj5);
IkReal x12950=((((-1.0)*r12*r22))+((x12946*x12947))+((r10*r21*x12949))+(((-1.0)*x12947))+((r11*r20*x12949))+(((-1.0)*r10*x12946*x12948)));
j4eval[0]=x12950;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12948))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12951=cj5*cj5;
IkReal x12952=(r21*sj5);
IkReal x12953=(r11*r21);
IkReal x12954=((1.0)*r20);
CheckValue<IkReal> x12955=IKPowWithIntegerCheck(IKsign((((x12951*x12953))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12951*x12954))+(((-1.0)*x12953))+((cj5*r10*x12952))+((cj5*r11*r20*sj5)))),-1);
if(!x12955.valid){
continue;
}
CheckValue<IkReal> x12956 = IKatan2WithCheck(IkReal((x12952+(((-1.0)*cj5*x12954)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12955.value)))+(x12956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12957=IKcos(j4);
IkReal x12958=IKsin(j4);
IkReal x12959=(cj5*r00);
IkReal x12960=(cj5*r20);
IkReal x12961=(cj5*r10);
IkReal x12962=((1.0)*x12957);
IkReal x12963=((1.0)*x12958);
IkReal x12964=(sj5*x12957);
IkReal x12965=(sj5*x12958);
evalcond[0]=(((r22*x12958))+(((-1.0)*x12960*x12962))+((r21*x12964)));
evalcond[1]=(((r12*x12958))+(((-1.0)*x12961*x12962))+((r11*x12964)));
evalcond[2]=((((-1.0)*x12960*x12963))+(((-1.0)*r22*x12962))+((r21*x12965)));
evalcond[3]=(((r01*x12965))+(((-1.0)*x12959*x12963))+(((-1.0)*r02*x12962)));
evalcond[4]=((1.0)+((r01*x12964))+(((-1.0)*x12959*x12962))+((r02*x12958)));
evalcond[5]=((1.0)+(((-1.0)*x12961*x12963))+(((-1.0)*r12*x12962))+((r11*x12965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12966=((1.0)*cj5);
CheckValue<IkReal> x12967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12966)))),-1);
if(!x12967.valid){
continue;
}
CheckValue<IkReal> x12968 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12966)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12967.value)))+(x12968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12969=IKcos(j4);
IkReal x12970=IKsin(j4);
IkReal x12971=(cj5*r00);
IkReal x12972=(cj5*r20);
IkReal x12973=(cj5*r10);
IkReal x12974=((1.0)*x12969);
IkReal x12975=((1.0)*x12970);
IkReal x12976=(sj5*x12969);
IkReal x12977=(sj5*x12970);
evalcond[0]=((((-1.0)*x12972*x12974))+((r22*x12970))+((r21*x12976)));
evalcond[1]=((((-1.0)*x12973*x12974))+((r11*x12976))+((r12*x12970)));
evalcond[2]=((((-1.0)*r22*x12974))+(((-1.0)*x12972*x12975))+((r21*x12977)));
evalcond[3]=(((r01*x12977))+(((-1.0)*r02*x12974))+(((-1.0)*x12971*x12975)));
evalcond[4]=((1.0)+((r01*x12976))+((r02*x12970))+(((-1.0)*x12971*x12974)));
evalcond[5]=((1.0)+(((-1.0)*x12973*x12975))+(((-1.0)*r12*x12974))+((r11*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12978=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12978.valid){
continue;
}
CheckValue<IkReal> x12979 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12978.value)))+(x12979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12980=IKcos(j4);
IkReal x12981=IKsin(j4);
IkReal x12982=(cj5*r00);
IkReal x12983=(cj5*r20);
IkReal x12984=(cj5*r10);
IkReal x12985=((1.0)*x12980);
IkReal x12986=((1.0)*x12981);
IkReal x12987=(sj5*x12980);
IkReal x12988=(sj5*x12981);
evalcond[0]=((((-1.0)*x12983*x12985))+((r22*x12981))+((r21*x12987)));
evalcond[1]=(((r11*x12987))+((r12*x12981))+(((-1.0)*x12984*x12985)));
evalcond[2]=((((-1.0)*x12983*x12986))+(((-1.0)*r22*x12985))+((r21*x12988)));
evalcond[3]=(((r01*x12988))+(((-1.0)*x12982*x12986))+(((-1.0)*r02*x12985)));
evalcond[4]=((1.0)+((r01*x12987))+(((-1.0)*x12982*x12985))+((r02*x12981)));
evalcond[5]=((1.0)+((r11*x12988))+(((-1.0)*r12*x12985))+(((-1.0)*x12984*x12986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12989=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12989;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12990=((1.0)*cj5);
IkReal x12991=((((-1.0)*r21*x12990))+(((-1.0)*r20*sj5)));
j4eval[0]=x12991;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12990))+((r11*sj5))))));
j4eval[2]=IKsign(x12991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12992=cj5*cj5;
IkReal x12993=(r11*r21);
IkReal x12994=((1.0)*r20);
IkReal x12995=(cj5*sj5);
IkReal x12996=(((r10*r21*x12995))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12992*x12994))+((r11*r20*x12995))+((x12992*x12993))+(((-1.0)*x12993)));
j4eval[0]=x12996;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12994)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12997=cj5*cj5;
IkReal x12998=(r21*sj5);
IkReal x12999=(r11*r21);
IkReal x13000=((1.0)*r20);
CheckValue<IkReal> x13001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12997*x13000))+(((-1.0)*r12*r22))+((x12997*x12999))+((cj5*r10*x12998))+(((-1.0)*x12999))+((cj5*r11*r20*sj5)))),-1);
if(!x13001.valid){
continue;
}
CheckValue<IkReal> x13002 = IKatan2WithCheck(IkReal((x12998+(((-1.0)*cj5*x13000)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13001.value)))+(x13002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13003=IKcos(j4);
IkReal x13004=IKsin(j4);
IkReal x13005=(cj5*r00);
IkReal x13006=(cj5*r20);
IkReal x13007=(cj5*r10);
IkReal x13008=((1.0)*x13003);
IkReal x13009=((1.0)*x13004);
IkReal x13010=(sj5*x13003);
IkReal x13011=(sj5*x13004);
evalcond[0]=(((r21*x13010))+(((-1.0)*x13006*x13008))+((r22*x13004)));
evalcond[1]=(((r12*x13004))+((r11*x13010))+(((-1.0)*x13007*x13008)));
evalcond[2]=(((r21*x13011))+(((-1.0)*r22*x13008))+(((-1.0)*x13006*x13009)));
evalcond[3]=((((-1.0)*x13005*x13009))+((r01*x13011))+(((-1.0)*r02*x13008)));
evalcond[4]=((-1.0)+(((-1.0)*x13005*x13008))+((r01*x13010))+((r02*x13004)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13008))+((r11*x13011))+(((-1.0)*x13007*x13009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13012=((1.0)*cj5);
CheckValue<IkReal> x13013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13012))+(((-1.0)*r20*sj5)))),-1);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13012))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13013.value)))+(x13014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13015=IKcos(j4);
IkReal x13016=IKsin(j4);
IkReal x13017=(cj5*r00);
IkReal x13018=(cj5*r20);
IkReal x13019=(cj5*r10);
IkReal x13020=((1.0)*x13015);
IkReal x13021=((1.0)*x13016);
IkReal x13022=(sj5*x13015);
IkReal x13023=(sj5*x13016);
evalcond[0]=((((-1.0)*x13018*x13020))+((r21*x13022))+((r22*x13016)));
evalcond[1]=((((-1.0)*x13019*x13020))+((r11*x13022))+((r12*x13016)));
evalcond[2]=((((-1.0)*x13018*x13021))+(((-1.0)*r22*x13020))+((r21*x13023)));
evalcond[3]=(((r01*x13023))+(((-1.0)*r02*x13020))+(((-1.0)*x13017*x13021)));
evalcond[4]=((-1.0)+((r01*x13022))+((r02*x13016))+(((-1.0)*x13017*x13020)));
evalcond[5]=((1.0)+(((-1.0)*x13019*x13021))+((r11*x13023))+(((-1.0)*r12*x13020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13024 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13024.valid){
continue;
}
CheckValue<IkReal> x13025=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13024.value)+(((1.5707963267949)*(x13025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13026=IKcos(j4);
IkReal x13027=IKsin(j4);
IkReal x13028=(cj5*r00);
IkReal x13029=(cj5*r20);
IkReal x13030=(cj5*r10);
IkReal x13031=((1.0)*x13026);
IkReal x13032=((1.0)*x13027);
IkReal x13033=(sj5*x13026);
IkReal x13034=(sj5*x13027);
evalcond[0]=((((-1.0)*x13029*x13031))+((r21*x13033))+((r22*x13027)));
evalcond[1]=((((-1.0)*x13030*x13031))+((r11*x13033))+((r12*x13027)));
evalcond[2]=((((-1.0)*x13029*x13032))+(((-1.0)*r22*x13031))+((r21*x13034)));
evalcond[3]=((((-1.0)*x13028*x13032))+(((-1.0)*r02*x13031))+((r01*x13034)));
evalcond[4]=((-1.0)+(((-1.0)*x13028*x13031))+((r02*x13027))+((r01*x13033)));
evalcond[5]=((1.0)+(((-1.0)*x13030*x13032))+((r11*x13034))+(((-1.0)*r12*x13031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13035=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13035;
j4eval[1]=IKsign(x13035);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13036=((1.0)*cj5);
IkReal x13037=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13036)));
j4eval[0]=x13037;
j4eval[1]=((IKabs(((((-1.0)*r20*x13036))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13038=cj5*cj5;
IkReal x13039=(r11*r21);
IkReal x13040=((1.0)*r20);
IkReal x13041=(cj5*sj5);
IkReal x13042=((((-1.0)*x13039))+((x13038*x13039))+((r11*r20*x13041))+(((-1.0)*r12*r22))+((r10*r21*x13041))+(((-1.0)*r10*x13038*x13040)));
j4eval[0]=x13042;
j4eval[1]=((IKabs(((((-1.0)*cj5*x13040))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13043=cj5*cj5;
IkReal x13044=(r21*sj5);
IkReal x13045=(r11*r21);
IkReal x13046=((1.0)*r20);
CheckValue<IkReal> x13047 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13046))+x13044)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13047.valid){
continue;
}
CheckValue<IkReal> x13048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13043*x13046))+(((-1.0)*x13045))+(((-1.0)*r12*r22))+((x13043*x13045))+((cj5*r10*x13044))+((cj5*r11*r20*sj5)))),-1);
if(!x13048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13047.value)+(((1.5707963267949)*(x13048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13049=IKcos(j4);
IkReal x13050=IKsin(j4);
IkReal x13051=(cj5*r00);
IkReal x13052=(cj5*r20);
IkReal x13053=(cj5*r10);
IkReal x13054=((1.0)*x13049);
IkReal x13055=((1.0)*x13050);
IkReal x13056=(sj5*x13049);
IkReal x13057=(sj5*x13050);
evalcond[0]=(((r21*x13056))+((r22*x13050))+(((-1.0)*x13052*x13054)));
evalcond[1]=(((r12*x13050))+((r11*x13056))+(((-1.0)*x13053*x13054)));
evalcond[2]=(((r21*x13057))+(((-1.0)*r22*x13054))+(((-1.0)*x13052*x13055)));
evalcond[3]=((((-1.0)*r02*x13054))+(((-1.0)*x13051*x13055))+((r01*x13057)));
evalcond[4]=((1.0)+((r02*x13050))+(((-1.0)*x13051*x13054))+((r01*x13056)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13054))+((r11*x13057))+(((-1.0)*x13053*x13055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13058=((1.0)*cj5);
CheckValue<IkReal> x13059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13058)))),-1);
if(!x13059.valid){
continue;
}
CheckValue<IkReal> x13060 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13058))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13059.value)))+(x13060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13061=IKcos(j4);
IkReal x13062=IKsin(j4);
IkReal x13063=(cj5*r00);
IkReal x13064=(cj5*r20);
IkReal x13065=(cj5*r10);
IkReal x13066=((1.0)*x13061);
IkReal x13067=((1.0)*x13062);
IkReal x13068=(sj5*x13061);
IkReal x13069=(sj5*x13062);
evalcond[0]=(((r22*x13062))+((r21*x13068))+(((-1.0)*x13064*x13066)));
evalcond[1]=(((r12*x13062))+(((-1.0)*x13065*x13066))+((r11*x13068)));
evalcond[2]=(((r21*x13069))+(((-1.0)*r22*x13066))+(((-1.0)*x13064*x13067)));
evalcond[3]=((((-1.0)*x13063*x13067))+(((-1.0)*r02*x13066))+((r01*x13069)));
evalcond[4]=((1.0)+((r02*x13062))+(((-1.0)*x13063*x13066))+((r01*x13068)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13066))+(((-1.0)*x13065*x13067))+((r11*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13070=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13070.valid){
continue;
}
CheckValue<IkReal> x13071 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13070.value)))+(x13071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13072=IKcos(j4);
IkReal x13073=IKsin(j4);
IkReal x13074=(cj5*r00);
IkReal x13075=(cj5*r20);
IkReal x13076=(cj5*r10);
IkReal x13077=((1.0)*x13072);
IkReal x13078=((1.0)*x13073);
IkReal x13079=(sj5*x13072);
IkReal x13080=(sj5*x13073);
evalcond[0]=(((r21*x13079))+(((-1.0)*x13075*x13077))+((r22*x13073)));
evalcond[1]=((((-1.0)*x13076*x13077))+((r11*x13079))+((r12*x13073)));
evalcond[2]=((((-1.0)*x13075*x13078))+(((-1.0)*r22*x13077))+((r21*x13080)));
evalcond[3]=((((-1.0)*r02*x13077))+(((-1.0)*x13074*x13078))+((r01*x13080)));
evalcond[4]=((1.0)+((r01*x13079))+((r02*x13073))+(((-1.0)*x13074*x13077)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13077))+(((-1.0)*x13076*x13078))+((r11*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13081=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13081;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13082=((1.0)*cj5);
IkReal x13083=((((-1.0)*r21*x13082))+(((-1.0)*r20*sj5)));
j4eval[0]=x13083;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x13082)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13084=cj5*cj5;
IkReal x13085=(r11*r21);
IkReal x13086=((1.0)*r20);
IkReal x13087=(cj5*sj5);
IkReal x13088=((((-1.0)*r10*x13084*x13086))+(((-1.0)*r12*r22))+((r11*r20*x13087))+((x13084*x13085))+((r10*r21*x13087))+(((-1.0)*x13085)));
j4eval[0]=x13088;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13086))))));
j4eval[2]=IKsign(x13088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13089=cj5*cj5;
IkReal x13090=(r21*sj5);
IkReal x13091=(r11*r21);
IkReal x13092=((1.0)*r20);
CheckValue<IkReal> x13093 = IKatan2WithCheck(IkReal((x13090+(((-1.0)*cj5*x13092)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13093.valid){
continue;
}
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13090))+(((-1.0)*r12*r22))+((x13089*x13091))+(((-1.0)*r10*x13089*x13092))+(((-1.0)*x13091))+((cj5*r11*r20*sj5)))),-1);
if(!x13094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13093.value)+(((1.5707963267949)*(x13094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13095=IKcos(j4);
IkReal x13096=IKsin(j4);
IkReal x13097=(cj5*r00);
IkReal x13098=(cj5*r20);
IkReal x13099=(cj5*r10);
IkReal x13100=((1.0)*x13095);
IkReal x13101=((1.0)*x13096);
IkReal x13102=(sj5*x13095);
IkReal x13103=(sj5*x13096);
evalcond[0]=((((-1.0)*x13098*x13100))+((r22*x13096))+((r21*x13102)));
evalcond[1]=((((-1.0)*x13099*x13100))+((r12*x13096))+((r11*x13102)));
evalcond[2]=((((-1.0)*x13098*x13101))+((r21*x13103))+(((-1.0)*r22*x13100)));
evalcond[3]=(((r01*x13103))+(((-1.0)*x13097*x13101))+(((-1.0)*r02*x13100)));
evalcond[4]=((-1.0)+((r02*x13096))+((r01*x13102))+(((-1.0)*x13097*x13100)));
evalcond[5]=((1.0)+(((-1.0)*x13099*x13101))+(((-1.0)*r12*x13100))+((r11*x13103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13104=((1.0)*cj5);
CheckValue<IkReal> x13105 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13104)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13105.valid){
continue;
}
CheckValue<IkReal> x13106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13104))+(((-1.0)*r20*sj5)))),-1);
if(!x13106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13105.value)+(((1.5707963267949)*(x13106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13107=IKcos(j4);
IkReal x13108=IKsin(j4);
IkReal x13109=(cj5*r00);
IkReal x13110=(cj5*r20);
IkReal x13111=(cj5*r10);
IkReal x13112=((1.0)*x13107);
IkReal x13113=((1.0)*x13108);
IkReal x13114=(sj5*x13107);
IkReal x13115=(sj5*x13108);
evalcond[0]=(((r21*x13114))+((r22*x13108))+(((-1.0)*x13110*x13112)));
evalcond[1]=(((r12*x13108))+(((-1.0)*x13111*x13112))+((r11*x13114)));
evalcond[2]=(((r21*x13115))+(((-1.0)*x13110*x13113))+(((-1.0)*r22*x13112)));
evalcond[3]=((((-1.0)*x13109*x13113))+(((-1.0)*r02*x13112))+((r01*x13115)));
evalcond[4]=((-1.0)+(((-1.0)*x13109*x13112))+((r02*x13108))+((r01*x13114)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13112))+(((-1.0)*x13111*x13113))+((r11*x13115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13116 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13116.valid){
continue;
}
CheckValue<IkReal> x13117=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13116.value)+(((1.5707963267949)*(x13117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13118=IKcos(j4);
IkReal x13119=IKsin(j4);
IkReal x13120=(cj5*r00);
IkReal x13121=(cj5*r20);
IkReal x13122=(cj5*r10);
IkReal x13123=((1.0)*x13118);
IkReal x13124=((1.0)*x13119);
IkReal x13125=(sj5*x13118);
IkReal x13126=(sj5*x13119);
evalcond[0]=(((r22*x13119))+(((-1.0)*x13121*x13123))+((r21*x13125)));
evalcond[1]=(((r12*x13119))+((r11*x13125))+(((-1.0)*x13122*x13123)));
evalcond[2]=((((-1.0)*x13121*x13124))+(((-1.0)*r22*x13123))+((r21*x13126)));
evalcond[3]=((((-1.0)*x13120*x13124))+(((-1.0)*r02*x13123))+((r01*x13126)));
evalcond[4]=((-1.0)+(((-1.0)*x13120*x13123))+((r02*x13119))+((r01*x13125)));
evalcond[5]=((1.0)+((r11*x13126))+(((-1.0)*x13122*x13124))+(((-1.0)*r12*x13123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13127=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13127);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13127);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13128=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13128);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13128);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13129=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13129)));
j4eval[1]=((((-1.0)*r00*x13129))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13130=((1.0)*cj5);
CheckValue<IkReal> x13131=IKPowWithIntegerCheck(((((-1.0)*r10*x13130))+((r11*sj5))),-1);
if(!x13131.valid){
continue;
}
CheckValue<IkReal> x13132=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13130))),-1);
if(!x13132.valid){
continue;
}
if( IKabs(((-1.0)*(x13131.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13132.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13131.value)))+IKsqr(((x13132.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13131.value)), ((x13132.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13133=IKsin(j4);
IkReal x13134=IKcos(j4);
IkReal x13135=((1.0)*cj5);
IkReal x13136=((1.0)*cj2);
IkReal x13137=(sj5*x13134);
IkReal x13138=(sj5*x13133);
evalcond[0]=((-1.0)*r22*x13134);
evalcond[1]=((((-1.0)*cj1*x13136))+((sj1*sj2))+((r22*x13133)));
evalcond[2]=(((r01*x13138))+(((-1.0)*r00*x13133*x13135)));
evalcond[3]=((((-1.0)*r10*x13134*x13135))+((r11*x13137)));
evalcond[4]=((1.0)+((r11*x13138))+(((-1.0)*r10*x13133*x13135)));
evalcond[5]=(((r01*x13137))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13136))+(((-1.0)*r00*x13134*x13135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13139=IKPowWithIntegerCheck(r22,-1);
if(!x13139.valid){
continue;
}
CheckValue<IkReal> x13140=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13140.valid){
continue;
}
if( IKabs(((x13139.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13140.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13139.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13140.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13139.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13140.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13141=IKsin(j4);
IkReal x13142=IKcos(j4);
IkReal x13143=((1.0)*cj5);
IkReal x13144=((1.0)*cj2);
IkReal x13145=(sj5*x13142);
IkReal x13146=(sj5*x13141);
evalcond[0]=((-1.0)*r22*x13142);
evalcond[1]=(((r22*x13141))+((sj1*sj2))+(((-1.0)*cj1*x13144)));
evalcond[2]=(((r01*x13146))+(((-1.0)*r00*x13141*x13143)));
evalcond[3]=(((r11*x13145))+(((-1.0)*r10*x13142*x13143)));
evalcond[4]=((1.0)+((r11*x13146))+(((-1.0)*r10*x13141*x13143)));
evalcond[5]=((((-1.0)*r00*x13142*x13143))+(((-1.0)*sj1*x13144))+(((-1.0)*cj1*sj2))+((r01*x13145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13147=(sj1*sj2);
IkReal x13148=(cj5*r10);
IkReal x13149=(r11*sj5);
IkReal x13150=(cj1*cj2);
CheckValue<IkReal> x13151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13151.valid){
continue;
}
CheckValue<IkReal> x13152 = IKatan2WithCheck(IkReal((((x13147*x13149))+(((-1.0)*x13149*x13150))+((x13148*x13150))+(((-1.0)*x13147*x13148)))),IkReal((((r12*x13150))+(((-1.0)*r12*x13147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13151.value)))+(x13152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13153=IKcos(j4);
IkReal x13154=IKsin(j4);
IkReal x13155=(cj5*r00);
IkReal x13156=(cj5*r10);
IkReal x13157=(r21*sj5);
IkReal x13158=((1.0)*cj2);
IkReal x13159=(cj5*r20);
IkReal x13160=((1.0)*x13153);
IkReal x13161=((1.0)*x13154);
IkReal x13162=(sj5*x13154);
IkReal x13163=(sj5*x13153);
evalcond[0]=((((-1.0)*x13156*x13160))+((r11*x13163))+((r12*x13154)));
evalcond[1]=(((x13154*x13157))+(((-1.0)*r22*x13160))+(((-1.0)*x13159*x13161)));
evalcond[2]=(((r01*x13162))+(((-1.0)*x13155*x13161))+(((-1.0)*r02*x13160)));
evalcond[3]=((1.0)+(((-1.0)*x13156*x13161))+(((-1.0)*r12*x13160))+((r11*x13162)));
evalcond[4]=(((x13153*x13157))+((sj1*sj2))+(((-1.0)*cj1*x13158))+((r22*x13154))+(((-1.0)*x13159*x13160)));
evalcond[5]=((((-1.0)*sj1*x13158))+((r02*x13154))+((r01*x13163))+(((-1.0)*x13155*x13160))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13164=((1.0)*cj5);
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13164))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
CheckValue<IkReal> x13166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13164))+(((-1.0)*r00*sj5)))),-1);
if(!x13166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13165.value)+(((1.5707963267949)*(x13166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13167=IKcos(j4);
IkReal x13168=IKsin(j4);
IkReal x13169=(cj5*r00);
IkReal x13170=(cj5*r10);
IkReal x13171=(r21*sj5);
IkReal x13172=((1.0)*cj2);
IkReal x13173=(cj5*r20);
IkReal x13174=((1.0)*x13167);
IkReal x13175=((1.0)*x13168);
IkReal x13176=(sj5*x13168);
IkReal x13177=(sj5*x13167);
evalcond[0]=((((-1.0)*x13170*x13174))+((r11*x13177))+((r12*x13168)));
evalcond[1]=((((-1.0)*x13173*x13175))+(((-1.0)*r22*x13174))+((x13168*x13171)));
evalcond[2]=(((r01*x13176))+(((-1.0)*x13169*x13175))+(((-1.0)*r02*x13174)));
evalcond[3]=((1.0)+(((-1.0)*x13170*x13175))+(((-1.0)*r12*x13174))+((r11*x13176)));
evalcond[4]=((((-1.0)*cj1*x13172))+(((-1.0)*x13173*x13174))+((r22*x13168))+((sj1*sj2))+((x13167*x13171)));
evalcond[5]=(((r01*x13177))+(((-1.0)*x13169*x13174))+(((-1.0)*sj1*x13172))+(((-1.0)*cj1*sj2))+((r02*x13168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13178=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13178.valid){
continue;
}
CheckValue<IkReal> x13179 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13178.value)))+(x13179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13180=IKcos(j4);
IkReal x13181=IKsin(j4);
IkReal x13182=(cj5*r00);
IkReal x13183=(cj5*r10);
IkReal x13184=(r21*sj5);
IkReal x13185=((1.0)*cj2);
IkReal x13186=(cj5*r20);
IkReal x13187=((1.0)*x13180);
IkReal x13188=((1.0)*x13181);
IkReal x13189=(sj5*x13181);
IkReal x13190=(sj5*x13180);
evalcond[0]=(((r12*x13181))+(((-1.0)*x13183*x13187))+((r11*x13190)));
evalcond[1]=((((-1.0)*r22*x13187))+(((-1.0)*x13186*x13188))+((x13181*x13184)));
evalcond[2]=((((-1.0)*r02*x13187))+(((-1.0)*x13182*x13188))+((r01*x13189)));
evalcond[3]=((1.0)+(((-1.0)*x13183*x13188))+(((-1.0)*r12*x13187))+((r11*x13189)));
evalcond[4]=(((r22*x13181))+((sj1*sj2))+(((-1.0)*cj1*x13185))+((x13180*x13184))+(((-1.0)*x13186*x13187)));
evalcond[5]=(((r02*x13181))+(((-1.0)*x13182*x13187))+(((-1.0)*cj1*sj2))+((r01*x13190))+(((-1.0)*sj1*x13185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13191=((-1.0)*r00);
IkReal x13193 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13193)==0){
continue;
}
IkReal x13192=pow(x13193,-0.5);
CheckValue<IkReal> x13194 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13191),IKFAST_ATAN2_MAGTHRESH);
if(!x13194.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13194.value));
IkReal gconst19=(r01*x13192);
IkReal gconst20=(x13191*x13192);
CheckValue<IkReal> x13195 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13195.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13195.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13196=((-1.0)*r00);
IkReal x13197=x13192;
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13196),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
IkReal x13198=((-1.0)*(x13199.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13198;
IkReal gconst18=x13198;
IkReal gconst19=(r01*x13197);
IkReal gconst20=(x13196*x13197);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13200=((-1.0)*r00);
IkReal x13201=x13192;
CheckValue<IkReal> x13203 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13200),IKFAST_ATAN2_MAGTHRESH);
if(!x13203.valid){
continue;
}
IkReal x13202=((-1.0)*(x13203.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13202;
IkReal gconst18=x13202;
IkReal gconst19=(r01*x13201);
IkReal gconst20=(x13200*x13201);
CheckValue<IkReal> x13211=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13211.valid){
continue;
}
IkReal x13204=x13211.value;
IkReal x13205=(sj3*x13204);
IkReal x13206=(r11*x13205);
IkReal x13207=(r21*x13205);
IkReal x13208=(r20*x13205);
IkReal x13209=(r10*x13205);
IkReal x13210=(r00*r01*x13205);
j4eval[0]=IKsign((((r12*r22*sj3))+((r00*r01*r10*x13207))+((r10*x13208*(r00*r00)))+((r21*x13206*(r01*r01)))+((r00*r01*r20*x13206))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13212=gconst19*gconst19;
IkReal x13213=gconst20*gconst20;
IkReal x13214=(gconst20*sj3);
IkReal x13215=((1.0)*cj3);
IkReal x13216=(r10*sj3);
IkReal x13217=(gconst19*r21);
IkReal x13218=(r11*r20);
IkReal x13219=(cj3*gconst20);
IkReal x13220=((1.0)*r10*r20);
IkReal x13221=(r21*x13212);
CheckValue<IkReal> x13222=IKPowWithIntegerCheck(IKsign((((gconst19*x13218*x13219))+(((-1.0)*r10*r20*x13213*x13215))+(((-1.0)*r12*r22*x13215))+(((-1.0)*r11*x13215*x13221))+((r10*x13217*x13219)))),-1);
if(!x13222.valid){
continue;
}
CheckValue<IkReal> x13223 = IKatan2WithCheck(IkReal((((gconst19*r22*x13216))+((r11*r22*x13214)))),IkReal(((((-1.0)*sj3*x13213*x13218))+((r11*x13214*x13217))+(((-1.0)*gconst19*x13214*x13220))+((x13216*x13221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13222.value)))+(x13223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13224=IKsin(j4);
IkReal x13225=IKcos(j4);
IkReal x13226=(sj1*sj2);
IkReal x13227=(gconst20*sj3);
IkReal x13228=(gconst19*r21);
IkReal x13229=(gconst20*r10);
IkReal x13230=(cj3*gconst19);
IkReal x13231=(gconst19*sj3);
IkReal x13232=((1.0)*cj1);
IkReal x13233=(cj3*gconst20);
IkReal x13234=(cj2*sj1);
IkReal x13235=(cj2*x13232);
IkReal x13236=((1.0)*x13225);
IkReal x13237=((1.0)*x13224);
IkReal x13238=(cj3*x13224);
IkReal x13239=(gconst19*x13224);
evalcond[0]=((((-1.0)*gconst20*r20*x13237))+((x13224*x13228))+(((-1.0)*r22*x13236)));
evalcond[1]=(((r01*x13239))+(((-1.0)*r02*x13236))+(((-1.0)*gconst20*r00*x13237)));
evalcond[2]=((1.0)+(((-1.0)*x13229*x13237))+(((-1.0)*r12*x13236))+((r11*x13239)));
evalcond[3]=(((r11*x13225*x13230))+((r10*x13231))+((r11*x13227))+((r12*x13238))+(((-1.0)*cj3*x13229*x13236)));
evalcond[4]=(((r10*x13230))+((r11*x13233))+(((-1.0)*r12*sj3*x13237))+((r10*x13225*x13227))+(((-1.0)*r11*x13231*x13236)));
evalcond[5]=(((cj3*x13225*x13228))+((r20*x13231))+((r21*x13227))+((cj1*sj2))+((r22*x13238))+(((-1.0)*r20*x13233*x13236))+x13234);
evalcond[6]=((((-1.0)*r00*x13233*x13236))+((r02*x13238))+((r01*x13225*x13230))+((r01*x13227))+x13226+(((-1.0)*x13235))+((r00*x13231)));
evalcond[7]=(((r20*x13230))+(((-1.0)*r22*sj3*x13237))+((r20*x13225*x13227))+(((-1.0)*sj3*x13228*x13236))+((r21*x13233))+x13226+(((-1.0)*x13235)));
evalcond[8]=(((r01*x13233))+(((-1.0)*r01*x13231*x13236))+(((-1.0)*x13234))+((r00*x13225*x13227))+(((-1.0)*r02*sj3*x13237))+(((-1.0)*sj2*x13232))+((r00*x13230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13240=gconst19*gconst19;
IkReal x13241=gconst20*gconst20;
IkReal x13242=(r21*sj3);
IkReal x13243=(cj3*r11);
IkReal x13244=(gconst19*gconst20);
IkReal x13245=((1.0)*r10);
IkReal x13246=(cj3*r10);
IkReal x13247=(r20*x13241);
CheckValue<IkReal> x13248=IKPowWithIntegerCheck(IKsign((((r11*x13240*x13242))+((r12*r22*sj3))+((r10*sj3*x13247))+(((-1.0)*r11*r20*sj3*x13244))+(((-1.0)*x13242*x13244*x13245)))),-1);
if(!x13248.valid){
continue;
}
CheckValue<IkReal> x13249 = IKatan2WithCheck(IkReal((((gconst19*r22*x13246))+((gconst20*r22*x13243)))),IkReal((((r21*x13243*x13244))+(((-1.0)*cj3*r20*x13244*x13245))+(((-1.0)*x13243*x13247))+((r21*x13240*x13246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13248.value)))+(x13249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13250=IKsin(j4);
IkReal x13251=IKcos(j4);
IkReal x13252=(sj1*sj2);
IkReal x13253=(gconst20*sj3);
IkReal x13254=(gconst19*r21);
IkReal x13255=(gconst20*r10);
IkReal x13256=(cj3*gconst19);
IkReal x13257=(gconst19*sj3);
IkReal x13258=((1.0)*cj1);
IkReal x13259=(cj3*gconst20);
IkReal x13260=(cj2*sj1);
IkReal x13261=(cj2*x13258);
IkReal x13262=((1.0)*x13251);
IkReal x13263=((1.0)*x13250);
IkReal x13264=(cj3*x13250);
IkReal x13265=(gconst19*x13250);
evalcond[0]=(((x13250*x13254))+(((-1.0)*r22*x13262))+(((-1.0)*gconst20*r20*x13263)));
evalcond[1]=((((-1.0)*gconst20*r00*x13263))+((r01*x13265))+(((-1.0)*r02*x13262)));
evalcond[2]=((1.0)+((r11*x13265))+(((-1.0)*x13255*x13263))+(((-1.0)*r12*x13262)));
evalcond[3]=(((r11*x13251*x13256))+((r10*x13257))+((r12*x13264))+(((-1.0)*cj3*x13255*x13262))+((r11*x13253)));
evalcond[4]=(((r10*x13256))+((r11*x13259))+((r10*x13251*x13253))+(((-1.0)*r11*x13257*x13262))+(((-1.0)*r12*sj3*x13263)));
evalcond[5]=(((r21*x13253))+((cj1*sj2))+(((-1.0)*r20*x13259*x13262))+((cj3*x13251*x13254))+((r22*x13264))+x13260+((r20*x13257)));
evalcond[6]=((((-1.0)*x13261))+((r01*x13253))+((r00*x13257))+(((-1.0)*r00*x13259*x13262))+((r02*x13264))+((r01*x13251*x13256))+x13252);
evalcond[7]=(((r21*x13259))+(((-1.0)*x13261))+(((-1.0)*r22*sj3*x13263))+(((-1.0)*sj3*x13254*x13262))+((r20*x13251*x13253))+x13252+((r20*x13256)));
evalcond[8]=(((r00*x13251*x13253))+(((-1.0)*x13260))+(((-1.0)*r02*sj3*x13263))+((r01*x13259))+((r00*x13256))+(((-1.0)*r01*x13257*x13262))+(((-1.0)*sj2*x13258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
CheckValue<IkReal> x13267=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13266.value)+(((1.5707963267949)*(x13267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13268=IKsin(j4);
IkReal x13269=IKcos(j4);
IkReal x13270=(sj1*sj2);
IkReal x13271=(gconst20*sj3);
IkReal x13272=(gconst19*r21);
IkReal x13273=(gconst20*r10);
IkReal x13274=(cj3*gconst19);
IkReal x13275=(gconst19*sj3);
IkReal x13276=((1.0)*cj1);
IkReal x13277=(cj3*gconst20);
IkReal x13278=(cj2*sj1);
IkReal x13279=(cj2*x13276);
IkReal x13280=((1.0)*x13269);
IkReal x13281=((1.0)*x13268);
IkReal x13282=(cj3*x13268);
IkReal x13283=(gconst19*x13268);
evalcond[0]=((((-1.0)*r22*x13280))+(((-1.0)*gconst20*r20*x13281))+((x13268*x13272)));
evalcond[1]=((((-1.0)*gconst20*r00*x13281))+(((-1.0)*r02*x13280))+((r01*x13283)));
evalcond[2]=((1.0)+(((-1.0)*x13273*x13281))+((r11*x13283))+(((-1.0)*r12*x13280)));
evalcond[3]=((((-1.0)*cj3*x13273*x13280))+((r12*x13282))+((r11*x13271))+((r11*x13269*x13274))+((r10*x13275)));
evalcond[4]=(((r11*x13277))+((r10*x13274))+(((-1.0)*r11*x13275*x13280))+((r10*x13269*x13271))+(((-1.0)*r12*sj3*x13281)));
evalcond[5]=(((cj3*x13269*x13272))+((r21*x13271))+((r20*x13275))+((cj1*sj2))+((r22*x13282))+x13278+(((-1.0)*r20*x13277*x13280)));
evalcond[6]=((((-1.0)*x13279))+((r01*x13271))+((r00*x13275))+((r02*x13282))+(((-1.0)*r00*x13277*x13280))+x13270+((r01*x13269*x13274)));
evalcond[7]=((((-1.0)*x13279))+((r21*x13277))+((r20*x13274))+(((-1.0)*sj3*x13272*x13280))+(((-1.0)*r22*sj3*x13281))+x13270+((r20*x13269*x13271)));
evalcond[8]=(((r00*x13269*x13271))+(((-1.0)*x13278))+((r01*x13277))+(((-1.0)*sj2*x13276))+((r00*x13274))+(((-1.0)*r01*x13275*x13280))+(((-1.0)*r02*sj3*x13281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13284=((-1.0)*r01);
IkReal x13286 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13286)==0){
continue;
}
IkReal x13285=pow(x13286,-0.5);
CheckValue<IkReal> x13287 = IKatan2WithCheck(IkReal(x13284),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13287.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13287.value))));
IkReal gconst22=(x13284*x13285);
IkReal gconst23=((1.0)*r00*x13285);
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13288.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13289=((-1.0)*r01);
CheckValue<IkReal> x13292 = IKatan2WithCheck(IkReal(x13289),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13292.valid){
continue;
}
IkReal x13290=((1.0)*(x13292.value));
IkReal x13291=x13285;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13290)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13290)));
IkReal gconst22=(x13289*x13291);
IkReal gconst23=((1.0)*r00*x13291);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13293=((-1.0)*r01);
CheckValue<IkReal> x13296 = IKatan2WithCheck(IkReal(x13293),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13296.valid){
continue;
}
IkReal x13294=((1.0)*(x13296.value));
IkReal x13295=x13285;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13294)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13294)));
IkReal gconst22=(x13293*x13295);
IkReal gconst23=((1.0)*r00*x13295);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13297=gconst22*gconst22;
IkReal x13298=gconst23*gconst23;
IkReal x13299=(r21*sj3);
IkReal x13300=((1.0)*cj3);
IkReal x13301=(gconst23*r11);
IkReal x13302=(r22*sj3);
IkReal x13303=(gconst22*r10);
IkReal x13304=((1.0)*r20*sj3);
CheckValue<IkReal> x13305 = IKatan2WithCheck(IkReal((((x13301*x13302))+((x13302*x13303)))),IkReal(((((-1.0)*r11*x13298*x13304))+((r10*x13297*x13299))+(((-1.0)*gconst23*x13303*x13304))+((gconst22*x13299*x13301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13305.valid){
continue;
}
CheckValue<IkReal> x13306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x13297*x13300))+(((-1.0)*r10*r20*x13298*x13300))+((cj3*gconst23*r21*x13303))+((cj3*gconst22*r20*x13301))+(((-1.0)*r12*r22*x13300)))),-1);
if(!x13306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13305.value)+(((1.5707963267949)*(x13306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13307=IKsin(j4);
IkReal x13308=IKcos(j4);
IkReal x13309=(sj1*sj2);
IkReal x13310=(gconst23*sj3);
IkReal x13311=(gconst22*sj3);
IkReal x13312=(cj2*sj1);
IkReal x13313=((1.0)*cj1);
IkReal x13314=(cj3*gconst23);
IkReal x13315=(cj3*gconst22);
IkReal x13316=(cj2*x13313);
IkReal x13317=((1.0)*x13308);
IkReal x13318=(cj3*x13307);
IkReal x13319=(gconst22*x13307);
IkReal x13320=((1.0)*sj3*x13307);
IkReal x13321=(x13308*x13315);
IkReal x13322=((1.0)*gconst23*x13307);
evalcond[0]=((((-1.0)*r20*x13322))+((r21*x13319))+(((-1.0)*r22*x13317)));
evalcond[1]=(((r01*x13319))+(((-1.0)*r00*x13322))+(((-1.0)*r02*x13317)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13322))+((r11*x13319))+(((-1.0)*r12*x13317)));
evalcond[3]=(((r11*x13310))+((r10*x13311))+(((-1.0)*r10*x13314*x13317))+((r11*x13321))+((r12*x13318)));
evalcond[4]=(((r10*x13308*x13310))+(((-1.0)*r12*x13320))+((r11*x13314))+((r10*x13315))+(((-1.0)*r11*x13311*x13317)));
evalcond[5]=(((r20*x13311))+((cj1*sj2))+((r22*x13318))+((r21*x13321))+(((-1.0)*r20*x13314*x13317))+((r21*x13310))+x13312);
evalcond[6]=(((r01*x13310))+((r00*x13311))+((r01*x13321))+(((-1.0)*r00*x13314*x13317))+(((-1.0)*x13316))+x13309+((r02*x13318)));
evalcond[7]=((((-1.0)*r22*x13320))+((r20*x13315))+(((-1.0)*r21*x13311*x13317))+((r20*x13308*x13310))+(((-1.0)*x13316))+((r21*x13314))+x13309);
evalcond[8]=((((-1.0)*r02*x13320))+(((-1.0)*r01*x13311*x13317))+(((-1.0)*sj2*x13313))+((r01*x13314))+((r00*x13315))+((r00*x13308*x13310))+(((-1.0)*x13312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13323=((1.0)*gconst23);
CheckValue<IkReal> x13324=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13323)))),-1);
if(!x13324.valid){
continue;
}
CheckValue<IkReal> x13325 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13324.value)))+(x13325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13326=IKsin(j4);
IkReal x13327=IKcos(j4);
IkReal x13328=(sj1*sj2);
IkReal x13329=(gconst23*sj3);
IkReal x13330=(gconst22*sj3);
IkReal x13331=(cj2*sj1);
IkReal x13332=((1.0)*cj1);
IkReal x13333=(cj3*gconst23);
IkReal x13334=(cj3*gconst22);
IkReal x13335=(cj2*x13332);
IkReal x13336=((1.0)*x13327);
IkReal x13337=(cj3*x13326);
IkReal x13338=(gconst22*x13326);
IkReal x13339=((1.0)*sj3*x13326);
IkReal x13340=(x13327*x13334);
IkReal x13341=((1.0)*gconst23*x13326);
evalcond[0]=((((-1.0)*r22*x13336))+((r21*x13338))+(((-1.0)*r20*x13341)));
evalcond[1]=(((r01*x13338))+(((-1.0)*r00*x13341))+(((-1.0)*r02*x13336)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13336))+(((-1.0)*r10*x13341))+((r11*x13338)));
evalcond[3]=(((r10*x13330))+(((-1.0)*r10*x13333*x13336))+((r11*x13340))+((r11*x13329))+((r12*x13337)));
evalcond[4]=(((r10*x13334))+(((-1.0)*r11*x13330*x13336))+(((-1.0)*r12*x13339))+((r10*x13327*x13329))+((r11*x13333)));
evalcond[5]=(((r22*x13337))+((cj1*sj2))+((r21*x13340))+((r20*x13330))+((r21*x13329))+(((-1.0)*r20*x13333*x13336))+x13331);
evalcond[6]=((((-1.0)*x13335))+((r02*x13337))+((r00*x13330))+((r01*x13329))+(((-1.0)*r00*x13333*x13336))+((r01*x13340))+x13328);
evalcond[7]=((((-1.0)*x13335))+((r20*x13327*x13329))+(((-1.0)*r22*x13339))+((r20*x13334))+((r21*x13333))+x13328+(((-1.0)*r21*x13330*x13336)));
evalcond[8]=((((-1.0)*r01*x13330*x13336))+(((-1.0)*sj2*x13332))+(((-1.0)*x13331))+((r00*x13327*x13329))+((r00*x13334))+((r01*x13333))+(((-1.0)*r02*x13339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13342=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13342.valid){
continue;
}
CheckValue<IkReal> x13343 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13342.value)))+(x13343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13344=IKsin(j4);
IkReal x13345=IKcos(j4);
IkReal x13346=(sj1*sj2);
IkReal x13347=(gconst23*sj3);
IkReal x13348=(gconst22*sj3);
IkReal x13349=(cj2*sj1);
IkReal x13350=((1.0)*cj1);
IkReal x13351=(cj3*gconst23);
IkReal x13352=(cj3*gconst22);
IkReal x13353=(cj2*x13350);
IkReal x13354=((1.0)*x13345);
IkReal x13355=(cj3*x13344);
IkReal x13356=(gconst22*x13344);
IkReal x13357=((1.0)*sj3*x13344);
IkReal x13358=(x13345*x13352);
IkReal x13359=((1.0)*gconst23*x13344);
evalcond[0]=((((-1.0)*r22*x13354))+((r21*x13356))+(((-1.0)*r20*x13359)));
evalcond[1]=((((-1.0)*r02*x13354))+(((-1.0)*r00*x13359))+((r01*x13356)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13354))+((r11*x13356))+(((-1.0)*r10*x13359)));
evalcond[3]=(((r10*x13348))+((r11*x13347))+(((-1.0)*r10*x13351*x13354))+((r11*x13358))+((r12*x13355)));
evalcond[4]=((((-1.0)*r12*x13357))+((r10*x13345*x13347))+((r10*x13352))+(((-1.0)*r11*x13348*x13354))+((r11*x13351)));
evalcond[5]=(((r22*x13355))+(((-1.0)*r20*x13351*x13354))+((cj1*sj2))+((r21*x13347))+((r21*x13358))+((r20*x13348))+x13349);
evalcond[6]=(((r02*x13355))+((r01*x13358))+((r00*x13348))+((r01*x13347))+(((-1.0)*x13353))+x13346+(((-1.0)*r00*x13351*x13354)));
evalcond[7]=((((-1.0)*r22*x13357))+((r20*x13352))+(((-1.0)*r21*x13348*x13354))+((r21*x13351))+(((-1.0)*x13353))+((r20*x13345*x13347))+x13346);
evalcond[8]=((((-1.0)*r02*x13357))+(((-1.0)*r01*x13348*x13354))+((r00*x13345*x13347))+(((-1.0)*x13349))+((r01*x13351))+((r00*x13352))+(((-1.0)*sj2*x13350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13361 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13361)==0){
continue;
}
IkReal x13360=pow(x13361,-0.5);
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13362.value));
IkReal gconst25=((-1.0)*r21*x13360);
IkReal gconst26=(r20*x13360);
CheckValue<IkReal> x13363 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13363.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13363.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13366 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13366.valid){
continue;
}
IkReal x13364=((-1.0)*(x13366.value));
IkReal x13365=x13360;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13364;
IkReal gconst24=x13364;
IkReal gconst25=((-1.0)*r21*x13365);
IkReal gconst26=(r20*x13365);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13369 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13369.valid){
continue;
}
IkReal x13367=((-1.0)*(x13369.value));
IkReal x13368=x13360;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13367;
IkReal gconst24=x13367;
IkReal gconst25=((-1.0)*r21*x13368);
IkReal gconst26=(r20*x13368);
CheckValue<IkReal> x13377=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13377.valid){
continue;
}
IkReal x13370=x13377.value;
IkReal x13371=(sj3*x13370);
IkReal x13372=(r11*x13371);
IkReal x13373=(r00*x13371);
IkReal x13374=(r01*x13371);
IkReal x13375=(r10*x13371);
IkReal x13376=(r20*r21*x13371);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13373*(r20*r20)))+((r00*r20*r21*x13372))+((r10*r20*r21*x13374))+((r01*x13372*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13378=gconst25*gconst25;
IkReal x13379=gconst26*gconst26;
IkReal x13380=(r00*r11);
IkReal x13381=(r01*r10);
IkReal x13382=(r02*sj3);
IkReal x13383=(gconst25*r10);
IkReal x13384=(gconst26*r11);
IkReal x13385=((1.0)*sj3);
IkReal x13386=((1.0)*cj3);
IkReal x13387=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13388 = IKatan2WithCheck(IkReal((((x13382*x13383))+((x13382*x13384)))),IkReal((((sj3*x13378*x13381))+(((-1.0)*gconst26*r00*x13383*x13385))+((gconst25*r01*sj3*x13384))+(((-1.0)*x13379*x13380*x13385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13388.valid){
continue;
}
CheckValue<IkReal> x13389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x13379*x13386))+(((-1.0)*r02*r12*x13386))+((x13381*x13387))+((x13380*x13387))+(((-1.0)*r01*r11*x13378*x13386)))),-1);
if(!x13389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13388.value)+(((1.5707963267949)*(x13389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13390=IKsin(j4);
IkReal x13391=IKcos(j4);
IkReal x13392=(sj1*sj2);
IkReal x13393=(gconst26*sj3);
IkReal x13394=(gconst25*sj3);
IkReal x13395=(gconst26*r10);
IkReal x13396=(gconst25*r11);
IkReal x13397=(cj3*gconst25);
IkReal x13398=((1.0)*cj2);
IkReal x13399=(cj1*sj2);
IkReal x13400=(gconst26*r00);
IkReal x13401=(gconst26*r20);
IkReal x13402=(cj3*gconst26);
IkReal x13403=(cj1*x13398);
IkReal x13404=((1.0)*x13391);
IkReal x13405=((1.0)*x13390);
IkReal x13406=(cj3*x13390);
IkReal x13407=(gconst25*x13390);
evalcond[0]=(((r21*x13407))+(((-1.0)*x13401*x13405))+(((-1.0)*r22*x13404)));
evalcond[1]=((((-1.0)*r02*x13404))+((r01*x13407))+(((-1.0)*x13400*x13405)));
evalcond[2]=((1.0)+(((-1.0)*x13395*x13405))+(((-1.0)*r12*x13404))+((x13390*x13396)));
evalcond[3]=(((r11*x13393))+((r10*x13394))+(((-1.0)*cj3*x13395*x13404))+((cj3*x13391*x13396))+((r12*x13406)));
evalcond[4]=(((r10*x13397))+((r11*x13402))+(((-1.0)*r11*x13394*x13404))+(((-1.0)*r12*sj3*x13405))+((r10*x13391*x13393)));
evalcond[5]=(((cj2*sj1))+((r21*x13393))+((r21*x13391*x13397))+((r20*x13394))+(((-1.0)*cj3*x13401*x13404))+((r22*x13406))+x13399);
evalcond[6]=(((r01*x13391*x13397))+((r00*x13394))+(((-1.0)*x13403))+((r01*x13393))+((r02*x13406))+(((-1.0)*cj3*x13400*x13404))+x13392);
evalcond[7]=((((-1.0)*r22*sj3*x13405))+((r20*x13397))+((r21*x13402))+((r20*x13391*x13393))+(((-1.0)*x13403))+x13392+(((-1.0)*r21*x13394*x13404)));
evalcond[8]=(((r01*x13402))+(((-1.0)*x13399))+((r00*x13391*x13393))+(((-1.0)*r02*sj3*x13405))+((r00*x13397))+(((-1.0)*sj1*x13398))+(((-1.0)*r01*x13394*x13404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13408=gconst26*gconst26;
IkReal x13409=gconst25*gconst25;
IkReal x13410=(r01*r10);
IkReal x13411=(cj3*r11);
IkReal x13412=(gconst25*gconst26);
IkReal x13413=(cj3*r10);
IkReal x13414=(r00*x13408);
IkReal x13415=((1.0)*sj3*x13412);
CheckValue<IkReal> x13416 = IKatan2WithCheck(IkReal((((gconst25*r02*x13413))+((gconst26*r02*x13411)))),IkReal(((((-1.0)*r00*x13412*x13413))+(((-1.0)*x13411*x13414))+((r01*x13411*x13412))+((cj3*x13409*x13410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13416.valid){
continue;
}
CheckValue<IkReal> x13417=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13414))+((r02*r12*sj3))+(((-1.0)*x13410*x13415))+((r01*r11*sj3*x13409))+(((-1.0)*r00*r11*x13415)))),-1);
if(!x13417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13416.value)+(((1.5707963267949)*(x13417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13418=IKsin(j4);
IkReal x13419=IKcos(j4);
IkReal x13420=(sj1*sj2);
IkReal x13421=(gconst26*sj3);
IkReal x13422=(gconst25*sj3);
IkReal x13423=(gconst26*r10);
IkReal x13424=(gconst25*r11);
IkReal x13425=(cj3*gconst25);
IkReal x13426=((1.0)*cj2);
IkReal x13427=(cj1*sj2);
IkReal x13428=(gconst26*r00);
IkReal x13429=(gconst26*r20);
IkReal x13430=(cj3*gconst26);
IkReal x13431=(cj1*x13426);
IkReal x13432=((1.0)*x13419);
IkReal x13433=((1.0)*x13418);
IkReal x13434=(cj3*x13418);
IkReal x13435=(gconst25*x13418);
evalcond[0]=((((-1.0)*r22*x13432))+(((-1.0)*x13429*x13433))+((r21*x13435)));
evalcond[1]=(((r01*x13435))+(((-1.0)*x13428*x13433))+(((-1.0)*r02*x13432)));
evalcond[2]=((1.0)+(((-1.0)*x13423*x13433))+(((-1.0)*r12*x13432))+((x13418*x13424)));
evalcond[3]=(((cj3*x13419*x13424))+((r11*x13421))+((r12*x13434))+(((-1.0)*cj3*x13423*x13432))+((r10*x13422)));
evalcond[4]=(((r11*x13430))+(((-1.0)*r11*x13422*x13432))+(((-1.0)*r12*sj3*x13433))+((r10*x13419*x13421))+((r10*x13425)));
evalcond[5]=(x13427+((cj2*sj1))+((r22*x13434))+((r21*x13419*x13425))+((r21*x13421))+(((-1.0)*cj3*x13429*x13432))+((r20*x13422)));
evalcond[6]=(((r01*x13419*x13425))+x13420+(((-1.0)*x13431))+((r02*x13434))+((r00*x13422))+(((-1.0)*cj3*x13428*x13432))+((r01*x13421)));
evalcond[7]=(x13420+(((-1.0)*x13431))+(((-1.0)*r21*x13422*x13432))+((r21*x13430))+(((-1.0)*r22*sj3*x13433))+((r20*x13419*x13421))+((r20*x13425)));
evalcond[8]=(((r01*x13430))+(((-1.0)*x13427))+(((-1.0)*sj1*x13426))+(((-1.0)*r01*x13422*x13432))+(((-1.0)*r02*sj3*x13433))+((r00*x13419*x13421))+((r00*x13425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13436=((1.0)*gconst26);
CheckValue<IkReal> x13437 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13436))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13437.valid){
continue;
}
CheckValue<IkReal> x13438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13436))+(((-1.0)*gconst25*r00)))),-1);
if(!x13438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13437.value)+(((1.5707963267949)*(x13438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13439=IKsin(j4);
IkReal x13440=IKcos(j4);
IkReal x13441=(sj1*sj2);
IkReal x13442=(gconst26*sj3);
IkReal x13443=(gconst25*sj3);
IkReal x13444=(gconst26*r10);
IkReal x13445=(gconst25*r11);
IkReal x13446=(cj3*gconst25);
IkReal x13447=((1.0)*cj2);
IkReal x13448=(cj1*sj2);
IkReal x13449=(gconst26*r00);
IkReal x13450=(gconst26*r20);
IkReal x13451=(cj3*gconst26);
IkReal x13452=(cj1*x13447);
IkReal x13453=((1.0)*x13440);
IkReal x13454=((1.0)*x13439);
IkReal x13455=(cj3*x13439);
IkReal x13456=(gconst25*x13439);
evalcond[0]=((((-1.0)*r22*x13453))+((r21*x13456))+(((-1.0)*x13450*x13454)));
evalcond[1]=((((-1.0)*x13449*x13454))+(((-1.0)*r02*x13453))+((r01*x13456)));
evalcond[2]=((1.0)+((x13439*x13445))+(((-1.0)*r12*x13453))+(((-1.0)*x13444*x13454)));
evalcond[3]=((((-1.0)*cj3*x13444*x13453))+((r12*x13455))+((r10*x13443))+((r11*x13442))+((cj3*x13440*x13445)));
evalcond[4]=(((r10*x13440*x13442))+((r11*x13451))+(((-1.0)*r11*x13443*x13453))+(((-1.0)*r12*sj3*x13454))+((r10*x13446)));
evalcond[5]=(x13448+((cj2*sj1))+(((-1.0)*cj3*x13450*x13453))+((r20*x13443))+((r22*x13455))+((r21*x13440*x13446))+((r21*x13442)));
evalcond[6]=(x13441+(((-1.0)*cj3*x13449*x13453))+((r01*x13440*x13446))+(((-1.0)*x13452))+((r00*x13443))+((r01*x13442))+((r02*x13455)));
evalcond[7]=(x13441+((r21*x13451))+(((-1.0)*x13452))+(((-1.0)*r21*x13443*x13453))+((r20*x13446))+((r20*x13440*x13442))+(((-1.0)*r22*sj3*x13454)));
evalcond[8]=((((-1.0)*r01*x13443*x13453))+(((-1.0)*r02*sj3*x13454))+((r00*x13446))+((r00*x13440*x13442))+(((-1.0)*x13448))+((r01*x13451))+(((-1.0)*sj1*x13447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13458 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13458)==0){
continue;
}
IkReal x13457=pow(x13458,-0.5);
CheckValue<IkReal> x13459 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13459.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13459.value))));
IkReal gconst28=((1.0)*r21*x13457);
IkReal gconst29=((-1.0)*r20*x13457);
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13460.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13463 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13463.valid){
continue;
}
IkReal x13461=((1.0)*(x13463.value));
IkReal x13462=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13461)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13461)));
IkReal gconst28=((1.0)*r21*x13462);
IkReal gconst29=((-1.0)*r20*x13462);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13466 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13466.valid){
continue;
}
IkReal x13464=((1.0)*(x13466.value));
IkReal x13465=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13464)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13464)));
IkReal gconst28=((1.0)*r21*x13465);
IkReal gconst29=((-1.0)*r20*x13465);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13469 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13469.valid){
continue;
}
IkReal x13467=((1.0)*(x13469.value));
IkReal x13468=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13467)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13467)));
IkReal gconst28=((1.0)*r21*x13468);
IkReal gconst29=((-1.0)*r20*x13468);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
IkReal x13470=((1.0)*(x13472.value));
IkReal x13471=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13470)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13470)));
IkReal gconst28=((1.0)*r21*x13471);
IkReal gconst29=((-1.0)*r20*x13471);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13475 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13475.valid){
continue;
}
IkReal x13473=((1.0)*(x13475.value));
IkReal x13474=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13473)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13473)));
IkReal gconst28=((1.0)*r21*x13474);
IkReal gconst29=((-1.0)*r20*x13474);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13478 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13478.valid){
continue;
}
IkReal x13476=((1.0)*(x13478.value));
IkReal x13477=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13476)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13476)));
IkReal gconst28=((1.0)*r21*x13477);
IkReal gconst29=((-1.0)*r20*x13477);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13479=(gconst29*r10);
IkReal x13480=(gconst28*r11);
CheckValue<IkReal> x13481 = IKatan2WithCheck(IkReal((x13479+(((-1.0)*x13480)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13481.valid){
continue;
}
CheckValue<IkReal> x13482=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13479*x13480))+(x13479*x13479)+(x13480*x13480))),-1);
if(!x13482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13481.value)+(((1.5707963267949)*(x13482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13483=IKsin(j4);
IkReal x13484=IKcos(j4);
IkReal x13485=(gconst28*r11);
IkReal x13486=((1.0)*cj2);
IkReal x13487=((1.0)*x13484);
IkReal x13488=(gconst29*x13484);
IkReal x13489=(gconst28*x13483);
IkReal x13490=((1.0)*x13483);
IkReal x13491=(gconst29*x13490);
evalcond[0]=((((-1.0)*r20*x13491))+(((-1.0)*r22*x13487))+((r21*x13489)));
evalcond[1]=((((-1.0)*r00*x13491))+(((-1.0)*r02*x13487))+((r01*x13489)));
evalcond[2]=((((-1.0)*r12*x13490))+(((-1.0)*x13485*x13487))+((r10*x13488)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13487))+(((-1.0)*r10*x13491))+((x13483*x13485)));
evalcond[4]=((((-1.0)*r22*x13490))+((sj1*sj2))+((r20*x13488))+(((-1.0)*cj1*x13486))+(((-1.0)*gconst28*r21*x13487)));
evalcond[5]=((((-1.0)*sj1*x13486))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13490))+((r00*x13488))+(((-1.0)*gconst28*r01*x13487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13492=((1.0)*gconst29);
CheckValue<IkReal> x13493 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13492))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13493.valid){
continue;
}
CheckValue<IkReal> x13494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13492))+(((-1.0)*gconst28*r00)))),-1);
if(!x13494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13493.value)+(((1.5707963267949)*(x13494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13495=IKsin(j4);
IkReal x13496=IKcos(j4);
IkReal x13497=(gconst28*r11);
IkReal x13498=((1.0)*cj2);
IkReal x13499=((1.0)*x13496);
IkReal x13500=(gconst29*x13496);
IkReal x13501=(gconst28*x13495);
IkReal x13502=((1.0)*x13495);
IkReal x13503=(gconst29*x13502);
evalcond[0]=((((-1.0)*r22*x13499))+(((-1.0)*r20*x13503))+((r21*x13501)));
evalcond[1]=((((-1.0)*r02*x13499))+(((-1.0)*r00*x13503))+((r01*x13501)));
evalcond[2]=(((r10*x13500))+(((-1.0)*r12*x13502))+(((-1.0)*x13497*x13499)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13499))+(((-1.0)*r10*x13503))+((x13495*x13497)));
evalcond[4]=(((r20*x13500))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13499))+(((-1.0)*cj1*x13498))+(((-1.0)*r22*x13502)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13499))+(((-1.0)*r02*x13502))+(((-1.0)*sj1*x13498))+((r00*x13500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13504=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13504.valid){
continue;
}
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13504.value)))+(x13505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13506=IKsin(j4);
IkReal x13507=IKcos(j4);
IkReal x13508=(gconst28*r11);
IkReal x13509=((1.0)*cj2);
IkReal x13510=((1.0)*x13507);
IkReal x13511=(gconst29*x13507);
IkReal x13512=(gconst28*x13506);
IkReal x13513=((1.0)*x13506);
IkReal x13514=(gconst29*x13513);
evalcond[0]=(((r21*x13512))+(((-1.0)*r22*x13510))+(((-1.0)*r20*x13514)));
evalcond[1]=((((-1.0)*r00*x13514))+((r01*x13512))+(((-1.0)*r02*x13510)));
evalcond[2]=((((-1.0)*x13508*x13510))+(((-1.0)*r12*x13513))+((r10*x13511)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13510))+(((-1.0)*r10*x13514))+((x13506*x13508)));
evalcond[4]=((((-1.0)*r22*x13513))+((r20*x13511))+((sj1*sj2))+(((-1.0)*cj1*x13509))+(((-1.0)*gconst28*r21*x13510)));
evalcond[5]=((((-1.0)*sj1*x13509))+(((-1.0)*gconst28*r01*x13510))+(((-1.0)*cj1*sj2))+((r00*x13511))+(((-1.0)*r02*x13513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13517.valid){
continue;
}
IkReal x13515=((1.0)*(x13517.value));
IkReal x13516=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13515)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13515)));
IkReal gconst28=((1.0)*r21*x13516);
IkReal gconst29=((-1.0)*r20*x13516);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13520 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13520.valid){
continue;
}
IkReal x13518=((1.0)*(x13520.value));
IkReal x13519=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13518)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13518)));
IkReal gconst28=((1.0)*r21*x13519);
IkReal gconst29=((-1.0)*r20*x13519);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13523 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13523.valid){
continue;
}
IkReal x13521=((1.0)*(x13523.value));
IkReal x13522=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13521)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13521)));
IkReal gconst28=((1.0)*r21*x13522);
IkReal gconst29=((-1.0)*r20*x13522);
IkReal x13524=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13528=IKPowWithIntegerCheck(x13524,-1);
if(!x13528.valid){
continue;
}
IkReal x13525=x13528.value;
IkReal x13526=((1.0)*x13525);
IkReal x13527=((((-2.0)*r10*r11*r20*r21*x13525))+(((-1.0)*x13526*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13526*(r10*r10)*(r20*r20))));
j4eval[0]=x13527;
j4eval[1]=r12;
j4eval[2]=x13524;
j4eval[3]=IKsign(x13527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13529=(gconst28*r11);
IkReal x13530=(gconst29*r10);
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal((x13529+(((-1.0)*x13530)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
CheckValue<IkReal> x13532=IKPowWithIntegerCheck(IKsign(((((2.0)*x13529*x13530))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13529*x13529)))+(((-1.0)*(x13530*x13530))))),-1);
if(!x13532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13531.value)+(((1.5707963267949)*(x13532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13533=IKcos(j4);
IkReal x13534=IKsin(j4);
IkReal x13535=(gconst29*r10);
IkReal x13536=(gconst29*r20);
IkReal x13537=(gconst28*r21);
IkReal x13538=((1.0)*cj2);
IkReal x13539=(gconst29*r00);
IkReal x13540=((1.0)*x13533);
IkReal x13541=((1.0)*x13534);
IkReal x13542=(gconst28*x13533);
IkReal x13543=(gconst28*x13534);
evalcond[0]=(((r11*x13542))+((r12*x13534))+(((-1.0)*x13535*x13540)));
evalcond[1]=((((-1.0)*x13536*x13541))+((x13534*x13537))+(((-1.0)*r22*x13540)));
evalcond[2]=((((-1.0)*x13539*x13541))+((r01*x13543))+(((-1.0)*r02*x13540)));
evalcond[3]=((1.0)+((r11*x13543))+(((-1.0)*r12*x13540))+(((-1.0)*x13535*x13541)));
evalcond[4]=((((-1.0)*x13536*x13540))+((x13533*x13537))+(((-1.0)*cj1*x13538))+((sj1*sj2))+((r22*x13534)));
evalcond[5]=((((-1.0)*x13539*x13540))+(((-1.0)*sj1*x13538))+((r01*x13542))+((r02*x13534))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13544=((1.0)*gconst29);
CheckValue<IkReal> x13545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13544))+(((-1.0)*gconst28*r00)))),-1);
if(!x13545.valid){
continue;
}
CheckValue<IkReal> x13546 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13545.value)))+(x13546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13547=IKcos(j4);
IkReal x13548=IKsin(j4);
IkReal x13549=(gconst29*r10);
IkReal x13550=(gconst29*r20);
IkReal x13551=(gconst28*r21);
IkReal x13552=((1.0)*cj2);
IkReal x13553=(gconst29*r00);
IkReal x13554=((1.0)*x13547);
IkReal x13555=((1.0)*x13548);
IkReal x13556=(gconst28*x13547);
IkReal x13557=(gconst28*x13548);
evalcond[0]=(((r12*x13548))+((r11*x13556))+(((-1.0)*x13549*x13554)));
evalcond[1]=((((-1.0)*x13550*x13555))+((x13548*x13551))+(((-1.0)*r22*x13554)));
evalcond[2]=((((-1.0)*x13553*x13555))+((r01*x13557))+(((-1.0)*r02*x13554)));
evalcond[3]=((1.0)+((r11*x13557))+(((-1.0)*x13549*x13555))+(((-1.0)*r12*x13554)));
evalcond[4]=(((r22*x13548))+(((-1.0)*x13550*x13554))+((sj1*sj2))+((x13547*x13551))+(((-1.0)*cj1*x13552)));
evalcond[5]=((((-1.0)*x13553*x13554))+((r01*x13556))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13552))+((r02*x13548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13558=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13558.valid){
continue;
}
CheckValue<IkReal> x13559 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13558.value)))+(x13559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13560=IKcos(j4);
IkReal x13561=IKsin(j4);
IkReal x13562=(gconst29*r10);
IkReal x13563=(gconst29*r20);
IkReal x13564=(gconst28*r21);
IkReal x13565=((1.0)*cj2);
IkReal x13566=(gconst29*r00);
IkReal x13567=((1.0)*x13560);
IkReal x13568=((1.0)*x13561);
IkReal x13569=(gconst28*x13560);
IkReal x13570=(gconst28*x13561);
evalcond[0]=((((-1.0)*x13562*x13567))+((r11*x13569))+((r12*x13561)));
evalcond[1]=((((-1.0)*x13563*x13568))+((x13561*x13564))+(((-1.0)*r22*x13567)));
evalcond[2]=((((-1.0)*x13566*x13568))+(((-1.0)*r02*x13567))+((r01*x13570)));
evalcond[3]=((1.0)+(((-1.0)*x13562*x13568))+(((-1.0)*r12*x13567))+((r11*x13570)));
evalcond[4]=((((-1.0)*x13563*x13567))+((sj1*sj2))+(((-1.0)*cj1*x13565))+((r22*x13561))+((x13560*x13564)));
evalcond[5]=((((-1.0)*x13566*x13567))+((r01*x13569))+(((-1.0)*sj1*x13565))+(((-1.0)*cj1*sj2))+((r02*x13561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13573 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13573.valid){
continue;
}
IkReal x13571=((1.0)*(x13573.value));
IkReal x13572=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13571)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13571)));
IkReal gconst28=((1.0)*r21*x13572);
IkReal gconst29=((-1.0)*r20*x13572);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13576.valid){
continue;
}
IkReal x13574=((1.0)*(x13576.value));
IkReal x13575=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13574)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13574)));
IkReal gconst28=((1.0)*r21*x13575);
IkReal gconst29=((-1.0)*r20*x13575);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13579 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13579.valid){
continue;
}
IkReal x13577=((1.0)*(x13579.value));
IkReal x13578=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13577)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13577)));
IkReal gconst28=((1.0)*r21*x13578);
IkReal gconst29=((-1.0)*r20*x13578);
IkReal x13580=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13584=IKPowWithIntegerCheck(x13580,-1);
if(!x13584.valid){
continue;
}
IkReal x13581=x13584.value;
IkReal x13582=((1.0)*x13581);
IkReal x13583=((((-2.0)*r10*r11*r20*r21*x13581))+(((-1.0)*(r12*r12)))+(((-1.0)*x13582*(r11*r11)*(r21*r21)))+(((-1.0)*x13582*(r10*r10)*(r20*r20))));
j4eval[0]=x13583;
j4eval[1]=r12;
j4eval[2]=x13580;
j4eval[3]=IKsign(x13583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13585=(gconst28*r11);
IkReal x13586=(gconst29*r10);
CheckValue<IkReal> x13587=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13585*x13585)))+(((-1.0)*(x13586*x13586)))+(((-1.0)*(r12*r12)))+(((2.0)*x13585*x13586)))),-1);
if(!x13587.valid){
continue;
}
CheckValue<IkReal> x13588 = IKatan2WithCheck(IkReal((x13585+(((-1.0)*x13586)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13587.value)))+(x13588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13589=IKcos(j4);
IkReal x13590=IKsin(j4);
IkReal x13591=(gconst29*r10);
IkReal x13592=(gconst29*r20);
IkReal x13593=(gconst28*r21);
IkReal x13594=(gconst29*r00);
IkReal x13595=((1.0)*x13589);
IkReal x13596=((1.0)*x13590);
IkReal x13597=(gconst28*x13589);
IkReal x13598=(gconst28*x13590);
evalcond[0]=(((r11*x13597))+((r12*x13590))+(((-1.0)*x13591*x13595)));
evalcond[1]=((((-1.0)*x13592*x13596))+(((-1.0)*r22*x13595))+((x13590*x13593)));
evalcond[2]=(((r01*x13598))+(((-1.0)*x13594*x13596))+(((-1.0)*r02*x13595)));
evalcond[3]=((1.0)+((r11*x13598))+(((-1.0)*r12*x13595))+(((-1.0)*x13591*x13596)));
evalcond[4]=(((cj2*sj1))+((x13589*x13593))+(((-1.0)*x13592*x13595))+((r22*x13590))+((cj1*sj2)));
evalcond[5]=(((r01*x13597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13590))+(((-1.0)*x13594*x13595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13599=((1.0)*gconst29);
CheckValue<IkReal> x13600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13599))+(((-1.0)*gconst28*r00)))),-1);
if(!x13600.valid){
continue;
}
CheckValue<IkReal> x13601 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13599))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13600.value)))+(x13601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13602=IKcos(j4);
IkReal x13603=IKsin(j4);
IkReal x13604=(gconst29*r10);
IkReal x13605=(gconst29*r20);
IkReal x13606=(gconst28*r21);
IkReal x13607=(gconst29*r00);
IkReal x13608=((1.0)*x13602);
IkReal x13609=((1.0)*x13603);
IkReal x13610=(gconst28*x13602);
IkReal x13611=(gconst28*x13603);
evalcond[0]=((((-1.0)*x13604*x13608))+((r12*x13603))+((r11*x13610)));
evalcond[1]=(((x13603*x13606))+(((-1.0)*x13605*x13609))+(((-1.0)*r22*x13608)));
evalcond[2]=((((-1.0)*r02*x13608))+((r01*x13611))+(((-1.0)*x13607*x13609)));
evalcond[3]=((1.0)+(((-1.0)*x13604*x13609))+(((-1.0)*r12*x13608))+((r11*x13611)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13605*x13608))+((cj1*sj2))+((r22*x13603))+((x13602*x13606)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13610))+((r02*x13603))+(((-1.0)*x13607*x13608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13612=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13612.valid){
continue;
}
CheckValue<IkReal> x13613 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13612.value)))+(x13613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13614=IKcos(j4);
IkReal x13615=IKsin(j4);
IkReal x13616=(gconst29*r10);
IkReal x13617=(gconst29*r20);
IkReal x13618=(gconst28*r21);
IkReal x13619=(gconst29*r00);
IkReal x13620=((1.0)*x13614);
IkReal x13621=((1.0)*x13615);
IkReal x13622=(gconst28*x13614);
IkReal x13623=(gconst28*x13615);
evalcond[0]=(((r11*x13622))+(((-1.0)*x13616*x13620))+((r12*x13615)));
evalcond[1]=(((x13615*x13618))+(((-1.0)*x13617*x13621))+(((-1.0)*r22*x13620)));
evalcond[2]=(((r01*x13623))+(((-1.0)*x13619*x13621))+(((-1.0)*r02*x13620)));
evalcond[3]=((1.0)+((r11*x13623))+(((-1.0)*x13616*x13621))+(((-1.0)*r12*x13620)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13614*x13618))+(((-1.0)*x13617*x13620))+((r22*x13615)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13622))+(((-1.0)*x13619*x13620))+((r02*x13615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13626.valid){
continue;
}
IkReal x13624=((1.0)*(x13626.value));
IkReal x13625=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13624)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13624)));
IkReal gconst28=((1.0)*r21*x13625);
IkReal gconst29=((-1.0)*r20*x13625);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13629.valid){
continue;
}
IkReal x13627=((1.0)*(x13629.value));
IkReal x13628=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13627)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13627)));
IkReal gconst28=((1.0)*r21*x13628);
IkReal gconst29=((-1.0)*r20*x13628);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13632 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13632.valid){
continue;
}
IkReal x13630=((1.0)*(x13632.value));
IkReal x13631=x13457;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13630)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13630)));
IkReal gconst28=((1.0)*r21*x13631);
IkReal gconst29=((-1.0)*r20*x13631);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13633=(gconst29*r10);
IkReal x13634=(gconst28*r11);
CheckValue<IkReal> x13635=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13633*x13633)+(((-2.0)*x13633*x13634))+(x13634*x13634))),-1);
if(!x13635.valid){
continue;
}
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal(((((-1.0)*x13634))+x13633)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13635.value)))+(x13636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13637=IKsin(j4);
IkReal x13638=IKcos(j4);
IkReal x13639=(gconst28*r11);
IkReal x13640=((1.0)*x13638);
IkReal x13641=(gconst29*x13638);
IkReal x13642=(gconst28*x13637);
IkReal x13643=((1.0)*x13637);
IkReal x13644=(gconst29*x13643);
evalcond[0]=((((-1.0)*r20*x13644))+(((-1.0)*r22*x13640))+((r21*x13642)));
evalcond[1]=((((-1.0)*r00*x13644))+((r01*x13642))+(((-1.0)*r02*x13640)));
evalcond[2]=((((-1.0)*r12*x13643))+(((-1.0)*x13639*x13640))+((r10*x13641)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13644))+(((-1.0)*r12*x13640))+((x13637*x13639)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13640))+((cj1*sj2))+((r20*x13641))+(((-1.0)*r22*x13643)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13641))+(((-1.0)*gconst28*r01*x13640))+(((-1.0)*r02*x13643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13645=((1.0)*gconst29);
CheckValue<IkReal> x13646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13645)))),-1);
if(!x13646.valid){
continue;
}
CheckValue<IkReal> x13647 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13645))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13646.value)))+(x13647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13648=IKsin(j4);
IkReal x13649=IKcos(j4);
IkReal x13650=(gconst28*r11);
IkReal x13651=((1.0)*x13649);
IkReal x13652=(gconst29*x13649);
IkReal x13653=(gconst28*x13648);
IkReal x13654=((1.0)*x13648);
IkReal x13655=(gconst29*x13654);
evalcond[0]=((((-1.0)*r20*x13655))+(((-1.0)*r22*x13651))+((r21*x13653)));
evalcond[1]=((((-1.0)*r00*x13655))+((r01*x13653))+(((-1.0)*r02*x13651)));
evalcond[2]=(((r10*x13652))+(((-1.0)*r12*x13654))+(((-1.0)*x13650*x13651)));
evalcond[3]=((1.0)+((x13648*x13650))+(((-1.0)*r12*x13651))+(((-1.0)*r10*x13655)));
evalcond[4]=(((r20*x13652))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13654))+(((-1.0)*gconst28*r21*x13651)));
evalcond[5]=(((r00*x13652))+(((-1.0)*gconst28*r01*x13651))+(((-1.0)*r02*x13654))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13656=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13656.valid){
continue;
}
CheckValue<IkReal> x13657 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13656.value)))+(x13657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13658=IKsin(j4);
IkReal x13659=IKcos(j4);
IkReal x13660=(gconst28*r11);
IkReal x13661=((1.0)*x13659);
IkReal x13662=(gconst29*x13659);
IkReal x13663=(gconst28*x13658);
IkReal x13664=((1.0)*x13658);
IkReal x13665=(gconst29*x13664);
evalcond[0]=((((-1.0)*r22*x13661))+(((-1.0)*r20*x13665))+((r21*x13663)));
evalcond[1]=((((-1.0)*r00*x13665))+((r01*x13663))+(((-1.0)*r02*x13661)));
evalcond[2]=((((-1.0)*r12*x13664))+(((-1.0)*x13660*x13661))+((r10*x13662)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13661))+((x13658*x13660))+(((-1.0)*r10*x13665)));
evalcond[4]=((((-1.0)*r22*x13664))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13661))+((r20*x13662)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13662))+(((-1.0)*r02*x13664))+(((-1.0)*gconst28*r01*x13661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13666=gconst28*gconst28;
IkReal x13667=gconst29*gconst29;
IkReal x13668=(r11*r21);
IkReal x13669=(gconst29*sj3);
IkReal x13670=((1.0)*cj3);
IkReal x13671=(r10*r20);
IkReal x13672=(r10*r21);
IkReal x13673=(r11*r20);
IkReal x13674=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13675=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13666*x13668*x13670))+(((-1.0)*x13667*x13670*x13671))+(((-1.0)*r12*r22*x13670))+((x13672*x13674))+((x13673*x13674)))),-1);
if(!x13675.valid){
continue;
}
CheckValue<IkReal> x13676 = IKatan2WithCheck(IkReal((((r11*r22*x13669))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13667*x13673))+((gconst28*x13668*x13669))+(((-1.0)*gconst28*x13669*x13671))+((sj3*x13666*x13672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13675.value)))+(x13676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13677=IKsin(j4);
IkReal x13678=IKcos(j4);
IkReal x13679=(sj1*sj2);
IkReal x13680=(gconst29*r20);
IkReal x13681=(gconst28*r20);
IkReal x13682=((1.0)*cj2);
IkReal x13683=(r11*sj3);
IkReal x13684=(cj1*sj2);
IkReal x13685=(gconst29*r01);
IkReal x13686=(gconst29*r10);
IkReal x13687=(cj3*gconst28);
IkReal x13688=(cj3*gconst29);
IkReal x13689=(gconst28*sj3);
IkReal x13690=(gconst29*r00);
IkReal x13691=(cj1*x13682);
IkReal x13692=((1.0)*x13678);
IkReal x13693=((1.0)*x13677);
IkReal x13694=(gconst28*x13677);
IkReal x13695=(cj3*x13677);
IkReal x13696=(sj3*x13678);
evalcond[0]=(((r21*x13694))+(((-1.0)*x13680*x13693))+(((-1.0)*r22*x13692)));
evalcond[1]=(((r01*x13694))+(((-1.0)*x13690*x13693))+(((-1.0)*r02*x13692)));
evalcond[2]=((1.0)+(((-1.0)*x13686*x13693))+((r11*x13694))+(((-1.0)*r12*x13692)));
evalcond[3]=(((r11*x13678*x13687))+(((-1.0)*cj3*x13686*x13692))+((gconst29*x13683))+((r10*x13689))+((r12*x13695)));
evalcond[4]=(((r11*x13688))+(((-1.0)*gconst28*x13683*x13692))+(((-1.0)*r12*sj3*x13693))+((r10*x13687))+((x13686*x13696)));
evalcond[5]=(((cj2*sj1))+x13684+(((-1.0)*cj3*x13680*x13692))+((gconst29*r21*sj3))+((r22*x13695))+((sj3*x13681))+((r21*x13678*x13687)));
evalcond[6]=(x13679+(((-1.0)*x13691))+((r01*x13678*x13687))+((r00*x13689))+(((-1.0)*r00*x13688*x13692))+((r02*x13695))+((sj3*x13685)));
evalcond[7]=(((x13680*x13696))+(((-1.0)*r22*sj3*x13693))+x13679+(((-1.0)*x13691))+((cj3*x13681))+((r21*x13688))+(((-1.0)*r21*x13689*x13692)));
evalcond[8]=((((-1.0)*sj1*x13682))+((cj3*x13685))+(((-1.0)*x13684))+((r00*x13687))+((x13690*x13696))+(((-1.0)*r01*x13689*x13692))+(((-1.0)*r02*sj3*x13693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13697=((1.0)*gconst29);
CheckValue<IkReal> x13698 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13697))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13698.valid){
continue;
}
CheckValue<IkReal> x13699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13697)))),-1);
if(!x13699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13698.value)+(((1.5707963267949)*(x13699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13700=IKsin(j4);
IkReal x13701=IKcos(j4);
IkReal x13702=(sj1*sj2);
IkReal x13703=(gconst29*r20);
IkReal x13704=(gconst28*r20);
IkReal x13705=((1.0)*cj2);
IkReal x13706=(r11*sj3);
IkReal x13707=(cj1*sj2);
IkReal x13708=(gconst29*r01);
IkReal x13709=(gconst29*r10);
IkReal x13710=(cj3*gconst28);
IkReal x13711=(cj3*gconst29);
IkReal x13712=(gconst28*sj3);
IkReal x13713=(gconst29*r00);
IkReal x13714=(cj1*x13705);
IkReal x13715=((1.0)*x13701);
IkReal x13716=((1.0)*x13700);
IkReal x13717=(gconst28*x13700);
IkReal x13718=(cj3*x13700);
IkReal x13719=(sj3*x13701);
evalcond[0]=(((r21*x13717))+(((-1.0)*r22*x13715))+(((-1.0)*x13703*x13716)));
evalcond[1]=((((-1.0)*x13713*x13716))+((r01*x13717))+(((-1.0)*r02*x13715)));
evalcond[2]=((1.0)+(((-1.0)*x13709*x13716))+(((-1.0)*r12*x13715))+((r11*x13717)));
evalcond[3]=(((r12*x13718))+((gconst29*x13706))+(((-1.0)*cj3*x13709*x13715))+((r10*x13712))+((r11*x13701*x13710)));
evalcond[4]=(((r10*x13710))+((x13709*x13719))+(((-1.0)*gconst28*x13706*x13715))+((r11*x13711))+(((-1.0)*r12*sj3*x13716)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13704))+x13707+((r22*x13718))+((r21*x13701*x13710))+(((-1.0)*cj3*x13703*x13715)));
evalcond[6]=(((sj3*x13708))+x13702+((r01*x13701*x13710))+((r00*x13712))+(((-1.0)*r00*x13711*x13715))+((r02*x13718))+(((-1.0)*x13714)));
evalcond[7]=(((r21*x13711))+((x13703*x13719))+x13702+((cj3*x13704))+(((-1.0)*r22*sj3*x13716))+(((-1.0)*r21*x13712*x13715))+(((-1.0)*x13714)));
evalcond[8]=((((-1.0)*sj1*x13705))+(((-1.0)*x13707))+((r00*x13710))+((cj3*x13708))+(((-1.0)*r01*x13712*x13715))+(((-1.0)*r02*sj3*x13716))+((x13713*x13719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13720=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13720.valid){
continue;
}
CheckValue<IkReal> x13721 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13720.value)))+(x13721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13722=IKsin(j4);
IkReal x13723=IKcos(j4);
IkReal x13724=(sj1*sj2);
IkReal x13725=(gconst29*r20);
IkReal x13726=(gconst28*r20);
IkReal x13727=((1.0)*cj2);
IkReal x13728=(r11*sj3);
IkReal x13729=(cj1*sj2);
IkReal x13730=(gconst29*r01);
IkReal x13731=(gconst29*r10);
IkReal x13732=(cj3*gconst28);
IkReal x13733=(cj3*gconst29);
IkReal x13734=(gconst28*sj3);
IkReal x13735=(gconst29*r00);
IkReal x13736=(cj1*x13727);
IkReal x13737=((1.0)*x13723);
IkReal x13738=((1.0)*x13722);
IkReal x13739=(gconst28*x13722);
IkReal x13740=(cj3*x13722);
IkReal x13741=(sj3*x13723);
evalcond[0]=((((-1.0)*r22*x13737))+(((-1.0)*x13725*x13738))+((r21*x13739)));
evalcond[1]=((((-1.0)*r02*x13737))+(((-1.0)*x13735*x13738))+((r01*x13739)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13737))+(((-1.0)*x13731*x13738))+((r11*x13739)));
evalcond[3]=(((r10*x13734))+((r11*x13723*x13732))+(((-1.0)*cj3*x13731*x13737))+((gconst29*x13728))+((r12*x13740)));
evalcond[4]=(((r10*x13732))+((x13731*x13741))+(((-1.0)*gconst28*x13728*x13737))+((r11*x13733))+(((-1.0)*r12*sj3*x13738)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13729+((r22*x13740))+((r21*x13723*x13732))+((sj3*x13726))+(((-1.0)*cj3*x13725*x13737)));
evalcond[6]=(((r00*x13734))+x13724+(((-1.0)*x13736))+((sj3*x13730))+(((-1.0)*r00*x13733*x13737))+((r02*x13740))+((r01*x13723*x13732)));
evalcond[7]=((((-1.0)*r21*x13734*x13737))+x13724+(((-1.0)*x13736))+((r21*x13733))+((x13725*x13741))+((cj3*x13726))+(((-1.0)*r22*sj3*x13738)));
evalcond[8]=(((r00*x13732))+(((-1.0)*r02*sj3*x13738))+(((-1.0)*sj1*x13727))+(((-1.0)*r01*x13734*x13737))+(((-1.0)*x13729))+((x13735*x13741))+((cj3*x13730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13742=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13742);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13742);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13743=(r11*sj5);
IkReal x13744=((1.0)*cj5*r10);
j4eval[0]=(x13743+(((-1.0)*x13744)));
j4eval[1]=((((-1.0)*cj3*x13744))+((cj3*x13743)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13745=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13745);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13745);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13746=(cj5*r10);
IkReal x13747=(r11*sj5);
j4eval[0]=(x13747+(((-1.0)*x13746)));
j4eval[1]=((((-1.0)*sj3*x13747))+((sj3*x13746)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13748=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13748);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13748);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13749=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13749);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13749);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13750=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13750)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13750)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13751=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13751);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13751);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13752=((1.0)*sj1);
CheckValue<IkReal> x13753=IKPowWithIntegerCheck(r22,-1);
if(!x13753.valid){
continue;
}
CheckValue<IkReal> x13754=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13754.valid){
continue;
}
if( IKabs(((x13753.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13752)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13754.value)*((((cj1*cj2))+(((-1.0)*sj2*x13752)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13753.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13752))))))+IKsqr(((x13754.value)*((((cj1*cj2))+(((-1.0)*sj2*x13752))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13753.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13752))))), ((x13754.value)*((((cj1*cj2))+(((-1.0)*sj2*x13752))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13755=IKsin(j4);
IkReal x13756=IKcos(j4);
IkReal x13757=((1.0)*cj5);
IkReal x13758=(sj5*x13756);
IkReal x13759=(sj5*x13755);
evalcond[0]=((-1.0)*r22*x13756);
evalcond[1]=(((cj2*sj1))+((r22*x13755))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13755*x13757))+((r01*x13759)));
evalcond[3]=(((r11*x13758))+(((-1.0)*r10*x13756*x13757)));
evalcond[4]=((1.0)+((r11*x13759))+(((-1.0)*r10*x13755*x13757)));
evalcond[5]=((((-1.0)*r00*x13756*x13757))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13760=((1.0)*cj5);
CheckValue<IkReal> x13761=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13760))),-1);
if(!x13761.valid){
continue;
}
CheckValue<IkReal> x13762=IKPowWithIntegerCheck(((((-1.0)*r00*x13760))+((r01*sj5))),-1);
if(!x13762.valid){
continue;
}
if( IKabs(((-1.0)*(x13761.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13762.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13761.value)))+IKsqr(((x13762.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13761.value)), ((x13762.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13763=IKsin(j4);
IkReal x13764=IKcos(j4);
IkReal x13765=((1.0)*cj5);
IkReal x13766=(sj5*x13764);
IkReal x13767=(sj5*x13763);
evalcond[0]=((-1.0)*r22*x13764);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13763)));
evalcond[2]=(((r01*x13767))+(((-1.0)*r00*x13763*x13765)));
evalcond[3]=(((r11*x13766))+(((-1.0)*r10*x13764*x13765)));
evalcond[4]=((1.0)+((r11*x13767))+(((-1.0)*r10*x13763*x13765)));
evalcond[5]=((((-1.0)*r00*x13764*x13765))+((r01*x13766))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13768=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13768);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13768);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13769=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13769);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13769);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13770=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13770.valid){
continue;
}
CheckValue<IkReal> x13771=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13771.valid){
continue;
}
if( IKabs(((-1.0)*(x13770.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13770.value)))+IKsqr(((x13771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13770.value)), ((x13771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13772=IKsin(j4);
IkReal x13773=IKcos(j4);
IkReal x13774=(cj5*x13773);
IkReal x13775=(sj5*x13772);
IkReal x13776=((1.0)*cj5*x13772);
IkReal x13777=((1.0)*sj5*x13773);
evalcond[0]=((-1.0)*r22*x13773);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13772))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13776))+((r01*x13775)));
evalcond[3]=(((r10*x13774))+(((-1.0)*r11*x13777)));
evalcond[4]=((1.0)+((r11*x13775))+(((-1.0)*r10*x13776)));
evalcond[5]=((((-1.0)*r01*x13777))+((r00*x13774))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13778=IKPowWithIntegerCheck(r22,-1);
if(!x13778.valid){
continue;
}
CheckValue<IkReal> x13779=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13779.valid){
continue;
}
if( IKabs(((x13778.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13778.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13778.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13780=IKsin(j4);
IkReal x13781=IKcos(j4);
IkReal x13782=(cj5*x13781);
IkReal x13783=(sj5*x13780);
IkReal x13784=((1.0)*cj5*x13780);
IkReal x13785=((1.0)*sj5*x13781);
evalcond[0]=((-1.0)*r22*x13781);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13780))+((cj1*sj2)));
evalcond[2]=(((r01*x13783))+(((-1.0)*r00*x13784)));
evalcond[3]=((((-1.0)*r11*x13785))+((r10*x13782)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13784))+((r11*x13783)));
evalcond[5]=(((r00*x13782))+(((-1.0)*r01*x13785))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13786=((1.0)*r10);
CheckValue<IkReal> x13787=IKPowWithIntegerCheck(cj3,-1);
if(!x13787.valid){
continue;
}
CheckValue<IkReal> x13788=IKPowWithIntegerCheck(r22,-1);
if(!x13788.valid){
continue;
}
CheckValue<IkReal> x13789=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13786))+((cj3*r11*sj5))),-1);
if(!x13789.valid){
continue;
}
if( IKabs(((x13787.value)*(x13788.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13789.value)*(((((-1.0)*sj3*sj5*x13786))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13787.value)*(x13788.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13789.value)*(((((-1.0)*sj3*sj5*x13786))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13787.value)*(x13788.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13789.value)*(((((-1.0)*sj3*sj5*x13786))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13790=IKsin(j4);
IkReal x13791=IKcos(j4);
IkReal x13792=(sj1*sj2);
IkReal x13793=(r11*sj5);
IkReal x13794=(r00*sj3);
IkReal x13795=(cj5*r01);
IkReal x13796=((1.0)*cj1);
IkReal x13797=(cj3*sj5);
IkReal x13798=(cj5*r11);
IkReal x13799=(r10*sj3);
IkReal x13800=(cj2*sj1);
IkReal x13801=((1.0)*cj5);
IkReal x13802=((1.0)*sj3);
IkReal x13803=(r01*sj5);
IkReal x13804=(cj2*x13796);
IkReal x13805=(cj3*x13791);
IkReal x13806=(r22*x13790);
IkReal x13807=(cj5*x13791);
IkReal x13808=(x13790*x13801);
evalcond[0]=((-1.0)*r22*x13791);
evalcond[1]=(x13800+((cj1*sj2))+((cj3*x13806)));
evalcond[2]=((((-1.0)*r00*x13808))+((x13790*x13803)));
evalcond[3]=((1.0)+((x13790*x13793))+(((-1.0)*r10*x13808)));
evalcond[4]=((((-1.0)*x13804))+x13792+(((-1.0)*x13802*x13806)));
evalcond[5]=(((x13793*x13805))+(((-1.0)*r10*x13801*x13805))+((sj3*x13798))+((sj5*x13799)));
evalcond[6]=(((x13799*x13807))+((cj3*x13798))+(((-1.0)*x13791*x13793*x13802))+((r10*x13797)));
evalcond[7]=((((-1.0)*x13804))+x13792+(((-1.0)*r00*x13801*x13805))+((r01*x13791*x13797))+((sj3*x13795))+((sj5*x13794)));
evalcond[8]=(((r00*x13797))+(((-1.0)*x13800))+(((-1.0)*sj2*x13796))+((x13794*x13807))+((cj3*x13795))+(((-1.0)*x13791*x13802*x13803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13809=(cj5*r10);
IkReal x13810=((1.0)*r11);
CheckValue<IkReal> x13811=IKPowWithIntegerCheck(((((-1.0)*x13809))+((r11*sj5))),-1);
if(!x13811.valid){
continue;
}
CheckValue<IkReal> x13812=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13810))+((sj3*x13809))),-1);
if(!x13812.valid){
continue;
}
if( IKabs(((-1.0)*(x13811.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13812.value)*(((((-1.0)*cj3*cj5*x13810))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13811.value)))+IKsqr(((x13812.value)*(((((-1.0)*cj3*cj5*x13810))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13811.value)), ((x13812.value)*(((((-1.0)*cj3*cj5*x13810))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13813=IKsin(j4);
IkReal x13814=IKcos(j4);
IkReal x13815=(sj1*sj2);
IkReal x13816=(r11*sj5);
IkReal x13817=(r00*sj3);
IkReal x13818=(cj5*r01);
IkReal x13819=((1.0)*cj1);
IkReal x13820=(cj3*sj5);
IkReal x13821=(cj5*r11);
IkReal x13822=(r10*sj3);
IkReal x13823=(cj2*sj1);
IkReal x13824=((1.0)*cj5);
IkReal x13825=((1.0)*sj3);
IkReal x13826=(r01*sj5);
IkReal x13827=(cj2*x13819);
IkReal x13828=(cj3*x13814);
IkReal x13829=(r22*x13813);
IkReal x13830=(cj5*x13814);
IkReal x13831=(x13813*x13824);
evalcond[0]=((-1.0)*r22*x13814);
evalcond[1]=(x13823+((cj1*sj2))+((cj3*x13829)));
evalcond[2]=(((x13813*x13826))+(((-1.0)*r00*x13831)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13831))+((x13813*x13816)));
evalcond[4]=((((-1.0)*x13827))+(((-1.0)*x13825*x13829))+x13815);
evalcond[5]=(((x13816*x13828))+(((-1.0)*r10*x13824*x13828))+((sj3*x13821))+((sj5*x13822)));
evalcond[6]=(((r10*x13820))+(((-1.0)*x13814*x13816*x13825))+((x13822*x13830))+((cj3*x13821)));
evalcond[7]=((((-1.0)*x13827))+x13815+(((-1.0)*r00*x13824*x13828))+((sj3*x13818))+((sj5*x13817))+((r01*x13814*x13820)));
evalcond[8]=((((-1.0)*sj2*x13819))+((r00*x13820))+(((-1.0)*x13823))+((cj3*x13818))+((x13817*x13830))+(((-1.0)*x13814*x13825*x13826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13832=((1.0)*sj3);
IkReal x13833=(r11*sj5);
IkReal x13834=((1.0)*cj5*r10);
CheckValue<IkReal> x13835=IKPowWithIntegerCheck(((((-1.0)*x13834))+x13833),-1);
if(!x13835.valid){
continue;
}
CheckValue<IkReal> x13836=IKPowWithIntegerCheck(((((-1.0)*cj3*x13834))+((cj3*x13833))),-1);
if(!x13836.valid){
continue;
}
if( IKabs(((-1.0)*(x13835.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13836.value)*(((((-1.0)*r10*sj5*x13832))+(((-1.0)*cj5*r11*x13832)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13835.value)))+IKsqr(((x13836.value)*(((((-1.0)*r10*sj5*x13832))+(((-1.0)*cj5*r11*x13832))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13835.value)), ((x13836.value)*(((((-1.0)*r10*sj5*x13832))+(((-1.0)*cj5*r11*x13832))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13837=IKsin(j4);
IkReal x13838=IKcos(j4);
IkReal x13839=(sj1*sj2);
IkReal x13840=(r11*sj5);
IkReal x13841=(r00*sj3);
IkReal x13842=(cj5*r01);
IkReal x13843=((1.0)*cj1);
IkReal x13844=(cj3*sj5);
IkReal x13845=(cj5*r11);
IkReal x13846=(r10*sj3);
IkReal x13847=(cj2*sj1);
IkReal x13848=((1.0)*cj5);
IkReal x13849=((1.0)*sj3);
IkReal x13850=(r01*sj5);
IkReal x13851=(cj2*x13843);
IkReal x13852=(cj3*x13838);
IkReal x13853=(r22*x13837);
IkReal x13854=(cj5*x13838);
IkReal x13855=(x13837*x13848);
evalcond[0]=((-1.0)*r22*x13838);
evalcond[1]=(x13847+((cj1*sj2))+((cj3*x13853)));
evalcond[2]=(((x13837*x13850))+(((-1.0)*r00*x13855)));
evalcond[3]=((1.0)+((x13837*x13840))+(((-1.0)*r10*x13855)));
evalcond[4]=(x13839+(((-1.0)*x13851))+(((-1.0)*x13849*x13853)));
evalcond[5]=((((-1.0)*r10*x13848*x13852))+((x13840*x13852))+((sj5*x13846))+((sj3*x13845)));
evalcond[6]=(((r10*x13844))+((x13846*x13854))+(((-1.0)*x13838*x13840*x13849))+((cj3*x13845)));
evalcond[7]=(((r01*x13838*x13844))+x13839+((sj5*x13841))+((sj3*x13842))+(((-1.0)*r00*x13848*x13852))+(((-1.0)*x13851)));
evalcond[8]=(((x13841*x13854))+(((-1.0)*sj2*x13843))+(((-1.0)*x13838*x13849*x13850))+(((-1.0)*x13847))+((cj3*x13842))+((r00*x13844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13856=cj5*cj5;
IkReal x13857=((1.0)*cj3);
IkReal x13858=(r10*r21);
IkReal x13859=(cj5*sj5);
IkReal x13860=(r11*r21);
IkReal x13861=(r11*r20);
IkReal x13862=(r22*sj3);
IkReal x13863=(r10*r20);
IkReal x13864=((1.0)*sj3*x13856);
CheckValue<IkReal> x13865 = IKatan2WithCheck(IkReal((((cj5*r11*x13862))+((r10*sj5*x13862)))),IkReal(((((-1.0)*x13858*x13864))+((sj3*x13858))+((sj3*x13859*x13860))+(((-1.0)*x13861*x13864))+(((-1.0)*sj3*x13859*x13863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13865.valid){
continue;
}
CheckValue<IkReal> x13866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13857))+((cj3*x13856*x13860))+(((-1.0)*x13856*x13857*x13863))+((cj3*x13859*x13861))+(((-1.0)*x13857*x13860))+((cj3*x13858*x13859)))),-1);
if(!x13866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13865.value)+(((1.5707963267949)*(x13866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13867=IKsin(j4);
IkReal x13868=IKcos(j4);
IkReal x13869=(sj1*sj2);
IkReal x13870=(cj5*sj3);
IkReal x13871=(cj5*r10);
IkReal x13872=(r00*sj5);
IkReal x13873=(r11*sj5);
IkReal x13874=(cj3*cj5);
IkReal x13875=((1.0)*cj1);
IkReal x13876=(cj3*sj5);
IkReal x13877=(r21*sj5);
IkReal x13878=(cj2*sj1);
IkReal x13879=(sj3*sj5);
IkReal x13880=(r01*sj5);
IkReal x13881=(cj2*x13875);
IkReal x13882=((1.0)*x13868);
IkReal x13883=((1.0)*x13867);
IkReal x13884=(cj3*x13867);
IkReal x13885=(cj3*x13868);
evalcond[0]=(((x13867*x13877))+(((-1.0)*cj5*r20*x13883))+(((-1.0)*r22*x13882)));
evalcond[1]=((((-1.0)*r02*x13882))+((x13867*x13880))+(((-1.0)*cj5*r00*x13883)));
evalcond[2]=((1.0)+((x13867*x13873))+(((-1.0)*x13871*x13883))+(((-1.0)*r12*x13882)));
evalcond[3]=(((r11*x13870))+(((-1.0)*cj3*x13871*x13882))+((r12*x13884))+((r10*x13879))+((x13873*x13885)));
evalcond[4]=(((r11*x13874))+((r10*x13868*x13870))+((r10*x13876))+(((-1.0)*r12*sj3*x13883))+(((-1.0)*sj3*x13873*x13882)));
evalcond[5]=(x13878+((cj1*sj2))+((r21*x13870))+((r20*x13879))+(((-1.0)*r20*x13874*x13882))+((r21*x13868*x13876))+((r22*x13884)));
evalcond[6]=(((sj3*x13872))+(((-1.0)*r00*x13874*x13882))+x13869+((r02*x13884))+((r01*x13870))+((r01*x13868*x13876))+(((-1.0)*x13881)));
evalcond[7]=((((-1.0)*r22*sj3*x13883))+x13869+((r21*x13874))+((r20*x13868*x13870))+((r20*x13876))+(((-1.0)*sj3*x13877*x13882))+(((-1.0)*x13881)));
evalcond[8]=(((cj3*x13872))+(((-1.0)*x13878))+(((-1.0)*sj2*x13875))+((r01*x13874))+(((-1.0)*r01*x13879*x13882))+((r00*x13868*x13870))+(((-1.0)*r02*sj3*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13886=((1.0)*cj5);
CheckValue<IkReal> x13887 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13887.valid){
continue;
}
CheckValue<IkReal> x13888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13886))+(((-1.0)*r00*sj5)))),-1);
if(!x13888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13887.value)+(((1.5707963267949)*(x13888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13889=IKsin(j4);
IkReal x13890=IKcos(j4);
IkReal x13891=(sj1*sj2);
IkReal x13892=(cj5*sj3);
IkReal x13893=(cj5*r10);
IkReal x13894=(r00*sj5);
IkReal x13895=(r11*sj5);
IkReal x13896=(cj3*cj5);
IkReal x13897=((1.0)*cj1);
IkReal x13898=(cj3*sj5);
IkReal x13899=(r21*sj5);
IkReal x13900=(cj2*sj1);
IkReal x13901=(sj3*sj5);
IkReal x13902=(r01*sj5);
IkReal x13903=(cj2*x13897);
IkReal x13904=((1.0)*x13890);
IkReal x13905=((1.0)*x13889);
IkReal x13906=(cj3*x13889);
IkReal x13907=(cj3*x13890);
evalcond[0]=((((-1.0)*cj5*r20*x13905))+(((-1.0)*r22*x13904))+((x13889*x13899)));
evalcond[1]=(((x13889*x13902))+(((-1.0)*cj5*r00*x13905))+(((-1.0)*r02*x13904)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13904))+(((-1.0)*x13893*x13905))+((x13889*x13895)));
evalcond[3]=(((r10*x13901))+((x13895*x13907))+(((-1.0)*cj3*x13893*x13904))+((r12*x13906))+((r11*x13892)));
evalcond[4]=((((-1.0)*sj3*x13895*x13904))+(((-1.0)*r12*sj3*x13905))+((r10*x13898))+((r11*x13896))+((r10*x13890*x13892)));
evalcond[5]=(((r22*x13906))+((r21*x13890*x13898))+((cj1*sj2))+x13900+((r20*x13901))+((r21*x13892))+(((-1.0)*r20*x13896*x13904)));
evalcond[6]=(((r02*x13906))+x13891+((sj3*x13894))+((r01*x13890*x13898))+(((-1.0)*r00*x13896*x13904))+((r01*x13892))+(((-1.0)*x13903)));
evalcond[7]=(((r20*x13890*x13892))+(((-1.0)*r22*sj3*x13905))+x13891+(((-1.0)*sj3*x13899*x13904))+((r20*x13898))+((r21*x13896))+(((-1.0)*x13903)));
evalcond[8]=((((-1.0)*sj2*x13897))+((cj3*x13894))+(((-1.0)*r01*x13901*x13904))+(((-1.0)*x13900))+(((-1.0)*r02*sj3*x13905))+((r01*x13896))+((r00*x13890*x13892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13908=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13908.valid){
continue;
}
CheckValue<IkReal> x13909 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13908.value)))+(x13909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13910=IKsin(j4);
IkReal x13911=IKcos(j4);
IkReal x13912=(sj1*sj2);
IkReal x13913=(cj5*sj3);
IkReal x13914=(cj5*r10);
IkReal x13915=(r00*sj5);
IkReal x13916=(r11*sj5);
IkReal x13917=(cj3*cj5);
IkReal x13918=((1.0)*cj1);
IkReal x13919=(cj3*sj5);
IkReal x13920=(r21*sj5);
IkReal x13921=(cj2*sj1);
IkReal x13922=(sj3*sj5);
IkReal x13923=(r01*sj5);
IkReal x13924=(cj2*x13918);
IkReal x13925=((1.0)*x13911);
IkReal x13926=((1.0)*x13910);
IkReal x13927=(cj3*x13910);
IkReal x13928=(cj3*x13911);
evalcond[0]=((((-1.0)*r22*x13925))+(((-1.0)*cj5*r20*x13926))+((x13910*x13920)));
evalcond[1]=((((-1.0)*cj5*r00*x13926))+(((-1.0)*r02*x13925))+((x13910*x13923)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13925))+(((-1.0)*x13914*x13926))+((x13910*x13916)));
evalcond[3]=(((r10*x13922))+((x13916*x13928))+((r11*x13913))+(((-1.0)*cj3*x13914*x13925))+((r12*x13927)));
evalcond[4]=((((-1.0)*sj3*x13916*x13925))+((r10*x13919))+(((-1.0)*r12*sj3*x13926))+((r11*x13917))+((r10*x13911*x13913)));
evalcond[5]=(((r20*x13922))+((cj1*sj2))+x13921+(((-1.0)*r20*x13917*x13925))+((r22*x13927))+((r21*x13913))+((r21*x13911*x13919)));
evalcond[6]=(((r01*x13911*x13919))+(((-1.0)*r00*x13917*x13925))+x13912+(((-1.0)*x13924))+((sj3*x13915))+((r01*x13913))+((r02*x13927)));
evalcond[7]=(x13912+(((-1.0)*sj3*x13920*x13925))+(((-1.0)*x13924))+((r20*x13911*x13913))+((r20*x13919))+((r21*x13917))+(((-1.0)*r22*sj3*x13926)));
evalcond[8]=((((-1.0)*x13921))+((r00*x13911*x13913))+(((-1.0)*sj2*x13918))+((cj3*x13915))+((r01*x13917))+(((-1.0)*r02*sj3*x13926))+(((-1.0)*r01*x13922*x13925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13929=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13929;
j4eval[1]=IKsign(x13929);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13930=((1.0)*cj5);
IkReal x13931=((((-1.0)*r21*x13930))+(((-1.0)*r20*sj5)));
j4eval[0]=x13931;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13930))))));
j4eval[2]=IKsign(x13931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13932=cj5*cj5;
IkReal x13933=(cj3*r21);
IkReal x13934=(cj5*sj5);
IkReal x13935=((1.0)*cj3);
IkReal x13936=(((r10*x13933*x13934))+(((-1.0)*r12*r22*x13935))+((r11*x13932*x13933))+(((-1.0)*r10*r20*x13932*x13935))+(((-1.0)*r11*x13933))+((cj3*r11*r20*x13934)));
j4eval[0]=x13936;
j4eval[1]=IKsign(x13936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13937=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13937;
j4eval[1]=IKsign(x13937);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13938=((1.0)*cj5);
IkReal x13939=((((-1.0)*r21*x13938))+(((-1.0)*r20*sj5)));
j4eval[0]=x13939;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13938))))));
j4eval[2]=IKsign(x13939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13940=cj5*cj5;
IkReal x13941=r11*r11;
IkReal x13942=(cj5*r10);
IkReal x13943=(r11*sj5);
IkReal x13944=((((-1.0)*x13941))+(((2.0)*x13942*x13943))+(((-1.0)*x13940*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13940*x13941)));
j4eval[0]=x13944;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13943))+x13942))));
j4eval[2]=IKsign(x13944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13945=cj5*cj5;
IkReal x13946=r11*r11;
IkReal x13947=(cj5*r10);
IkReal x13948=(r11*sj5);
CheckValue<IkReal> x13949=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13946))+(((2.0)*x13947*x13948))+(((-1.0)*x13945*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13945*x13946)))),-1);
if(!x13949.valid){
continue;
}
CheckValue<IkReal> x13950 = IKatan2WithCheck(IkReal(((((-1.0)*x13948))+x13947)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13949.value)))+(x13950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13951=IKsin(j4);
IkReal x13952=IKcos(j4);
IkReal x13953=(cj5*r10);
IkReal x13954=(r01*sj5);
IkReal x13955=(cj5*r00);
IkReal x13956=(cj5*r20);
IkReal x13957=((1.0)*x13952);
IkReal x13958=((1.0)*x13951);
IkReal x13959=(sj5*x13951);
evalcond[0]=(((r21*x13959))+(((-1.0)*x13956*x13958))+(((-1.0)*r22*x13957)));
evalcond[1]=((((-1.0)*x13955*x13958))+((x13951*x13954))+(((-1.0)*r02*x13957)));
evalcond[2]=((((-1.0)*r11*sj5*x13957))+(((-1.0)*r12*x13958))+((x13952*x13953)));
evalcond[3]=((-1.0)+((r11*x13959))+(((-1.0)*r12*x13957))+(((-1.0)*x13953*x13958)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13958))+((x13952*x13955))+(((-1.0)*x13954*x13957)));
evalcond[5]=((((-1.0)*r21*sj5*x13957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13958))+((x13952*x13956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13960=((1.0)*cj5);
CheckValue<IkReal> x13961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13960))+(((-1.0)*r20*sj5)))),-1);
if(!x13961.valid){
continue;
}
CheckValue<IkReal> x13962 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13961.value)))+(x13962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13963=IKsin(j4);
IkReal x13964=IKcos(j4);
IkReal x13965=(cj5*r10);
IkReal x13966=(r01*sj5);
IkReal x13967=(cj5*r00);
IkReal x13968=(cj5*r20);
IkReal x13969=((1.0)*x13964);
IkReal x13970=((1.0)*x13963);
IkReal x13971=(sj5*x13963);
evalcond[0]=((((-1.0)*x13968*x13970))+(((-1.0)*r22*x13969))+((r21*x13971)));
evalcond[1]=((((-1.0)*r02*x13969))+((x13963*x13966))+(((-1.0)*x13967*x13970)));
evalcond[2]=((((-1.0)*r12*x13970))+(((-1.0)*r11*sj5*x13969))+((x13964*x13965)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13969))+((r11*x13971))+(((-1.0)*x13965*x13970)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13970))+((cj1*sj2))+(((-1.0)*x13966*x13969))+((x13964*x13967)));
evalcond[5]=((((-1.0)*r22*x13970))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13969))+((x13964*x13968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13972 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13972.valid){
continue;
}
CheckValue<IkReal> x13973=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13972.value)+(((1.5707963267949)*(x13973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13974=IKsin(j4);
IkReal x13975=IKcos(j4);
IkReal x13976=(cj5*r10);
IkReal x13977=(r01*sj5);
IkReal x13978=(cj5*r00);
IkReal x13979=(cj5*r20);
IkReal x13980=((1.0)*x13975);
IkReal x13981=((1.0)*x13974);
IkReal x13982=(sj5*x13974);
evalcond[0]=((((-1.0)*x13979*x13981))+((r21*x13982))+(((-1.0)*r22*x13980)));
evalcond[1]=((((-1.0)*x13978*x13981))+(((-1.0)*r02*x13980))+((x13974*x13977)));
evalcond[2]=((((-1.0)*r11*sj5*x13980))+((x13975*x13976))+(((-1.0)*r12*x13981)));
evalcond[3]=((-1.0)+((r11*x13982))+(((-1.0)*x13976*x13981))+(((-1.0)*r12*x13980)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13981))+(((-1.0)*x13977*x13980))+((x13975*x13978)));
evalcond[5]=((((-1.0)*r21*sj5*x13980))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13975*x13979))+(((-1.0)*r22*x13981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13983=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13983;
j4eval[1]=IKsign(x13983);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13984=((1.0)*cj5);
IkReal x13985=((((-1.0)*r21*x13984))+(((-1.0)*r20*sj5)));
j4eval[0]=x13985;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13984)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13986=cj5*cj5;
IkReal x13987=r11*r11;
IkReal x13988=(r11*sj5);
IkReal x13989=(cj5*r10);
IkReal x13990=((r12*r12)+((x13986*(r10*r10)))+(((-2.0)*x13988*x13989))+x13987+(((-1.0)*x13986*x13987)));
j4eval[0]=x13990;
j4eval[1]=IKsign(x13990);
j4eval[2]=((IKabs(r12))+(IKabs((x13988+(((-1.0)*x13989))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13991=cj5*cj5;
IkReal x13992=r11*r11;
IkReal x13993=(cj5*r10);
IkReal x13994=(r11*sj5);
CheckValue<IkReal> x13995=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x13991*x13992))+x13992+((x13991*(r10*r10)))+(((-2.0)*x13993*x13994)))),-1);
if(!x13995.valid){
continue;
}
CheckValue<IkReal> x13996 = IKatan2WithCheck(IkReal((x13994+(((-1.0)*x13993)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13995.value)))+(x13996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13997=IKcos(j4);
IkReal x13998=IKsin(j4);
IkReal x13999=(cj5*r00);
IkReal x14000=(cj5*r10);
IkReal x14001=(r21*sj5);
IkReal x14002=(cj5*r20);
IkReal x14003=((1.0)*x13997);
IkReal x14004=((1.0)*x13998);
IkReal x14005=(sj5*x13998);
IkReal x14006=(sj5*x13997);
evalcond[0]=((((-1.0)*x14000*x14003))+((r12*x13998))+((r11*x14006)));
evalcond[1]=(((x13998*x14001))+(((-1.0)*x14002*x14004))+(((-1.0)*r22*x14003)));
evalcond[2]=((((-1.0)*r02*x14003))+(((-1.0)*x13999*x14004))+((r01*x14005)));
evalcond[3]=((-1.0)+(((-1.0)*x14000*x14004))+((r11*x14005))+(((-1.0)*r12*x14003)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13998))+(((-1.0)*x13999*x14003))+((r01*x14006)));
evalcond[5]=(((r22*x13998))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13997*x14001))+(((-1.0)*x14002*x14003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14007=((1.0)*cj5);
CheckValue<IkReal> x14008 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14007))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14008.valid){
continue;
}
CheckValue<IkReal> x14009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14007))+(((-1.0)*r20*sj5)))),-1);
if(!x14009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14008.value)+(((1.5707963267949)*(x14009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14010=IKcos(j4);
IkReal x14011=IKsin(j4);
IkReal x14012=(cj5*r00);
IkReal x14013=(cj5*r10);
IkReal x14014=(r21*sj5);
IkReal x14015=(cj5*r20);
IkReal x14016=((1.0)*x14010);
IkReal x14017=((1.0)*x14011);
IkReal x14018=(sj5*x14011);
IkReal x14019=(sj5*x14010);
evalcond[0]=(((r11*x14019))+((r12*x14011))+(((-1.0)*x14013*x14016)));
evalcond[1]=((((-1.0)*x14015*x14017))+((x14011*x14014))+(((-1.0)*r22*x14016)));
evalcond[2]=((((-1.0)*x14012*x14017))+(((-1.0)*r02*x14016))+((r01*x14018)));
evalcond[3]=((-1.0)+((r11*x14018))+(((-1.0)*r12*x14016))+(((-1.0)*x14013*x14017)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14012*x14016))+((r02*x14011))+((cj1*sj2))+((r01*x14019)));
evalcond[5]=((((-1.0)*x14015*x14016))+(((-1.0)*cj1*cj2))+((r22*x14011))+((sj1*sj2))+((x14010*x14014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14020 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14020.valid){
continue;
}
CheckValue<IkReal> x14021=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14020.value)+(((1.5707963267949)*(x14021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14022=IKcos(j4);
IkReal x14023=IKsin(j4);
IkReal x14024=(cj5*r00);
IkReal x14025=(cj5*r10);
IkReal x14026=(r21*sj5);
IkReal x14027=(cj5*r20);
IkReal x14028=((1.0)*x14022);
IkReal x14029=((1.0)*x14023);
IkReal x14030=(sj5*x14023);
IkReal x14031=(sj5*x14022);
evalcond[0]=(((r11*x14031))+(((-1.0)*x14025*x14028))+((r12*x14023)));
evalcond[1]=(((x14023*x14026))+(((-1.0)*r22*x14028))+(((-1.0)*x14027*x14029)));
evalcond[2]=(((r01*x14030))+(((-1.0)*r02*x14028))+(((-1.0)*x14024*x14029)));
evalcond[3]=((-1.0)+((r11*x14030))+(((-1.0)*r12*x14028))+(((-1.0)*x14025*x14029)));
evalcond[4]=(((r01*x14031))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14024*x14028))+((r02*x14023)));
evalcond[5]=(((x14022*x14026))+((r22*x14023))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14027*x14028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14033 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14033)==0){
continue;
}
IkReal x14032=pow(x14033,-0.5);
CheckValue<IkReal> x14034 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14034.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14034.value));
IkReal gconst37=((-1.0)*r01*x14032);
IkReal gconst38=(r00*x14032);
CheckValue<IkReal> x14035 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14035.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14035.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
IkReal x14036=((-1.0)*(x14038.value));
IkReal x14037=x14032;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14036;
IkReal gconst36=x14036;
IkReal gconst37=((-1.0)*r01*x14037);
IkReal gconst38=(r00*x14037);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14041 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14041.valid){
continue;
}
IkReal x14039=((-1.0)*(x14041.value));
IkReal x14040=x14032;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14039;
IkReal gconst36=x14039;
IkReal gconst37=((-1.0)*r01*x14040);
IkReal gconst38=(r00*x14040);
CheckValue<IkReal> x14049=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14049.valid){
continue;
}
IkReal x14042=x14049.value;
IkReal x14043=(sj3*x14042);
IkReal x14044=(r11*x14043);
IkReal x14045=(r21*x14043);
IkReal x14046=(r20*x14043);
IkReal x14047=(r10*x14043);
IkReal x14048=(r00*r01*x14043);
j4eval[0]=IKsign((((r00*r01*r10*x14045))+((r00*r01*r20*x14044))+((r10*x14046*(r00*r00)))+((r12*r22*sj3))+((r21*x14044*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14050=gconst38*gconst38;
IkReal x14051=gconst37*gconst37;
IkReal x14052=((1.0)*cj3);
IkReal x14053=(r11*r20);
IkReal x14054=(r10*sj3);
IkReal x14055=(gconst37*gconst38);
IkReal x14056=(r11*sj3);
IkReal x14057=(r21*x14051);
IkReal x14058=(cj3*x14055);
CheckValue<IkReal> x14059 = IKatan2WithCheck(IkReal((((gconst37*r22*x14054))+((gconst38*r22*x14056)))),IkReal((((r21*x14055*x14056))+(((-1.0)*sj3*x14050*x14053))+((x14054*x14057))+(((-1.0)*r20*x14054*x14055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14059.valid){
continue;
}
CheckValue<IkReal> x14060=IKPowWithIntegerCheck(IKsign((((r10*r21*x14058))+(((-1.0)*r10*r20*x14050*x14052))+((x14053*x14058))+(((-1.0)*r12*r22*x14052))+(((-1.0)*r11*x14052*x14057)))),-1);
if(!x14060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14059.value)+(((1.5707963267949)*(x14060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14061=IKsin(j4);
IkReal x14062=IKcos(j4);
IkReal x14063=(cj2*sj1);
IkReal x14064=(cj1*sj2);
IkReal x14065=(gconst38*r21);
IkReal x14066=(cj3*r20);
IkReal x14067=(gconst38*r10);
IkReal x14068=(cj3*gconst37);
IkReal x14069=(sj1*sj2);
IkReal x14070=(gconst38*r00);
IkReal x14071=(cj1*cj2);
IkReal x14072=(gconst37*sj3);
IkReal x14073=(gconst38*r20);
IkReal x14074=(gconst38*r01);
IkReal x14075=(gconst38*r11);
IkReal x14076=((1.0)*x14062);
IkReal x14077=((1.0)*x14061);
IkReal x14078=(cj3*x14061);
IkReal x14079=(sj3*x14062);
IkReal x14080=(gconst37*x14061);
IkReal x14081=(x14064+x14063);
evalcond[0]=((((-1.0)*r22*x14076))+(((-1.0)*x14073*x14077))+((r21*x14080)));
evalcond[1]=(((r01*x14080))+(((-1.0)*x14070*x14077))+(((-1.0)*r02*x14076)));
evalcond[2]=((-1.0)+((r11*x14080))+(((-1.0)*r12*x14076))+(((-1.0)*x14067*x14077)));
evalcond[3]=(((r11*x14062*x14068))+(((-1.0)*cj3*x14067*x14076))+((sj3*x14075))+((r10*x14072))+((r12*x14078)));
evalcond[4]=(((x14067*x14079))+((r10*x14068))+(((-1.0)*r12*sj3*x14077))+(((-1.0)*r11*x14072*x14076))+((cj3*x14075)));
evalcond[5]=(((r22*x14078))+(((-1.0)*gconst38*x14066*x14076))+((sj3*x14065))+((r21*x14062*x14068))+((r20*x14072))+x14081);
evalcond[6]=(((r02*x14078))+((sj3*x14074))+((r01*x14062*x14068))+((r00*x14072))+(((-1.0)*x14069))+x14071+(((-1.0)*cj3*x14070*x14076)));
evalcond[7]=((((-1.0)*r02*sj3*x14077))+((r00*x14068))+(((-1.0)*r01*x14072*x14076))+x14081+((x14070*x14079))+((cj3*x14074)));
evalcond[8]=(((cj3*x14065))+(((-1.0)*r22*sj3*x14077))+((gconst37*x14066))+((x14073*x14079))+(((-1.0)*x14071))+x14069+(((-1.0)*r21*x14072*x14076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14082=gconst38*gconst38;
IkReal x14083=gconst37*gconst37;
IkReal x14084=(gconst37*r10);
IkReal x14085=(cj3*r22);
IkReal x14086=((1.0)*gconst38);
IkReal x14087=(r21*sj3);
IkReal x14088=(gconst38*r11);
IkReal x14089=(cj3*r20);
IkReal x14090=(cj3*r21);
IkReal x14091=(r20*sj3);
CheckValue<IkReal> x14092 = IKatan2WithCheck(IkReal((((x14084*x14085))+((x14085*x14088)))),IkReal((((r10*x14083*x14090))+(((-1.0)*r11*x14082*x14089))+(((-1.0)*x14084*x14086*x14089))+((gconst37*x14088*x14090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14092.valid){
continue;
}
CheckValue<IkReal> x14093=IKPowWithIntegerCheck(IKsign((((r10*x14082*x14091))+(((-1.0)*x14084*x14086*x14087))+(((-1.0)*gconst37*r11*x14086*x14091))+((r12*r22*sj3))+((r11*x14083*x14087)))),-1);
if(!x14093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14092.value)+(((1.5707963267949)*(x14093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14094=IKsin(j4);
IkReal x14095=IKcos(j4);
IkReal x14096=(cj2*sj1);
IkReal x14097=(cj1*sj2);
IkReal x14098=(gconst38*r21);
IkReal x14099=(cj3*r20);
IkReal x14100=(gconst38*r10);
IkReal x14101=(cj3*gconst37);
IkReal x14102=(sj1*sj2);
IkReal x14103=(gconst38*r00);
IkReal x14104=(cj1*cj2);
IkReal x14105=(gconst37*sj3);
IkReal x14106=(gconst38*r20);
IkReal x14107=(gconst38*r01);
IkReal x14108=(gconst38*r11);
IkReal x14109=((1.0)*x14095);
IkReal x14110=((1.0)*x14094);
IkReal x14111=(cj3*x14094);
IkReal x14112=(sj3*x14095);
IkReal x14113=(gconst37*x14094);
IkReal x14114=(x14097+x14096);
evalcond[0]=((((-1.0)*x14106*x14110))+(((-1.0)*r22*x14109))+((r21*x14113)));
evalcond[1]=(((r01*x14113))+(((-1.0)*r02*x14109))+(((-1.0)*x14103*x14110)));
evalcond[2]=((-1.0)+((r11*x14113))+(((-1.0)*r12*x14109))+(((-1.0)*x14100*x14110)));
evalcond[3]=(((sj3*x14108))+((r10*x14105))+((r11*x14095*x14101))+((r12*x14111))+(((-1.0)*cj3*x14100*x14109)));
evalcond[4]=((((-1.0)*r11*x14105*x14109))+((cj3*x14108))+((r10*x14101))+((x14100*x14112))+(((-1.0)*r12*sj3*x14110)));
evalcond[5]=(((r21*x14095*x14101))+((sj3*x14098))+(((-1.0)*gconst38*x14099*x14109))+((r22*x14111))+x14114+((r20*x14105)));
evalcond[6]=(((r02*x14111))+((sj3*x14107))+((r00*x14105))+(((-1.0)*x14102))+x14104+(((-1.0)*cj3*x14103*x14109))+((r01*x14095*x14101)));
evalcond[7]=(((x14103*x14112))+((r00*x14101))+(((-1.0)*r01*x14105*x14109))+((cj3*x14107))+(((-1.0)*r02*sj3*x14110))+x14114);
evalcond[8]=((((-1.0)*r21*x14105*x14109))+(((-1.0)*x14104))+((gconst37*x14099))+x14102+((cj3*x14098))+((x14106*x14112))+(((-1.0)*r22*sj3*x14110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14115=((1.0)*gconst38);
CheckValue<IkReal> x14116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14115)))),-1);
if(!x14116.valid){
continue;
}
CheckValue<IkReal> x14117 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14115))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14116.value)))+(x14117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14118=IKsin(j4);
IkReal x14119=IKcos(j4);
IkReal x14120=(cj2*sj1);
IkReal x14121=(cj1*sj2);
IkReal x14122=(gconst38*r21);
IkReal x14123=(cj3*r20);
IkReal x14124=(gconst38*r10);
IkReal x14125=(cj3*gconst37);
IkReal x14126=(sj1*sj2);
IkReal x14127=(gconst38*r00);
IkReal x14128=(cj1*cj2);
IkReal x14129=(gconst37*sj3);
IkReal x14130=(gconst38*r20);
IkReal x14131=(gconst38*r01);
IkReal x14132=(gconst38*r11);
IkReal x14133=((1.0)*x14119);
IkReal x14134=((1.0)*x14118);
IkReal x14135=(cj3*x14118);
IkReal x14136=(sj3*x14119);
IkReal x14137=(gconst37*x14118);
IkReal x14138=(x14121+x14120);
evalcond[0]=(((r21*x14137))+(((-1.0)*r22*x14133))+(((-1.0)*x14130*x14134)));
evalcond[1]=((((-1.0)*r02*x14133))+(((-1.0)*x14127*x14134))+((r01*x14137)));
evalcond[2]=((-1.0)+((r11*x14137))+(((-1.0)*r12*x14133))+(((-1.0)*x14124*x14134)));
evalcond[3]=(((sj3*x14132))+((r11*x14119*x14125))+((r12*x14135))+(((-1.0)*cj3*x14124*x14133))+((r10*x14129)));
evalcond[4]=(((x14124*x14136))+(((-1.0)*r11*x14129*x14133))+(((-1.0)*r12*sj3*x14134))+((r10*x14125))+((cj3*x14132)));
evalcond[5]=(((r21*x14119*x14125))+((r20*x14129))+((r22*x14135))+x14138+(((-1.0)*gconst38*x14123*x14133))+((sj3*x14122)));
evalcond[6]=(((sj3*x14131))+((r00*x14129))+((r02*x14135))+(((-1.0)*x14126))+x14128+((r01*x14119*x14125))+(((-1.0)*cj3*x14127*x14133)));
evalcond[7]=((((-1.0)*r02*sj3*x14134))+((x14127*x14136))+(((-1.0)*r01*x14129*x14133))+((r00*x14125))+x14138+((cj3*x14131)));
evalcond[8]=(((cj3*x14122))+(((-1.0)*r22*sj3*x14134))+(((-1.0)*r21*x14129*x14133))+(((-1.0)*x14128))+x14126+((x14130*x14136))+((gconst37*x14123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14140 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14140)==0){
continue;
}
IkReal x14139=pow(x14140,-0.5);
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14141.value))));
IkReal gconst40=((1.0)*r01*x14139);
IkReal gconst41=((-1.0)*r00*x14139);
CheckValue<IkReal> x14142 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14142.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14145 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14145.valid){
continue;
}
IkReal x14143=((1.0)*(x14145.value));
IkReal x14144=x14139;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14143)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14143)));
IkReal gconst40=((1.0)*r01*x14144);
IkReal gconst41=((-1.0)*r00*x14144);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14148 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14148.valid){
continue;
}
IkReal x14146=((1.0)*(x14148.value));
IkReal x14147=x14139;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14146)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14146)));
IkReal gconst40=((1.0)*r01*x14147);
IkReal gconst41=((-1.0)*r00*x14147);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14149=gconst41*gconst41;
IkReal x14150=gconst40*gconst40;
IkReal x14151=(gconst40*r10);
IkReal x14152=(r22*sj3);
IkReal x14153=(r11*sj3);
IkReal x14154=((1.0)*cj3);
IkReal x14155=(gconst41*r21);
IkReal x14156=(gconst41*r20);
IkReal x14157=(r21*x14150);
IkReal x14158=((1.0)*r20*x14149);
CheckValue<IkReal> x14159 = IKatan2WithCheck(IkReal((((gconst41*r11*x14152))+((x14151*x14152)))),IkReal((((gconst40*x14153*x14155))+(((-1.0)*x14153*x14158))+((r10*sj3*x14157))+(((-1.0)*sj3*x14151*x14156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14159.valid){
continue;
}
CheckValue<IkReal> x14160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14154*x14157))+((cj3*gconst40*r11*x14156))+(((-1.0)*r12*r22*x14154))+(((-1.0)*r10*r20*x14149*x14154))+((cj3*x14151*x14155)))),-1);
if(!x14160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14159.value)+(((1.5707963267949)*(x14160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14161=IKsin(j4);
IkReal x14162=IKcos(j4);
IkReal x14163=(cj2*sj1);
IkReal x14164=(cj1*sj2);
IkReal x14165=(gconst40*sj3);
IkReal x14166=(gconst41*sj3);
IkReal x14167=(gconst41*r20);
IkReal x14168=(cj3*gconst41);
IkReal x14169=(sj1*sj2);
IkReal x14170=(cj1*cj2);
IkReal x14171=(cj3*gconst40);
IkReal x14172=((1.0)*x14162);
IkReal x14173=((1.0)*x14161);
IkReal x14174=(cj3*x14161);
IkReal x14175=(gconst40*x14161);
IkReal x14176=(x14163+x14164);
IkReal x14177=(x14162*x14171);
evalcond[0]=((((-1.0)*x14167*x14173))+((r21*x14175))+(((-1.0)*r22*x14172)));
evalcond[1]=(((r01*x14175))+(((-1.0)*r02*x14172))+(((-1.0)*gconst41*r00*x14173)));
evalcond[2]=((-1.0)+((r11*x14175))+(((-1.0)*gconst41*r10*x14173))+(((-1.0)*r12*x14172)));
evalcond[3]=(((r10*x14165))+((r11*x14177))+((r12*x14174))+((r11*x14166))+(((-1.0)*r10*x14168*x14172)));
evalcond[4]=((((-1.0)*r12*sj3*x14173))+(((-1.0)*r11*x14165*x14172))+((r10*x14162*x14166))+((r11*x14168))+((r10*x14171)));
evalcond[5]=(((r22*x14174))+((r21*x14177))+(((-1.0)*cj3*x14167*x14172))+x14176+((r21*x14166))+((r20*x14165)));
evalcond[6]=(((r01*x14177))+(((-1.0)*r00*x14168*x14172))+((r02*x14174))+((r00*x14165))+((r01*x14166))+x14170+(((-1.0)*x14169)));
evalcond[7]=(((r00*x14162*x14166))+((r00*x14171))+(((-1.0)*r01*x14165*x14172))+((r01*x14168))+x14176+(((-1.0)*r02*sj3*x14173)));
evalcond[8]=((((-1.0)*r21*x14165*x14172))+((r20*x14171))+(((-1.0)*x14170))+x14169+((r21*x14168))+((r20*x14162*x14166))+(((-1.0)*r22*sj3*x14173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14178=((1.0)*gconst41);
CheckValue<IkReal> x14179=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x14178)))),-1);
if(!x14179.valid){
continue;
}
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14178))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14179.value)))+(x14180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14181=IKsin(j4);
IkReal x14182=IKcos(j4);
IkReal x14183=(cj2*sj1);
IkReal x14184=(cj1*sj2);
IkReal x14185=(gconst40*sj3);
IkReal x14186=(gconst41*sj3);
IkReal x14187=(gconst41*r20);
IkReal x14188=(cj3*gconst41);
IkReal x14189=(sj1*sj2);
IkReal x14190=(cj1*cj2);
IkReal x14191=(cj3*gconst40);
IkReal x14192=((1.0)*x14182);
IkReal x14193=((1.0)*x14181);
IkReal x14194=(cj3*x14181);
IkReal x14195=(gconst40*x14181);
IkReal x14196=(x14183+x14184);
IkReal x14197=(x14182*x14191);
evalcond[0]=((((-1.0)*x14187*x14193))+(((-1.0)*r22*x14192))+((r21*x14195)));
evalcond[1]=((((-1.0)*gconst41*r00*x14193))+(((-1.0)*r02*x14192))+((r01*x14195)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14192))+((r11*x14195))+(((-1.0)*gconst41*r10*x14193)));
evalcond[3]=((((-1.0)*r10*x14188*x14192))+((r11*x14197))+((r12*x14194))+((r11*x14186))+((r10*x14185)));
evalcond[4]=(((r10*x14191))+(((-1.0)*r12*sj3*x14193))+((r11*x14188))+(((-1.0)*r11*x14185*x14192))+((r10*x14182*x14186)));
evalcond[5]=(((r20*x14185))+((r22*x14194))+((r21*x14186))+x14196+((r21*x14197))+(((-1.0)*cj3*x14187*x14192)));
evalcond[6]=(((r02*x14194))+((r01*x14186))+((r00*x14185))+((r01*x14197))+x14190+(((-1.0)*r00*x14188*x14192))+(((-1.0)*x14189)));
evalcond[7]=(((r00*x14182*x14186))+(((-1.0)*r01*x14185*x14192))+((r01*x14188))+((r00*x14191))+x14196+(((-1.0)*r02*sj3*x14193)));
evalcond[8]=((((-1.0)*x14190))+(((-1.0)*r22*sj3*x14193))+(((-1.0)*r21*x14185*x14192))+((r21*x14188))+x14189+((r20*x14182*x14186))+((r20*x14191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14198 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14198.valid){
continue;
}
CheckValue<IkReal> x14199=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14198.value)+(((1.5707963267949)*(x14199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14200=IKsin(j4);
IkReal x14201=IKcos(j4);
IkReal x14202=(cj2*sj1);
IkReal x14203=(cj1*sj2);
IkReal x14204=(gconst40*sj3);
IkReal x14205=(gconst41*sj3);
IkReal x14206=(gconst41*r20);
IkReal x14207=(cj3*gconst41);
IkReal x14208=(sj1*sj2);
IkReal x14209=(cj1*cj2);
IkReal x14210=(cj3*gconst40);
IkReal x14211=((1.0)*x14201);
IkReal x14212=((1.0)*x14200);
IkReal x14213=(cj3*x14200);
IkReal x14214=(gconst40*x14200);
IkReal x14215=(x14202+x14203);
IkReal x14216=(x14201*x14210);
evalcond[0]=((((-1.0)*x14206*x14212))+(((-1.0)*r22*x14211))+((r21*x14214)));
evalcond[1]=((((-1.0)*gconst41*r00*x14212))+(((-1.0)*r02*x14211))+((r01*x14214)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14211))+((r11*x14214))+(((-1.0)*gconst41*r10*x14212)));
evalcond[3]=(((r11*x14216))+((r12*x14213))+((r10*x14204))+((r11*x14205))+(((-1.0)*r10*x14207*x14211)));
evalcond[4]=(((r10*x14201*x14205))+((r10*x14210))+(((-1.0)*r11*x14204*x14211))+(((-1.0)*r12*sj3*x14212))+((r11*x14207)));
evalcond[5]=(((r22*x14213))+((r20*x14204))+((r21*x14205))+((r21*x14216))+(((-1.0)*cj3*x14206*x14211))+x14215);
evalcond[6]=(((r01*x14216))+((r00*x14204))+((r01*x14205))+(((-1.0)*x14208))+((r02*x14213))+x14209+(((-1.0)*r00*x14207*x14211)));
evalcond[7]=((((-1.0)*r02*sj3*x14212))+((r00*x14201*x14205))+(((-1.0)*r01*x14204*x14211))+((r00*x14210))+((r01*x14207))+x14215);
evalcond[8]=(((r20*x14201*x14205))+((r21*x14207))+(((-1.0)*r22*sj3*x14212))+(((-1.0)*x14209))+((r20*x14210))+(((-1.0)*r21*x14204*x14211))+x14208);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14217=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14217);
rxp1_1=(px*r21);
rxp1_2=(r11*x14217);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14218=(r11*sj5);
IkReal x14219=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14219))+x14218);
j4eval[1]=((((-1.0)*cj3*x14219))+((cj3*x14218)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14220=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14220);
rxp1_1=(px*r21);
rxp1_2=(r11*x14220);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14221=(cj5*r10);
IkReal x14222=(r11*sj5);
j4eval[0]=((((-1.0)*x14221))+x14222);
j4eval[1]=((((-1.0)*sj3*x14222))+((sj3*x14221)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14223=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14223);
rxp1_1=(px*r21);
rxp1_2=(r11*x14223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14224=((1.0)*r10);
CheckValue<IkReal> x14225=IKPowWithIntegerCheck(cj3,-1);
if(!x14225.valid){
continue;
}
CheckValue<IkReal> x14226=IKPowWithIntegerCheck(r02,-1);
if(!x14226.valid){
continue;
}
CheckValue<IkReal> x14227=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14224))),-1);
if(!x14227.valid){
continue;
}
if( IKabs(((x14225.value)*(x14226.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14227.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14224)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14225.value)*(x14226.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14227.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14224))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14225.value)*(x14226.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14227.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14224))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14228=IKsin(j4);
IkReal x14229=IKcos(j4);
IkReal x14230=(cj2*sj1);
IkReal x14231=(cj1*sj2);
IkReal x14232=(cj5*r10);
IkReal x14233=(sj1*sj2);
IkReal x14234=(cj5*sj3);
IkReal x14235=(r11*sj5);
IkReal x14236=(cj3*sj5);
IkReal x14237=(r21*sj5);
IkReal x14238=(cj1*cj2);
IkReal x14239=(cj3*cj5);
IkReal x14240=(sj3*sj5);
IkReal x14241=((1.0)*x14228);
IkReal x14242=(r20*x14229);
IkReal x14243=(cj3*x14229);
IkReal x14244=(sj3*x14229);
IkReal x14245=(x14231+x14230);
evalcond[0]=((-1.0)*r02*x14229);
evalcond[1]=(((x14228*x14237))+(((-1.0)*cj5*r20*x14241)));
evalcond[2]=((((-1.0)*x14233))+x14238+((cj3*r02*x14228)));
evalcond[3]=((((-1.0)*r02*sj3*x14241))+x14245);
evalcond[4]=((-1.0)+((x14228*x14235))+(((-1.0)*x14232*x14241)));
evalcond[5]=((((-1.0)*x14232*x14243))+((x14235*x14243))+((r10*x14240))+((r11*x14234)));
evalcond[6]=((((-1.0)*x14235*x14244))+((r10*x14236))+((x14232*x14244))+((r11*x14239)));
evalcond[7]=(((r21*x14234))+((r21*x14229*x14236))+((r20*x14240))+(((-1.0)*x14239*x14242))+x14245);
evalcond[8]=(((r20*x14236))+(((-1.0)*x14237*x14244))+((r21*x14239))+((x14234*x14242))+(((-1.0)*x14238))+x14233);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14246=(cj5*r10);
IkReal x14247=((1.0)*r11);
CheckValue<IkReal> x14248=IKPowWithIntegerCheck(((((-1.0)*x14246))+((r11*sj5))),-1);
if(!x14248.valid){
continue;
}
CheckValue<IkReal> x14249=IKPowWithIntegerCheck((((sj3*x14246))+(((-1.0)*sj3*sj5*x14247))),-1);
if(!x14249.valid){
continue;
}
if( IKabs(x14248.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14249.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14248.value)+IKsqr(((x14249.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14247))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14248.value, ((x14249.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14247))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14250=IKsin(j4);
IkReal x14251=IKcos(j4);
IkReal x14252=(cj2*sj1);
IkReal x14253=(cj1*sj2);
IkReal x14254=(cj5*r10);
IkReal x14255=(sj1*sj2);
IkReal x14256=(cj5*sj3);
IkReal x14257=(r11*sj5);
IkReal x14258=(cj3*sj5);
IkReal x14259=(r21*sj5);
IkReal x14260=(cj1*cj2);
IkReal x14261=(cj3*cj5);
IkReal x14262=(sj3*sj5);
IkReal x14263=((1.0)*x14250);
IkReal x14264=(r20*x14251);
IkReal x14265=(cj3*x14251);
IkReal x14266=(sj3*x14251);
IkReal x14267=(x14253+x14252);
evalcond[0]=((-1.0)*r02*x14251);
evalcond[1]=((((-1.0)*cj5*r20*x14263))+((x14250*x14259)));
evalcond[2]=(((cj3*r02*x14250))+x14260+(((-1.0)*x14255)));
evalcond[3]=((((-1.0)*r02*sj3*x14263))+x14267);
evalcond[4]=((-1.0)+(((-1.0)*x14254*x14263))+((x14250*x14257)));
evalcond[5]=((((-1.0)*x14254*x14265))+((x14257*x14265))+((r11*x14256))+((r10*x14262)));
evalcond[6]=(((r11*x14261))+((r10*x14258))+((x14254*x14266))+(((-1.0)*x14257*x14266)));
evalcond[7]=(((r21*x14256))+((r21*x14251*x14258))+((r20*x14262))+(((-1.0)*x14261*x14264))+x14267);
evalcond[8]=(((r21*x14261))+(((-1.0)*x14260))+((x14256*x14264))+((r20*x14258))+(((-1.0)*x14259*x14266))+x14255);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14268=((1.0)*r10);
IkReal x14269=(r11*sj5);
CheckValue<IkReal> x14270=IKPowWithIntegerCheck(((((-1.0)*cj5*x14268))+x14269),-1);
if(!x14270.valid){
continue;
}
CheckValue<IkReal> x14271=IKPowWithIntegerCheck((((cj3*x14269))+(((-1.0)*cj3*cj5*x14268))),-1);
if(!x14271.valid){
continue;
}
if( IKabs(x14270.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14271.value)*(((((-1.0)*sj3*sj5*x14268))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14270.value)+IKsqr(((x14271.value)*(((((-1.0)*sj3*sj5*x14268))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14270.value, ((x14271.value)*(((((-1.0)*sj3*sj5*x14268))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14272=IKsin(j4);
IkReal x14273=IKcos(j4);
IkReal x14274=(cj2*sj1);
IkReal x14275=(cj1*sj2);
IkReal x14276=(cj5*r10);
IkReal x14277=(sj1*sj2);
IkReal x14278=(cj5*sj3);
IkReal x14279=(r11*sj5);
IkReal x14280=(cj3*sj5);
IkReal x14281=(r21*sj5);
IkReal x14282=(cj1*cj2);
IkReal x14283=(cj3*cj5);
IkReal x14284=(sj3*sj5);
IkReal x14285=((1.0)*x14272);
IkReal x14286=(r20*x14273);
IkReal x14287=(cj3*x14273);
IkReal x14288=(sj3*x14273);
IkReal x14289=(x14275+x14274);
evalcond[0]=((-1.0)*r02*x14273);
evalcond[1]=(((x14272*x14281))+(((-1.0)*cj5*r20*x14285)));
evalcond[2]=((((-1.0)*x14277))+((cj3*r02*x14272))+x14282);
evalcond[3]=((((-1.0)*r02*sj3*x14285))+x14289);
evalcond[4]=((-1.0)+((x14272*x14279))+(((-1.0)*x14276*x14285)));
evalcond[5]=((((-1.0)*x14276*x14287))+((r10*x14284))+((r11*x14278))+((x14279*x14287)));
evalcond[6]=((((-1.0)*x14279*x14288))+((x14276*x14288))+((r10*x14280))+((r11*x14283)));
evalcond[7]=(((r21*x14278))+((r21*x14273*x14280))+(((-1.0)*x14283*x14286))+x14289+((r20*x14284)));
evalcond[8]=(((r21*x14283))+((x14278*x14286))+(((-1.0)*x14282))+(((-1.0)*x14281*x14288))+x14277+((r20*x14280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14290=cj5*cj5;
IkReal x14291=((1.0)*cj3);
IkReal x14292=(r10*r21);
IkReal x14293=(cj5*sj5);
IkReal x14294=(r11*r21);
IkReal x14295=(r11*r20);
IkReal x14296=(r22*sj3);
IkReal x14297=(r10*r20);
IkReal x14298=((1.0)*sj3*x14290);
CheckValue<IkReal> x14299 = IKatan2WithCheck(IkReal((((r10*sj5*x14296))+((cj5*r11*x14296)))),IkReal(((((-1.0)*sj3*x14293*x14297))+((sj3*x14293*x14294))+((sj3*x14292))+(((-1.0)*x14292*x14298))+(((-1.0)*x14295*x14298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14299.valid){
continue;
}
CheckValue<IkReal> x14300=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14290*x14291*x14297))+((cj3*x14292*x14293))+((cj3*x14290*x14294))+(((-1.0)*x14291*x14294))+(((-1.0)*r12*r22*x14291))+((cj3*x14293*x14295)))),-1);
if(!x14300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14299.value)+(((1.5707963267949)*(x14300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14301=IKsin(j4);
IkReal x14302=IKcos(j4);
IkReal x14303=(cj2*sj1);
IkReal x14304=(cj1*sj2);
IkReal x14305=(cj5*sj3);
IkReal x14306=(cj5*r10);
IkReal x14307=(r00*sj5);
IkReal x14308=(sj1*sj2);
IkReal x14309=(r11*sj5);
IkReal x14310=(cj3*cj5);
IkReal x14311=(cj3*sj5);
IkReal x14312=(r21*sj5);
IkReal x14313=(cj1*cj2);
IkReal x14314=(sj3*sj5);
IkReal x14315=(r01*sj5);
IkReal x14316=((1.0)*x14302);
IkReal x14317=((1.0)*x14301);
IkReal x14318=(cj3*x14301);
IkReal x14319=(cj3*x14302);
IkReal x14320=(x14303+x14304);
evalcond[0]=((((-1.0)*r22*x14316))+(((-1.0)*cj5*r20*x14317))+((x14301*x14312)));
evalcond[1]=((((-1.0)*r02*x14316))+(((-1.0)*cj5*r00*x14317))+((x14301*x14315)));
evalcond[2]=((-1.0)+((x14301*x14309))+(((-1.0)*x14306*x14317))+(((-1.0)*r12*x14316)));
evalcond[3]=(((x14309*x14319))+(((-1.0)*cj3*x14306*x14316))+((r11*x14305))+((r12*x14318))+((r10*x14314)));
evalcond[4]=(((r11*x14310))+(((-1.0)*sj3*x14309*x14316))+(((-1.0)*r12*sj3*x14317))+((r10*x14302*x14305))+((r10*x14311)));
evalcond[5]=(((r21*x14302*x14311))+((r20*x14314))+(((-1.0)*r20*x14310*x14316))+x14320+((r21*x14305))+((r22*x14318)));
evalcond[6]=(((r02*x14318))+(((-1.0)*r00*x14310*x14316))+((r01*x14305))+(((-1.0)*x14308))+((r01*x14302*x14311))+x14313+((sj3*x14307)));
evalcond[7]=((((-1.0)*r01*x14314*x14316))+(((-1.0)*r02*sj3*x14317))+((r01*x14310))+x14320+((r00*x14302*x14305))+((cj3*x14307)));
evalcond[8]=((((-1.0)*x14313))+((r20*x14311))+(((-1.0)*sj3*x14312*x14316))+((r21*x14310))+((r20*x14302*x14305))+x14308+(((-1.0)*r22*sj3*x14317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14321=((1.0)*cj5);
CheckValue<IkReal> x14322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14321))+(((-1.0)*r20*sj5)))),-1);
if(!x14322.valid){
continue;
}
CheckValue<IkReal> x14323 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14322.value)))+(x14323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14324=IKsin(j4);
IkReal x14325=IKcos(j4);
IkReal x14326=(cj2*sj1);
IkReal x14327=(cj1*sj2);
IkReal x14328=(cj5*sj3);
IkReal x14329=(cj5*r10);
IkReal x14330=(r00*sj5);
IkReal x14331=(sj1*sj2);
IkReal x14332=(r11*sj5);
IkReal x14333=(cj3*cj5);
IkReal x14334=(cj3*sj5);
IkReal x14335=(r21*sj5);
IkReal x14336=(cj1*cj2);
IkReal x14337=(sj3*sj5);
IkReal x14338=(r01*sj5);
IkReal x14339=((1.0)*x14325);
IkReal x14340=((1.0)*x14324);
IkReal x14341=(cj3*x14324);
IkReal x14342=(cj3*x14325);
IkReal x14343=(x14327+x14326);
evalcond[0]=((((-1.0)*r22*x14339))+((x14324*x14335))+(((-1.0)*cj5*r20*x14340)));
evalcond[1]=((((-1.0)*r02*x14339))+((x14324*x14338))+(((-1.0)*cj5*r00*x14340)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14339))+((x14324*x14332))+(((-1.0)*x14329*x14340)));
evalcond[3]=(((x14332*x14342))+((r11*x14328))+(((-1.0)*cj3*x14329*x14339))+((r12*x14341))+((r10*x14337)));
evalcond[4]=(((r10*x14325*x14328))+((r11*x14333))+(((-1.0)*sj3*x14332*x14339))+(((-1.0)*r12*sj3*x14340))+((r10*x14334)));
evalcond[5]=(((r20*x14337))+((r22*x14341))+(((-1.0)*r20*x14333*x14339))+((r21*x14325*x14334))+((r21*x14328))+x14343);
evalcond[6]=((((-1.0)*r00*x14333*x14339))+((r01*x14328))+(((-1.0)*x14331))+((r02*x14341))+((r01*x14325*x14334))+x14336+((sj3*x14330)));
evalcond[7]=(((r00*x14325*x14328))+(((-1.0)*r02*sj3*x14340))+(((-1.0)*r01*x14337*x14339))+((r01*x14333))+x14343+((cj3*x14330)));
evalcond[8]=(((r20*x14334))+(((-1.0)*sj3*x14335*x14339))+(((-1.0)*x14336))+x14331+((r20*x14325*x14328))+((r21*x14333))+(((-1.0)*r22*sj3*x14340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14344 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14344.valid){
continue;
}
CheckValue<IkReal> x14345=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14344.value)+(((1.5707963267949)*(x14345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14346=IKsin(j4);
IkReal x14347=IKcos(j4);
IkReal x14348=(cj2*sj1);
IkReal x14349=(cj1*sj2);
IkReal x14350=(cj5*sj3);
IkReal x14351=(cj5*r10);
IkReal x14352=(r00*sj5);
IkReal x14353=(sj1*sj2);
IkReal x14354=(r11*sj5);
IkReal x14355=(cj3*cj5);
IkReal x14356=(cj3*sj5);
IkReal x14357=(r21*sj5);
IkReal x14358=(cj1*cj2);
IkReal x14359=(sj3*sj5);
IkReal x14360=(r01*sj5);
IkReal x14361=((1.0)*x14347);
IkReal x14362=((1.0)*x14346);
IkReal x14363=(cj3*x14346);
IkReal x14364=(cj3*x14347);
IkReal x14365=(x14349+x14348);
evalcond[0]=((((-1.0)*r22*x14361))+(((-1.0)*cj5*r20*x14362))+((x14346*x14357)));
evalcond[1]=((((-1.0)*r02*x14361))+(((-1.0)*cj5*r00*x14362))+((x14346*x14360)));
evalcond[2]=((-1.0)+(((-1.0)*x14351*x14362))+((x14346*x14354))+(((-1.0)*r12*x14361)));
evalcond[3]=(((r11*x14350))+((r10*x14359))+((x14354*x14364))+((r12*x14363))+(((-1.0)*cj3*x14351*x14361)));
evalcond[4]=((((-1.0)*sj3*x14354*x14361))+((r11*x14355))+(((-1.0)*r12*sj3*x14362))+((r10*x14356))+((r10*x14347*x14350)));
evalcond[5]=(((r20*x14359))+((r21*x14347*x14356))+(((-1.0)*r20*x14355*x14361))+((r21*x14350))+x14365+((r22*x14363)));
evalcond[6]=(((sj3*x14352))+((r02*x14363))+(((-1.0)*x14353))+((r01*x14350))+((r01*x14347*x14356))+x14358+(((-1.0)*r00*x14355*x14361)));
evalcond[7]=(((cj3*x14352))+((r00*x14347*x14350))+((r01*x14355))+(((-1.0)*r02*sj3*x14362))+x14365+(((-1.0)*r01*x14359*x14361)));
evalcond[8]=(((r20*x14347*x14350))+((r20*x14356))+(((-1.0)*x14358))+((r21*x14355))+x14353+(((-1.0)*r22*sj3*x14362))+(((-1.0)*sj3*x14357*x14361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14366=((-1.0)*r00);
IkReal x14368 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14368)==0){
continue;
}
IkReal x14367=pow(x14368,-0.5);
CheckValue<IkReal> x14369 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14366),IKFAST_ATAN2_MAGTHRESH);
if(!x14369.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14369.value));
IkReal gconst13=(r01*x14367);
IkReal gconst14=(x14366*x14367);
CheckValue<IkReal> x14370 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14370.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14370.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14371=((-1.0)*r00);
IkReal x14372=x14367;
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14371),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
IkReal x14373=((-1.0)*(x14374.value));
sj5=gconst13;
cj5=gconst14;
j5=x14373;
IkReal gconst12=x14373;
IkReal gconst13=(r01*x14372);
IkReal gconst14=(x14371*x14372);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14375=((1.0)*sj0);
IkReal x14376=((1.0)*cj0);
CheckValue<IkReal> x14377 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14375))+(((-1.0)*r02*x14376)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14375))+(((-1.0)*gconst13*r01*x14376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14377.valid){
continue;
}
CheckValue<IkReal> x14378=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14377.value)+(((1.5707963267949)*(x14378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14379=IKsin(j4);
IkReal x14380=IKcos(j4);
IkReal x14381=((1.0)*r22);
IkReal x14382=((1.0)*r12);
IkReal x14383=(gconst13*sj3);
IkReal x14384=(gconst13*r01);
IkReal x14385=(sj1*sj2);
IkReal x14386=(gconst14*sj3);
IkReal x14387=(cj2*sj1);
IkReal x14388=((1.0)*sj0);
IkReal x14389=(cj3*gconst13);
IkReal x14390=(cj3*gconst14);
IkReal x14391=((1.0)*cj0);
IkReal x14392=((1.0)*gconst14);
IkReal x14393=(cj1*sj2);
IkReal x14394=(sj3*x14379);
IkReal x14395=((1.0)*cj1*cj2);
IkReal x14396=(cj3*x14380);
IkReal x14397=(cj3*x14379);
IkReal x14398=(gconst13*x14379);
IkReal x14399=((1.0)*x14380);
IkReal x14400=(x14379*x14392);
evalcond[0]=(((r21*x14398))+(((-1.0)*x14380*x14381))+(((-1.0)*r20*x14400)));
evalcond[1]=(cj0+(((-1.0)*r10*x14400))+(((-1.0)*x14380*x14382))+((r11*x14398)));
evalcond[2]=((((-1.0)*x14388))+((x14379*x14384))+(((-1.0)*r00*x14400))+(((-1.0)*r02*x14399)));
evalcond[3]=(((r20*x14383))+((r21*x14386))+((r21*x14380*x14389))+((r22*x14397))+(((-1.0)*r20*x14390*x14399))+x14387+x14393);
evalcond[4]=(((r20*x14389))+((r21*x14390))+((r20*x14380*x14386))+x14385+(((-1.0)*x14381*x14394))+(((-1.0)*x14395))+(((-1.0)*r21*x14383*x14399)));
evalcond[5]=(((cj0*x14385))+(((-1.0)*r00*x14390*x14399))+(((-1.0)*cj1*cj2*x14391))+((x14384*x14396))+((r00*x14383))+((r01*x14386))+((r02*x14397)));
evalcond[6]=(((sj0*x14385))+(((-1.0)*cj1*cj2*x14388))+((r11*x14380*x14389))+((r12*x14397))+((r10*x14383))+((r11*x14386))+(((-1.0)*r10*x14390*x14399)));
evalcond[7]=(((r01*x14390))+((r00*x14389))+(((-1.0)*x14391*x14393))+(((-1.0)*r02*x14394))+(((-1.0)*r01*x14383*x14399))+((r00*x14380*x14386))+(((-1.0)*x14387*x14391)));
evalcond[8]=((((-1.0)*r11*x14383*x14399))+((r10*x14389))+((r10*x14380*x14386))+((r11*x14390))+(((-1.0)*x14382*x14394))+(((-1.0)*x14388*x14393))+(((-1.0)*x14387*x14388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14401=((1.0)*gconst14);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
CheckValue<IkReal> x14403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14401)))),-1);
if(!x14403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14402.value)+(((1.5707963267949)*(x14403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14404=IKsin(j4);
IkReal x14405=IKcos(j4);
IkReal x14406=((1.0)*r22);
IkReal x14407=((1.0)*r12);
IkReal x14408=(gconst13*sj3);
IkReal x14409=(gconst13*r01);
IkReal x14410=(sj1*sj2);
IkReal x14411=(gconst14*sj3);
IkReal x14412=(cj2*sj1);
IkReal x14413=((1.0)*sj0);
IkReal x14414=(cj3*gconst13);
IkReal x14415=(cj3*gconst14);
IkReal x14416=((1.0)*cj0);
IkReal x14417=((1.0)*gconst14);
IkReal x14418=(cj1*sj2);
IkReal x14419=(sj3*x14404);
IkReal x14420=((1.0)*cj1*cj2);
IkReal x14421=(cj3*x14405);
IkReal x14422=(cj3*x14404);
IkReal x14423=(gconst13*x14404);
IkReal x14424=((1.0)*x14405);
IkReal x14425=(x14404*x14417);
evalcond[0]=((((-1.0)*x14405*x14406))+((r21*x14423))+(((-1.0)*r20*x14425)));
evalcond[1]=((((-1.0)*r10*x14425))+cj0+((r11*x14423))+(((-1.0)*x14405*x14407)));
evalcond[2]=(((x14404*x14409))+(((-1.0)*x14413))+(((-1.0)*r02*x14424))+(((-1.0)*r00*x14425)));
evalcond[3]=(((r21*x14411))+((r21*x14405*x14414))+x14412+x14418+((r22*x14422))+(((-1.0)*r20*x14415*x14424))+((r20*x14408)));
evalcond[4]=(((r21*x14415))+(((-1.0)*x14406*x14419))+(((-1.0)*r21*x14408*x14424))+x14410+((r20*x14405*x14411))+(((-1.0)*x14420))+((r20*x14414)));
evalcond[5]=((((-1.0)*cj1*cj2*x14416))+(((-1.0)*r00*x14415*x14424))+((cj0*x14410))+((x14409*x14421))+((r00*x14408))+((r01*x14411))+((r02*x14422)));
evalcond[6]=(((r10*x14408))+(((-1.0)*cj1*cj2*x14413))+((r11*x14411))+((r12*x14422))+((sj0*x14410))+((r11*x14405*x14414))+(((-1.0)*r10*x14415*x14424)));
evalcond[7]=(((r00*x14405*x14411))+(((-1.0)*x14416*x14418))+(((-1.0)*x14412*x14416))+((r00*x14414))+(((-1.0)*r02*x14419))+((r01*x14415))+(((-1.0)*r01*x14408*x14424)));
evalcond[8]=(((r11*x14415))+(((-1.0)*r11*x14408*x14424))+(((-1.0)*x14407*x14419))+(((-1.0)*x14413*x14418))+(((-1.0)*x14412*x14413))+((r10*x14405*x14411))+((r10*x14414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14426=((-1.0)*r01);
IkReal x14428 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14428)==0){
continue;
}
IkReal x14427=pow(x14428,-0.5);
CheckValue<IkReal> x14429 = IKatan2WithCheck(IkReal(x14426),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14429.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14429.value))));
IkReal gconst16=(x14426*x14427);
IkReal gconst17=((1.0)*r00*x14427);
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14430.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14431=((-1.0)*r01);
CheckValue<IkReal> x14434 = IKatan2WithCheck(IkReal(x14431),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14434.valid){
continue;
}
IkReal x14432=((1.0)*(x14434.value));
IkReal x14433=x14427;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14432)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14432)));
IkReal gconst16=(x14431*x14433);
IkReal gconst17=((1.0)*r00*x14433);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14435=((-1.0)*r01);
CheckValue<IkReal> x14438 = IKatan2WithCheck(IkReal(x14435),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14438.valid){
continue;
}
IkReal x14436=((1.0)*(x14438.value));
IkReal x14437=x14427;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14436)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14436)));
IkReal gconst16=(x14435*x14437);
IkReal gconst17=((1.0)*r00*x14437);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14439=((-1.0)*r01);
CheckValue<IkReal> x14442 = IKatan2WithCheck(IkReal(x14439),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14442.valid){
continue;
}
IkReal x14440=((1.0)*(x14442.value));
IkReal x14441=x14427;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14440)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14440)));
IkReal gconst16=(x14439*x14441);
IkReal gconst17=((1.0)*r00*x14441);
IkReal x14443=r02*r02;
IkReal x14444=(r12*sj0);
IkReal x14445=((1.0)*cj0);
IkReal x14446=x14427;
j4eval[0]=((IKabs((((r02*x14444*x14446))+((cj0*x14443*x14446))+(((-1.0)*x14445*x14446)))))+(IKabs(((((-1.0)*x14444))+(((-1.0)*r02*x14445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14447=((-1.0)*r01);
CheckValue<IkReal> x14450 = IKatan2WithCheck(IkReal(x14447),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14450.valid){
continue;
}
IkReal x14448=((1.0)*(x14450.value));
IkReal x14449=x14427;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14448)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14448)));
IkReal gconst16=(x14447*x14449);
IkReal gconst17=((1.0)*r00*x14449);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14451=((-1.0)*r01);
CheckValue<IkReal> x14454 = IKatan2WithCheck(IkReal(x14451),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14454.valid){
continue;
}
IkReal x14452=((1.0)*(x14454.value));
IkReal x14453=x14427;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14452)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14452)));
IkReal gconst16=(x14451*x14453);
IkReal gconst17=((1.0)*r00*x14453);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14455=gconst16*gconst16;
IkReal x14456=gconst17*gconst17;
IkReal x14457=(r11*sj3);
IkReal x14458=(cj3*r10);
IkReal x14459=((1.0)*cj3);
IkReal x14460=(r10*sj3);
IkReal x14461=(gconst16*gconst17);
IkReal x14462=(r21*x14455);
IkReal x14463=((1.0)*r20*x14456);
CheckValue<IkReal> x14464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14459*x14462))+((cj3*r11*r20*x14461))+(((-1.0)*x14458*x14463))+(((-1.0)*r12*r22*x14459))+((r21*x14458*x14461)))),-1);
if(!x14464.valid){
continue;
}
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal((((gconst16*r22*x14460))+((gconst17*r22*x14457)))),IkReal(((((-1.0)*x14457*x14463))+((x14460*x14462))+((r21*x14457*x14461))+(((-1.0)*r20*x14460*x14461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14464.value)))+(x14465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14466=IKsin(j4);
IkReal x14467=IKcos(j4);
IkReal x14468=(cj2*sj1);
IkReal x14469=(cj1*sj2);
IkReal x14470=(gconst16*r21);
IkReal x14471=(cj3*gconst17);
IkReal x14472=(gconst16*r20);
IkReal x14473=(sj1*sj2);
IkReal x14474=(gconst17*r20);
IkReal x14475=(gconst17*sj3);
IkReal x14476=(gconst16*r10);
IkReal x14477=(cj1*cj2);
IkReal x14478=(gconst16*sj3);
IkReal x14479=((1.0)*x14467);
IkReal x14480=((1.0)*x14466);
IkReal x14481=(gconst16*x14466);
IkReal x14482=(cj3*x14467);
IkReal x14483=(cj3*x14466);
IkReal x14484=(x14468+x14469);
evalcond[0]=((((-1.0)*x14474*x14480))+(((-1.0)*r22*x14479))+((x14466*x14470)));
evalcond[1]=((((-1.0)*gconst17*r00*x14480))+(((-1.0)*r02*x14479))+((r01*x14481)));
evalcond[2]=((-1.0)+((r11*x14481))+(((-1.0)*gconst17*r10*x14480))+(((-1.0)*r12*x14479)));
evalcond[3]=(((sj3*x14476))+(((-1.0)*r10*x14471*x14479))+((r12*x14483))+((r11*x14475))+((gconst16*r11*x14482)));
evalcond[4]=(((r11*x14471))+((r10*x14467*x14475))+(((-1.0)*r12*sj3*x14480))+(((-1.0)*r11*x14478*x14479))+((cj3*x14476)));
evalcond[5]=((((-1.0)*r20*x14471*x14479))+((sj3*x14472))+((r21*x14475))+((r22*x14483))+x14484+((x14470*x14482)));
evalcond[6]=((((-1.0)*r00*x14471*x14479))+((r00*x14478))+((r02*x14483))+((r01*x14475))+(((-1.0)*x14473))+x14477+((gconst16*r01*x14482)));
evalcond[7]=((((-1.0)*r02*sj3*x14480))+((r01*x14471))+(((-1.0)*r01*x14478*x14479))+x14484+((r00*x14467*x14475))+((cj3*gconst16*r00)));
evalcond[8]=(((r21*x14471))+(((-1.0)*r22*sj3*x14480))+(((-1.0)*x14477))+((sj3*x14467*x14474))+(((-1.0)*sj3*x14470*x14479))+x14473+((cj3*x14472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14485=((1.0)*gconst17);
CheckValue<IkReal> x14486=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14485)))),-1);
if(!x14486.valid){
continue;
}
CheckValue<IkReal> x14487 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14486.value)))+(x14487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14488=IKsin(j4);
IkReal x14489=IKcos(j4);
IkReal x14490=(cj2*sj1);
IkReal x14491=(cj1*sj2);
IkReal x14492=(gconst16*r21);
IkReal x14493=(cj3*gconst17);
IkReal x14494=(gconst16*r20);
IkReal x14495=(sj1*sj2);
IkReal x14496=(gconst17*r20);
IkReal x14497=(gconst17*sj3);
IkReal x14498=(gconst16*r10);
IkReal x14499=(cj1*cj2);
IkReal x14500=(gconst16*sj3);
IkReal x14501=((1.0)*x14489);
IkReal x14502=((1.0)*x14488);
IkReal x14503=(gconst16*x14488);
IkReal x14504=(cj3*x14489);
IkReal x14505=(cj3*x14488);
IkReal x14506=(x14491+x14490);
evalcond[0]=(((x14488*x14492))+(((-1.0)*x14496*x14502))+(((-1.0)*r22*x14501)));
evalcond[1]=((((-1.0)*r02*x14501))+(((-1.0)*gconst17*r00*x14502))+((r01*x14503)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14501))+((r11*x14503))+(((-1.0)*gconst17*r10*x14502)));
evalcond[3]=(((r11*x14497))+((gconst16*r11*x14504))+((sj3*x14498))+(((-1.0)*r10*x14493*x14501))+((r12*x14505)));
evalcond[4]=(((r11*x14493))+(((-1.0)*r11*x14500*x14501))+((cj3*x14498))+((r10*x14489*x14497))+(((-1.0)*r12*sj3*x14502)));
evalcond[5]=(((r21*x14497))+(((-1.0)*r20*x14493*x14501))+((sj3*x14494))+((x14492*x14504))+((r22*x14505))+x14506);
evalcond[6]=((((-1.0)*x14495))+((r02*x14505))+(((-1.0)*r00*x14493*x14501))+((gconst16*r01*x14504))+x14499+((r00*x14500))+((r01*x14497)));
evalcond[7]=(((r00*x14489*x14497))+x14506+((r01*x14493))+(((-1.0)*r01*x14500*x14501))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14502)));
evalcond[8]=((((-1.0)*x14499))+((r21*x14493))+((sj3*x14489*x14496))+x14495+((cj3*x14494))+(((-1.0)*sj3*x14492*x14501))+(((-1.0)*r22*sj3*x14502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14507=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14507.valid){
continue;
}
CheckValue<IkReal> x14508 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14507.value)))+(x14508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14509=IKsin(j4);
IkReal x14510=IKcos(j4);
IkReal x14511=(cj2*sj1);
IkReal x14512=(cj1*sj2);
IkReal x14513=(gconst16*r21);
IkReal x14514=(cj3*gconst17);
IkReal x14515=(gconst16*r20);
IkReal x14516=(sj1*sj2);
IkReal x14517=(gconst17*r20);
IkReal x14518=(gconst17*sj3);
IkReal x14519=(gconst16*r10);
IkReal x14520=(cj1*cj2);
IkReal x14521=(gconst16*sj3);
IkReal x14522=((1.0)*x14510);
IkReal x14523=((1.0)*x14509);
IkReal x14524=(gconst16*x14509);
IkReal x14525=(cj3*x14510);
IkReal x14526=(cj3*x14509);
IkReal x14527=(x14511+x14512);
evalcond[0]=((((-1.0)*x14517*x14523))+(((-1.0)*r22*x14522))+((x14509*x14513)));
evalcond[1]=((((-1.0)*gconst17*r00*x14523))+((r01*x14524))+(((-1.0)*r02*x14522)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14523))+((r11*x14524))+(((-1.0)*r12*x14522)));
evalcond[3]=(((sj3*x14519))+((r11*x14518))+((r12*x14526))+(((-1.0)*r10*x14514*x14522))+((gconst16*r11*x14525)));
evalcond[4]=((((-1.0)*r12*sj3*x14523))+((cj3*x14519))+((r11*x14514))+((r10*x14510*x14518))+(((-1.0)*r11*x14521*x14522)));
evalcond[5]=(((r22*x14526))+((sj3*x14515))+x14527+((x14513*x14525))+((r21*x14518))+(((-1.0)*r20*x14514*x14522)));
evalcond[6]=(((gconst16*r01*x14525))+((r00*x14521))+((r01*x14518))+x14520+((r02*x14526))+(((-1.0)*r00*x14514*x14522))+(((-1.0)*x14516)));
evalcond[7]=(((r01*x14514))+((r00*x14510*x14518))+(((-1.0)*r01*x14521*x14522))+x14527+(((-1.0)*r02*sj3*x14523))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14520))+((cj3*x14515))+(((-1.0)*sj3*x14513*x14522))+((sj3*x14510*x14517))+x14516+(((-1.0)*r22*sj3*x14523))+((r21*x14514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14528=((-1.0)*r01);
CheckValue<IkReal> x14531 = IKatan2WithCheck(IkReal(x14528),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14531.valid){
continue;
}
IkReal x14529=((1.0)*(x14531.value));
IkReal x14530=x14427;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14529)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14529)));
IkReal gconst16=(x14528*x14530);
IkReal gconst17=((1.0)*r00*x14530);
IkReal x14532=r02*r02;
IkReal x14533=(r12*sj0);
IkReal x14534=((1.0)*cj0);
IkReal x14535=x14427;
j4eval[0]=((IKabs(((((-1.0)*x14533))+(((-1.0)*r02*x14534)))))+(IKabs((((cj0*x14532*x14535))+((r02*x14533*x14535))+(((-1.0)*x14534*x14535))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14536=((1.0)*r12);
IkReal x14537=(sj1*sj2);
IkReal x14538=(cj1*cj2);
IkReal x14539=((1.0)*sj3);
IkReal x14540=(gconst16*r21);
IkReal x14541=(cj3*gconst16*r20);
IkReal x14542=(gconst17*r20*sj3);
IkReal x14543=(cj3*gconst17*r21);
CheckValue<IkReal> x14544=IKPowWithIntegerCheck((((gconst16*r11*x14542))+(((-1.0)*r10*r20*x14539*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14539*x14540))+((gconst17*r10*sj3*x14540))),-1);
if(!x14544.valid){
continue;
}
CheckValue<IkReal> x14545=IKPowWithIntegerCheck(((((-1.0)*x14539*x14540))+x14542),-1);
if(!x14545.valid){
continue;
}
if( IKabs(((x14544.value)*((((cj0*sj3*x14540))+((r12*x14538))+(((-1.0)*cj0*gconst17*r20*x14539))+(((-1.0)*x14536*x14537))+(((-1.0)*x14536*x14543))+(((-1.0)*x14536*x14541)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14545.value)*(((((-1.0)*x14537))+(((-1.0)*x14543))+(((-1.0)*x14541))+x14538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14544.value)*((((cj0*sj3*x14540))+((r12*x14538))+(((-1.0)*cj0*gconst17*r20*x14539))+(((-1.0)*x14536*x14537))+(((-1.0)*x14536*x14543))+(((-1.0)*x14536*x14541))))))+IKsqr(((x14545.value)*(((((-1.0)*x14537))+(((-1.0)*x14543))+(((-1.0)*x14541))+x14538))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14544.value)*((((cj0*sj3*x14540))+((r12*x14538))+(((-1.0)*cj0*gconst17*r20*x14539))+(((-1.0)*x14536*x14537))+(((-1.0)*x14536*x14543))+(((-1.0)*x14536*x14541))))), ((x14545.value)*(((((-1.0)*x14537))+(((-1.0)*x14543))+(((-1.0)*x14541))+x14538))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14546=IKsin(j4);
IkReal x14547=IKcos(j4);
IkReal x14548=((1.0)*gconst17);
IkReal x14549=(gconst17*sj3);
IkReal x14550=(gconst16*r21);
IkReal x14551=(cj3*gconst17);
IkReal x14552=(sj1*sj2);
IkReal x14553=((1.0)*sj0);
IkReal x14554=(gconst16*sj3);
IkReal x14555=(cj3*gconst16);
IkReal x14556=(cj2*sj1);
IkReal x14557=((1.0)*cj0);
IkReal x14558=((1.0)*sj3);
IkReal x14559=(cj1*sj2);
IkReal x14560=(cj3*x14547);
IkReal x14561=(gconst16*x14546);
IkReal x14562=((1.0)*x14547);
IkReal x14563=((1.0)*cj1*cj2);
IkReal x14564=(r02*x14546);
IkReal x14565=(r12*x14546);
evalcond[0]=((((-1.0)*r20*x14546*x14548))+((x14546*x14550)));
evalcond[1]=(cj0+(((-1.0)*r12*x14562))+((r11*x14561))+(((-1.0)*r10*x14546*x14548)));
evalcond[2]=(((r01*x14561))+(((-1.0)*r00*x14546*x14548))+(((-1.0)*r02*x14562))+(((-1.0)*x14553)));
evalcond[3]=((((-1.0)*r20*x14548*x14560))+((r20*x14554))+((r21*x14549))+x14559+x14556+((x14550*x14560)));
evalcond[4]=(((r20*x14555))+((r20*x14547*x14549))+(((-1.0)*x14563))+x14552+(((-1.0)*x14547*x14550*x14558))+((r21*x14551)));
evalcond[5]=(((r01*x14549))+(((-1.0)*cj1*cj2*x14557))+(((-1.0)*r00*x14548*x14560))+((cj3*x14564))+((r01*x14547*x14555))+((r00*x14554))+((cj0*x14552)));
evalcond[6]=(((r11*x14547*x14555))+((r11*x14549))+(((-1.0)*cj1*cj2*x14553))+((sj0*x14552))+((cj3*x14565))+((r10*x14554))+(((-1.0)*r10*x14548*x14560)));
evalcond[7]=((((-1.0)*r01*x14554*x14562))+(((-1.0)*x14558*x14564))+(((-1.0)*x14556*x14557))+((r01*x14551))+(((-1.0)*x14557*x14559))+((r00*x14555))+((r00*x14547*x14549)));
evalcond[8]=((((-1.0)*x14553*x14559))+(((-1.0)*x14553*x14556))+((r10*x14547*x14549))+(((-1.0)*x14558*x14565))+((r10*x14555))+((r11*x14551))+(((-1.0)*r11*x14554*x14562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14566=((1.0)*sj0);
IkReal x14567=((1.0)*cj0);
CheckValue<IkReal> x14568=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14568.valid){
continue;
}
CheckValue<IkReal> x14569 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14567))+(((-1.0)*r12*x14566)))),IkReal(((((-1.0)*gconst16*r01*x14567))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14568.value)))+(x14569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14570=IKsin(j4);
IkReal x14571=IKcos(j4);
IkReal x14572=((1.0)*gconst17);
IkReal x14573=(gconst17*sj3);
IkReal x14574=(gconst16*r21);
IkReal x14575=(cj3*gconst17);
IkReal x14576=(sj1*sj2);
IkReal x14577=((1.0)*sj0);
IkReal x14578=(gconst16*sj3);
IkReal x14579=(cj3*gconst16);
IkReal x14580=(cj2*sj1);
IkReal x14581=((1.0)*cj0);
IkReal x14582=((1.0)*sj3);
IkReal x14583=(cj1*sj2);
IkReal x14584=(cj3*x14571);
IkReal x14585=(gconst16*x14570);
IkReal x14586=((1.0)*x14571);
IkReal x14587=((1.0)*cj1*cj2);
IkReal x14588=(r02*x14570);
IkReal x14589=(r12*x14570);
evalcond[0]=(((x14570*x14574))+(((-1.0)*r20*x14570*x14572)));
evalcond[1]=(cj0+(((-1.0)*r10*x14570*x14572))+(((-1.0)*r12*x14586))+((r11*x14585)));
evalcond[2]=((((-1.0)*r00*x14570*x14572))+(((-1.0)*r02*x14586))+(((-1.0)*x14577))+((r01*x14585)));
evalcond[3]=((((-1.0)*r20*x14572*x14584))+((r21*x14573))+((r20*x14578))+((x14574*x14584))+x14583+x14580);
evalcond[4]=(((r21*x14575))+((r20*x14579))+(((-1.0)*x14587))+x14576+(((-1.0)*x14571*x14574*x14582))+((r20*x14571*x14573)));
evalcond[5]=(((cj3*x14588))+((cj0*x14576))+(((-1.0)*cj1*cj2*x14581))+((r01*x14571*x14579))+(((-1.0)*r00*x14572*x14584))+((r01*x14573))+((r00*x14578)));
evalcond[6]=(((cj3*x14589))+((r11*x14571*x14579))+(((-1.0)*cj1*cj2*x14577))+((r11*x14573))+((sj0*x14576))+(((-1.0)*r10*x14572*x14584))+((r10*x14578)));
evalcond[7]=((((-1.0)*r01*x14578*x14586))+(((-1.0)*x14580*x14581))+(((-1.0)*x14582*x14588))+(((-1.0)*x14581*x14583))+((r00*x14571*x14573))+((r01*x14575))+((r00*x14579)));
evalcond[8]=((((-1.0)*r11*x14578*x14586))+(((-1.0)*x14577*x14583))+(((-1.0)*x14577*x14580))+((r11*x14575))+((r10*x14579))+(((-1.0)*x14582*x14589))+((r10*x14571*x14573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14590=((1.0)*sj0);
IkReal x14591=((1.0)*cj0);
CheckValue<IkReal> x14592=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14592.valid){
continue;
}
CheckValue<IkReal> x14593 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14591))+(((-1.0)*r12*x14590)))),IkReal(((((-1.0)*gconst16*r01*x14591))+(((-1.0)*gconst16*r11*x14590))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14592.value)))+(x14593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14594=IKsin(j4);
IkReal x14595=IKcos(j4);
IkReal x14596=(cj3*gconst17);
IkReal x14597=(gconst16*r21);
IkReal x14598=(gconst17*sj3);
IkReal x14599=(gconst16*r20);
IkReal x14600=(sj1*sj2);
IkReal x14601=(gconst16*r10);
IkReal x14602=(cj2*sj1);
IkReal x14603=(gconst16*sj3);
IkReal x14604=((1.0)*cj0);
IkReal x14605=((1.0)*sj0);
IkReal x14606=(cj1*sj2);
IkReal x14607=((1.0)*x14595);
IkReal x14608=(gconst16*x14594);
IkReal x14609=(cj3*x14595);
IkReal x14610=(cj3*x14594);
IkReal x14611=((1.0)*cj1*cj2);
IkReal x14612=((1.0)*gconst17*x14594);
IkReal x14613=((1.0)*sj3*x14594);
evalcond[0]=((((-1.0)*r20*x14612))+(((-1.0)*r22*x14607))+((x14594*x14597)));
evalcond[1]=(cj0+(((-1.0)*r10*x14612))+(((-1.0)*r12*x14607))+((r11*x14608)));
evalcond[2]=(((r01*x14608))+(((-1.0)*r00*x14612))+(((-1.0)*r02*x14607))+(((-1.0)*x14605)));
evalcond[3]=(((x14597*x14609))+((r21*x14598))+((r22*x14610))+x14606+x14602+((sj3*x14599))+(((-1.0)*r20*x14596*x14607)));
evalcond[4]=(((cj3*x14599))+(((-1.0)*r22*x14613))+(((-1.0)*sj3*x14597*x14607))+((r21*x14596))+((r20*x14595*x14598))+x14600+(((-1.0)*x14611)));
evalcond[5]=(((r02*x14610))+((gconst16*r01*x14609))+((cj0*x14600))+(((-1.0)*cj1*cj2*x14604))+((r00*x14603))+((r01*x14598))+(((-1.0)*r00*x14596*x14607)));
evalcond[6]=(((gconst16*r11*x14609))+((sj0*x14600))+(((-1.0)*cj1*cj2*x14605))+(((-1.0)*r10*x14596*x14607))+((sj3*x14601))+((r11*x14598))+((r12*x14610)));
evalcond[7]=((((-1.0)*x14604*x14606))+((r00*x14595*x14598))+(((-1.0)*r01*x14603*x14607))+((r01*x14596))+(((-1.0)*x14602*x14604))+(((-1.0)*r02*x14613))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14603*x14607))+(((-1.0)*r12*x14613))+((cj3*x14601))+((r10*x14595*x14598))+(((-1.0)*x14605*x14606))+(((-1.0)*x14602*x14605))+((r11*x14596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14614=((1.0)*gconst17);
CheckValue<IkReal> x14615=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14614)))),-1);
if(!x14615.valid){
continue;
}
CheckValue<IkReal> x14616 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14615.value)))+(x14616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14617=IKsin(j4);
IkReal x14618=IKcos(j4);
IkReal x14619=(cj3*gconst17);
IkReal x14620=(gconst16*r21);
IkReal x14621=(gconst17*sj3);
IkReal x14622=(gconst16*r20);
IkReal x14623=(sj1*sj2);
IkReal x14624=(gconst16*r10);
IkReal x14625=(cj2*sj1);
IkReal x14626=(gconst16*sj3);
IkReal x14627=((1.0)*cj0);
IkReal x14628=((1.0)*sj0);
IkReal x14629=(cj1*sj2);
IkReal x14630=((1.0)*x14618);
IkReal x14631=(gconst16*x14617);
IkReal x14632=(cj3*x14618);
IkReal x14633=(cj3*x14617);
IkReal x14634=((1.0)*cj1*cj2);
IkReal x14635=((1.0)*gconst17*x14617);
IkReal x14636=((1.0)*sj3*x14617);
evalcond[0]=((((-1.0)*r22*x14630))+(((-1.0)*r20*x14635))+((x14617*x14620)));
evalcond[1]=(cj0+((r11*x14631))+(((-1.0)*r10*x14635))+(((-1.0)*r12*x14630)));
evalcond[2]=((((-1.0)*x14628))+(((-1.0)*r00*x14635))+((r01*x14631))+(((-1.0)*r02*x14630)));
evalcond[3]=(((sj3*x14622))+((r22*x14633))+((r21*x14621))+x14625+x14629+(((-1.0)*r20*x14619*x14630))+((x14620*x14632)));
evalcond[4]=((((-1.0)*r22*x14636))+((r20*x14618*x14621))+((r21*x14619))+((cj3*x14622))+(((-1.0)*x14634))+x14623+(((-1.0)*sj3*x14620*x14630)));
evalcond[5]=((((-1.0)*r00*x14619*x14630))+((r02*x14633))+((gconst16*r01*x14632))+((cj0*x14623))+((r00*x14626))+((r01*x14621))+(((-1.0)*cj1*cj2*x14627)));
evalcond[6]=(((sj3*x14624))+((gconst16*r11*x14632))+((r11*x14621))+((r12*x14633))+(((-1.0)*r10*x14619*x14630))+(((-1.0)*cj1*cj2*x14628))+((sj0*x14623)));
evalcond[7]=(((r00*x14618*x14621))+((r01*x14619))+(((-1.0)*x14625*x14627))+((cj3*gconst16*r00))+(((-1.0)*r01*x14626*x14630))+(((-1.0)*x14627*x14629))+(((-1.0)*r02*x14636)));
evalcond[8]=((((-1.0)*x14628*x14629))+(((-1.0)*r11*x14626*x14630))+((cj3*x14624))+((r10*x14618*x14621))+(((-1.0)*x14625*x14628))+((r11*x14619))+(((-1.0)*r12*x14636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14637=((1.0)*gconst17);
CheckValue<IkReal> x14638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14637)))),-1);
if(!x14638.valid){
continue;
}
CheckValue<IkReal> x14639 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14637))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14638.value)))+(x14639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14640=IKsin(j4);
IkReal x14641=IKcos(j4);
IkReal x14642=(cj3*gconst17);
IkReal x14643=(gconst16*r21);
IkReal x14644=(gconst17*sj3);
IkReal x14645=(gconst16*r20);
IkReal x14646=(sj1*sj2);
IkReal x14647=(gconst16*r10);
IkReal x14648=(cj2*sj1);
IkReal x14649=(gconst16*sj3);
IkReal x14650=((1.0)*cj0);
IkReal x14651=((1.0)*sj0);
IkReal x14652=(cj1*sj2);
IkReal x14653=((1.0)*x14641);
IkReal x14654=(gconst16*x14640);
IkReal x14655=(cj3*x14641);
IkReal x14656=(cj3*x14640);
IkReal x14657=((1.0)*cj1*cj2);
IkReal x14658=((1.0)*gconst17*x14640);
IkReal x14659=((1.0)*sj3*x14640);
evalcond[0]=((((-1.0)*r22*x14653))+((x14640*x14643))+(((-1.0)*r20*x14658)));
evalcond[1]=(cj0+(((-1.0)*r12*x14653))+(((-1.0)*r10*x14658))+((r11*x14654)));
evalcond[2]=(((r01*x14654))+(((-1.0)*r02*x14653))+(((-1.0)*r00*x14658))+(((-1.0)*x14651)));
evalcond[3]=(((r22*x14656))+((sj3*x14645))+(((-1.0)*r20*x14642*x14653))+((r21*x14644))+x14652+x14648+((x14643*x14655)));
evalcond[4]=(((r20*x14641*x14644))+(((-1.0)*r22*x14659))+((r21*x14642))+x14646+(((-1.0)*x14657))+((cj3*x14645))+(((-1.0)*sj3*x14643*x14653)));
evalcond[5]=(((gconst16*r01*x14655))+((cj0*x14646))+((r01*x14644))+((r00*x14649))+(((-1.0)*cj1*cj2*x14650))+((r02*x14656))+(((-1.0)*r00*x14642*x14653)));
evalcond[6]=(((r11*x14644))+((r12*x14656))+(((-1.0)*r10*x14642*x14653))+((sj0*x14646))+((sj3*x14647))+(((-1.0)*cj1*cj2*x14651))+((gconst16*r11*x14655)));
evalcond[7]=((((-1.0)*r01*x14649*x14653))+((r01*x14642))+(((-1.0)*r02*x14659))+(((-1.0)*x14650*x14652))+((r00*x14641*x14644))+((cj3*gconst16*r00))+(((-1.0)*x14648*x14650)));
evalcond[8]=(((r11*x14642))+(((-1.0)*r12*x14659))+((r10*x14641*x14644))+(((-1.0)*r11*x14649*x14653))+((cj3*x14647))+(((-1.0)*x14651*x14652))+(((-1.0)*x14648*x14651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14660=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14660;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14661=((1.0)*cj5);
IkReal x14662=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14661)));
j4eval[0]=x14662;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14661))))));
j4eval[2]=IKsign(x14662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14663=cj5*cj5;
IkReal x14664=(cj3*r01);
IkReal x14665=(cj5*sj5);
IkReal x14666=((1.0)*cj3);
IkReal x14667=(((cj3*r00*r21*x14665))+((r21*x14663*x14664))+(((-1.0)*r21*x14664))+(((-1.0)*r02*r22*x14666))+(((-1.0)*r00*r20*x14663*x14666))+((r20*x14664*x14665)));
j4eval[0]=x14667;
j4eval[1]=IKsign(x14667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14668=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14668;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14669=((1.0)*cj5);
IkReal x14670=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14669)));
j4eval[0]=x14670;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14669))))));
j4eval[2]=IKsign(x14670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14671=cj5*cj5;
IkReal x14672=r01*r01;
IkReal x14673=(r01*sj5);
IkReal x14674=(cj5*r00);
IkReal x14675=((((-1.0)*x14671*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14672))+((x14671*x14672))+(((2.0)*x14673*x14674)));
j4eval[0]=x14675;
j4eval[1]=IKsign(x14675);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14673))+x14674))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14676=cj5*cj5;
IkReal x14677=r01*r01;
IkReal x14678=(r01*sj5);
IkReal x14679=(cj5*r00);
CheckValue<IkReal> x14680=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x14678*x14679))+(((-1.0)*x14677))+((x14676*x14677))+(((-1.0)*x14676*(r00*r00))))),-1);
if(!x14680.valid){
continue;
}
CheckValue<IkReal> x14681 = IKatan2WithCheck(IkReal(((((-1.0)*x14678))+x14679)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14680.value)))+(x14681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14682=IKsin(j4);
IkReal x14683=IKcos(j4);
IkReal x14684=(cj5*r10);
IkReal x14685=(r01*sj5);
IkReal x14686=((1.0)*cj2);
IkReal x14687=(cj5*r00);
IkReal x14688=(cj5*r20);
IkReal x14689=((1.0)*x14683);
IkReal x14690=((1.0)*x14682);
IkReal x14691=(sj5*x14682);
evalcond[0]=((((-1.0)*r22*x14689))+((r21*x14691))+(((-1.0)*x14688*x14690)));
evalcond[1]=((((-1.0)*x14684*x14690))+((r11*x14691))+(((-1.0)*r12*x14689)));
evalcond[2]=((((-1.0)*r02*x14690))+(((-1.0)*x14685*x14689))+((x14683*x14687)));
evalcond[3]=((-1.0)+((x14682*x14685))+(((-1.0)*r02*x14689))+(((-1.0)*x14687*x14690)));
evalcond[4]=((((-1.0)*cj1*x14686))+(((-1.0)*r21*sj5*x14689))+((sj1*sj2))+(((-1.0)*r22*x14690))+((x14683*x14688)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14686))+(((-1.0)*r11*sj5*x14689))+(((-1.0)*r12*x14690))+((x14683*x14684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14692=((1.0)*cj5);
CheckValue<IkReal> x14693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14692)))),-1);
if(!x14693.valid){
continue;
}
CheckValue<IkReal> x14694 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14693.value)))+(x14694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14695=IKsin(j4);
IkReal x14696=IKcos(j4);
IkReal x14697=(cj5*r10);
IkReal x14698=(r01*sj5);
IkReal x14699=((1.0)*cj2);
IkReal x14700=(cj5*r00);
IkReal x14701=(cj5*r20);
IkReal x14702=((1.0)*x14696);
IkReal x14703=((1.0)*x14695);
IkReal x14704=(sj5*x14695);
evalcond[0]=(((r21*x14704))+(((-1.0)*r22*x14702))+(((-1.0)*x14701*x14703)));
evalcond[1]=((((-1.0)*r12*x14702))+((r11*x14704))+(((-1.0)*x14697*x14703)));
evalcond[2]=((((-1.0)*x14698*x14702))+((x14696*x14700))+(((-1.0)*r02*x14703)));
evalcond[3]=((-1.0)+((x14695*x14698))+(((-1.0)*x14700*x14703))+(((-1.0)*r02*x14702)));
evalcond[4]=((((-1.0)*cj1*x14699))+((sj1*sj2))+((x14696*x14701))+(((-1.0)*r21*sj5*x14702))+(((-1.0)*r22*x14703)));
evalcond[5]=(((x14696*x14697))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14703))+(((-1.0)*r11*sj5*x14702))+(((-1.0)*sj1*x14699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14705=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14705.valid){
continue;
}
CheckValue<IkReal> x14706 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14705.value)))+(x14706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14707=IKsin(j4);
IkReal x14708=IKcos(j4);
IkReal x14709=(cj5*r10);
IkReal x14710=(r01*sj5);
IkReal x14711=((1.0)*cj2);
IkReal x14712=(cj5*r00);
IkReal x14713=(cj5*r20);
IkReal x14714=((1.0)*x14708);
IkReal x14715=((1.0)*x14707);
IkReal x14716=(sj5*x14707);
evalcond[0]=(((r21*x14716))+(((-1.0)*r22*x14714))+(((-1.0)*x14713*x14715)));
evalcond[1]=(((r11*x14716))+(((-1.0)*x14709*x14715))+(((-1.0)*r12*x14714)));
evalcond[2]=((((-1.0)*r02*x14715))+(((-1.0)*x14710*x14714))+((x14708*x14712)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14714))+((x14707*x14710))+(((-1.0)*x14712*x14715)));
evalcond[4]=((((-1.0)*r22*x14715))+((sj1*sj2))+((x14708*x14713))+(((-1.0)*cj1*x14711))+(((-1.0)*r21*sj5*x14714)));
evalcond[5]=((((-1.0)*sj1*x14711))+(((-1.0)*r11*sj5*x14714))+((x14708*x14709))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14717=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14717;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14718=((1.0)*cj5);
IkReal x14719=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14718)));
j4eval[0]=x14719;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14718))))));
j4eval[2]=IKsign(x14719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14720=cj5*cj5;
IkReal x14721=r01*r01;
IkReal x14722=(cj5*r00);
IkReal x14723=(r01*sj5);
IkReal x14724=((((-2.0)*x14722*x14723))+((x14720*(r00*r00)))+x14721+(((-1.0)*x14720*x14721))+(r02*r02));
j4eval[0]=x14724;
j4eval[1]=IKsign(x14724);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14722))+x14723))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14725=cj5*cj5;
IkReal x14726=r01*r01;
IkReal x14727=(r01*sj5);
IkReal x14728=(cj5*r00);
CheckValue<IkReal> x14729=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14727*x14728))+x14726+(r02*r02)+(((-1.0)*x14725*x14726))+((x14725*(r00*r00))))),-1);
if(!x14729.valid){
continue;
}
CheckValue<IkReal> x14730 = IKatan2WithCheck(IkReal(((((-1.0)*x14728))+x14727)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14729.value)))+(x14730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14731=IKcos(j4);
IkReal x14732=IKsin(j4);
IkReal x14733=(cj5*r00);
IkReal x14734=(cj5*r10);
IkReal x14735=(r21*sj5);
IkReal x14736=((1.0)*cj2);
IkReal x14737=(cj5*r20);
IkReal x14738=((1.0)*x14731);
IkReal x14739=((1.0)*x14732);
IkReal x14740=(sj5*x14732);
IkReal x14741=(sj5*x14731);
evalcond[0]=(((r02*x14732))+((r01*x14741))+(((-1.0)*x14733*x14738)));
evalcond[1]=(((x14732*x14735))+(((-1.0)*x14737*x14739))+(((-1.0)*r22*x14738)));
evalcond[2]=((((-1.0)*r12*x14738))+((r11*x14740))+(((-1.0)*x14734*x14739)));
evalcond[3]=((-1.0)+((r01*x14740))+(((-1.0)*r02*x14738))+(((-1.0)*x14733*x14739)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14737*x14738))+(((-1.0)*cj1*x14736))+((r22*x14732))+((x14731*x14735)));
evalcond[5]=((((-1.0)*sj1*x14736))+((r11*x14741))+(((-1.0)*cj1*sj2))+((r12*x14732))+(((-1.0)*x14734*x14738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14742=((1.0)*cj5);
CheckValue<IkReal> x14743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14742)))),-1);
if(!x14743.valid){
continue;
}
CheckValue<IkReal> x14744 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14743.value)))+(x14744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14745=IKcos(j4);
IkReal x14746=IKsin(j4);
IkReal x14747=(cj5*r00);
IkReal x14748=(cj5*r10);
IkReal x14749=(r21*sj5);
IkReal x14750=((1.0)*cj2);
IkReal x14751=(cj5*r20);
IkReal x14752=((1.0)*x14745);
IkReal x14753=((1.0)*x14746);
IkReal x14754=(sj5*x14746);
IkReal x14755=(sj5*x14745);
evalcond[0]=((((-1.0)*x14747*x14752))+((r01*x14755))+((r02*x14746)));
evalcond[1]=((((-1.0)*x14751*x14753))+((x14746*x14749))+(((-1.0)*r22*x14752)));
evalcond[2]=((((-1.0)*r12*x14752))+((r11*x14754))+(((-1.0)*x14748*x14753)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14752))+(((-1.0)*x14747*x14753))+((r01*x14754)));
evalcond[4]=(((r22*x14746))+(((-1.0)*x14751*x14752))+(((-1.0)*cj1*x14750))+((sj1*sj2))+((x14745*x14749)));
evalcond[5]=(((r12*x14746))+(((-1.0)*sj1*x14750))+(((-1.0)*cj1*sj2))+((r11*x14755))+(((-1.0)*x14748*x14752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14756.valid){
continue;
}
CheckValue<IkReal> x14757 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14756.value)))+(x14757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14758=IKcos(j4);
IkReal x14759=IKsin(j4);
IkReal x14760=(cj5*r00);
IkReal x14761=(cj5*r10);
IkReal x14762=(r21*sj5);
IkReal x14763=((1.0)*cj2);
IkReal x14764=(cj5*r20);
IkReal x14765=((1.0)*x14758);
IkReal x14766=((1.0)*x14759);
IkReal x14767=(sj5*x14759);
IkReal x14768=(sj5*x14758);
evalcond[0]=((((-1.0)*x14760*x14765))+((r01*x14768))+((r02*x14759)));
evalcond[1]=((((-1.0)*x14764*x14766))+(((-1.0)*r22*x14765))+((x14759*x14762)));
evalcond[2]=((((-1.0)*r12*x14765))+((r11*x14767))+(((-1.0)*x14761*x14766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14765))+(((-1.0)*x14760*x14766))+((r01*x14767)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14764*x14765))+((x14758*x14762))+(((-1.0)*cj1*x14763))+((r22*x14759)));
evalcond[5]=((((-1.0)*sj1*x14763))+(((-1.0)*cj1*sj2))+((r11*x14768))+((r12*x14759))+(((-1.0)*x14761*x14765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14770 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14770)==0){
continue;
}
IkReal x14769=pow(x14770,-0.5);
CheckValue<IkReal> x14771 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14771.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14771.value));
IkReal gconst49=((-1.0)*r21*x14769);
IkReal gconst50=(r20*x14769);
CheckValue<IkReal> x14772 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14772.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14772.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14775 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14775.valid){
continue;
}
IkReal x14773=((-1.0)*(x14775.value));
IkReal x14774=x14769;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14773;
IkReal gconst48=x14773;
IkReal gconst49=((-1.0)*r21*x14774);
IkReal gconst50=(r20*x14774);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14778 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14778.valid){
continue;
}
IkReal x14776=((-1.0)*(x14778.value));
IkReal x14777=x14769;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14776;
IkReal gconst48=x14776;
IkReal gconst49=((-1.0)*r21*x14777);
IkReal gconst50=(r20*x14777);
CheckValue<IkReal> x14786=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14786.valid){
continue;
}
IkReal x14779=x14786.value;
IkReal x14780=(sj3*x14779);
IkReal x14781=(r11*x14780);
IkReal x14782=(r00*x14780);
IkReal x14783=(r01*x14780);
IkReal x14784=(r10*x14780);
IkReal x14785=(r20*r21*x14780);
j4eval[0]=IKsign((((r01*x14781*(r21*r21)))+((r02*r12*sj3))+((r10*x14782*(r20*r20)))+((r00*r20*r21*x14781))+((r10*r20*r21*x14783))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14787=gconst49*gconst49;
IkReal x14788=gconst50*gconst50;
IkReal x14789=((1.0)*cj3);
IkReal x14790=(gconst50*r01);
IkReal x14791=(gconst49*r10);
IkReal x14792=(r12*sj3);
IkReal x14793=(gconst49*r00);
IkReal x14794=(r00*sj3);
IkReal x14795=(r11*x14787);
IkReal x14796=(r10*x14788);
CheckValue<IkReal> x14797 = IKatan2WithCheck(IkReal((((x14792*x14793))+((x14790*x14792)))),IkReal(((((-1.0)*gconst50*x14791*x14794))+((gconst49*r11*sj3*x14790))+((x14794*x14795))+(((-1.0)*r01*sj3*x14796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14797.valid){
continue;
}
CheckValue<IkReal> x14798=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14793))+(((-1.0)*r01*x14789*x14795))+(((-1.0)*r02*r12*x14789))+(((-1.0)*r00*x14789*x14796))+((cj3*x14790*x14791)))),-1);
if(!x14798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14797.value)+(((1.5707963267949)*(x14798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14799=IKsin(j4);
IkReal x14800=IKcos(j4);
IkReal x14801=(sj1*sj2);
IkReal x14802=(gconst50*r20);
IkReal x14803=(gconst50*sj3);
IkReal x14804=(cj3*r01);
IkReal x14805=(gconst50*r10);
IkReal x14806=(gconst49*sj3);
IkReal x14807=((1.0)*cj2);
IkReal x14808=(cj1*sj2);
IkReal x14809=(cj3*r11);
IkReal x14810=(gconst50*r00);
IkReal x14811=(cj3*r21);
IkReal x14812=(cj3*gconst49);
IkReal x14813=(cj1*x14807);
IkReal x14814=((1.0)*x14800);
IkReal x14815=((1.0)*x14799);
IkReal x14816=(gconst49*x14799);
IkReal x14817=(gconst49*x14800);
IkReal x14818=(cj3*x14799);
evalcond[0]=((((-1.0)*x14802*x14815))+(((-1.0)*r22*x14814))+((r21*x14816)));
evalcond[1]=((((-1.0)*r12*x14814))+((r11*x14816))+(((-1.0)*x14805*x14815)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14814))+((r01*x14816))+(((-1.0)*x14810*x14815)));
evalcond[3]=((((-1.0)*cj3*x14810*x14814))+((r01*x14803))+((r00*x14806))+((x14804*x14817))+((r02*x14818)));
evalcond[4]=(((r00*x14800*x14803))+(((-1.0)*r02*sj3*x14815))+((r00*x14812))+(((-1.0)*r01*x14806*x14814))+((gconst50*x14804)));
evalcond[5]=(((cj2*sj1))+((r21*x14803))+x14808+((r22*x14818))+(((-1.0)*cj3*x14802*x14814))+((x14811*x14817))+((r20*x14806)));
evalcond[6]=(x14801+((r10*x14806))+(((-1.0)*x14813))+(((-1.0)*cj3*x14805*x14814))+((x14809*x14817))+((r11*x14803))+((r12*x14818)));
evalcond[7]=(x14801+(((-1.0)*x14813))+(((-1.0)*r21*x14806*x14814))+(((-1.0)*r22*sj3*x14815))+((r20*x14812))+((sj3*x14800*x14802))+((gconst50*x14811)));
evalcond[8]=(((r10*x14800*x14803))+((r10*x14812))+(((-1.0)*r12*sj3*x14815))+(((-1.0)*x14808))+(((-1.0)*sj1*x14807))+((gconst50*x14809))+(((-1.0)*r11*x14806*x14814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14819=gconst49*gconst49;
IkReal x14820=gconst50*gconst50;
IkReal x14821=(cj3*r12);
IkReal x14822=(gconst49*r00);
IkReal x14823=(r01*r11);
IkReal x14824=(r00*r11);
IkReal x14825=(cj3*gconst50);
IkReal x14826=((1.0)*r01*r10);
IkReal x14827=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14828 = IKatan2WithCheck(IkReal((((x14821*x14822))+((gconst50*r01*x14821)))),IkReal(((((-1.0)*cj3*x14820*x14826))+(((-1.0)*r10*x14822*x14825))+((gconst49*x14823*x14825))+((cj3*x14819*x14824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14828.valid){
continue;
}
CheckValue<IkReal> x14829=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14826*x14827))+((r00*r10*sj3*x14820))+((sj3*x14819*x14823))+(((-1.0)*gconst50*r11*sj3*x14822)))),-1);
if(!x14829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14828.value)+(((1.5707963267949)*(x14829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14830=IKsin(j4);
IkReal x14831=IKcos(j4);
IkReal x14832=(sj1*sj2);
IkReal x14833=(gconst50*r20);
IkReal x14834=(gconst50*sj3);
IkReal x14835=(cj3*r01);
IkReal x14836=(gconst50*r10);
IkReal x14837=(gconst49*sj3);
IkReal x14838=((1.0)*cj2);
IkReal x14839=(cj1*sj2);
IkReal x14840=(cj3*r11);
IkReal x14841=(gconst50*r00);
IkReal x14842=(cj3*r21);
IkReal x14843=(cj3*gconst49);
IkReal x14844=(cj1*x14838);
IkReal x14845=((1.0)*x14831);
IkReal x14846=((1.0)*x14830);
IkReal x14847=(gconst49*x14830);
IkReal x14848=(gconst49*x14831);
IkReal x14849=(cj3*x14830);
evalcond[0]=((((-1.0)*x14833*x14846))+(((-1.0)*r22*x14845))+((r21*x14847)));
evalcond[1]=((((-1.0)*x14836*x14846))+((r11*x14847))+(((-1.0)*r12*x14845)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14845))+((r01*x14847))+(((-1.0)*x14841*x14846)));
evalcond[3]=(((r02*x14849))+(((-1.0)*cj3*x14841*x14845))+((r01*x14834))+((r00*x14837))+((x14835*x14848)));
evalcond[4]=(((r00*x14831*x14834))+((gconst50*x14835))+(((-1.0)*r02*sj3*x14846))+(((-1.0)*r01*x14837*x14845))+((r00*x14843)));
evalcond[5]=(((cj2*sj1))+x14839+((r20*x14837))+((r21*x14834))+(((-1.0)*cj3*x14833*x14845))+((r22*x14849))+((x14842*x14848)));
evalcond[6]=(((x14840*x14848))+x14832+((r11*x14834))+((r12*x14849))+(((-1.0)*x14844))+((r10*x14837))+(((-1.0)*cj3*x14836*x14845)));
evalcond[7]=(((r20*x14843))+((sj3*x14831*x14833))+(((-1.0)*r21*x14837*x14845))+x14832+(((-1.0)*x14844))+((gconst50*x14842))+(((-1.0)*r22*sj3*x14846)));
evalcond[8]=((((-1.0)*x14839))+((r10*x14831*x14834))+(((-1.0)*r11*x14837*x14845))+(((-1.0)*sj1*x14838))+((gconst50*x14840))+((r10*x14843))+(((-1.0)*r12*sj3*x14846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14850=((1.0)*gconst50);
CheckValue<IkReal> x14851=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14850)))),-1);
if(!x14851.valid){
continue;
}
CheckValue<IkReal> x14852 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14851.value)))+(x14852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14853=IKsin(j4);
IkReal x14854=IKcos(j4);
IkReal x14855=(sj1*sj2);
IkReal x14856=(gconst50*r20);
IkReal x14857=(gconst50*sj3);
IkReal x14858=(cj3*r01);
IkReal x14859=(gconst50*r10);
IkReal x14860=(gconst49*sj3);
IkReal x14861=((1.0)*cj2);
IkReal x14862=(cj1*sj2);
IkReal x14863=(cj3*r11);
IkReal x14864=(gconst50*r00);
IkReal x14865=(cj3*r21);
IkReal x14866=(cj3*gconst49);
IkReal x14867=(cj1*x14861);
IkReal x14868=((1.0)*x14854);
IkReal x14869=((1.0)*x14853);
IkReal x14870=(gconst49*x14853);
IkReal x14871=(gconst49*x14854);
IkReal x14872=(cj3*x14853);
evalcond[0]=((((-1.0)*x14856*x14869))+((r21*x14870))+(((-1.0)*r22*x14868)));
evalcond[1]=(((r11*x14870))+(((-1.0)*x14859*x14869))+(((-1.0)*r12*x14868)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14868))+((r01*x14870))+(((-1.0)*x14864*x14869)));
evalcond[3]=(((x14858*x14871))+(((-1.0)*cj3*x14864*x14868))+((r00*x14860))+((r01*x14857))+((r02*x14872)));
evalcond[4]=((((-1.0)*r02*sj3*x14869))+(((-1.0)*r01*x14860*x14868))+((r00*x14854*x14857))+((gconst50*x14858))+((r00*x14866)));
evalcond[5]=(((r21*x14857))+((cj2*sj1))+((x14865*x14871))+((r22*x14872))+((r20*x14860))+x14862+(((-1.0)*cj3*x14856*x14868)));
evalcond[6]=(((r12*x14872))+x14855+(((-1.0)*cj3*x14859*x14868))+((x14863*x14871))+((r11*x14857))+((r10*x14860))+(((-1.0)*x14867)));
evalcond[7]=(((r20*x14866))+x14855+((sj3*x14854*x14856))+((gconst50*x14865))+(((-1.0)*r21*x14860*x14868))+(((-1.0)*x14867))+(((-1.0)*r22*sj3*x14869)));
evalcond[8]=((((-1.0)*sj1*x14861))+((gconst50*x14863))+((r10*x14866))+((r10*x14854*x14857))+(((-1.0)*r12*sj3*x14869))+(((-1.0)*x14862))+(((-1.0)*r11*x14860*x14868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14874 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14874)==0){
continue;
}
IkReal x14873=pow(x14874,-0.5);
CheckValue<IkReal> x14875 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14875.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14875.value))));
IkReal gconst52=((1.0)*r21*x14873);
IkReal gconst53=((-1.0)*r20*x14873);
CheckValue<IkReal> x14876 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14876.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14876.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14879 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14879.valid){
continue;
}
IkReal x14877=((1.0)*(x14879.value));
IkReal x14878=x14873;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14877)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14877)));
IkReal gconst52=((1.0)*r21*x14878);
IkReal gconst53=((-1.0)*r20*x14878);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14882 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14882.valid){
continue;
}
IkReal x14880=((1.0)*(x14882.value));
IkReal x14881=x14873;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14880)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14880)));
IkReal gconst52=((1.0)*r21*x14881);
IkReal gconst53=((-1.0)*r20*x14881);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14885 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14885.valid){
continue;
}
IkReal x14883=((1.0)*(x14885.value));
IkReal x14884=x14873;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14883)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14883)));
IkReal gconst52=((1.0)*r21*x14884);
IkReal gconst53=((-1.0)*r20*x14884);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14886=gconst52*gconst52;
IkReal x14887=gconst53*gconst53;
IkReal x14888=(gconst53*r01);
IkReal x14889=(cj3*r20);
IkReal x14890=(r22*sj3);
IkReal x14891=((1.0)*cj3);
IkReal x14892=(gconst52*sj3);
IkReal x14893=((1.0)*r00);
IkReal x14894=(gconst52*r00);
IkReal x14895=(r21*x14886);
CheckValue<IkReal> x14896=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14887*x14889*x14893))+((cj3*gconst53*r21*x14894))+(((-1.0)*r01*x14891*x14895))+((gconst52*x14888*x14889))+(((-1.0)*r02*r22*x14891)))),-1);
if(!x14896.valid){
continue;
}
CheckValue<IkReal> x14897 = IKatan2WithCheck(IkReal((((x14890*x14894))+((x14888*x14890)))),IkReal((((r21*x14888*x14892))+((r00*sj3*x14895))+(((-1.0)*r01*r20*sj3*x14887))+(((-1.0)*gconst53*r20*x14892*x14893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14896.value)))+(x14897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14898=IKsin(j4);
IkReal x14899=IKcos(j4);
IkReal x14900=(sj1*sj2);
IkReal x14901=((1.0)*cj1);
IkReal x14902=(cj3*gconst52);
IkReal x14903=(gconst53*sj3);
IkReal x14904=(cj3*gconst53);
IkReal x14905=(cj2*sj1);
IkReal x14906=(gconst52*sj3);
IkReal x14907=(cj2*x14901);
IkReal x14908=((1.0)*x14899);
IkReal x14909=((1.0)*x14898);
IkReal x14910=(gconst52*x14898);
IkReal x14911=(cj3*x14898);
evalcond[0]=(((r21*x14910))+(((-1.0)*r22*x14908))+(((-1.0)*gconst53*r20*x14909)));
evalcond[1]=((((-1.0)*r12*x14908))+((r11*x14910))+(((-1.0)*gconst53*r10*x14909)));
evalcond[2]=((-1.0)+((r01*x14910))+(((-1.0)*r02*x14908))+(((-1.0)*gconst53*r00*x14909)));
evalcond[3]=(((r00*x14906))+((r01*x14903))+((r02*x14911))+((r01*x14899*x14902))+(((-1.0)*r00*x14904*x14908)));
evalcond[4]=(((r00*x14902))+(((-1.0)*r01*x14906*x14908))+((r01*x14904))+((r00*x14899*x14903))+(((-1.0)*r02*sj3*x14909)));
evalcond[5]=(((r22*x14911))+((r21*x14903))+x14905+((cj1*sj2))+((r20*x14906))+(((-1.0)*r20*x14904*x14908))+((r21*x14899*x14902)));
evalcond[6]=(((r11*x14899*x14902))+((r11*x14903))+x14900+(((-1.0)*x14907))+((r12*x14911))+(((-1.0)*r10*x14904*x14908))+((r10*x14906)));
evalcond[7]=(((r21*x14904))+x14900+(((-1.0)*x14907))+(((-1.0)*r22*sj3*x14909))+(((-1.0)*r21*x14906*x14908))+((r20*x14902))+((r20*x14899*x14903)));
evalcond[8]=(((r11*x14904))+(((-1.0)*x14905))+((r10*x14899*x14903))+(((-1.0)*r11*x14906*x14908))+(((-1.0)*r12*sj3*x14909))+((r10*x14902))+(((-1.0)*sj2*x14901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14912=((1.0)*gconst53);
CheckValue<IkReal> x14913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14912))+(((-1.0)*gconst52*r10)))),-1);
if(!x14913.valid){
continue;
}
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14913.value)))+(x14914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14915=IKsin(j4);
IkReal x14916=IKcos(j4);
IkReal x14917=(sj1*sj2);
IkReal x14918=((1.0)*cj1);
IkReal x14919=(cj3*gconst52);
IkReal x14920=(gconst53*sj3);
IkReal x14921=(cj3*gconst53);
IkReal x14922=(cj2*sj1);
IkReal x14923=(gconst52*sj3);
IkReal x14924=(cj2*x14918);
IkReal x14925=((1.0)*x14916);
IkReal x14926=((1.0)*x14915);
IkReal x14927=(gconst52*x14915);
IkReal x14928=(cj3*x14915);
evalcond[0]=(((r21*x14927))+(((-1.0)*r22*x14925))+(((-1.0)*gconst53*r20*x14926)));
evalcond[1]=((((-1.0)*r12*x14925))+((r11*x14927))+(((-1.0)*gconst53*r10*x14926)));
evalcond[2]=((-1.0)+((r01*x14927))+(((-1.0)*gconst53*r00*x14926))+(((-1.0)*r02*x14925)));
evalcond[3]=((((-1.0)*r00*x14921*x14925))+((r01*x14920))+((r01*x14916*x14919))+((r00*x14923))+((r02*x14928)));
evalcond[4]=(((r00*x14916*x14920))+((r00*x14919))+(((-1.0)*r02*sj3*x14926))+(((-1.0)*r01*x14923*x14925))+((r01*x14921)));
evalcond[5]=((((-1.0)*r20*x14921*x14925))+x14922+((cj1*sj2))+((r21*x14920))+((r22*x14928))+((r21*x14916*x14919))+((r20*x14923)));
evalcond[6]=((((-1.0)*r10*x14921*x14925))+((r11*x14916*x14919))+x14917+((r10*x14923))+(((-1.0)*x14924))+((r11*x14920))+((r12*x14928)));
evalcond[7]=(((r20*x14916*x14920))+(((-1.0)*r21*x14923*x14925))+x14917+(((-1.0)*r22*sj3*x14926))+((r21*x14921))+(((-1.0)*x14924))+((r20*x14919)));
evalcond[8]=(((r10*x14919))+(((-1.0)*sj2*x14918))+(((-1.0)*x14922))+(((-1.0)*r12*sj3*x14926))+(((-1.0)*r11*x14923*x14925))+((r11*x14921))+((r10*x14916*x14920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14929 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14929.valid){
continue;
}
CheckValue<IkReal> x14930=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14929.value)+(((1.5707963267949)*(x14930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14931=IKsin(j4);
IkReal x14932=IKcos(j4);
IkReal x14933=(sj1*sj2);
IkReal x14934=((1.0)*cj1);
IkReal x14935=(cj3*gconst52);
IkReal x14936=(gconst53*sj3);
IkReal x14937=(cj3*gconst53);
IkReal x14938=(cj2*sj1);
IkReal x14939=(gconst52*sj3);
IkReal x14940=(cj2*x14934);
IkReal x14941=((1.0)*x14932);
IkReal x14942=((1.0)*x14931);
IkReal x14943=(gconst52*x14931);
IkReal x14944=(cj3*x14931);
evalcond[0]=((((-1.0)*gconst53*r20*x14942))+((r21*x14943))+(((-1.0)*r22*x14941)));
evalcond[1]=((((-1.0)*r12*x14941))+(((-1.0)*gconst53*r10*x14942))+((r11*x14943)));
evalcond[2]=((-1.0)+((r01*x14943))+(((-1.0)*r02*x14941))+(((-1.0)*gconst53*r00*x14942)));
evalcond[3]=(((r01*x14936))+((r00*x14939))+(((-1.0)*r00*x14937*x14941))+((r02*x14944))+((r01*x14932*x14935)));
evalcond[4]=(((r00*x14932*x14936))+(((-1.0)*r02*sj3*x14942))+((r01*x14937))+(((-1.0)*r01*x14939*x14941))+((r00*x14935)));
evalcond[5]=(x14938+((r22*x14944))+((cj1*sj2))+(((-1.0)*r20*x14937*x14941))+((r21*x14936))+((r21*x14932*x14935))+((r20*x14939)));
evalcond[6]=(((r12*x14944))+x14933+(((-1.0)*r10*x14937*x14941))+((r10*x14939))+(((-1.0)*x14940))+((r11*x14932*x14935))+((r11*x14936)));
evalcond[7]=(x14933+((r20*x14932*x14936))+((r21*x14937))+(((-1.0)*x14940))+(((-1.0)*r22*sj3*x14942))+(((-1.0)*r21*x14939*x14941))+((r20*x14935)));
evalcond[8]=((((-1.0)*x14938))+((r10*x14932*x14936))+(((-1.0)*r12*sj3*x14942))+((r10*x14935))+(((-1.0)*sj2*x14934))+((r11*x14937))+(((-1.0)*r11*x14939*x14941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14945=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14945);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14945);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14946=(r01*sj5);
IkReal x14947=((1.0)*cj5*r00);
j4eval[0]=(x14946+(((-1.0)*x14947)));
j4eval[1]=((((-1.0)*cj3*x14947))+((cj3*x14946)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14948=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14948);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14948);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14949=(cj5*r00);
IkReal x14950=(r01*sj5);
j4eval[0]=(x14950+(((-1.0)*x14949)));
j4eval[1]=(((sj3*x14949))+(((-1.0)*sj3*x14950)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14951=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14951);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14951);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14952=((1.0)*r00);
CheckValue<IkReal> x14953=IKPowWithIntegerCheck(cj3,-1);
if(!x14953.valid){
continue;
}
CheckValue<IkReal> x14954=IKPowWithIntegerCheck(r22,-1);
if(!x14954.valid){
continue;
}
CheckValue<IkReal> x14955=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14952))),-1);
if(!x14955.valid){
continue;
}
if( IKabs(((x14953.value)*(x14954.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14955.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14952)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14953.value)*(x14954.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14955.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14952))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14953.value)*(x14954.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14955.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14952))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14956=IKsin(j4);
IkReal x14957=IKcos(j4);
IkReal x14958=(sj1*sj2);
IkReal x14959=(cj5*sj3);
IkReal x14960=(r11*sj5);
IkReal x14961=(cj3*cj5);
IkReal x14962=((1.0)*cj1);
IkReal x14963=(cj3*sj5);
IkReal x14964=(sj3*sj5);
IkReal x14965=(cj2*sj1);
IkReal x14966=(r01*sj5);
IkReal x14967=((1.0)*sj3);
IkReal x14968=(cj2*x14962);
IkReal x14969=(r10*x14957);
IkReal x14970=(r22*x14956);
IkReal x14971=(cj3*x14957);
IkReal x14972=((1.0)*cj5*x14956);
evalcond[0]=((-1.0)*r22*x14957);
evalcond[1]=(x14965+((cj3*x14970))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14972))+((x14956*x14960)));
evalcond[3]=((-1.0)+((x14956*x14966))+(((-1.0)*r00*x14972)));
evalcond[4]=((((-1.0)*x14967*x14970))+x14958+(((-1.0)*x14968)));
evalcond[5]=(((r01*x14959))+(((-1.0)*r00*x14957*x14961))+((r01*x14957*x14963))+((r00*x14964)));
evalcond[6]=(((r01*x14961))+((r00*x14957*x14959))+(((-1.0)*r01*x14957*x14964))+((r00*x14963)));
evalcond[7]=(((x14960*x14971))+x14958+(((-1.0)*x14968))+((r10*x14964))+(((-1.0)*x14961*x14969))+((r11*x14959)));
evalcond[8]=((((-1.0)*sj2*x14962))+(((-1.0)*x14957*x14960*x14967))+(((-1.0)*x14965))+((r11*x14961))+((x14959*x14969))+((r10*x14963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14973=((1.0)*cj3);
IkReal x14974=(cj5*r00);
IkReal x14975=(r01*sj5);
CheckValue<IkReal> x14976=IKPowWithIntegerCheck(((((-1.0)*x14974))+x14975),-1);
if(!x14976.valid){
continue;
}
CheckValue<IkReal> x14977=IKPowWithIntegerCheck(((((-1.0)*sj3*x14975))+((sj3*x14974))),-1);
if(!x14977.valid){
continue;
}
if( IKabs(x14976.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14977.value)*(((((-1.0)*cj5*r01*x14973))+(((-1.0)*r00*sj5*x14973)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14976.value)+IKsqr(((x14977.value)*(((((-1.0)*cj5*r01*x14973))+(((-1.0)*r00*sj5*x14973))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14976.value, ((x14977.value)*(((((-1.0)*cj5*r01*x14973))+(((-1.0)*r00*sj5*x14973))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14978=IKsin(j4);
IkReal x14979=IKcos(j4);
IkReal x14980=(sj1*sj2);
IkReal x14981=(cj5*sj3);
IkReal x14982=(r11*sj5);
IkReal x14983=(cj3*cj5);
IkReal x14984=((1.0)*cj1);
IkReal x14985=(cj3*sj5);
IkReal x14986=(sj3*sj5);
IkReal x14987=(cj2*sj1);
IkReal x14988=(r01*sj5);
IkReal x14989=((1.0)*sj3);
IkReal x14990=(cj2*x14984);
IkReal x14991=(r10*x14979);
IkReal x14992=(r22*x14978);
IkReal x14993=(cj3*x14979);
IkReal x14994=((1.0)*cj5*x14978);
evalcond[0]=((-1.0)*r22*x14979);
evalcond[1]=(x14987+((cj1*sj2))+((cj3*x14992)));
evalcond[2]=((((-1.0)*r10*x14994))+((x14978*x14982)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14994))+((x14978*x14988)));
evalcond[4]=((((-1.0)*x14990))+x14980+(((-1.0)*x14989*x14992)));
evalcond[5]=(((r01*x14979*x14985))+((r00*x14986))+((r01*x14981))+(((-1.0)*r00*x14979*x14983)));
evalcond[6]=(((r00*x14979*x14981))+((r00*x14985))+((r01*x14983))+(((-1.0)*r01*x14979*x14986)));
evalcond[7]=((((-1.0)*x14990))+x14980+(((-1.0)*x14983*x14991))+((r10*x14986))+((r11*x14981))+((x14982*x14993)));
evalcond[8]=(((x14981*x14991))+(((-1.0)*sj2*x14984))+(((-1.0)*x14979*x14982*x14989))+((r10*x14985))+((r11*x14983))+(((-1.0)*x14987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14995=((1.0)*sj3);
IkReal x14996=(r01*sj5);
IkReal x14997=((1.0)*cj5*r00);
CheckValue<IkReal> x14998=IKPowWithIntegerCheck(((((-1.0)*x14997))+x14996),-1);
if(!x14998.valid){
continue;
}
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(((((-1.0)*cj3*x14997))+((cj3*x14996))),-1);
if(!x14999.valid){
continue;
}
if( IKabs(x14998.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14999.value)*(((((-1.0)*cj5*r01*x14995))+(((-1.0)*r00*sj5*x14995)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14998.value)+IKsqr(((x14999.value)*(((((-1.0)*cj5*r01*x14995))+(((-1.0)*r00*sj5*x14995))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14998.value, ((x14999.value)*(((((-1.0)*cj5*r01*x14995))+(((-1.0)*r00*sj5*x14995))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15000=IKsin(j4);
IkReal x15001=IKcos(j4);
IkReal x15002=(sj1*sj2);
IkReal x15003=(cj5*sj3);
IkReal x15004=(r11*sj5);
IkReal x15005=(cj3*cj5);
IkReal x15006=((1.0)*cj1);
IkReal x15007=(cj3*sj5);
IkReal x15008=(sj3*sj5);
IkReal x15009=(cj2*sj1);
IkReal x15010=(r01*sj5);
IkReal x15011=((1.0)*sj3);
IkReal x15012=(cj2*x15006);
IkReal x15013=(r10*x15001);
IkReal x15014=(r22*x15000);
IkReal x15015=(cj3*x15001);
IkReal x15016=((1.0)*cj5*x15000);
evalcond[0]=((-1.0)*r22*x15001);
evalcond[1]=(((cj3*x15014))+((cj1*sj2))+x15009);
evalcond[2]=((((-1.0)*r10*x15016))+((x15000*x15004)));
evalcond[3]=((-1.0)+((x15000*x15010))+(((-1.0)*r00*x15016)));
evalcond[4]=((((-1.0)*x15012))+(((-1.0)*x15011*x15014))+x15002);
evalcond[5]=(((r01*x15003))+(((-1.0)*r00*x15001*x15005))+((r00*x15008))+((r01*x15001*x15007)));
evalcond[6]=(((r01*x15005))+((r00*x15007))+(((-1.0)*r01*x15001*x15008))+((r00*x15001*x15003)));
evalcond[7]=((((-1.0)*x15012))+(((-1.0)*x15005*x15013))+((x15004*x15015))+x15002+((r10*x15008))+((r11*x15003)));
evalcond[8]=((((-1.0)*sj2*x15006))+(((-1.0)*x15001*x15004*x15011))+(((-1.0)*x15009))+((r10*x15007))+((r11*x15005))+((x15003*x15013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15017=cj5*cj5;
IkReal x15018=(cj3*r20);
IkReal x15019=(r21*sj3);
IkReal x15020=((1.0)*cj3);
IkReal x15021=(r01*r21);
IkReal x15022=(r01*sj3);
IkReal x15023=(r00*sj5);
IkReal x15024=(cj5*r01*sj5);
IkReal x15025=((1.0)*x15017);
CheckValue<IkReal> x15026=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x15023))+(((-1.0)*r02*r22*x15020))+(((-1.0)*r00*x15018*x15025))+((cj3*x15017*x15021))+((x15018*x15024))+(((-1.0)*x15020*x15021)))),-1);
if(!x15026.valid){
continue;
}
CheckValue<IkReal> x15027 = IKatan2WithCheck(IkReal((((r22*sj3*x15023))+((cj5*r22*x15022)))),IkReal(((((-1.0)*r20*x15022*x15025))+(((-1.0)*cj5*r20*sj3*x15023))+((r00*x15019))+((x15019*x15024))+(((-1.0)*r00*x15019*x15025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15026.value)))+(x15027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15028=IKsin(j4);
IkReal x15029=IKcos(j4);
IkReal x15030=(sj1*sj2);
IkReal x15031=(r11*sj5);
IkReal x15032=(cj5*r10);
IkReal x15033=(cj5*r01);
IkReal x15034=(cj5*r00);
IkReal x15035=((1.0)*cj1);
IkReal x15036=(cj3*sj5);
IkReal x15037=(r21*sj5);
IkReal x15038=(cj5*sj3);
IkReal x15039=(sj3*sj5);
IkReal x15040=(cj2*sj1);
IkReal x15041=(r01*sj5);
IkReal x15042=(cj3*cj5);
IkReal x15043=(cj5*r20);
IkReal x15044=(cj2*x15035);
IkReal x15045=((1.0)*x15029);
IkReal x15046=((1.0)*x15028);
IkReal x15047=(cj3*x15029);
IkReal x15048=(sj3*x15029);
IkReal x15049=(cj3*x15028);
evalcond[0]=((((-1.0)*x15043*x15046))+(((-1.0)*r22*x15045))+((x15028*x15037)));
evalcond[1]=((((-1.0)*x15032*x15046))+((x15028*x15031))+(((-1.0)*r12*x15045)));
evalcond[2]=((-1.0)+((x15028*x15041))+(((-1.0)*r02*x15045))+(((-1.0)*x15034*x15046)));
evalcond[3]=(((r02*x15049))+((r00*x15039))+((sj3*x15033))+((r01*x15029*x15036))+(((-1.0)*cj3*x15034*x15045)));
evalcond[4]=((((-1.0)*r01*x15039*x15045))+((r00*x15036))+((cj3*x15033))+((x15034*x15048))+(((-1.0)*r02*sj3*x15046)));
evalcond[5]=(((r21*x15038))+((r22*x15049))+((cj1*sj2))+x15040+((r20*x15039))+((r21*x15029*x15036))+(((-1.0)*r20*x15042*x15045)));
evalcond[6]=((((-1.0)*x15044))+((x15031*x15047))+((r12*x15049))+x15030+((r10*x15039))+(((-1.0)*cj3*x15032*x15045))+((r11*x15038)));
evalcond[7]=((((-1.0)*x15044))+((r20*x15029*x15038))+(((-1.0)*r22*sj3*x15046))+x15030+((r20*x15036))+(((-1.0)*sj3*x15037*x15045))+((r21*x15042)));
evalcond[8]=((((-1.0)*sj2*x15035))+((x15032*x15048))+((r11*x15042))+(((-1.0)*r12*sj3*x15046))+((r10*x15036))+(((-1.0)*sj3*x15031*x15045))+(((-1.0)*x15040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15050=((1.0)*cj5);
CheckValue<IkReal> x15051 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15051.valid){
continue;
}
CheckValue<IkReal> x15052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15050)))),-1);
if(!x15052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15051.value)+(((1.5707963267949)*(x15052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15053=IKsin(j4);
IkReal x15054=IKcos(j4);
IkReal x15055=(sj1*sj2);
IkReal x15056=(r11*sj5);
IkReal x15057=(cj5*r10);
IkReal x15058=(cj5*r01);
IkReal x15059=(cj5*r00);
IkReal x15060=((1.0)*cj1);
IkReal x15061=(cj3*sj5);
IkReal x15062=(r21*sj5);
IkReal x15063=(cj5*sj3);
IkReal x15064=(sj3*sj5);
IkReal x15065=(cj2*sj1);
IkReal x15066=(r01*sj5);
IkReal x15067=(cj3*cj5);
IkReal x15068=(cj5*r20);
IkReal x15069=(cj2*x15060);
IkReal x15070=((1.0)*x15054);
IkReal x15071=((1.0)*x15053);
IkReal x15072=(cj3*x15054);
IkReal x15073=(sj3*x15054);
IkReal x15074=(cj3*x15053);
evalcond[0]=(((x15053*x15062))+(((-1.0)*r22*x15070))+(((-1.0)*x15068*x15071)));
evalcond[1]=(((x15053*x15056))+(((-1.0)*r12*x15070))+(((-1.0)*x15057*x15071)));
evalcond[2]=((-1.0)+((x15053*x15066))+(((-1.0)*r02*x15070))+(((-1.0)*x15059*x15071)));
evalcond[3]=((((-1.0)*cj3*x15059*x15070))+((r02*x15074))+((r00*x15064))+((r01*x15054*x15061))+((sj3*x15058)));
evalcond[4]=(((x15059*x15073))+((r00*x15061))+((cj3*x15058))+(((-1.0)*r02*sj3*x15071))+(((-1.0)*r01*x15064*x15070)));
evalcond[5]=(((r21*x15063))+((r20*x15064))+((r22*x15074))+((cj1*sj2))+x15065+((r21*x15054*x15061))+(((-1.0)*r20*x15067*x15070)));
evalcond[6]=(((x15056*x15072))+((r12*x15074))+x15055+((r11*x15063))+((r10*x15064))+(((-1.0)*cj3*x15057*x15070))+(((-1.0)*x15069)));
evalcond[7]=((((-1.0)*sj3*x15062*x15070))+((r21*x15067))+(((-1.0)*r22*sj3*x15071))+((r20*x15061))+x15055+(((-1.0)*x15069))+((r20*x15054*x15063)));
evalcond[8]=((((-1.0)*sj2*x15060))+(((-1.0)*r12*sj3*x15071))+((x15057*x15073))+(((-1.0)*sj3*x15056*x15070))+(((-1.0)*x15065))+((r11*x15067))+((r10*x15061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15075=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15075.valid){
continue;
}
CheckValue<IkReal> x15076 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15075.value)))+(x15076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15077=IKsin(j4);
IkReal x15078=IKcos(j4);
IkReal x15079=(sj1*sj2);
IkReal x15080=(r11*sj5);
IkReal x15081=(cj5*r10);
IkReal x15082=(cj5*r01);
IkReal x15083=(cj5*r00);
IkReal x15084=((1.0)*cj1);
IkReal x15085=(cj3*sj5);
IkReal x15086=(r21*sj5);
IkReal x15087=(cj5*sj3);
IkReal x15088=(sj3*sj5);
IkReal x15089=(cj2*sj1);
IkReal x15090=(r01*sj5);
IkReal x15091=(cj3*cj5);
IkReal x15092=(cj5*r20);
IkReal x15093=(cj2*x15084);
IkReal x15094=((1.0)*x15078);
IkReal x15095=((1.0)*x15077);
IkReal x15096=(cj3*x15078);
IkReal x15097=(sj3*x15078);
IkReal x15098=(cj3*x15077);
evalcond[0]=((((-1.0)*r22*x15094))+(((-1.0)*x15092*x15095))+((x15077*x15086)));
evalcond[1]=((((-1.0)*x15081*x15095))+(((-1.0)*r12*x15094))+((x15077*x15080)));
evalcond[2]=((-1.0)+((x15077*x15090))+(((-1.0)*r02*x15094))+(((-1.0)*x15083*x15095)));
evalcond[3]=(((sj3*x15082))+((r02*x15098))+((r00*x15088))+((r01*x15078*x15085))+(((-1.0)*cj3*x15083*x15094)));
evalcond[4]=((((-1.0)*r02*sj3*x15095))+((x15083*x15097))+((r00*x15085))+((cj3*x15082))+(((-1.0)*r01*x15088*x15094)));
evalcond[5]=(((cj1*sj2))+x15089+((r21*x15087))+((r20*x15088))+(((-1.0)*r20*x15091*x15094))+((r22*x15098))+((r21*x15078*x15085)));
evalcond[6]=(x15079+((x15080*x15096))+(((-1.0)*cj3*x15081*x15094))+((r12*x15098))+((r11*x15087))+(((-1.0)*x15093))+((r10*x15088)));
evalcond[7]=((((-1.0)*r22*sj3*x15095))+(((-1.0)*sj3*x15086*x15094))+((r21*x15091))+((r20*x15078*x15087))+x15079+((r20*x15085))+(((-1.0)*x15093)));
evalcond[8]=((((-1.0)*sj3*x15080*x15094))+(((-1.0)*r12*sj3*x15095))+(((-1.0)*sj2*x15084))+((r11*x15091))+((x15081*x15097))+(((-1.0)*x15089))+((r10*x15085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15099=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15099;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15100=((1.0)*cj5);
IkReal x15101=((((-1.0)*r21*x15100))+(((-1.0)*r20*sj5)));
j4eval[0]=x15101;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15100))+((r11*sj5))))));
j4eval[2]=IKsign(x15101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15102=cj5*cj5;
IkReal x15103=(cj3*r01);
IkReal x15104=(cj5*sj5);
IkReal x15105=((1.0)*cj3);
IkReal x15106=(((r21*x15102*x15103))+(((-1.0)*r00*r20*x15102*x15105))+(((-1.0)*r02*r22*x15105))+((r20*x15103*x15104))+(((-1.0)*r21*x15103))+((cj3*r00*r21*x15104)));
j4eval[0]=x15106;
j4eval[1]=IKsign(x15106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15107=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15107;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15108=((1.0)*cj5);
IkReal x15109=((((-1.0)*r21*x15108))+(((-1.0)*r20*sj5)));
j4eval[0]=x15109;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15108))+((r11*sj5))))));
j4eval[2]=IKsign(x15109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15110=cj5*cj5;
IkReal x15111=r01*r01;
IkReal x15112=(cj5*r00);
IkReal x15113=(r01*sj5);
IkReal x15114=((((-1.0)*x15110*x15111))+x15111+((x15110*(r00*r00)))+(r02*r02)+(((-2.0)*x15112*x15113)));
j4eval[0]=x15114;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15113))+x15112))));
j4eval[2]=IKsign(x15114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15115=cj5*cj5;
IkReal x15116=r01*r01;
IkReal x15117=(r01*sj5);
IkReal x15118=(cj5*r00);
CheckValue<IkReal> x15119=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15117*x15118))+x15116+((x15115*(r00*r00)))+(((-1.0)*x15115*x15116))+(r02*r02))),-1);
if(!x15119.valid){
continue;
}
CheckValue<IkReal> x15120 = IKatan2WithCheck(IkReal(((((-1.0)*x15117))+x15118)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15119.value)))+(x15120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15121=IKsin(j4);
IkReal x15122=IKcos(j4);
IkReal x15123=(cj5*r10);
IkReal x15124=(r01*sj5);
IkReal x15125=(cj5*r00);
IkReal x15126=(cj5*r20);
IkReal x15127=((1.0)*x15122);
IkReal x15128=((1.0)*x15121);
IkReal x15129=(sj5*x15121);
evalcond[0]=(((r21*x15129))+(((-1.0)*r22*x15127))+(((-1.0)*x15126*x15128)));
evalcond[1]=((((-1.0)*x15123*x15128))+(((-1.0)*r12*x15127))+((r11*x15129)));
evalcond[2]=((((-1.0)*r02*x15128))+(((-1.0)*x15124*x15127))+((x15122*x15125)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15127))+((x15121*x15124))+(((-1.0)*x15125*x15128)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15128))+(((-1.0)*r11*sj5*x15127))+((x15122*x15123)));
evalcond[5]=((((-1.0)*r21*sj5*x15127))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15128))+((x15122*x15126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15130=((1.0)*cj5);
CheckValue<IkReal> x15131 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15130))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15131.valid){
continue;
}
CheckValue<IkReal> x15132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15130))+(((-1.0)*r20*sj5)))),-1);
if(!x15132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15131.value)+(((1.5707963267949)*(x15132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15133=IKsin(j4);
IkReal x15134=IKcos(j4);
IkReal x15135=(cj5*r10);
IkReal x15136=(r01*sj5);
IkReal x15137=(cj5*r00);
IkReal x15138=(cj5*r20);
IkReal x15139=((1.0)*x15134);
IkReal x15140=((1.0)*x15133);
IkReal x15141=(sj5*x15133);
evalcond[0]=(((r21*x15141))+(((-1.0)*r22*x15139))+(((-1.0)*x15138*x15140)));
evalcond[1]=(((r11*x15141))+(((-1.0)*x15135*x15140))+(((-1.0)*r12*x15139)));
evalcond[2]=((((-1.0)*x15136*x15139))+(((-1.0)*r02*x15140))+((x15134*x15137)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15139))+((x15133*x15136))+(((-1.0)*x15137*x15140)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15134*x15135))+(((-1.0)*r11*sj5*x15139))+(((-1.0)*r12*x15140)));
evalcond[5]=((((-1.0)*r21*sj5*x15139))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15134*x15138))+(((-1.0)*r22*x15140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15142 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15142.valid){
continue;
}
CheckValue<IkReal> x15143=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15142.value)+(((1.5707963267949)*(x15143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15144=IKsin(j4);
IkReal x15145=IKcos(j4);
IkReal x15146=(cj5*r10);
IkReal x15147=(r01*sj5);
IkReal x15148=(cj5*r00);
IkReal x15149=(cj5*r20);
IkReal x15150=((1.0)*x15145);
IkReal x15151=((1.0)*x15144);
IkReal x15152=(sj5*x15144);
evalcond[0]=(((r21*x15152))+(((-1.0)*r22*x15150))+(((-1.0)*x15149*x15151)));
evalcond[1]=((((-1.0)*x15146*x15151))+(((-1.0)*r12*x15150))+((r11*x15152)));
evalcond[2]=((((-1.0)*r02*x15151))+(((-1.0)*x15147*x15150))+((x15145*x15148)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15150))+(((-1.0)*x15148*x15151))+((x15144*x15147)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15151))+(((-1.0)*r11*sj5*x15150))+((x15145*x15146)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15151))+((x15145*x15149))+(((-1.0)*r21*sj5*x15150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15153=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15153;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15154=((1.0)*cj5);
IkReal x15155=((((-1.0)*r21*x15154))+(((-1.0)*r20*sj5)));
j4eval[0]=x15155;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15154))+((r11*sj5))))));
j4eval[2]=IKsign(x15155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15156=cj5*cj5;
IkReal x15157=r01*r01;
IkReal x15158=(r01*sj5);
IkReal x15159=(cj5*r00);
IkReal x15160=((((-1.0)*x15156*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x15157))+(((2.0)*x15158*x15159))+((x15156*x15157)));
j4eval[0]=x15160;
j4eval[1]=IKsign(x15160);
j4eval[2]=((IKabs(r02))+(IKabs((x15158+(((-1.0)*x15159))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15161=cj5*cj5;
IkReal x15162=r01*r01;
IkReal x15163=(r01*sj5);
IkReal x15164=(cj5*r00);
CheckValue<IkReal> x15165 = IKatan2WithCheck(IkReal(((((-1.0)*x15164))+x15163)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15165.valid){
continue;
}
CheckValue<IkReal> x15166=IKPowWithIntegerCheck(IKsign((((x15161*x15162))+(((-1.0)*(r02*r02)))+(((2.0)*x15163*x15164))+(((-1.0)*x15162))+(((-1.0)*x15161*(r00*r00))))),-1);
if(!x15166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15165.value)+(((1.5707963267949)*(x15166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15167=IKcos(j4);
IkReal x15168=IKsin(j4);
IkReal x15169=(cj5*r00);
IkReal x15170=(cj5*r10);
IkReal x15171=(r21*sj5);
IkReal x15172=(cj5*r20);
IkReal x15173=((1.0)*x15167);
IkReal x15174=((1.0)*x15168);
IkReal x15175=(sj5*x15168);
IkReal x15176=(sj5*x15167);
evalcond[0]=(((r02*x15168))+(((-1.0)*x15169*x15173))+((r01*x15176)));
evalcond[1]=(((x15168*x15171))+(((-1.0)*r22*x15173))+(((-1.0)*x15172*x15174)));
evalcond[2]=(((r11*x15175))+(((-1.0)*x15170*x15174))+(((-1.0)*r12*x15173)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15173))+(((-1.0)*x15169*x15174))+((r01*x15175)));
evalcond[4]=(((cj2*sj1))+((r11*x15176))+((cj1*sj2))+((r12*x15168))+(((-1.0)*x15170*x15173)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15167*x15171))+(((-1.0)*x15172*x15173))+((r22*x15168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15177=((1.0)*cj5);
CheckValue<IkReal> x15178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15177))+(((-1.0)*r20*sj5)))),-1);
if(!x15178.valid){
continue;
}
CheckValue<IkReal> x15179 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15178.value)))+(x15179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15180=IKcos(j4);
IkReal x15181=IKsin(j4);
IkReal x15182=(cj5*r00);
IkReal x15183=(cj5*r10);
IkReal x15184=(r21*sj5);
IkReal x15185=(cj5*r20);
IkReal x15186=((1.0)*x15180);
IkReal x15187=((1.0)*x15181);
IkReal x15188=(sj5*x15181);
IkReal x15189=(sj5*x15180);
evalcond[0]=(((r02*x15181))+((r01*x15189))+(((-1.0)*x15182*x15186)));
evalcond[1]=((((-1.0)*x15185*x15187))+((x15181*x15184))+(((-1.0)*r22*x15186)));
evalcond[2]=(((r11*x15188))+(((-1.0)*r12*x15186))+(((-1.0)*x15183*x15187)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15186))+((r01*x15188))+(((-1.0)*x15182*x15187)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15181))+((r11*x15189))+(((-1.0)*x15183*x15186)));
evalcond[5]=((((-1.0)*x15185*x15186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15181))+((x15180*x15184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15190 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15190.valid){
continue;
}
CheckValue<IkReal> x15191=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15190.value)+(((1.5707963267949)*(x15191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15192=IKcos(j4);
IkReal x15193=IKsin(j4);
IkReal x15194=(cj5*r00);
IkReal x15195=(cj5*r10);
IkReal x15196=(r21*sj5);
IkReal x15197=(cj5*r20);
IkReal x15198=((1.0)*x15192);
IkReal x15199=((1.0)*x15193);
IkReal x15200=(sj5*x15193);
IkReal x15201=(sj5*x15192);
evalcond[0]=((((-1.0)*x15194*x15198))+((r01*x15201))+((r02*x15193)));
evalcond[1]=(((x15193*x15196))+(((-1.0)*x15197*x15199))+(((-1.0)*r22*x15198)));
evalcond[2]=((((-1.0)*x15195*x15199))+(((-1.0)*r12*x15198))+((r11*x15200)));
evalcond[3]=((1.0)+(((-1.0)*x15194*x15199))+(((-1.0)*r02*x15198))+((r01*x15200)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15195*x15198))+((cj1*sj2))+((r11*x15201))+((r12*x15193)));
evalcond[5]=(((x15192*x15196))+(((-1.0)*x15197*x15198))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15203 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15203)==0){
continue;
}
IkReal x15202=pow(x15203,-0.5);
CheckValue<IkReal> x15204 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15204.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15204.value));
IkReal gconst61=((-1.0)*r11*x15202);
IkReal gconst62=(r10*x15202);
CheckValue<IkReal> x15205 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15205.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15208 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15208.valid){
continue;
}
IkReal x15206=((-1.0)*(x15208.value));
IkReal x15207=x15202;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15206;
IkReal gconst60=x15206;
IkReal gconst61=((-1.0)*r11*x15207);
IkReal gconst62=(r10*x15207);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15211 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15211.valid){
continue;
}
IkReal x15209=((-1.0)*(x15211.value));
IkReal x15210=x15202;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15209;
IkReal gconst60=x15209;
IkReal gconst61=((-1.0)*r11*x15210);
IkReal gconst62=(r10*x15210);
CheckValue<IkReal> x15219=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15219.valid){
continue;
}
IkReal x15212=x15219.value;
IkReal x15213=(sj3*x15212);
IkReal x15214=(r20*x15213);
IkReal x15215=(r00*x15213);
IkReal x15216=(r01*x15213);
IkReal x15217=(r21*x15213);
IkReal x15218=(r10*r11*x15213);
j4eval[0]=IKsign((((r00*x15214*(r10*r10)))+((r21*x15216*(r11*r11)))+((r10*r11*r21*x15215))+((r01*r10*r11*x15214))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15220=gconst61*gconst61;
IkReal x15221=gconst62*gconst62;
IkReal x15222=(cj3*r01);
IkReal x15223=(r22*sj3);
IkReal x15224=(gconst61*r00);
IkReal x15225=((1.0)*cj3);
IkReal x15226=(gconst62*r01);
IkReal x15227=((1.0)*sj3);
IkReal x15228=(gconst61*gconst62*r20);
IkReal x15229=(r21*x15220);
IkReal x15230=(r20*x15221);
CheckValue<IkReal> x15231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15225*x15230))+((x15222*x15228))+((cj3*gconst62*r21*x15224))+(((-1.0)*r02*r22*x15225))+(((-1.0)*x15222*x15229)))),-1);
if(!x15231.valid){
continue;
}
CheckValue<IkReal> x15232 = IKatan2WithCheck(IkReal((((x15223*x15224))+((x15223*x15226)))),IkReal(((((-1.0)*gconst62*r20*x15224*x15227))+(((-1.0)*r01*x15227*x15230))+((gconst61*r21*sj3*x15226))+((r00*sj3*x15229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15231.value)))+(x15232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15233=IKsin(j4);
IkReal x15234=IKcos(j4);
IkReal x15235=(cj2*sj1);
IkReal x15236=(cj1*sj2);
IkReal x15237=(gconst61*sj3);
IkReal x15238=(cj3*gconst61);
IkReal x15239=(cj3*gconst62);
IkReal x15240=(sj1*sj2);
IkReal x15241=(gconst62*sj3);
IkReal x15242=(cj1*cj2);
IkReal x15243=((1.0)*x15234);
IkReal x15244=((1.0)*x15233);
IkReal x15245=(gconst61*x15233);
IkReal x15246=(cj3*x15233);
IkReal x15247=(x15236+x15235);
evalcond[0]=((((-1.0)*gconst62*r20*x15244))+((r21*x15245))+(((-1.0)*r22*x15243)));
evalcond[1]=((((-1.0)*gconst62*r10*x15244))+(((-1.0)*r12*x15243))+((r11*x15245)));
evalcond[2]=((1.0)+((r01*x15245))+(((-1.0)*r02*x15243))+(((-1.0)*gconst62*r00*x15244)));
evalcond[3]=(((r00*x15237))+((r01*x15241))+((r01*x15234*x15238))+(((-1.0)*r00*x15239*x15243))+((r02*x15246)));
evalcond[4]=(((r00*x15238))+((r01*x15239))+(((-1.0)*r01*x15237*x15243))+(((-1.0)*r02*sj3*x15244))+((r00*x15234*x15241)));
evalcond[5]=(x15247+((r21*x15241))+((r22*x15246))+((r21*x15234*x15238))+(((-1.0)*r20*x15239*x15243))+((r20*x15237)));
evalcond[6]=((((-1.0)*x15240))+x15242+((r10*x15237))+(((-1.0)*r10*x15239*x15243))+((r12*x15246))+((r11*x15234*x15238))+((r11*x15241)));
evalcond[7]=((((-1.0)*r12*sj3*x15244))+x15247+((r10*x15238))+((r10*x15234*x15241))+(((-1.0)*r11*x15237*x15243))+((r11*x15239)));
evalcond[8]=((((-1.0)*r21*x15237*x15243))+(((-1.0)*x15242))+x15240+((r21*x15239))+(((-1.0)*r22*sj3*x15244))+((r20*x15234*x15241))+((r20*x15238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15248=gconst61*gconst61;
IkReal x15249=gconst62*gconst62;
IkReal x15250=(cj3*r22);
IkReal x15251=(gconst62*r01);
IkReal x15252=(gconst61*r00);
IkReal x15253=((1.0)*r20);
IkReal x15254=(cj3*r21);
IkReal x15255=(r21*sj3);
CheckValue<IkReal> x15256=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*sj3*x15251*x15253))+((r00*r20*sj3*x15249))+((r01*x15248*x15255))+(((-1.0)*gconst62*x15252*x15255))+((r02*r22*sj3)))),-1);
if(!x15256.valid){
continue;
}
CheckValue<IkReal> x15257 = IKatan2WithCheck(IkReal((((x15250*x15252))+((x15250*x15251)))),IkReal((((r00*x15248*x15254))+(((-1.0)*cj3*r01*x15249*x15253))+(((-1.0)*cj3*gconst62*x15252*x15253))+((gconst61*x15251*x15254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15256.value)))+(x15257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15258=IKsin(j4);
IkReal x15259=IKcos(j4);
IkReal x15260=(cj2*sj1);
IkReal x15261=(cj1*sj2);
IkReal x15262=(gconst61*sj3);
IkReal x15263=(cj3*gconst61);
IkReal x15264=(cj3*gconst62);
IkReal x15265=(sj1*sj2);
IkReal x15266=(gconst62*sj3);
IkReal x15267=(cj1*cj2);
IkReal x15268=((1.0)*x15259);
IkReal x15269=((1.0)*x15258);
IkReal x15270=(gconst61*x15258);
IkReal x15271=(cj3*x15258);
IkReal x15272=(x15261+x15260);
evalcond[0]=((((-1.0)*gconst62*r20*x15269))+(((-1.0)*r22*x15268))+((r21*x15270)));
evalcond[1]=(((r11*x15270))+(((-1.0)*gconst62*r10*x15269))+(((-1.0)*r12*x15268)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15268))+(((-1.0)*gconst62*r00*x15269))+((r01*x15270)));
evalcond[3]=((((-1.0)*r00*x15264*x15268))+((r01*x15259*x15263))+((r02*x15271))+((r01*x15266))+((r00*x15262)));
evalcond[4]=(((r01*x15264))+((r00*x15263))+((r00*x15259*x15266))+(((-1.0)*r02*sj3*x15269))+(((-1.0)*r01*x15262*x15268)));
evalcond[5]=(((r20*x15262))+((r22*x15271))+x15272+(((-1.0)*r20*x15264*x15268))+((r21*x15259*x15263))+((r21*x15266)));
evalcond[6]=(((r12*x15271))+(((-1.0)*r10*x15264*x15268))+((r11*x15259*x15263))+x15267+((r10*x15262))+(((-1.0)*x15265))+((r11*x15266)));
evalcond[7]=((((-1.0)*r12*sj3*x15269))+x15272+((r10*x15259*x15266))+((r10*x15263))+(((-1.0)*r11*x15262*x15268))+((r11*x15264)));
evalcond[8]=(((r20*x15263))+(((-1.0)*r21*x15262*x15268))+x15265+((r20*x15259*x15266))+(((-1.0)*r22*sj3*x15269))+(((-1.0)*x15267))+((r21*x15264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15273=((1.0)*gconst62);
CheckValue<IkReal> x15274 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15273))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15274.valid){
continue;
}
CheckValue<IkReal> x15275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15273))+(((-1.0)*gconst61*r20)))),-1);
if(!x15275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15274.value)+(((1.5707963267949)*(x15275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15276=IKsin(j4);
IkReal x15277=IKcos(j4);
IkReal x15278=(cj2*sj1);
IkReal x15279=(cj1*sj2);
IkReal x15280=(gconst61*sj3);
IkReal x15281=(cj3*gconst61);
IkReal x15282=(cj3*gconst62);
IkReal x15283=(sj1*sj2);
IkReal x15284=(gconst62*sj3);
IkReal x15285=(cj1*cj2);
IkReal x15286=((1.0)*x15277);
IkReal x15287=((1.0)*x15276);
IkReal x15288=(gconst61*x15276);
IkReal x15289=(cj3*x15276);
IkReal x15290=(x15278+x15279);
evalcond[0]=((((-1.0)*gconst62*r20*x15287))+(((-1.0)*r22*x15286))+((r21*x15288)));
evalcond[1]=((((-1.0)*r12*x15286))+((r11*x15288))+(((-1.0)*gconst62*r10*x15287)));
evalcond[2]=((1.0)+((r01*x15288))+(((-1.0)*gconst62*r00*x15287))+(((-1.0)*r02*x15286)));
evalcond[3]=(((r01*x15284))+((r00*x15280))+((r02*x15289))+(((-1.0)*r00*x15282*x15286))+((r01*x15277*x15281)));
evalcond[4]=(((r01*x15282))+((r00*x15281))+(((-1.0)*r01*x15280*x15286))+(((-1.0)*r02*sj3*x15287))+((r00*x15277*x15284)));
evalcond[5]=(((r22*x15289))+((r21*x15277*x15281))+x15290+((r20*x15280))+(((-1.0)*r20*x15282*x15286))+((r21*x15284)));
evalcond[6]=(x15285+((r11*x15277*x15281))+((r10*x15280))+(((-1.0)*r10*x15282*x15286))+((r11*x15284))+((r12*x15289))+(((-1.0)*x15283)));
evalcond[7]=(((r10*x15277*x15284))+(((-1.0)*r12*sj3*x15287))+x15290+((r10*x15281))+(((-1.0)*r11*x15280*x15286))+((r11*x15282)));
evalcond[8]=((((-1.0)*r22*sj3*x15287))+x15283+((r20*x15281))+(((-1.0)*x15285))+((r21*x15282))+(((-1.0)*r21*x15280*x15286))+((r20*x15277*x15284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15292 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15292)==0){
continue;
}
IkReal x15291=pow(x15292,-0.5);
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15293.value))));
IkReal gconst64=((1.0)*r11*x15291);
IkReal gconst65=((-1.0)*r10*x15291);
CheckValue<IkReal> x15294 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15297 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15297.valid){
continue;
}
IkReal x15295=((1.0)*(x15297.value));
IkReal x15296=x15291;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15295)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15295)));
IkReal gconst64=((1.0)*r11*x15296);
IkReal gconst65=((-1.0)*r10*x15296);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15298=gconst64*gconst64;
IkReal x15299=gconst65*gconst65;
IkReal x15300=(gconst65*r01);
IkReal x15301=(cj3*r22);
IkReal x15302=(gconst64*r00);
IkReal x15303=(cj3*r21);
IkReal x15304=((1.0)*gconst64*sj3);
IkReal x15305=((1.0)*cj3*r20);
CheckValue<IkReal> x15306=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15299))+(((-1.0)*r20*x15300*x15304))+(((-1.0)*gconst65*r21*sj3*x15302))+((r02*r22*sj3))+((r01*r21*sj3*x15298)))),-1);
if(!x15306.valid){
continue;
}
CheckValue<IkReal> x15307 = IKatan2WithCheck(IkReal((((x15300*x15301))+((x15301*x15302)))),IkReal(((((-1.0)*gconst65*x15302*x15305))+((r00*x15298*x15303))+((gconst64*x15300*x15303))+(((-1.0)*r01*x15299*x15305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15306.value)))+(x15307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15308=IKsin(j4);
IkReal x15309=IKcos(j4);
IkReal x15310=(cj2*sj1);
IkReal x15311=(cj1*sj2);
IkReal x15312=(cj3*gconst64);
IkReal x15313=(gconst65*r21);
IkReal x15314=(sj1*sj2);
IkReal x15315=(gconst65*sj3);
IkReal x15316=(gconst64*sj3);
IkReal x15317=(cj3*gconst65);
IkReal x15318=(cj1*cj2);
IkReal x15319=((1.0)*x15309);
IkReal x15320=((1.0)*x15308);
IkReal x15321=(cj3*x15308);
IkReal x15322=(gconst64*x15308);
IkReal x15323=(x15311+x15310);
evalcond[0]=((((-1.0)*gconst65*r20*x15320))+((r21*x15322))+(((-1.0)*r22*x15319)));
evalcond[1]=(((r11*x15322))+(((-1.0)*gconst65*r10*x15320))+(((-1.0)*r12*x15319)));
evalcond[2]=((1.0)+((r01*x15322))+(((-1.0)*gconst65*r00*x15320))+(((-1.0)*r02*x15319)));
evalcond[3]=(((r01*x15309*x15312))+((r01*x15315))+((r00*x15316))+(((-1.0)*r00*x15317*x15319))+((r02*x15321)));
evalcond[4]=(((r01*x15317))+((r00*x15312))+(((-1.0)*r02*sj3*x15320))+(((-1.0)*r01*x15316*x15319))+((r00*x15309*x15315)));
evalcond[5]=(((sj3*x15313))+(((-1.0)*r20*x15317*x15319))+((r22*x15321))+x15323+((r21*x15309*x15312))+((r20*x15316)));
evalcond[6]=(((r11*x15315))+(((-1.0)*x15314))+((r11*x15309*x15312))+((r12*x15321))+x15318+((r10*x15316))+(((-1.0)*r10*x15317*x15319)));
evalcond[7]=(((r11*x15317))+x15323+(((-1.0)*r12*sj3*x15320))+(((-1.0)*r11*x15316*x15319))+((r10*x15312))+((r10*x15309*x15315)));
evalcond[8]=((((-1.0)*x15318))+((r20*x15309*x15315))+x15314+(((-1.0)*r22*sj3*x15320))+(((-1.0)*r21*x15316*x15319))+((r20*x15312))+((cj3*x15313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15324=((1.0)*gconst65);
CheckValue<IkReal> x15325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15324))+(((-1.0)*gconst64*r20)))),-1);
if(!x15325.valid){
continue;
}
CheckValue<IkReal> x15326 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15325.value)))+(x15326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15327=IKsin(j4);
IkReal x15328=IKcos(j4);
IkReal x15329=(cj2*sj1);
IkReal x15330=(cj1*sj2);
IkReal x15331=(cj3*gconst64);
IkReal x15332=(gconst65*r21);
IkReal x15333=(sj1*sj2);
IkReal x15334=(gconst65*sj3);
IkReal x15335=(gconst64*sj3);
IkReal x15336=(cj3*gconst65);
IkReal x15337=(cj1*cj2);
IkReal x15338=((1.0)*x15328);
IkReal x15339=((1.0)*x15327);
IkReal x15340=(cj3*x15327);
IkReal x15341=(gconst64*x15327);
IkReal x15342=(x15330+x15329);
evalcond[0]=(((r21*x15341))+(((-1.0)*gconst65*r20*x15339))+(((-1.0)*r22*x15338)));
evalcond[1]=(((r11*x15341))+(((-1.0)*r12*x15338))+(((-1.0)*gconst65*r10*x15339)));
evalcond[2]=((1.0)+((r01*x15341))+(((-1.0)*gconst65*r00*x15339))+(((-1.0)*r02*x15338)));
evalcond[3]=(((r01*x15334))+((r00*x15335))+((r01*x15328*x15331))+((r02*x15340))+(((-1.0)*r00*x15336*x15338)));
evalcond[4]=((((-1.0)*r01*x15335*x15338))+((r01*x15336))+((r00*x15328*x15334))+((r00*x15331))+(((-1.0)*r02*sj3*x15339)));
evalcond[5]=(((r20*x15335))+((r22*x15340))+((sj3*x15332))+((r21*x15328*x15331))+x15342+(((-1.0)*r20*x15336*x15338)));
evalcond[6]=((((-1.0)*x15333))+((r11*x15328*x15331))+((r11*x15334))+x15337+((r10*x15335))+((r12*x15340))+(((-1.0)*r10*x15336*x15338)));
evalcond[7]=((((-1.0)*r11*x15335*x15338))+((r11*x15336))+(((-1.0)*r12*sj3*x15339))+((r10*x15328*x15334))+x15342+((r10*x15331)));
evalcond[8]=(((r20*x15331))+(((-1.0)*x15337))+((cj3*x15332))+(((-1.0)*r21*x15335*x15338))+x15333+(((-1.0)*r22*sj3*x15339))+((r20*x15328*x15334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15343=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15343);
rxp0_2=(py*r00);
rxp1_0=(r21*x15343);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15344=(r01*sj5);
IkReal x15345=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15345))+x15344);
j4eval[1]=(((cj3*x15344))+(((-1.0)*cj3*x15345)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15346=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15346);
rxp0_2=(py*r00);
rxp1_0=(r21*x15346);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15347=(cj5*r00);
IkReal x15348=(r01*sj5);
j4eval[0]=(x15348+(((-1.0)*x15347)));
j4eval[1]=(((sj3*x15347))+(((-1.0)*sj3*x15348)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15349=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15349);
rxp0_2=(py*r00);
rxp1_0=(r21*x15349);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15350=((1.0)*r00);
CheckValue<IkReal> x15351=IKPowWithIntegerCheck(cj3,-1);
if(!x15351.valid){
continue;
}
CheckValue<IkReal> x15352=IKPowWithIntegerCheck(r12,-1);
if(!x15352.valid){
continue;
}
CheckValue<IkReal> x15353=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15350))),-1);
if(!x15353.valid){
continue;
}
if( IKabs(((x15351.value)*(x15352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15353.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15350)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15351.value)*(x15352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15353.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15350))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15351.value)*(x15352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15353.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15350))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15354=IKsin(j4);
IkReal x15355=IKcos(j4);
IkReal x15356=(cj2*sj1);
IkReal x15357=(cj1*sj2);
IkReal x15358=(sj1*sj2);
IkReal x15359=(cj5*sj3);
IkReal x15360=(cj3*cj5);
IkReal x15361=(r21*sj5);
IkReal x15362=(cj1*cj2);
IkReal x15363=(r00*sj5);
IkReal x15364=(r01*sj5);
IkReal x15365=(r20*sj5);
IkReal x15366=((1.0)*x15354);
IkReal x15367=(r20*x15355);
IkReal x15368=(r00*x15355);
IkReal x15369=(cj3*x15355);
IkReal x15370=(x15357+x15356);
IkReal x15371=((1.0)*sj3*x15355);
evalcond[0]=((-1.0)*r12*x15355);
evalcond[1]=((((-1.0)*cj5*r20*x15366))+((x15354*x15361)));
evalcond[2]=(x15362+(((-1.0)*x15358))+((cj3*r12*x15354)));
evalcond[3]=((((-1.0)*r12*sj3*x15366))+x15370);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15366))+((x15354*x15364)));
evalcond[5]=((((-1.0)*x15360*x15368))+((x15364*x15369))+((sj3*x15363))+((r01*x15359)));
evalcond[6]=(((cj3*x15363))+((x15359*x15368))+(((-1.0)*x15364*x15371))+((r01*x15360)));
evalcond[7]=((((-1.0)*x15360*x15367))+((x15361*x15369))+x15370+((sj3*x15365))+((r21*x15359)));
evalcond[8]=(((cj3*x15365))+x15358+((x15359*x15367))+(((-1.0)*x15362))+(((-1.0)*x15361*x15371))+((r21*x15360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15372=((1.0)*r01);
IkReal x15373=(cj5*r00);
CheckValue<IkReal> x15374=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15373))),-1);
if(!x15374.valid){
continue;
}
CheckValue<IkReal> x15375=IKPowWithIntegerCheck((((sj3*x15373))+(((-1.0)*sj3*sj5*x15372))),-1);
if(!x15375.valid){
continue;
}
if( IKabs(((-1.0)*(x15374.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15375.value)*(((((-1.0)*cj3*cj5*x15372))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15374.value)))+IKsqr(((x15375.value)*(((((-1.0)*cj3*cj5*x15372))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15374.value)), ((x15375.value)*(((((-1.0)*cj3*cj5*x15372))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15376=IKsin(j4);
IkReal x15377=IKcos(j4);
IkReal x15378=(cj2*sj1);
IkReal x15379=(cj1*sj2);
IkReal x15380=(sj1*sj2);
IkReal x15381=(cj5*sj3);
IkReal x15382=(cj3*cj5);
IkReal x15383=(r21*sj5);
IkReal x15384=(cj1*cj2);
IkReal x15385=(r00*sj5);
IkReal x15386=(r01*sj5);
IkReal x15387=(r20*sj5);
IkReal x15388=((1.0)*x15376);
IkReal x15389=(r20*x15377);
IkReal x15390=(r00*x15377);
IkReal x15391=(cj3*x15377);
IkReal x15392=(x15379+x15378);
IkReal x15393=((1.0)*sj3*x15377);
evalcond[0]=((-1.0)*r12*x15377);
evalcond[1]=((((-1.0)*cj5*r20*x15388))+((x15376*x15383)));
evalcond[2]=(((cj3*r12*x15376))+x15384+(((-1.0)*x15380)));
evalcond[3]=((((-1.0)*r12*sj3*x15388))+x15392);
evalcond[4]=((1.0)+((x15376*x15386))+(((-1.0)*cj5*r00*x15388)));
evalcond[5]=(((r01*x15381))+((x15386*x15391))+(((-1.0)*x15382*x15390))+((sj3*x15385)));
evalcond[6]=(((r01*x15382))+(((-1.0)*x15386*x15393))+((x15381*x15390))+((cj3*x15385)));
evalcond[7]=(((r21*x15381))+((x15383*x15391))+(((-1.0)*x15382*x15389))+x15392+((sj3*x15387)));
evalcond[8]=(((r21*x15382))+(((-1.0)*x15383*x15393))+((cj3*x15387))+x15380+(((-1.0)*x15384))+((x15381*x15389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15394=((1.0)*r00);
IkReal x15395=(r01*sj5);
CheckValue<IkReal> x15396=IKPowWithIntegerCheck(((((-1.0)*cj5*x15394))+x15395),-1);
if(!x15396.valid){
continue;
}
CheckValue<IkReal> x15397=IKPowWithIntegerCheck((((cj3*x15395))+(((-1.0)*cj3*cj5*x15394))),-1);
if(!x15397.valid){
continue;
}
if( IKabs(((-1.0)*(x15396.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15397.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15394)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15396.value)))+IKsqr(((x15397.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15394))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15396.value)), ((x15397.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15394))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15398=IKsin(j4);
IkReal x15399=IKcos(j4);
IkReal x15400=(cj2*sj1);
IkReal x15401=(cj1*sj2);
IkReal x15402=(sj1*sj2);
IkReal x15403=(cj5*sj3);
IkReal x15404=(cj3*cj5);
IkReal x15405=(r21*sj5);
IkReal x15406=(cj1*cj2);
IkReal x15407=(r00*sj5);
IkReal x15408=(r01*sj5);
IkReal x15409=(r20*sj5);
IkReal x15410=((1.0)*x15398);
IkReal x15411=(r20*x15399);
IkReal x15412=(r00*x15399);
IkReal x15413=(cj3*x15399);
IkReal x15414=(x15401+x15400);
IkReal x15415=((1.0)*sj3*x15399);
evalcond[0]=((-1.0)*r12*x15399);
evalcond[1]=(((x15398*x15405))+(((-1.0)*cj5*r20*x15410)));
evalcond[2]=((((-1.0)*x15402))+x15406+((cj3*r12*x15398)));
evalcond[3]=(x15414+(((-1.0)*r12*sj3*x15410)));
evalcond[4]=((1.0)+((x15398*x15408))+(((-1.0)*cj5*r00*x15410)));
evalcond[5]=((((-1.0)*x15404*x15412))+((sj3*x15407))+((r01*x15403))+((x15408*x15413)));
evalcond[6]=(((x15403*x15412))+(((-1.0)*x15408*x15415))+((r01*x15404))+((cj3*x15407)));
evalcond[7]=((((-1.0)*x15404*x15411))+((sj3*x15409))+x15414+((x15405*x15413))+((r21*x15403)));
evalcond[8]=(((x15403*x15411))+(((-1.0)*x15406))+(((-1.0)*x15405*x15415))+x15402+((r21*x15404))+((cj3*x15409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15416=cj5*cj5;
IkReal x15417=(cj3*r20);
IkReal x15418=(r21*sj3);
IkReal x15419=((1.0)*cj3);
IkReal x15420=(r01*r21);
IkReal x15421=(r01*sj3);
IkReal x15422=(r00*sj5);
IkReal x15423=(cj5*r01*sj5);
IkReal x15424=((1.0)*x15416);
CheckValue<IkReal> x15425=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15419*x15420))+(((-1.0)*r02*r22*x15419))+((x15417*x15423))+((cj3*x15416*x15420))+((cj3*cj5*r21*x15422))+(((-1.0)*r00*x15417*x15424)))),-1);
if(!x15425.valid){
continue;
}
CheckValue<IkReal> x15426 = IKatan2WithCheck(IkReal((((cj5*r22*x15421))+((r22*sj3*x15422)))),IkReal(((((-1.0)*r20*x15421*x15424))+((x15418*x15423))+((r00*x15418))+(((-1.0)*r00*x15418*x15424))+(((-1.0)*cj5*r20*sj3*x15422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15425.value)))+(x15426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15427=IKsin(j4);
IkReal x15428=IKcos(j4);
IkReal x15429=(cj2*sj1);
IkReal x15430=(cj1*sj2);
IkReal x15431=(r11*sj5);
IkReal x15432=(cj5*r10);
IkReal x15433=(sj1*sj2);
IkReal x15434=(cj5*r01);
IkReal x15435=(cj5*r00);
IkReal x15436=(cj3*sj5);
IkReal x15437=(r21*sj5);
IkReal x15438=(cj1*cj2);
IkReal x15439=(cj5*sj3);
IkReal x15440=(sj3*sj5);
IkReal x15441=(r01*sj5);
IkReal x15442=(cj3*cj5);
IkReal x15443=(cj5*r20);
IkReal x15444=((1.0)*x15428);
IkReal x15445=((1.0)*x15427);
IkReal x15446=(cj3*x15428);
IkReal x15447=(sj3*x15428);
IkReal x15448=(cj3*x15427);
IkReal x15449=(x15429+x15430);
evalcond[0]=((((-1.0)*r22*x15444))+(((-1.0)*x15443*x15445))+((x15427*x15437)));
evalcond[1]=((((-1.0)*x15432*x15445))+(((-1.0)*r12*x15444))+((x15427*x15431)));
evalcond[2]=((1.0)+(((-1.0)*x15435*x15445))+((x15427*x15441))+(((-1.0)*r02*x15444)));
evalcond[3]=(((r00*x15440))+((sj3*x15434))+(((-1.0)*cj3*x15435*x15444))+((r02*x15448))+((r01*x15428*x15436)));
evalcond[4]=((((-1.0)*r02*sj3*x15445))+(((-1.0)*r01*x15440*x15444))+((x15435*x15447))+((cj3*x15434))+((r00*x15436)));
evalcond[5]=(((r20*x15440))+(((-1.0)*r20*x15442*x15444))+((r21*x15439))+((r22*x15448))+((r21*x15428*x15436))+x15449);
evalcond[6]=(((x15431*x15446))+((r10*x15440))+((r12*x15448))+(((-1.0)*cj3*x15432*x15444))+(((-1.0)*x15433))+((r11*x15439))+x15438);
evalcond[7]=((((-1.0)*sj3*x15431*x15444))+((r10*x15436))+((x15432*x15447))+((r11*x15442))+x15449+(((-1.0)*r12*sj3*x15445)));
evalcond[8]=(((r20*x15428*x15439))+(((-1.0)*r22*sj3*x15445))+(((-1.0)*x15438))+(((-1.0)*sj3*x15437*x15444))+x15433+((r20*x15436))+((r21*x15442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15450=((1.0)*cj5);
CheckValue<IkReal> x15451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15450))+(((-1.0)*r20*sj5)))),-1);
if(!x15451.valid){
continue;
}
CheckValue<IkReal> x15452 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15451.value)))+(x15452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15453=IKsin(j4);
IkReal x15454=IKcos(j4);
IkReal x15455=(cj2*sj1);
IkReal x15456=(cj1*sj2);
IkReal x15457=(r11*sj5);
IkReal x15458=(cj5*r10);
IkReal x15459=(sj1*sj2);
IkReal x15460=(cj5*r01);
IkReal x15461=(cj5*r00);
IkReal x15462=(cj3*sj5);
IkReal x15463=(r21*sj5);
IkReal x15464=(cj1*cj2);
IkReal x15465=(cj5*sj3);
IkReal x15466=(sj3*sj5);
IkReal x15467=(r01*sj5);
IkReal x15468=(cj3*cj5);
IkReal x15469=(cj5*r20);
IkReal x15470=((1.0)*x15454);
IkReal x15471=((1.0)*x15453);
IkReal x15472=(cj3*x15454);
IkReal x15473=(sj3*x15454);
IkReal x15474=(cj3*x15453);
IkReal x15475=(x15456+x15455);
evalcond[0]=(((x15453*x15463))+(((-1.0)*r22*x15470))+(((-1.0)*x15469*x15471)));
evalcond[1]=(((x15453*x15457))+(((-1.0)*x15458*x15471))+(((-1.0)*r12*x15470)));
evalcond[2]=((1.0)+((x15453*x15467))+(((-1.0)*x15461*x15471))+(((-1.0)*r02*x15470)));
evalcond[3]=(((r02*x15474))+(((-1.0)*cj3*x15461*x15470))+((r01*x15454*x15462))+((r00*x15466))+((sj3*x15460)));
evalcond[4]=(((x15461*x15473))+((r00*x15462))+((cj3*x15460))+(((-1.0)*r01*x15466*x15470))+(((-1.0)*r02*sj3*x15471)));
evalcond[5]=(((r22*x15474))+((r21*x15465))+(((-1.0)*r20*x15468*x15470))+x15475+((r20*x15466))+((r21*x15454*x15462)));
evalcond[6]=(((x15457*x15472))+(((-1.0)*cj3*x15458*x15470))+((r12*x15474))+x15464+((r11*x15465))+((r10*x15466))+(((-1.0)*x15459)));
evalcond[7]=((((-1.0)*r12*sj3*x15471))+((x15458*x15473))+(((-1.0)*sj3*x15457*x15470))+x15475+((r11*x15468))+((r10*x15462)));
evalcond[8]=((((-1.0)*x15464))+((r21*x15468))+(((-1.0)*sj3*x15463*x15470))+x15459+((r20*x15454*x15465))+((r20*x15462))+(((-1.0)*r22*sj3*x15471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15476 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15476.valid){
continue;
}
CheckValue<IkReal> x15477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15476.value)+(((1.5707963267949)*(x15477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15478=IKsin(j4);
IkReal x15479=IKcos(j4);
IkReal x15480=(cj2*sj1);
IkReal x15481=(cj1*sj2);
IkReal x15482=(r11*sj5);
IkReal x15483=(cj5*r10);
IkReal x15484=(sj1*sj2);
IkReal x15485=(cj5*r01);
IkReal x15486=(cj5*r00);
IkReal x15487=(cj3*sj5);
IkReal x15488=(r21*sj5);
IkReal x15489=(cj1*cj2);
IkReal x15490=(cj5*sj3);
IkReal x15491=(sj3*sj5);
IkReal x15492=(r01*sj5);
IkReal x15493=(cj3*cj5);
IkReal x15494=(cj5*r20);
IkReal x15495=((1.0)*x15479);
IkReal x15496=((1.0)*x15478);
IkReal x15497=(cj3*x15479);
IkReal x15498=(sj3*x15479);
IkReal x15499=(cj3*x15478);
IkReal x15500=(x15481+x15480);
evalcond[0]=((((-1.0)*x15494*x15496))+((x15478*x15488))+(((-1.0)*r22*x15495)));
evalcond[1]=((((-1.0)*x15483*x15496))+(((-1.0)*r12*x15495))+((x15478*x15482)));
evalcond[2]=((1.0)+(((-1.0)*x15486*x15496))+(((-1.0)*r02*x15495))+((x15478*x15492)));
evalcond[3]=(((sj3*x15485))+((r00*x15491))+((r01*x15479*x15487))+(((-1.0)*cj3*x15486*x15495))+((r02*x15499)));
evalcond[4]=((((-1.0)*r02*sj3*x15496))+((cj3*x15485))+((x15486*x15498))+((r00*x15487))+(((-1.0)*r01*x15491*x15495)));
evalcond[5]=(((r20*x15491))+((r21*x15479*x15487))+(((-1.0)*r20*x15493*x15495))+((r22*x15499))+x15500+((r21*x15490)));
evalcond[6]=(((r12*x15499))+((r10*x15491))+((r11*x15490))+x15489+(((-1.0)*x15484))+((x15482*x15497))+(((-1.0)*cj3*x15483*x15495)));
evalcond[7]=(((r10*x15487))+((r11*x15493))+(((-1.0)*sj3*x15482*x15495))+(((-1.0)*r12*sj3*x15496))+x15500+((x15483*x15498)));
evalcond[8]=(((r20*x15479*x15490))+(((-1.0)*r22*sj3*x15496))+x15484+(((-1.0)*x15489))+(((-1.0)*sj3*x15488*x15495))+((r21*x15493))+((r20*x15487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15501=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15501);
rxp1_1=(px*r21);
rxp1_2=(r11*x15501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15502=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15502);
rxp1_1=(px*r21);
rxp1_2=(r11*x15502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15503=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15503)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15503)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15504=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15504);
rxp1_1=(px*r21);
rxp1_2=(r11*x15504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15505=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15505);
rxp1_1=(px*r21);
rxp1_2=(r11*x15505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15506=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15506);
rxp1_1=(px*r21);
rxp1_2=(r11*x15506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15507=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15507);
rxp1_1=(px*r21);
rxp1_2=(r11*x15507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15510=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15510.valid){
continue;
}
IkReal x15508=x15510.value;
IkReal x15509=(sj0*x15508);
cj4array[0]=(((cj1*sj2*x15509))+((cj2*sj1*x15509)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15511=IKsin(j4);
IkReal x15512=IKcos(j4);
IkReal x15513=(cj5*r20);
IkReal x15514=(r21*sj5);
IkReal x15515=((1.0)*x15511);
IkReal x15516=((1.0)*x15512);
evalcond[0]=((-1.0)*r02*x15511);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15516)));
evalcond[2]=((((-1.0)*x15513*x15515))+((x15511*x15514)));
evalcond[3]=(((r11*sj5*x15511))+(((-1.0)*cj5*r10*x15515)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15514*x15516))+((x15512*x15513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15518=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15518.valid){
continue;
}
IkReal x15517=x15518.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15517))+((cj1*cj2*x15517)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15519=IKsin(j4);
IkReal x15520=IKcos(j4);
IkReal x15521=(r11*sj5);
IkReal x15522=((1.0)*sj0);
IkReal x15523=((1.0)*x15520);
IkReal x15524=((1.0)*cj5*x15519);
evalcond[0]=((-1.0)*r02*x15519);
evalcond[1]=((((-1.0)*x15522))+(((-1.0)*r02*x15523)));
evalcond[2]=((((-1.0)*r20*x15524))+((r21*sj5*x15519)));
evalcond[3]=(((x15519*x15521))+(((-1.0)*r10*x15524)));
evalcond[4]=((((-1.0)*x15521*x15523))+(((-1.0)*cj2*sj1*x15522))+((cj5*r10*x15520))+(((-1.0)*cj1*sj2*x15522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15525=IKPowWithIntegerCheck(r02,-1);
if(!x15525.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15525.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15526=IKsin(j4);
IkReal x15527=IKcos(j4);
IkReal x15528=((1.0)*sj0);
IkReal x15529=(cj5*x15527);
IkReal x15530=(sj5*x15526);
IkReal x15531=((1.0)*sj5*x15527);
IkReal x15532=((1.0)*cj5*x15526);
evalcond[0]=((-1.0)*r02*x15526);
evalcond[1]=(((r21*x15530))+(((-1.0)*r20*x15532)));
evalcond[2]=(((r11*x15530))+(((-1.0)*r10*x15532)));
evalcond[3]=((((-1.0)*r21*x15531))+((r20*x15529))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r10*x15529))+(((-1.0)*cj2*sj1*x15528))+(((-1.0)*r11*x15531))+(((-1.0)*cj1*sj2*x15528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15533=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15533);
rxp1_1=(px*r21);
rxp1_2=(r11*x15533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15534=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15534);
rxp1_1=(px*r21);
rxp1_2=(r11*x15534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15535=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15535);
rxp1_1=(px*r21);
rxp1_2=(r11*x15535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15538=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15538.valid){
continue;
}
IkReal x15536=x15538.value;
IkReal x15537=(sj0*x15536);
cj4array[0]=(((cj1*sj2*x15537))+((cj2*sj1*x15537)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15539=IKsin(j4);
IkReal x15540=IKcos(j4);
IkReal x15541=(r21*sj5);
IkReal x15542=((1.0)*cj5*r20);
evalcond[0]=(r02*x15539);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15540)));
evalcond[2]=(((x15539*x15541))+(((-1.0)*x15539*x15542)));
evalcond[3]=(((r11*sj5*x15539))+(((-1.0)*cj5*r10*x15539)));
evalcond[4]=((((-1.0)*x15540*x15542))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15540*x15541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15544=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15544.valid){
continue;
}
IkReal x15543=x15544.value;
cj4array[0]=(((cj1*cj2*x15543))+(((-1.0)*sj1*sj2*x15543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15545=IKsin(j4);
IkReal x15546=IKcos(j4);
IkReal x15547=((1.0)*sj0);
IkReal x15548=((1.0)*cj5);
IkReal x15549=(sj5*x15545);
evalcond[0]=(r02*x15545);
evalcond[1]=((((-1.0)*x15547))+(((-1.0)*r02*x15546)));
evalcond[2]=((((-1.0)*r20*x15545*x15548))+((r21*x15549)));
evalcond[3]=((((-1.0)*r10*x15545*x15548))+((r11*x15549)));
evalcond[4]=((((-1.0)*cj1*sj2*x15547))+(((-1.0)*cj2*sj1*x15547))+(((-1.0)*r10*x15546*x15548))+((r11*sj5*x15546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15550=IKPowWithIntegerCheck(r02,-1);
if(!x15550.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15550.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15551=IKsin(j4);
IkReal x15552=IKcos(j4);
IkReal x15553=((1.0)*cj1);
IkReal x15554=(r21*sj5);
IkReal x15555=((1.0)*cj5);
IkReal x15556=(r11*sj5);
evalcond[0]=(r02*x15551);
evalcond[1]=(((x15551*x15554))+(((-1.0)*r20*x15551*x15555)));
evalcond[2]=(((x15551*x15556))+(((-1.0)*r10*x15551*x15555)));
evalcond[3]=((((-1.0)*cj2*x15553))+((x15552*x15554))+((sj1*sj2))+(((-1.0)*r20*x15552*x15555)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x15552*x15556))+(((-1.0)*sj0*sj2*x15553))+(((-1.0)*r10*x15552*x15555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15557 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15557.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15557.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15558 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15558.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15558.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15559=((-1.0)*r10);
CheckValue<IkReal> x15561 = IKatan2WithCheck(IkReal(x15559),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15561.valid){
continue;
}
IkReal x15560=((-1.0)*(x15561.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15559);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15560;
IkReal gconst66=x15560;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15562=((-1.0)*r10);
CheckValue<IkReal> x15564 = IKatan2WithCheck(IkReal(x15562),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15564.valid){
continue;
}
IkReal x15563=((-1.0)*(x15564.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15562);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15563;
IkReal gconst66=x15563;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15565=((-1.0)*r10);
CheckValue<IkReal> x15567 = IKatan2WithCheck(IkReal(x15565),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15567.valid){
continue;
}
IkReal x15566=((-1.0)*(x15567.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15565);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15566;
IkReal gconst66=x15566;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15568=((1.0)*gconst67);
IkReal x15569=(cj1*cj2);
IkReal x15570=((1.0)*sj1*sj2);
CheckValue<IkReal> x15571=IKPowWithIntegerCheck(cj3,-1);
if(!x15571.valid){
continue;
}
CheckValue<IkReal> x15572=IKPowWithIntegerCheck(r02,-1);
if(!x15572.valid){
continue;
}
CheckValue<IkReal> x15573=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15568))),-1);
if(!x15573.valid){
continue;
}
if( IKabs(((x15571.value)*(x15572.value)*((((cj0*x15569))+(((-1.0)*cj0*x15570)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15573.value)*(((((-1.0)*cj3*r20*x15568))+x15569+(((-1.0)*x15570))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15571.value)*(x15572.value)*((((cj0*x15569))+(((-1.0)*cj0*x15570))))))+IKsqr(((x15573.value)*(((((-1.0)*cj3*r20*x15568))+x15569+(((-1.0)*x15570))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15571.value)*(x15572.value)*((((cj0*x15569))+(((-1.0)*cj0*x15570))))), ((x15573.value)*(((((-1.0)*cj3*r20*x15568))+x15569+(((-1.0)*x15570))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15574=IKsin(j4);
IkReal x15575=IKcos(j4);
IkReal x15576=(sj1*sj2);
IkReal x15577=(gconst68*sj3);
IkReal x15578=(gconst67*r11);
IkReal x15579=(gconst67*sj3);
IkReal x15580=((1.0)*gconst68);
IkReal x15581=(cj2*sj1);
IkReal x15582=((1.0)*cj0);
IkReal x15583=((1.0)*sj0);
IkReal x15584=(cj3*gconst67);
IkReal x15585=(cj3*gconst68);
IkReal x15586=(cj1*sj2);
IkReal x15587=(gconst67*r21);
IkReal x15588=((1.0)*cj1*cj2);
IkReal x15589=(cj3*x15575);
IkReal x15590=((1.0)*x15575);
IkReal x15591=(r02*x15574);
evalcond[0]=((((-1.0)*x15583))+(((-1.0)*r02*x15590)));
evalcond[1]=(((x15574*x15587))+(((-1.0)*r20*x15574*x15580)));
evalcond[2]=(cj0+(((-1.0)*r10*x15574*x15580))+((x15574*x15578)));
evalcond[3]=(((cj0*x15576))+(((-1.0)*cj1*cj2*x15582))+((cj3*x15591)));
evalcond[4]=((((-1.0)*x15581*x15582))+(((-1.0)*x15582*x15586))+(((-1.0)*sj3*x15591)));
evalcond[5]=((((-1.0)*r20*x15580*x15589))+((r21*x15577))+((r21*x15575*x15584))+((r20*x15579))+x15581+x15586);
evalcond[6]=((((-1.0)*r21*x15579*x15590))+(((-1.0)*x15588))+((r20*x15575*x15577))+x15576+((r20*x15584))+((r21*x15585)));
evalcond[7]=(((sj0*x15576))+((r10*x15579))+(((-1.0)*cj1*cj2*x15583))+((x15578*x15589))+((r11*x15577))+(((-1.0)*r10*x15580*x15589)));
evalcond[8]=(((r11*x15585))+((r10*x15584))+((r10*x15575*x15577))+(((-1.0)*x15581*x15583))+(((-1.0)*sj3*x15578*x15590))+(((-1.0)*x15583*x15586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15594=IKPowWithIntegerCheck(r02,-1);
if(!x15594.valid){
continue;
}
IkReal x15592=x15594.value;
IkReal x15593=((1.0)*cj0);
CheckValue<IkReal> x15595=IKPowWithIntegerCheck(sj3,-1);
if(!x15595.valid){
continue;
}
if( IKabs((x15592*(x15595.value)*(((((-1.0)*cj1*sj2*x15593))+(((-1.0)*cj2*sj1*x15593)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15592)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15592*(x15595.value)*(((((-1.0)*cj1*sj2*x15593))+(((-1.0)*cj2*sj1*x15593))))))+IKsqr(((-1.0)*sj0*x15592))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15592*(x15595.value)*(((((-1.0)*cj1*sj2*x15593))+(((-1.0)*cj2*sj1*x15593))))), ((-1.0)*sj0*x15592));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15596=IKsin(j4);
IkReal x15597=IKcos(j4);
IkReal x15598=(sj1*sj2);
IkReal x15599=(gconst68*sj3);
IkReal x15600=(gconst67*r11);
IkReal x15601=(gconst67*sj3);
IkReal x15602=((1.0)*gconst68);
IkReal x15603=(cj2*sj1);
IkReal x15604=((1.0)*cj0);
IkReal x15605=((1.0)*sj0);
IkReal x15606=(cj3*gconst67);
IkReal x15607=(cj3*gconst68);
IkReal x15608=(cj1*sj2);
IkReal x15609=(gconst67*r21);
IkReal x15610=((1.0)*cj1*cj2);
IkReal x15611=(cj3*x15597);
IkReal x15612=((1.0)*x15597);
IkReal x15613=(r02*x15596);
evalcond[0]=((((-1.0)*x15605))+(((-1.0)*r02*x15612)));
evalcond[1]=(((x15596*x15609))+(((-1.0)*r20*x15596*x15602)));
evalcond[2]=(((x15596*x15600))+cj0+(((-1.0)*r10*x15596*x15602)));
evalcond[3]=(((cj0*x15598))+((cj3*x15613))+(((-1.0)*cj1*cj2*x15604)));
evalcond[4]=((((-1.0)*x15603*x15604))+(((-1.0)*x15604*x15608))+(((-1.0)*sj3*x15613)));
evalcond[5]=(((r21*x15599))+(((-1.0)*r20*x15602*x15611))+x15603+x15608+((r21*x15597*x15606))+((r20*x15601)));
evalcond[6]=(((r20*x15597*x15599))+(((-1.0)*x15610))+((r20*x15606))+x15598+(((-1.0)*r21*x15601*x15612))+((r21*x15607)));
evalcond[7]=(((x15600*x15611))+(((-1.0)*r10*x15602*x15611))+((sj0*x15598))+((r11*x15599))+(((-1.0)*cj1*cj2*x15605))+((r10*x15601)));
evalcond[8]=((((-1.0)*sj3*x15600*x15612))+(((-1.0)*x15603*x15605))+((r10*x15597*x15599))+((r10*x15606))+(((-1.0)*x15605*x15608))+((r11*x15607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15615=IKPowWithIntegerCheck(r02,-1);
if(!x15615.valid){
continue;
}
IkReal x15614=x15615.value;
CheckValue<IkReal> x15616=IKPowWithIntegerCheck(cj3,-1);
if(!x15616.valid){
continue;
}
if( IKabs((x15614*(x15616.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15614)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15614*(x15616.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15614))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15614*(x15616.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15614));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15617=IKsin(j4);
IkReal x15618=IKcos(j4);
IkReal x15619=(sj1*sj2);
IkReal x15620=(gconst68*sj3);
IkReal x15621=(gconst67*r11);
IkReal x15622=(gconst67*sj3);
IkReal x15623=((1.0)*gconst68);
IkReal x15624=(cj2*sj1);
IkReal x15625=((1.0)*cj0);
IkReal x15626=((1.0)*sj0);
IkReal x15627=(cj3*gconst67);
IkReal x15628=(cj3*gconst68);
IkReal x15629=(cj1*sj2);
IkReal x15630=(gconst67*r21);
IkReal x15631=((1.0)*cj1*cj2);
IkReal x15632=(cj3*x15618);
IkReal x15633=((1.0)*x15618);
IkReal x15634=(r02*x15617);
evalcond[0]=((((-1.0)*x15626))+(((-1.0)*r02*x15633)));
evalcond[1]=((((-1.0)*r20*x15617*x15623))+((x15617*x15630)));
evalcond[2]=(cj0+((x15617*x15621))+(((-1.0)*r10*x15617*x15623)));
evalcond[3]=(((cj3*x15634))+((cj0*x15619))+(((-1.0)*cj1*cj2*x15625)));
evalcond[4]=((((-1.0)*sj3*x15634))+(((-1.0)*x15624*x15625))+(((-1.0)*x15625*x15629)));
evalcond[5]=(((r21*x15620))+(((-1.0)*r20*x15623*x15632))+x15629+x15624+((r20*x15622))+((r21*x15618*x15627)));
evalcond[6]=(((r21*x15628))+x15619+((r20*x15627))+(((-1.0)*x15631))+((r20*x15618*x15620))+(((-1.0)*r21*x15622*x15633)));
evalcond[7]=(((sj0*x15619))+(((-1.0)*r10*x15623*x15632))+((x15621*x15632))+(((-1.0)*cj1*cj2*x15626))+((r11*x15620))+((r10*x15622)));
evalcond[8]=(((r10*x15618*x15620))+(((-1.0)*sj3*x15621*x15633))+(((-1.0)*x15626*x15629))+(((-1.0)*x15624*x15626))+((r11*x15628))+((r10*x15627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15635=((-1.0)*r10);
CheckValue<IkReal> x15636 = IKatan2WithCheck(IkReal(x15635),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15636.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15636.value))));
IkReal gconst70=x15635;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15638=((-1.0)*r10);
IkReal x15639=((-1.0)*r11);
CheckValue<IkReal> x15641 = IKatan2WithCheck(IkReal(x15638),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15641.valid){
continue;
}
IkReal x15640=((1.0)*(x15641.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15638);
rxp1_1=(px*r21);
rxp1_2=(px*x15639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15640)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15640)));
IkReal gconst70=x15638;
IkReal gconst71=x15639;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15642=((-1.0)*r10);
IkReal x15643=((-1.0)*r11);
CheckValue<IkReal> x15645 = IKatan2WithCheck(IkReal(x15642),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15645.valid){
continue;
}
IkReal x15644=((1.0)*(x15645.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15642);
rxp1_1=(px*r21);
rxp1_2=(px*x15643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15644)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15644)));
IkReal gconst70=x15642;
IkReal gconst71=x15643;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15646=((-1.0)*r10);
IkReal x15647=((-1.0)*r11);
CheckValue<IkReal> x15649 = IKatan2WithCheck(IkReal(x15646),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15649.valid){
continue;
}
IkReal x15648=((1.0)*(x15649.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15646);
rxp1_1=(px*r21);
rxp1_2=(px*x15647);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15648)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15648)));
IkReal gconst70=x15646;
IkReal gconst71=x15647;
IkReal x15650=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15650))+(((-1.0)*r11*r20*x15650)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15651=((1.0)*r21);
IkReal x15652=(cj1*cj2);
IkReal x15653=((1.0)*sj1*sj2);
CheckValue<IkReal> x15654=IKPowWithIntegerCheck(cj3,-1);
if(!x15654.valid){
continue;
}
CheckValue<IkReal> x15655=IKPowWithIntegerCheck(r02,-1);
if(!x15655.valid){
continue;
}
CheckValue<IkReal> x15656=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15651))+((gconst71*r20*sj3))),-1);
if(!x15656.valid){
continue;
}
if( IKabs(((x15654.value)*(x15655.value)*(((((-1.0)*cj0*x15653))+((cj0*x15652)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15656.value)*((x15652+(((-1.0)*x15653))+(((-1.0)*cj3*gconst71*x15651))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15654.value)*(x15655.value)*(((((-1.0)*cj0*x15653))+((cj0*x15652))))))+IKsqr(((x15656.value)*((x15652+(((-1.0)*x15653))+(((-1.0)*cj3*gconst71*x15651))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15654.value)*(x15655.value)*(((((-1.0)*cj0*x15653))+((cj0*x15652))))), ((x15656.value)*((x15652+(((-1.0)*x15653))+(((-1.0)*cj3*gconst71*x15651))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15657=IKsin(j4);
IkReal x15658=IKcos(j4);
IkReal x15659=(cj3*gconst70);
IkReal x15660=(sj1*sj2);
IkReal x15661=((1.0)*gconst71);
IkReal x15662=(gconst71*sj3);
IkReal x15663=(cj2*sj1);
IkReal x15664=((1.0)*sj0);
IkReal x15665=(gconst70*r11);
IkReal x15666=(gconst70*sj3);
IkReal x15667=((1.0)*cj0);
IkReal x15668=(cj3*gconst71);
IkReal x15669=(cj1*sj2);
IkReal x15670=((1.0)*cj1*cj2);
IkReal x15671=(r21*x15658);
IkReal x15672=(r10*x15658);
IkReal x15673=((1.0)*x15658);
IkReal x15674=(r02*x15657);
IkReal x15675=(r20*x15658);
evalcond[0]=((((-1.0)*x15664))+(((-1.0)*r02*x15673)));
evalcond[1]=(((gconst70*r21*x15657))+(((-1.0)*r20*x15657*x15661)));
evalcond[2]=((((-1.0)*r10*x15657*x15661))+cj0+((x15657*x15665)));
evalcond[3]=(((cj3*x15674))+(((-1.0)*cj1*cj2*x15667))+((cj0*x15660)));
evalcond[4]=((((-1.0)*x15667*x15669))+(((-1.0)*sj3*x15674))+(((-1.0)*x15663*x15667)));
evalcond[5]=((((-1.0)*cj3*x15661*x15675))+((r20*x15666))+x15669+x15663+((x15659*x15671))+((r21*x15662)));
evalcond[6]=((((-1.0)*x15670))+(((-1.0)*x15666*x15671))+((x15662*x15675))+x15660+((r21*x15668))+((r20*x15659)));
evalcond[7]=(((r11*x15658*x15659))+((r10*x15666))+((r11*x15662))+(((-1.0)*cj3*x15661*x15672))+((sj0*x15660))+(((-1.0)*cj1*cj2*x15664)));
evalcond[8]=(((r10*x15659))+(((-1.0)*sj3*x15665*x15673))+(((-1.0)*x15664*x15669))+((r11*x15668))+((x15662*x15672))+(((-1.0)*x15663*x15664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15678=IKPowWithIntegerCheck(r02,-1);
if(!x15678.valid){
continue;
}
IkReal x15676=x15678.value;
IkReal x15677=((1.0)*cj0);
CheckValue<IkReal> x15679=IKPowWithIntegerCheck(sj3,-1);
if(!x15679.valid){
continue;
}
if( IKabs((x15676*(x15679.value)*(((((-1.0)*cj1*sj2*x15677))+(((-1.0)*cj2*sj1*x15677)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15676)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15676*(x15679.value)*(((((-1.0)*cj1*sj2*x15677))+(((-1.0)*cj2*sj1*x15677))))))+IKsqr(((-1.0)*sj0*x15676))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15676*(x15679.value)*(((((-1.0)*cj1*sj2*x15677))+(((-1.0)*cj2*sj1*x15677))))), ((-1.0)*sj0*x15676));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15680=IKsin(j4);
IkReal x15681=IKcos(j4);
IkReal x15682=(cj3*gconst70);
IkReal x15683=(sj1*sj2);
IkReal x15684=((1.0)*gconst71);
IkReal x15685=(gconst71*sj3);
IkReal x15686=(cj2*sj1);
IkReal x15687=((1.0)*sj0);
IkReal x15688=(gconst70*r11);
IkReal x15689=(gconst70*sj3);
IkReal x15690=((1.0)*cj0);
IkReal x15691=(cj3*gconst71);
IkReal x15692=(cj1*sj2);
IkReal x15693=((1.0)*cj1*cj2);
IkReal x15694=(r21*x15681);
IkReal x15695=(r10*x15681);
IkReal x15696=((1.0)*x15681);
IkReal x15697=(r02*x15680);
IkReal x15698=(r20*x15681);
evalcond[0]=((((-1.0)*r02*x15696))+(((-1.0)*x15687)));
evalcond[1]=(((gconst70*r21*x15680))+(((-1.0)*r20*x15680*x15684)));
evalcond[2]=(cj0+((x15680*x15688))+(((-1.0)*r10*x15680*x15684)));
evalcond[3]=(((cj3*x15697))+((cj0*x15683))+(((-1.0)*cj1*cj2*x15690)));
evalcond[4]=((((-1.0)*x15686*x15690))+(((-1.0)*x15690*x15692))+(((-1.0)*sj3*x15697)));
evalcond[5]=(((r20*x15689))+(((-1.0)*cj3*x15684*x15698))+((x15682*x15694))+x15686+x15692+((r21*x15685)));
evalcond[6]=(((r20*x15682))+(((-1.0)*x15693))+(((-1.0)*x15689*x15694))+((x15685*x15698))+((r21*x15691))+x15683);
evalcond[7]=(((r10*x15689))+(((-1.0)*cj3*x15684*x15695))+((r11*x15681*x15682))+((r11*x15685))+((sj0*x15683))+(((-1.0)*cj1*cj2*x15687)));
evalcond[8]=(((r10*x15682))+((r11*x15691))+((x15685*x15695))+(((-1.0)*x15687*x15692))+(((-1.0)*x15686*x15687))+(((-1.0)*sj3*x15688*x15696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15700=IKPowWithIntegerCheck(r02,-1);
if(!x15700.valid){
continue;
}
IkReal x15699=x15700.value;
CheckValue<IkReal> x15701=IKPowWithIntegerCheck(cj3,-1);
if(!x15701.valid){
continue;
}
if( IKabs((x15699*(x15701.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15699)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15699*(x15701.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15699))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15699*(x15701.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15699));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15702=IKsin(j4);
IkReal x15703=IKcos(j4);
IkReal x15704=(cj3*gconst70);
IkReal x15705=(sj1*sj2);
IkReal x15706=((1.0)*gconst71);
IkReal x15707=(gconst71*sj3);
IkReal x15708=(cj2*sj1);
IkReal x15709=((1.0)*sj0);
IkReal x15710=(gconst70*r11);
IkReal x15711=(gconst70*sj3);
IkReal x15712=((1.0)*cj0);
IkReal x15713=(cj3*gconst71);
IkReal x15714=(cj1*sj2);
IkReal x15715=((1.0)*cj1*cj2);
IkReal x15716=(r21*x15703);
IkReal x15717=(r10*x15703);
IkReal x15718=((1.0)*x15703);
IkReal x15719=(r02*x15702);
IkReal x15720=(r20*x15703);
evalcond[0]=((((-1.0)*x15709))+(((-1.0)*r02*x15718)));
evalcond[1]=((((-1.0)*r20*x15702*x15706))+((gconst70*r21*x15702)));
evalcond[2]=(cj0+((x15702*x15710))+(((-1.0)*r10*x15702*x15706)));
evalcond[3]=(((cj0*x15705))+(((-1.0)*cj1*cj2*x15712))+((cj3*x15719)));
evalcond[4]=((((-1.0)*x15712*x15714))+(((-1.0)*sj3*x15719))+(((-1.0)*x15708*x15712)));
evalcond[5]=(((r20*x15711))+((x15704*x15716))+x15708+x15714+((r21*x15707))+(((-1.0)*cj3*x15706*x15720)));
evalcond[6]=((((-1.0)*x15715))+((x15707*x15720))+((r20*x15704))+(((-1.0)*x15711*x15716))+((r21*x15713))+x15705);
evalcond[7]=(((r11*x15707))+((sj0*x15705))+(((-1.0)*cj3*x15706*x15717))+(((-1.0)*cj1*cj2*x15709))+((r10*x15711))+((r11*x15703*x15704)));
evalcond[8]=((((-1.0)*x15708*x15709))+(((-1.0)*sj3*x15710*x15718))+((x15707*x15717))+(((-1.0)*x15709*x15714))+((r10*x15704))+((r11*x15713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15722=IKPowWithIntegerCheck(r02,-1);
if(!x15722.valid){
continue;
}
IkReal x15721=x15722.value;
CheckValue<IkReal> x15723=IKPowWithIntegerCheck(cj3,-1);
if(!x15723.valid){
continue;
}
if( IKabs((x15721*(x15723.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15721)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15721*(x15723.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15721))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15721*(x15723.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15721));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15724=IKsin(j4);
IkReal x15725=IKcos(j4);
IkReal x15726=(cj5*r10);
IkReal x15727=(sj1*sj2);
IkReal x15728=(cj5*sj3);
IkReal x15729=(r11*sj5);
IkReal x15730=(cj3*cj5);
IkReal x15731=(cj3*sj5);
IkReal x15732=(r21*sj5);
IkReal x15733=(cj2*sj1);
IkReal x15734=((1.0)*sj0);
IkReal x15735=((1.0)*cj0);
IkReal x15736=(sj3*sj5);
IkReal x15737=(cj1*sj2);
IkReal x15738=((1.0)*cj1*cj2);
IkReal x15739=((1.0)*x15724);
IkReal x15740=(r20*x15725);
IkReal x15741=(cj3*x15725);
IkReal x15742=(sj3*x15725);
evalcond[0]=((((-1.0)*r02*x15725))+(((-1.0)*x15734)));
evalcond[1]=(((x15724*x15732))+(((-1.0)*cj5*r20*x15739)));
evalcond[2]=(cj0+((x15724*x15729))+(((-1.0)*x15726*x15739)));
evalcond[3]=(((cj3*r02*x15724))+((cj0*x15727))+(((-1.0)*cj1*cj2*x15735)));
evalcond[4]=((((-1.0)*x15733*x15735))+(((-1.0)*x15735*x15737))+(((-1.0)*r02*sj3*x15739)));
evalcond[5]=(((r21*x15725*x15731))+((r20*x15736))+((r21*x15728))+x15733+x15737+(((-1.0)*x15730*x15740)));
evalcond[6]=((((-1.0)*x15738))+((x15728*x15740))+((r20*x15731))+((r21*x15730))+x15727+(((-1.0)*x15732*x15742)));
evalcond[7]=(((r11*x15728))+(((-1.0)*cj1*cj2*x15734))+(((-1.0)*x15726*x15741))+((sj0*x15727))+((x15729*x15741))+((r10*x15736)));
evalcond[8]=(((r11*x15730))+(((-1.0)*x15733*x15734))+((x15726*x15742))+(((-1.0)*x15729*x15742))+((r10*x15731))+(((-1.0)*x15734*x15737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15743=((1.0)*sj3);
IkReal x15744=((1.0)*cj5);
CheckValue<IkReal> x15745=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15744))),-1);
if(!x15745.valid){
continue;
}
CheckValue<IkReal> x15746=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15744))+((cj3*r21*sj5))),-1);
if(!x15746.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15746.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15743))+(((-1.0)*cj5*r21*x15743)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15745.value)))+IKsqr(((x15746.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15743))+(((-1.0)*cj5*r21*x15743))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15745.value)), ((x15746.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15743))+(((-1.0)*cj5*r21*x15743))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15747=IKsin(j4);
IkReal x15748=IKcos(j4);
IkReal x15749=(cj5*r10);
IkReal x15750=(sj1*sj2);
IkReal x15751=(cj5*sj3);
IkReal x15752=(r11*sj5);
IkReal x15753=(cj3*cj5);
IkReal x15754=(cj3*sj5);
IkReal x15755=(r21*sj5);
IkReal x15756=(cj2*sj1);
IkReal x15757=((1.0)*sj0);
IkReal x15758=((1.0)*cj0);
IkReal x15759=(sj3*sj5);
IkReal x15760=(cj1*sj2);
IkReal x15761=((1.0)*cj1*cj2);
IkReal x15762=((1.0)*x15747);
IkReal x15763=(r20*x15748);
IkReal x15764=(cj3*x15748);
IkReal x15765=(sj3*x15748);
evalcond[0]=((((-1.0)*r02*x15748))+(((-1.0)*x15757)));
evalcond[1]=(((x15747*x15755))+(((-1.0)*cj5*r20*x15762)));
evalcond[2]=(cj0+(((-1.0)*x15749*x15762))+((x15747*x15752)));
evalcond[3]=(((cj3*r02*x15747))+((cj0*x15750))+(((-1.0)*cj1*cj2*x15758)));
evalcond[4]=((((-1.0)*x15756*x15758))+(((-1.0)*r02*sj3*x15762))+(((-1.0)*x15758*x15760)));
evalcond[5]=((((-1.0)*x15753*x15763))+((r21*x15751))+((r20*x15759))+x15760+x15756+((r21*x15748*x15754)));
evalcond[6]=(((x15751*x15763))+((r21*x15753))+(((-1.0)*x15761))+((r20*x15754))+x15750+(((-1.0)*x15755*x15765)));
evalcond[7]=(((r10*x15759))+((x15752*x15764))+((sj0*x15750))+((r11*x15751))+(((-1.0)*cj1*cj2*x15757))+(((-1.0)*x15749*x15764)));
evalcond[8]=((((-1.0)*x15756*x15757))+(((-1.0)*x15757*x15760))+((r10*x15754))+((x15749*x15765))+(((-1.0)*x15752*x15765))+((r11*x15753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15766=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15766.valid){
continue;
}
CheckValue<IkReal> x15767=IKPowWithIntegerCheck(r02,-1);
if(!x15767.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15766.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15766.value)))+IKsqr(((-1.0)*sj0*(x15767.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15766.value)), ((-1.0)*sj0*(x15767.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15768=IKsin(j4);
IkReal x15769=IKcos(j4);
IkReal x15770=(cj5*r10);
IkReal x15771=(sj1*sj2);
IkReal x15772=(cj5*sj3);
IkReal x15773=(r11*sj5);
IkReal x15774=(cj3*cj5);
IkReal x15775=(cj3*sj5);
IkReal x15776=(r21*sj5);
IkReal x15777=(cj2*sj1);
IkReal x15778=((1.0)*sj0);
IkReal x15779=((1.0)*cj0);
IkReal x15780=(sj3*sj5);
IkReal x15781=(cj1*sj2);
IkReal x15782=((1.0)*cj1*cj2);
IkReal x15783=((1.0)*x15768);
IkReal x15784=(r20*x15769);
IkReal x15785=(cj3*x15769);
IkReal x15786=(sj3*x15769);
evalcond[0]=((((-1.0)*r02*x15769))+(((-1.0)*x15778)));
evalcond[1]=(((x15768*x15776))+(((-1.0)*cj5*r20*x15783)));
evalcond[2]=(cj0+((x15768*x15773))+(((-1.0)*x15770*x15783)));
evalcond[3]=(((cj0*x15771))+(((-1.0)*cj1*cj2*x15779))+((cj3*r02*x15768)));
evalcond[4]=((((-1.0)*x15779*x15781))+(((-1.0)*r02*sj3*x15783))+(((-1.0)*x15777*x15779)));
evalcond[5]=(((r21*x15772))+x15781+x15777+(((-1.0)*x15774*x15784))+((r21*x15769*x15775))+((r20*x15780)));
evalcond[6]=(((x15772*x15784))+((r21*x15774))+(((-1.0)*x15776*x15786))+((r20*x15775))+x15771+(((-1.0)*x15782)));
evalcond[7]=(((r10*x15780))+((sj0*x15771))+(((-1.0)*x15770*x15785))+(((-1.0)*cj1*cj2*x15778))+((r11*x15772))+((x15773*x15785)));
evalcond[8]=(((r10*x15775))+(((-1.0)*x15773*x15786))+((x15770*x15786))+((r11*x15774))+(((-1.0)*x15778*x15781))+(((-1.0)*x15777*x15778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15787=((1.0)*sj0);
IkReal x15788=((1.0)*cj0);
CheckValue<IkReal> x15789 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15788))+(((-1.0)*r12*x15787)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15787))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15789.valid){
continue;
}
CheckValue<IkReal> x15790=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15789.value)+(((1.5707963267949)*(x15790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15791=IKsin(j4);
IkReal x15792=IKcos(j4);
IkReal x15793=(r11*sj5);
IkReal x15794=(cj5*r10);
IkReal x15795=(sj1*sj2);
IkReal x15796=(cj5*sj3);
IkReal x15797=((1.0)*sj0);
IkReal x15798=(cj3*cj5);
IkReal x15799=(cj3*sj5);
IkReal x15800=(r21*sj5);
IkReal x15801=(cj2*sj1);
IkReal x15802=(sj3*sj5);
IkReal x15803=(r01*sj5);
IkReal x15804=((1.0)*cj0);
IkReal x15805=(cj1*sj2);
IkReal x15806=((1.0)*x15792);
IkReal x15807=((1.0)*x15791);
IkReal x15808=(cj3*x15792);
IkReal x15809=((1.0)*cj1*cj2);
IkReal x15810=(cj3*x15791);
evalcond[0]=((((-1.0)*cj5*r20*x15807))+((x15791*x15800))+(((-1.0)*r22*x15806)));
evalcond[1]=((((-1.0)*r12*x15806))+cj0+(((-1.0)*x15794*x15807))+((x15791*x15793)));
evalcond[2]=((((-1.0)*cj5*r00*x15807))+(((-1.0)*x15797))+(((-1.0)*r02*x15806))+((x15791*x15803)));
evalcond[3]=((((-1.0)*r20*x15798*x15806))+((r22*x15810))+((r21*x15792*x15799))+((r21*x15796))+x15805+x15801+((r20*x15802)));
evalcond[4]=((((-1.0)*x15809))+(((-1.0)*sj3*x15800*x15806))+((r20*x15799))+((r21*x15798))+x15795+((r20*x15792*x15796))+(((-1.0)*r22*sj3*x15807)));
evalcond[5]=(((cj0*x15795))+(((-1.0)*r00*x15798*x15806))+((r02*x15810))+((r01*x15796))+((r01*x15792*x15799))+((r00*x15802))+(((-1.0)*cj1*cj2*x15804)));
evalcond[6]=(((r10*x15802))+((r11*x15796))+((r12*x15810))+(((-1.0)*cj1*cj2*x15797))+(((-1.0)*cj3*x15794*x15806))+((x15793*x15808))+((sj0*x15795)));
evalcond[7]=((((-1.0)*x15804*x15805))+(((-1.0)*r02*sj3*x15807))+((r01*x15798))+((r00*x15799))+(((-1.0)*r01*x15802*x15806))+(((-1.0)*x15801*x15804))+((r00*x15792*x15796)));
evalcond[8]=(((r11*x15798))+(((-1.0)*x15797*x15801))+(((-1.0)*x15797*x15805))+((r10*x15799))+(((-1.0)*sj3*x15793*x15806))+((sj3*x15792*x15794))+(((-1.0)*r12*sj3*x15807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15811=((1.0)*cj5);
CheckValue<IkReal> x15812 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15811))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15812.valid){
continue;
}
CheckValue<IkReal> x15813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15811)))),-1);
if(!x15813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15812.value)+(((1.5707963267949)*(x15813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15814=IKsin(j4);
IkReal x15815=IKcos(j4);
IkReal x15816=(r11*sj5);
IkReal x15817=(cj5*r10);
IkReal x15818=(sj1*sj2);
IkReal x15819=(cj5*sj3);
IkReal x15820=((1.0)*sj0);
IkReal x15821=(cj3*cj5);
IkReal x15822=(cj3*sj5);
IkReal x15823=(r21*sj5);
IkReal x15824=(cj2*sj1);
IkReal x15825=(sj3*sj5);
IkReal x15826=(r01*sj5);
IkReal x15827=((1.0)*cj0);
IkReal x15828=(cj1*sj2);
IkReal x15829=((1.0)*x15815);
IkReal x15830=((1.0)*x15814);
IkReal x15831=(cj3*x15815);
IkReal x15832=((1.0)*cj1*cj2);
IkReal x15833=(cj3*x15814);
evalcond[0]=(((x15814*x15823))+(((-1.0)*r22*x15829))+(((-1.0)*cj5*r20*x15830)));
evalcond[1]=(cj0+(((-1.0)*r12*x15829))+(((-1.0)*x15817*x15830))+((x15814*x15816)));
evalcond[2]=((((-1.0)*r02*x15829))+((x15814*x15826))+(((-1.0)*x15820))+(((-1.0)*cj5*r00*x15830)));
evalcond[3]=(((r20*x15825))+((r22*x15833))+((r21*x15815*x15822))+((r21*x15819))+(((-1.0)*r20*x15821*x15829))+x15824+x15828);
evalcond[4]=(((r20*x15822))+((r20*x15815*x15819))+(((-1.0)*sj3*x15823*x15829))+(((-1.0)*r22*sj3*x15830))+((r21*x15821))+(((-1.0)*x15832))+x15818);
evalcond[5]=((((-1.0)*r00*x15821*x15829))+((r02*x15833))+((r00*x15825))+((r01*x15815*x15822))+((cj0*x15818))+(((-1.0)*cj1*cj2*x15827))+((r01*x15819)));
evalcond[6]=(((x15816*x15831))+((r11*x15819))+((sj0*x15818))+((r12*x15833))+(((-1.0)*cj1*cj2*x15820))+((r10*x15825))+(((-1.0)*cj3*x15817*x15829)));
evalcond[7]=((((-1.0)*r02*sj3*x15830))+(((-1.0)*r01*x15825*x15829))+(((-1.0)*x15824*x15827))+((r01*x15821))+((r00*x15822))+((r00*x15815*x15819))+(((-1.0)*x15827*x15828)));
evalcond[8]=((((-1.0)*sj3*x15816*x15829))+((r10*x15822))+(((-1.0)*r12*sj3*x15830))+((sj3*x15815*x15817))+((r11*x15821))+(((-1.0)*x15820*x15828))+(((-1.0)*x15820*x15824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15834=((1.0)*cj5);
CheckValue<IkReal> x15835 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15835.valid){
continue;
}
CheckValue<IkReal> x15836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15834)))),-1);
if(!x15836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15835.value)+(((1.5707963267949)*(x15836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15837=IKsin(j4);
IkReal x15838=IKcos(j4);
IkReal x15839=(r11*sj5);
IkReal x15840=(cj5*r10);
IkReal x15841=(sj1*sj2);
IkReal x15842=(cj5*sj3);
IkReal x15843=((1.0)*sj0);
IkReal x15844=(cj3*cj5);
IkReal x15845=(cj3*sj5);
IkReal x15846=(r21*sj5);
IkReal x15847=(cj2*sj1);
IkReal x15848=(sj3*sj5);
IkReal x15849=(r01*sj5);
IkReal x15850=((1.0)*cj0);
IkReal x15851=(cj1*sj2);
IkReal x15852=((1.0)*x15838);
IkReal x15853=((1.0)*x15837);
IkReal x15854=(cj3*x15838);
IkReal x15855=((1.0)*cj1*cj2);
IkReal x15856=(cj3*x15837);
evalcond[0]=(((x15837*x15846))+(((-1.0)*cj5*r20*x15853))+(((-1.0)*r22*x15852)));
evalcond[1]=(cj0+(((-1.0)*r12*x15852))+((x15837*x15839))+(((-1.0)*x15840*x15853)));
evalcond[2]=(((x15837*x15849))+(((-1.0)*r02*x15852))+(((-1.0)*x15843))+(((-1.0)*cj5*r00*x15853)));
evalcond[3]=(((r21*x15838*x15845))+((r20*x15848))+((r21*x15842))+((r22*x15856))+(((-1.0)*r20*x15844*x15852))+x15847+x15851);
evalcond[4]=(((r20*x15838*x15842))+((r20*x15845))+((r21*x15844))+(((-1.0)*x15855))+(((-1.0)*r22*sj3*x15853))+x15841+(((-1.0)*sj3*x15846*x15852)));
evalcond[5]=(((r01*x15842))+(((-1.0)*r00*x15844*x15852))+((r00*x15848))+((r02*x15856))+(((-1.0)*cj1*cj2*x15850))+((r01*x15838*x15845))+((cj0*x15841)));
evalcond[6]=(((r11*x15842))+((r12*x15856))+((x15839*x15854))+(((-1.0)*cj1*cj2*x15843))+((r10*x15848))+(((-1.0)*cj3*x15840*x15852))+((sj0*x15841)));
evalcond[7]=(((r01*x15844))+(((-1.0)*r01*x15848*x15852))+((r00*x15845))+(((-1.0)*r02*sj3*x15853))+(((-1.0)*x15850*x15851))+(((-1.0)*x15847*x15850))+((r00*x15838*x15842)));
evalcond[8]=(((r11*x15844))+((sj3*x15838*x15840))+(((-1.0)*sj3*x15839*x15852))+((r10*x15845))+(((-1.0)*r12*sj3*x15853))+(((-1.0)*x15843*x15851))+(((-1.0)*x15843*x15847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15857=cj5*cj5;
IkReal x15858=r21*r21;
IkReal x15859=r20*r20;
IkReal x15860=(r20*r21);
IkReal x15861=((1.0)*cj3);
IkReal x15862=((1.0)*cj5);
IkReal x15863=(cj1*sj2);
IkReal x15864=(cj5*sj5);
IkReal x15865=(sj3*sj5);
IkReal x15866=(cj2*sj1);
IkReal x15867=(r21*sj5);
CheckValue<IkReal> x15868 = IKatan2WithCheck(IkReal((((r22*x15866))+((r22*x15863))+((cj5*r21*r22*sj3))+((r20*r22*x15865)))),IkReal(((((-1.0)*x15859*x15862*x15865))+((sj3*x15860))+((x15866*x15867))+((sj3*x15858*x15864))+(((-1.0)*r20*x15862*x15863))+(((-1.0)*r20*x15862*x15866))+((x15863*x15867))+(((-2.0)*sj3*x15857*x15860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15868.valid){
continue;
}
CheckValue<IkReal> x15869=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15860*x15864))+(((-1.0)*x15858*x15861))+(((-1.0)*x15857*x15859*x15861))+((cj3*x15857*x15858))+(((-1.0)*x15861*(r22*r22))))),-1);
if(!x15869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15868.value)+(((1.5707963267949)*(x15869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15870=IKsin(j4);
IkReal x15871=IKcos(j4);
IkReal x15872=(cj3*r21);
IkReal x15873=(r21*sj5);
IkReal x15874=(r20*sj5);
IkReal x15875=(cj5*r20);
IkReal x15876=((1.0)*x15871);
IkReal x15877=((1.0)*x15870);
evalcond[0]=(((x15870*x15873))+(((-1.0)*x15875*x15877))+(((-1.0)*r22*x15876)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15871*x15872))+(((-1.0)*cj3*x15875*x15876))+((sj3*x15874))+((cj3*r22*x15870)));
evalcond[2]=(((cj3*x15874))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15877))+((cj5*x15872))+((sj3*x15871*x15875))+(((-1.0)*sj3*x15873*x15876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15878=(cj5*sj4);
IkReal x15879=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15878))+(((-1.0)*cj4*r02))+((r01*x15879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15878))+(((-1.0)*r11*x15879))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15878))+(((-1.0)*cj4*r02))+((r01*x15879))))+IKsqr((((r10*x15878))+(((-1.0)*r11*x15879))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15878))+(((-1.0)*cj4*r02))+((r01*x15879))), (((r10*x15878))+(((-1.0)*r11*x15879))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15880=IKcos(j0);
IkReal x15881=IKsin(j0);
IkReal x15882=(r02*sj4);
IkReal x15883=((0.1)*sj5);
IkReal x15884=(cj5*r11);
IkReal x15885=((1.0)*sj3);
IkReal x15886=(r12*sj4);
IkReal x15887=((1.0)*cj3);
IkReal x15888=(r11*sj5);
IkReal x15889=(cj3*cj4);
IkReal x15890=((1.0)*sj2);
IkReal x15891=(cj5*r01);
IkReal x15892=(r01*sj5);
IkReal x15893=(sj1*sj2);
IkReal x15894=(cj1*cj2);
IkReal x15895=(r00*sj5);
IkReal x15896=((1.0)*cj2);
IkReal x15897=(r10*sj5);
IkReal x15898=((1.0)*cj4);
IkReal x15899=(cj4*cj5*r00);
IkReal x15900=(cj1*x15880);
IkReal x15901=(cj4*cj5*r10);
IkReal x15902=((0.392)*x15881);
IkReal x15903=((1.0)*x15881);
IkReal x15904=(cj1*x15881);
IkReal x15905=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15888))+(((-1.0)*r10*x15905))+(((-1.0)*r12*x15898))+x15880);
evalcond[1]=((((-1.0)*r00*x15905))+(((-1.0)*r02*x15898))+((sj4*x15892))+(((-1.0)*x15903)));
evalcond[2]=((((0.392)*x15880*x15894))+(((-0.392)*x15880*x15893))+(((-0.134)*x15881))+(((-1.0)*px))+(((-0.1)*x15891))+(((-1.0)*r00*x15883))+(((0.425)*x15900)));
evalcond[3]=(((x15894*x15902))+(((-1.0)*x15893*x15902))+(((0.134)*x15880))+(((-0.1)*x15884))+(((-1.0)*py))+(((-1.0)*r10*x15883))+(((0.425)*x15904)));
evalcond[4]=(((x15880*x15893))+(((-1.0)*x15880*x15894))+((cj3*x15882))+(((-1.0)*x15887*x15899))+((x15889*x15892))+((sj3*x15891))+((sj3*x15895)));
evalcond[5]=((((-1.0)*x15894*x15903))+((x15888*x15889))+((cj3*x15886))+((x15881*x15893))+((sj3*x15884))+(((-1.0)*x15887*x15901))+((sj3*x15897)));
evalcond[6]=((((-1.0)*x15882*x15885))+(((-1.0)*cj4*x15885*x15892))+((cj3*x15891))+((cj3*x15895))+(((-1.0)*sj1*x15880*x15896))+(((-1.0)*x15890*x15900))+((sj3*x15899)));
evalcond[7]=((((-1.0)*sj1*x15881*x15896))+(((-1.0)*x15885*x15886))+((sj3*x15901))+(((-1.0)*cj4*x15885*x15888))+((cj3*x15884))+((cj3*x15897))+(((-1.0)*x15890*x15904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15906=cj5*cj5;
IkReal x15907=r21*r21;
IkReal x15908=r20*r20;
IkReal x15909=(r20*r21);
IkReal x15910=(sj1*sj2);
IkReal x15911=(r21*sj5);
IkReal x15912=(cj1*cj2);
IkReal x15913=(cj5*r20);
IkReal x15914=(cj5*sj5);
IkReal x15915=(cj3*r22);
IkReal x15916=(sj3*x15907);
CheckValue<IkReal> x15917=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15906*x15916))+((sj3*x15906*x15908))+(((-2.0)*sj3*x15909*x15914))+x15916)),-1);
if(!x15917.valid){
continue;
}
CheckValue<IkReal> x15918 = IKatan2WithCheck(IkReal((((r22*x15910))+(((-1.0)*r22*x15912))+((r20*sj5*x15915))+((cj5*r21*x15915)))),IkReal((((x15912*x15913))+(((-1.0)*x15911*x15912))+((x15910*x15911))+(((-1.0)*x15910*x15913))+(((-1.0)*cj3*x15908*x15914))+(((-2.0)*cj3*x15906*x15909))+((cj3*x15909))+((cj3*x15907*x15914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15917.value)))+(x15918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15919=IKsin(j4);
IkReal x15920=IKcos(j4);
IkReal x15921=(cj3*r21);
IkReal x15922=(r21*sj5);
IkReal x15923=(r20*sj5);
IkReal x15924=(cj5*r20);
IkReal x15925=((1.0)*x15920);
IkReal x15926=((1.0)*x15919);
evalcond[0]=((((-1.0)*x15924*x15926))+(((-1.0)*r22*x15925))+((x15919*x15922)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15924*x15925))+((cj5*r21*sj3))+((cj3*r22*x15919))+((cj1*sj2))+((sj3*x15923))+((sj5*x15920*x15921)));
evalcond[2]=((((-1.0)*cj1*cj2))+((cj3*x15923))+((sj1*sj2))+(((-1.0)*sj3*x15922*x15925))+(((-1.0)*r22*sj3*x15926))+((cj5*x15921))+((sj3*x15920*x15924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15927=(cj5*sj4);
IkReal x15928=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927))))+IKsqr((((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927))), (((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15929=IKcos(j0);
IkReal x15930=IKsin(j0);
IkReal x15931=(r02*sj4);
IkReal x15932=((0.1)*sj5);
IkReal x15933=(cj5*r11);
IkReal x15934=((1.0)*sj3);
IkReal x15935=(r12*sj4);
IkReal x15936=((1.0)*cj3);
IkReal x15937=(r11*sj5);
IkReal x15938=(cj3*cj4);
IkReal x15939=((1.0)*sj2);
IkReal x15940=(cj5*r01);
IkReal x15941=(r01*sj5);
IkReal x15942=(sj1*sj2);
IkReal x15943=(cj1*cj2);
IkReal x15944=(r00*sj5);
IkReal x15945=((1.0)*cj2);
IkReal x15946=(r10*sj5);
IkReal x15947=((1.0)*cj4);
IkReal x15948=(cj4*cj5*r00);
IkReal x15949=(cj1*x15929);
IkReal x15950=(cj4*cj5*r10);
IkReal x15951=((0.392)*x15930);
IkReal x15952=((1.0)*x15930);
IkReal x15953=(cj1*x15930);
IkReal x15954=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x15947))+((sj4*x15937))+(((-1.0)*r10*x15954))+x15929);
evalcond[1]=((((-1.0)*r02*x15947))+(((-1.0)*r00*x15954))+((sj4*x15941))+(((-1.0)*x15952)));
evalcond[2]=((((-0.392)*x15929*x15942))+(((-1.0)*r00*x15932))+(((0.392)*x15929*x15943))+(((-0.1)*x15940))+(((-1.0)*px))+(((0.425)*x15949))+(((-0.134)*x15930)));
evalcond[3]=(((x15943*x15951))+(((-0.1)*x15933))+(((0.134)*x15929))+(((-1.0)*py))+(((-1.0)*r10*x15932))+(((0.425)*x15953))+(((-1.0)*x15942*x15951)));
evalcond[4]=(((x15929*x15942))+(((-1.0)*x15929*x15943))+(((-1.0)*x15936*x15948))+((cj3*x15931))+((x15938*x15941))+((sj3*x15940))+((sj3*x15944)));
evalcond[5]=(((cj3*x15935))+((x15930*x15942))+(((-1.0)*x15936*x15950))+((x15937*x15938))+((sj3*x15946))+((sj3*x15933))+(((-1.0)*x15943*x15952)));
evalcond[6]=(((cj3*x15940))+((cj3*x15944))+(((-1.0)*sj1*x15929*x15945))+(((-1.0)*x15931*x15934))+(((-1.0)*cj4*x15934*x15941))+(((-1.0)*x15939*x15949))+((sj3*x15948)));
evalcond[7]=(((cj3*x15946))+(((-1.0)*x15934*x15935))+(((-1.0)*cj4*x15934*x15937))+((cj3*x15933))+(((-1.0)*sj1*x15930*x15945))+(((-1.0)*x15939*x15953))+((sj3*x15950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (d95697f5000d3ee0ee29bdc90f5bb0d1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
